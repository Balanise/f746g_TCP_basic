
f746g_TCP_IP_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f238  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f30  0800f408  0800f408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012338  08012338  000141c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012338  08012338  00013338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012340  08012340  000141c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012340  08012340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012344  08012344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08012348  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  080123d0  00014088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08012470  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000b734  200001c8  08012510  000141c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000b8fc  08012510  000148fc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000141c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d181  00000000  00000000  000141f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000053b7  00000000  00000000  00031379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001500  00000000  00000000  00036730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010b9  00000000  00000000  00037c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032154  00000000  00000000  00038ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002943e  00000000  00000000  0006ae3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ff291  00000000  00000000  0009427b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0019350c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c48  00000000  00000000  00193550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  00199198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f3f0 	.word	0x0800f3f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	0800f3f0 	.word	0x0800f3f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b087      	sub	sp, #28
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_GPIO_Init+0x8c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a0e      	ldr	r2, [pc, #56]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a08      	ldr	r2, [pc, #32]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

}
 800065a:	bf00      	nop
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000670:	f000 f87a 	bl	8000768 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fb7b 	bl	8000d6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f808 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f7ff ffae 	bl	80005dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000680:	f000 f9b8 	bl	80009f4 <MX_USART1_UART_Init>
  MX_LWIP_Init();
 8000684:	f003 fd40 	bl	8004108 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <main+0x1c>

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	@ 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f00e f805 	bl	800e6aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <SystemClock_Config+0xd4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000760 <SystemClock_Config+0xd4>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <SystemClock_Config+0xd8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a25      	ldr	r2, [pc, #148]	@ (8000764 <SystemClock_Config+0xd8>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <SystemClock_Config+0xd8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006f4:	2319      	movs	r3, #25
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006f8:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80006fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000702:	2302      	movs	r3, #2
 8000704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f001 ff7c 	bl	8002608 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000716:	f000 f853 	bl	80007c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071a:	f001 ff25 	bl	8002568 <HAL_PWREx_EnableOverDrive>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000724:	f000 f84c 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2107      	movs	r1, #7
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fa02 	bl	8002b50 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000752:	f000 f835 	bl	80007c0 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	@ 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800077a:	f000 fc5f 	bl	800103c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800077e:	2301      	movs	r3, #1
 8000780:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000782:	2300      	movs	r3, #0
 8000784:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800078a:	231f      	movs	r3, #31
 800078c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800078e:	2387      	movs	r3, #135	@ 0x87
 8000790:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000792:	2300      	movs	r3, #0
 8000794:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000796:	2300      	movs	r3, #0
 8000798:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800079a:	2301      	movs	r3, #1
 800079c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800079e:	2301      	movs	r3, #1
 80007a0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007aa:	463b      	mov	r3, r7
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fc7d 	bl	80010ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007b2:	2004      	movs	r0, #4
 80007b4:	f000 fc5a 	bl	800106c <HAL_MPU_Enable>

}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <Error_Handler+0x8>

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <HAL_MspInit+0x44>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <HAL_MspInit+0x44>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <HAL_MspInit+0x44>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <HAL_MspInit+0x44>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_MspInit+0x44>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <NMI_Handler+0x4>

0800081c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <MemManage_Handler+0x4>

0800082c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <UsageFault_Handler+0x4>

0800083c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086a:	f000 fabd 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  return 1;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <_kill>:

int _kill(int pid, int sig)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <_kill+0x20>)
 8000890:	2216      	movs	r2, #22
 8000892:	601a      	str	r2, [r3, #0]
  return -1;
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	2000b8ec 	.word	0x2000b8ec

080008a8 <_exit>:

void _exit (int status)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ffe5 	bl	8000884 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008ba:	bf00      	nop
 80008bc:	e7fd      	b.n	80008ba <_exit+0x12>

080008be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e00a      	b.n	80008e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008d0:	f3af 8000 	nop.w
 80008d4:	4601      	mov	r1, r0
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	60ba      	str	r2, [r7, #8]
 80008dc:	b2ca      	uxtb	r2, r1
 80008de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3301      	adds	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	dbf0      	blt.n	80008d0 <_read+0x12>
  }

  return len;
 80008ee:	687b      	ldr	r3, [r7, #4]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000920:	605a      	str	r2, [r3, #4]
  return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_isatty>:

int _isatty(int file)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000938:	2301      	movs	r3, #1
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000946:	b480      	push	{r7}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b480      	push	{r7}
 8000962:	b087      	sub	sp, #28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	@ (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d205      	bcs.n	800099c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000990:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <_sbrk+0x6c>)
 8000992:	220c      	movs	r2, #12
 8000994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	e009      	b.n	80009b0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <_sbrk+0x64>)
 80009ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	371c      	adds	r7, #28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	20050000 	.word	0x20050000
 80009c0:	00000400 	.word	0x00000400
 80009c4:	200001e4 	.word	0x200001e4
 80009c8:	2000b900 	.word	0x2000b900
 80009cc:	2000b8ec 	.word	0x2000b8ec

080009d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 80009fa:	4a15      	ldr	r2, [pc, #84]	@ (8000a50 <MX_USART1_UART_Init+0x5c>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fe:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a38:	f002 fe60 	bl	80036fc <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a42:	f7ff febd 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200001e8 	.word	0x200001e8
 8000a50:	40011000 	.word	0x40011000

08000a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0aa      	sub	sp, #168	@ 0xa8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2284      	movs	r2, #132	@ 0x84
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00d fe18 	bl	800e6aa <memset>
  if(uartHandle->Instance==USART1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a21      	ldr	r2, [pc, #132]	@ (8000b04 <HAL_UART_MspInit+0xb0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d13a      	bne.n	8000afa <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a84:	2340      	movs	r3, #64	@ 0x40
 8000a86:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fa43 	bl	8002f1c <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff fe90 	bl	80007c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa4:	4a18      	ldr	r2, [pc, #96]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab0:	f003 0310 	and.w	r3, r3, #16
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac4:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <HAL_UART_MspInit+0xb4>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000ad0:	23c0      	movs	r3, #192	@ 0xc0
 8000ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <HAL_UART_MspInit+0xb8>)
 8000af6:	f001 fb8b 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	37a8      	adds	r7, #168	@ 0xa8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40011000 	.word	0x40011000
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020400 	.word	0x40020400

08000b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b14:	f7ff ff5c 	bl	80009d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	@ (8000b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f00d fe03 	bl	800e748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b42:	f7ff fd93 	bl	800066c <main>
  bx  lr    
 8000b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b48:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b54:	08012348 	.word	0x08012348
  ldr r2, =_sbss
 8000b58:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000b5c:	2000b8fc 	.word	0x2000b8fc

08000b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC_IRQHandler>

08000b62 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00b      	beq.n	8000b8a <LAN8742_RegisterBusIO+0x28>
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d007      	beq.n	8000b8a <LAN8742_RegisterBusIO+0x28>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <LAN8742_RegisterBusIO+0x28>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	e014      	b.n	8000bba <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d139      	bne.n	8000c56 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e01c      	b.n	8000c36 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f107 020c 	add.w	r2, r7, #12
 8000c04:	2112      	movs	r1, #18
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	4798      	blx	r3
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da03      	bge.n	8000c18 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000c10:	f06f 0304 	mvn.w	r3, #4
 8000c14:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000c16:	e00b      	b.n	8000c30 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 031f 	and.w	r3, r3, #31
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d105      	bne.n	8000c30 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
         break;
 8000c2e:	e005      	b.n	8000c3c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3301      	adds	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	2b1f      	cmp	r3, #31
 8000c3a:	d9df      	bls.n	8000bfc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b1f      	cmp	r3, #31
 8000c42:	d902      	bls.n	8000c4a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c44:	f06f 0302 	mvn.w	r3, #2
 8000c48:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2201      	movs	r2, #1
 8000c54:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000c56:	693b      	ldr	r3, [r7, #16]
 }
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6810      	ldr	r0, [r2, #0]
 8000c74:	f107 020c 	add.w	r2, r7, #12
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4798      	blx	r3
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da02      	bge.n	8000c88 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000c82:	f06f 0304 	mvn.w	r3, #4
 8000c86:	e06e      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	6810      	ldr	r0, [r2, #0]
 8000c90:	f107 020c 	add.w	r2, r7, #12
 8000c94:	2101      	movs	r1, #1
 8000c96:	4798      	blx	r3
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da02      	bge.n	8000ca4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000c9e:	f06f 0304 	mvn.w	r3, #4
 8000ca2:	e060      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e059      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	6810      	ldr	r0, [r2, #0]
 8000cba:	f107 020c 	add.w	r2, r7, #12
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4798      	blx	r3
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	da02      	bge.n	8000cce <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cc8:	f06f 0304 	mvn.w	r3, #4
 8000ccc:	e04b      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d11b      	bne.n	8000d10 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <LAN8742_GetLinkState+0x90>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000cec:	2302      	movs	r3, #2
 8000cee:	e03a      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e033      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	e02c      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	e02a      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6810      	ldr	r0, [r2, #0]
 8000d18:	f107 020c 	add.w	r2, r7, #12
 8000d1c:	211f      	movs	r1, #31
 8000d1e:	4798      	blx	r3
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da02      	bge.n	8000d2c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000d26:	f06f 0304 	mvn.w	r3, #4
 8000d2a:	e01c      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000d36:	2306      	movs	r3, #6
 8000d38:	e015      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f003 031c 	and.w	r3, r3, #28
 8000d40:	2b18      	cmp	r3, #24
 8000d42:	d101      	bne.n	8000d48 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d44:	2302      	movs	r3, #2
 8000d46:	e00e      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 031c 	and.w	r3, r3, #28
 8000d4e:	2b08      	cmp	r3, #8
 8000d50:	d101      	bne.n	8000d56 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e007      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f003 031c 	and.w	r3, r3, #28
 8000d5c:	2b14      	cmp	r3, #20
 8000d5e:	d101      	bne.n	8000d64 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d60:	2304      	movs	r3, #4
 8000d62:	e000      	b.n	8000d66 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d64:	2305      	movs	r3, #5
    }
  }
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d72:	2003      	movs	r0, #3
 8000d74:	f000 f92e 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d78:	200f      	movs	r0, #15
 8000d7a:	f000 f805 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7e:	f7ff fd25 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f93b 	bl	8001022 <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f911 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000270 	.word	0x20000270

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	@ (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000270 	.word	0x20000270

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffde 	bl	8000e10 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00
 8000eb4:	05fa0000 	.word	0x05fa0000

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	@ (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	@ (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	@ 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff47 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff5c 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffb0 	bl	8000f90 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001040:	f3bf 8f5f 	dmb	sy
}
 8001044:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <HAL_MPU_Disable+0x28>)
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_MPU_Disable+0x28>)
 800104c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001050:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_MPU_Disable+0x2c>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00
 8001068:	e000ed90 	.word	0xe000ed90

0800106c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001074:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <HAL_MPU_Enable+0x38>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_MPU_Enable+0x3c>)
 8001080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <HAL_MPU_Enable+0x3c>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001088:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800108a:	f3bf 8f4f 	dsb	sy
}
 800108e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001090:	f3bf 8f6f 	isb	sy
}
 8001094:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed90 	.word	0xe000ed90
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	785a      	ldrb	r2, [r3, #1]
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <HAL_MPU_ConfigRegion+0x7c>)
 80010ba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <HAL_MPU_ConfigRegion+0x7c>)
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <HAL_MPU_ConfigRegion+0x7c>)
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80010c8:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <HAL_MPU_ConfigRegion+0x7c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7b1b      	ldrb	r3, [r3, #12]
 80010d4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7adb      	ldrb	r3, [r3, #11]
 80010da:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7a9b      	ldrb	r3, [r3, #10]
 80010e2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7b5b      	ldrb	r3, [r3, #13]
 80010ea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7b9b      	ldrb	r3, [r3, #14]
 80010f2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7bdb      	ldrb	r3, [r3, #15]
 80010fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7a5b      	ldrb	r3, [r3, #9]
 8001102:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001104:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7a1b      	ldrb	r3, [r3, #8]
 800110a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800110c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001114:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001116:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001118:	6113      	str	r3, [r2, #16]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed90 	.word	0xe000ed90

0800112c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e086      	b.n	800124c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001144:	2b00      	cmp	r3, #0
 8001146:	d106      	bne.n	8001156 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2220      	movs	r2, #32
 800114c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f003 fa7b 	bl	800464c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <HAL_ETH_Init+0x128>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	4a3e      	ldr	r2, [pc, #248]	@ (8001254 <HAL_ETH_Init+0x128>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001160:	6453      	str	r3, [r2, #68]	@ 0x44
 8001162:	4b3c      	ldr	r3, [pc, #240]	@ (8001254 <HAL_ETH_Init+0x128>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800116e:	4b3a      	ldr	r3, [pc, #232]	@ (8001258 <HAL_ETH_Init+0x12c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a39      	ldr	r2, [pc, #228]	@ (8001258 <HAL_ETH_Init+0x12c>)
 8001174:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001178:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800117a:	4b37      	ldr	r3, [pc, #220]	@ (8001258 <HAL_ETH_Init+0x12c>)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	4935      	ldr	r1, [pc, #212]	@ (8001258 <HAL_ETH_Init+0x12c>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001188:	4b33      	ldr	r3, [pc, #204]	@ (8001258 <HAL_ETH_Init+0x12c>)
 800118a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a4:	f7ff fe34 	bl	8000e10 <HAL_GetTick>
 80011a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011aa:	e011      	b.n	80011d0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011ac:	f7ff fe30 	bl	8000e10 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011ba:	d909      	bls.n	80011d0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2204      	movs	r2, #4
 80011c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	22e0      	movs	r2, #224	@ 0xe0
 80011c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e03d      	b.n	800124c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1e4      	bne.n	80011ac <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fd58 	bl	8001c98 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fe03 	bl	8001df4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fe59 	bl	8001ea6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	461a      	mov	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 fdc1 	bl	8001d84 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001210:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_ETH_Init+0x130>)
 8001220:	430b      	orrs	r3, r1
 8001222:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001236:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2210      	movs	r2, #16
 8001246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	00020060 	.word	0x00020060

08001260 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800126e:	2b10      	cmp	r3, #16
 8001270:	d150      	bne.n	8001314 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2220      	movs	r2, #32
 8001276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2204      	movs	r2, #4
 800127e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f939 	bl	80014f8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0208 	orr.w	r2, r2, #8
 8001294:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff fdc2 	bl	8000e28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0204 	orr.w	r2, r2, #4
 80012ba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fdaf 	bl	8000e28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fb7c 	bl	80019d0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012ee:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001306:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2240      	movs	r2, #64	@ 0x40
 800130c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	e000      	b.n	8001316 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
  }
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800132c:	2b40      	cmp	r3, #64	@ 0x40
 800132e:	d14a      	bne.n	80013c6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2220      	movs	r2, #32
 8001334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800134a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800134e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	f023 0302 	bic.w	r3, r3, #2
 8001362:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001366:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0204 	bic.w	r2, r2, #4
 8001376:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fd51 	bl	8000e28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fb1e 	bl	80019d0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0208 	bic.w	r2, r2, #8
 80013a2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff fd3b 	bl	8000e28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2210      	movs	r2, #16
 80013be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
  }
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e07c      	b.n	80014f0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013fc:	2b40      	cmp	r3, #64	@ 0x40
 80013fe:	d176      	bne.n	80014ee <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001400:	2200      	movs	r2, #0
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 fdbd 	bl	8001f84 <ETH_Prepare_Tx_Descriptors>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001416:	f043 0202 	orr.w	r2, r3, #2
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e065      	b.n	80014f0 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001424:	f3bf 8f4f 	dsb	sy
}
 8001428:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3206      	adds	r2, #6
 8001432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001436:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001446:	2b03      	cmp	r3, #3
 8001448:	d904      	bls.n	8001454 <HAL_ETH_Transmit+0x84>
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144e:	1f1a      	subs	r2, r3, #4
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3106      	adds	r1, #6
 8001460:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001464:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001468:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800146a:	f7ff fcd1 	bl	8000e10 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001470:	e037      	b.n	80014e2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d011      	beq.n	80014a8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148a:	f043 0208 	orr.w	r2, r3, #8
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e023      	b.n	80014f0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ae:	d018      	beq.n	80014e2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014b0:	f7ff fcae 	bl	8000e10 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d302      	bcc.n	80014c6 <HAL_ETH_Transmit+0xf6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10d      	bne.n	80014e2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014cc:	f043 0204 	orr.w	r2, r3, #4
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80014dc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e006      	b.n	80014f0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	dbc3      	blt.n	8001472 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
  }
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001504:	2301      	movs	r3, #1
 8001506:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800150c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	3212      	adds	r2, #18
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800151e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001520:	e042      	b.n	80015a8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d112      	bne.n	8001550 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	4618      	mov	r0, r3
 8001530:	f003 f9fe 	bl	8004930 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	74fb      	strb	r3, [r7, #19]
 800153e:	e007      	b.n	8001550 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	461a      	mov	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	461a      	mov	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001550:	7cfb      	ldrb	r3, [r7, #19]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d028      	beq.n	80015a8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	4b26      	ldr	r3, [pc, #152]	@ (80015fc <ETH_UpdateDescriptor+0x104>)
 8001564:	4313      	orrs	r3, r2
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	6053      	str	r3, [r2, #4]
 800156a:	e005      	b.n	8001578 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	3301      	adds	r3, #1
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d902      	bls.n	8001596 <ETH_UpdateDescriptor+0x9e>
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	3b04      	subs	r3, #4
 8001594:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	3212      	adds	r2, #18
 800159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a0:	617b      	str	r3, [r7, #20]
      desccount--;
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <ETH_UpdateDescriptor+0xbc>
 80015ae:	7cfb      	ldrb	r3, [r7, #19]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1b6      	bne.n	8001522 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d01a      	beq.n	80015f4 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3303      	adds	r3, #3
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80015c8:	f3bf 8f5f 	dmb	sy
}
 80015cc:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6919      	ldr	r1, [r3, #16]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	18ca      	adds	r2, r1, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015e6:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	80004000 	.word	0x80004000

08001600 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 031c 	and.w	r3, r3, #28
 800161c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	02db      	lsls	r3, r3, #11
 8001622:	b29b      	uxth	r3, r3
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	4313      	orrs	r3, r2
 8001628:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	019b      	lsls	r3, r3, #6
 800162e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f023 0302 	bic.w	r3, r3, #2
 800163e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001650:	f7ff fbde 	bl	8000e10 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001656:	e00d      	b.n	8001674 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001658:	f7ff fbda 	bl	8000e10 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001666:	d301      	bcc.n	800166c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e010      	b.n	800168e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ec      	bne.n	8001658 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	b29b      	uxth	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f003 031c 	and.w	r3, r3, #28
 80016b2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	02db      	lsls	r3, r3, #11
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	019b      	lsls	r3, r3, #6
 80016c4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f0:	f7ff fb8e 	bl	8000e10 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016f6:	e00d      	b.n	8001714 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80016f8:	f7ff fb8a 	bl	8000e10 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001706:	d301      	bcc.n	800170c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e009      	b.n	8001720 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ec      	bne.n	80016f8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0e6      	b.n	800190a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	b2db      	uxtb	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf0c      	ite	eq
 80017aa:	2301      	moveq	r3, #1
 80017ac:	2300      	movne	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf14      	ite	ne
 80017c4:	2301      	movne	r3, #1
 80017c6:	2300      	moveq	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf0c      	ite	eq
 80017fa:	2301      	moveq	r3, #1
 80017fc:	2300      	movne	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf14      	ite	ne
 8001856:	2301      	movne	r3, #1
 8001858:	2300      	moveq	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf14      	ite	ne
 8001870:	2301      	movne	r3, #1
 8001872:	2300      	moveq	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bf0c      	ite	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	2300      	movne	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	bf14      	ite	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	2300      	moveq	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	2300      	moveq	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00b      	b.n	8001942 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001930:	2b10      	cmp	r3, #16
 8001932:	d105      	bne.n	8001940 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f870 	bl	8001a1c <ETH_SetMACConfig>

    return HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	e000      	b.n	8001942 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
  }
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f023 031c 	bic.w	r3, r3, #28
 8001962:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001964:	f001 faa6 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8001968:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d804      	bhi.n	800197c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	e019      	b.n	80019b0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4a11      	ldr	r2, [pc, #68]	@ (80019c4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d204      	bcs.n	800198e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f043 030c 	orr.w	r3, r3, #12
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e010      	b.n	80019b0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4a0d      	ldr	r2, [pc, #52]	@ (80019c8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d90c      	bls.n	80019b0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <HAL_ETH_SetMDIOClockRange+0x80>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d804      	bhi.n	80019a8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e003      	b.n	80019b0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f043 0310 	orr.w	r3, r3, #16
 80019ae:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	611a      	str	r2, [r3, #16]
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	02160ebf 	.word	0x02160ebf
 80019c4:	03938700 	.word	0x03938700
 80019c8:	05f5e0ff 	.word	0x05f5e0ff
 80019cc:	08f0d17f 	.word	0x08f0d17f

080019d0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019f2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff fa11 	bl	8000e28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a10:	6193      	str	r3, [r2, #24]
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4b53      	ldr	r3, [pc, #332]	@ (8001b80 <ETH_SetMACConfig+0x164>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	7b9b      	ldrb	r3, [r3, #14]
 8001a3a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	7c12      	ldrb	r2, [r2, #16]
 8001a40:	2a00      	cmp	r2, #0
 8001a42:	d102      	bne.n	8001a4a <ETH_SetMACConfig+0x2e>
 8001a44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a48:	e000      	b.n	8001a4c <ETH_SetMACConfig+0x30>
 8001a4a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001a4c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	7c52      	ldrb	r2, [r2, #17]
 8001a52:	2a00      	cmp	r2, #0
 8001a54:	d102      	bne.n	8001a5c <ETH_SetMACConfig+0x40>
 8001a56:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001a5a:	e000      	b.n	8001a5e <ETH_SetMACConfig+0x42>
 8001a5c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	7fdb      	ldrb	r3, [r3, #31]
 8001a6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001a6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	7f92      	ldrb	r2, [r2, #30]
 8001a78:	2a00      	cmp	r2, #0
 8001a7a:	d102      	bne.n	8001a82 <ETH_SetMACConfig+0x66>
 8001a7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a80:	e000      	b.n	8001a84 <ETH_SetMACConfig+0x68>
 8001a82:	2200      	movs	r2, #0
                        macconf->Speed |
 8001a84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7f1b      	ldrb	r3, [r3, #28]
 8001a8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	791b      	ldrb	r3, [r3, #4]
 8001a98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001a9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001aa2:	2a00      	cmp	r2, #0
 8001aa4:	d102      	bne.n	8001aac <ETH_SetMACConfig+0x90>
 8001aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aaa:	e000      	b.n	8001aae <ETH_SetMACConfig+0x92>
 8001aac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001aae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	7bdb      	ldrb	r3, [r3, #15]
 8001ab4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ab6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001abc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ac4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff f9a2 	bl	8000e28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001afa:	4013      	ands	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001b0a:	2a00      	cmp	r2, #0
 8001b0c:	d101      	bne.n	8001b12 <ETH_SetMACConfig+0xf6>
 8001b0e:	2280      	movs	r2, #128	@ 0x80
 8001b10:	e000      	b.n	8001b14 <ETH_SetMACConfig+0xf8>
 8001b12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001b22:	2a01      	cmp	r2, #1
 8001b24:	d101      	bne.n	8001b2a <ETH_SetMACConfig+0x10e>
 8001b26:	2208      	movs	r2, #8
 8001b28:	e000      	b.n	8001b2c <ETH_SetMACConfig+0x110>
 8001b2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001b34:	2a01      	cmp	r2, #1
 8001b36:	d101      	bne.n	8001b3c <ETH_SetMACConfig+0x120>
 8001b38:	2204      	movs	r2, #4
 8001b3a:	e000      	b.n	8001b3e <ETH_SetMACConfig+0x122>
 8001b3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001b46:	2a01      	cmp	r2, #1
 8001b48:	d101      	bne.n	8001b4e <ETH_SetMACConfig+0x132>
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	e000      	b.n	8001b50 <ETH_SetMACConfig+0x134>
 8001b4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b50:	4313      	orrs	r3, r2
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff f95d 	bl	8000e28 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	fd20810f 	.word	0xfd20810f

08001b84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <ETH_SetDMAConfig+0x110>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	7b1b      	ldrb	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d102      	bne.n	8001bb0 <ETH_SetDMAConfig+0x2c>
 8001baa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bae:	e000      	b.n	8001bb2 <ETH_SetDMAConfig+0x2e>
 8001bb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	7b5b      	ldrb	r3, [r3, #13]
 8001bb6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bb8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	7f52      	ldrb	r2, [r2, #29]
 8001bbe:	2a00      	cmp	r2, #0
 8001bc0:	d102      	bne.n	8001bc8 <ETH_SetDMAConfig+0x44>
 8001bc2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001bc6:	e000      	b.n	8001bca <ETH_SetDMAConfig+0x46>
 8001bc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	7b9b      	ldrb	r3, [r3, #14]
 8001bd0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bd2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	7f1b      	ldrb	r3, [r3, #28]
 8001bde:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001be0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	7f9b      	ldrb	r3, [r3, #30]
 8001be6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001be8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001bee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bf6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7ff f904 	bl	8000e28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c28:	461a      	mov	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	791b      	ldrb	r3, [r3, #4]
 8001c32:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c38:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c3e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c44:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c4c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c4e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c56:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c5c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c6a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff f8d5 	bl	8000e28 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	f8de3f23 	.word	0xf8de3f23

08001c98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0a6      	sub	sp, #152	@ 0x98
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cac:	2300      	movs	r3, #0
 8001cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d04:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fe7f 	bl	8001a1c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d52:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d58:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d5e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	4619      	mov	r1, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff05 	bl	8001b84 <ETH_SetDMAConfig>
}
 8001d7a:	bf00      	nop
 8001d7c:	3798      	adds	r7, #152	@ 0x98
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3305      	adds	r3, #5
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	3204      	adds	r2, #4
 8001d9c:	7812      	ldrb	r2, [r2, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <ETH_MACAddressConfig+0x68>)
 8001da6:	4413      	add	r3, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3303      	adds	r3, #3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	061a      	lsls	r2, r3, #24
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3302      	adds	r3, #2
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	7812      	ldrb	r2, [r2, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <ETH_MACAddressConfig+0x6c>)
 8001dd6:	4413      	add	r3, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40028040 	.word	0x40028040
 8001df0:	40028044 	.word	0x40028044

08001df4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e03e      	b.n	8001e80 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68d9      	ldr	r1, [r3, #12]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	3206      	adds	r2, #6
 8001e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d80c      	bhi.n	8001e64 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68d9      	ldr	r1, [r3, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	e004      	b.n	8001e6e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d9bd      	bls.n	8001e02 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e98:	611a      	str	r2, [r3, #16]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e048      	b.n	8001f46 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6919      	ldr	r1, [r3, #16]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001ef0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	3212      	adds	r2, #18
 8001f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d80c      	bhi.n	8001f36 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6919      	ldr	r1, [r3, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	e004      	b.n	8001f40 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3301      	adds	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d9b3      	bls.n	8001eb4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f76:	60da      	str	r2, [r3, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b091      	sub	sp, #68	@ 0x44
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3318      	adds	r3, #24
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fc6:	d007      	beq.n	8001fd8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fcc:	3304      	adds	r3, #4
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e111      	b.n	8002200 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8001fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fde:	3301      	adds	r3, #1
 8001fe0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fea:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4b86      	ldr	r3, [pc, #536]	@ (800220c <ETH_Prepare_Tx_Descriptors+0x288>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ff6:	6852      	ldr	r2, [r2, #4]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800200a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	431a      	orrs	r2, r3
 8002018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	431a      	orrs	r2, r3
 8002036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002038:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800205a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800205c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800205e:	e082      	b.n	8002166 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800206a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800207a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e005      	b.n	800208c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800208c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208e:	3301      	adds	r3, #1
 8002090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002094:	2b03      	cmp	r3, #3
 8002096:	d902      	bls.n	800209e <ETH_Prepare_Tx_Descriptors+0x11a>
 8002098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209a:	3b04      	subs	r3, #4
 800209c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80020a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020b4:	d007      	beq.n	80020c6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80020b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ba:	3304      	adds	r3, #4
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d029      	beq.n	800211a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020d8:	e019      	b.n	800210e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80020da:	f3bf 8f5f 	dmb	sy
}
 80020de:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80020e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ea:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80020ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ee:	3301      	adds	r3, #1
 80020f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d902      	bls.n	80020fe <ETH_Prepare_Tx_Descriptors+0x17a>
 80020f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020fa:	3b04      	subs	r3, #4
 80020fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002106:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210a:	3301      	adds	r3, #1
 800210c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800210e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002112:	429a      	cmp	r2, r3
 8002114:	d3e1      	bcc.n	80020da <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002116:	2302      	movs	r3, #2
 8002118:	e072      	b.n	8002200 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800211a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002124:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002128:	3301      	adds	r3, #1
 800212a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800212c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800213c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4b32      	ldr	r3, [pc, #200]	@ (800220c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002142:	4013      	ands	r3, r2
 8002144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002146:	6852      	ldr	r2, [r2, #4]
 8002148:	431a      	orrs	r2, r3
 800214a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800214e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002150:	3301      	adds	r3, #1
 8002152:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002154:	f3bf 8f5f 	dmb	sy
}
 8002158:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800215a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002164:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f47f af78 	bne.w	8002060 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800217e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e005      	b.n	8002190 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800218c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	6a3a      	ldr	r2, [r7, #32]
 80021a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80021a6:	f3bf 8f5f 	dmb	sy
}
 80021aa:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80021ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c0:	3304      	adds	r3, #4
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021cc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ce:	f3ef 8310 	mrs	r3, PRIMASK
 80021d2:	613b      	str	r3, [r7, #16]
  return(result);
 80021d4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	2301      	movs	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f383 8810 	msr	PRIMASK, r3
}
 80021e2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ea:	4413      	add	r3, r2
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f383 8810 	msr	PRIMASK, r3
}
 80021fc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3744      	adds	r7, #68	@ 0x44
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	ffffe000 	.word	0xffffe000

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	@ 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e175      	b.n	800251c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	f040 8164 	bne.w	8002516 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d005      	beq.n	8002266 <HAL_GPIO_Init+0x56>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d130      	bne.n	80022c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 0201 	and.w	r2, r3, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d017      	beq.n	8002304 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d123      	bne.n	8002358 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80be 	beq.w	8002516 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	4b66      	ldr	r3, [pc, #408]	@ (8002534 <HAL_GPIO_Init+0x324>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	4a65      	ldr	r2, [pc, #404]	@ (8002534 <HAL_GPIO_Init+0x324>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a6:	4b63      	ldr	r3, [pc, #396]	@ (8002534 <HAL_GPIO_Init+0x324>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023b2:	4a61      	ldr	r2, [pc, #388]	@ (8002538 <HAL_GPIO_Init+0x328>)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a58      	ldr	r2, [pc, #352]	@ (800253c <HAL_GPIO_Init+0x32c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d037      	beq.n	800244e <HAL_GPIO_Init+0x23e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a57      	ldr	r2, [pc, #348]	@ (8002540 <HAL_GPIO_Init+0x330>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d031      	beq.n	800244a <HAL_GPIO_Init+0x23a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a56      	ldr	r2, [pc, #344]	@ (8002544 <HAL_GPIO_Init+0x334>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d02b      	beq.n	8002446 <HAL_GPIO_Init+0x236>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a55      	ldr	r2, [pc, #340]	@ (8002548 <HAL_GPIO_Init+0x338>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d025      	beq.n	8002442 <HAL_GPIO_Init+0x232>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a54      	ldr	r2, [pc, #336]	@ (800254c <HAL_GPIO_Init+0x33c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01f      	beq.n	800243e <HAL_GPIO_Init+0x22e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a53      	ldr	r2, [pc, #332]	@ (8002550 <HAL_GPIO_Init+0x340>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x22a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a52      	ldr	r2, [pc, #328]	@ (8002554 <HAL_GPIO_Init+0x344>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x226>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a51      	ldr	r2, [pc, #324]	@ (8002558 <HAL_GPIO_Init+0x348>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x222>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a50      	ldr	r2, [pc, #320]	@ (800255c <HAL_GPIO_Init+0x34c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x21e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4f      	ldr	r2, [pc, #316]	@ (8002560 <HAL_GPIO_Init+0x350>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x21a>
 8002426:	2309      	movs	r3, #9
 8002428:	e012      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800242a:	230a      	movs	r3, #10
 800242c:	e010      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800242e:	2308      	movs	r3, #8
 8002430:	e00e      	b.n	8002450 <HAL_GPIO_Init+0x240>
 8002432:	2307      	movs	r3, #7
 8002434:	e00c      	b.n	8002450 <HAL_GPIO_Init+0x240>
 8002436:	2306      	movs	r3, #6
 8002438:	e00a      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800243a:	2305      	movs	r3, #5
 800243c:	e008      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800243e:	2304      	movs	r3, #4
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x240>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x240>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800244e:	2300      	movs	r3, #0
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	@ (8002538 <HAL_GPIO_Init+0x328>)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b3d      	ldr	r3, [pc, #244]	@ (8002564 <HAL_GPIO_Init+0x354>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002492:	4a34      	ldr	r2, [pc, #208]	@ (8002564 <HAL_GPIO_Init+0x354>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002498:	4b32      	ldr	r3, [pc, #200]	@ (8002564 <HAL_GPIO_Init+0x354>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024bc:	4a29      	ldr	r2, [pc, #164]	@ (8002564 <HAL_GPIO_Init+0x354>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c2:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <HAL_GPIO_Init+0x354>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002564 <HAL_GPIO_Init+0x354>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <HAL_GPIO_Init+0x354>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002510:	4a14      	ldr	r2, [pc, #80]	@ (8002564 <HAL_GPIO_Init+0x354>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	f67f ae86 	bls.w	8002230 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3724      	adds	r7, #36	@ 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40021400 	.word	0x40021400
 8002554:	40021800 	.word	0x40021800
 8002558:	40021c00 	.word	0x40021c00
 800255c:	40022000 	.word	0x40022000
 8002560:	40022400 	.word	0x40022400
 8002564:	40013c00 	.word	0x40013c00

08002568 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	4b23      	ldr	r3, [pc, #140]	@ (8002600 <HAL_PWREx_EnableOverDrive+0x98>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	4a22      	ldr	r2, [pc, #136]	@ (8002600 <HAL_PWREx_EnableOverDrive+0x98>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	@ 0x40
 800257e:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_PWREx_EnableOverDrive+0x98>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800258a:	4b1e      	ldr	r3, [pc, #120]	@ (8002604 <HAL_PWREx_EnableOverDrive+0x9c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1d      	ldr	r2, [pc, #116]	@ (8002604 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002594:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002596:	f7fe fc3b 	bl	8000e10 <HAL_GetTick>
 800259a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800259c:	e009      	b.n	80025b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800259e:	f7fe fc37 	bl	8000e10 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025ac:	d901      	bls.n	80025b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e022      	b.n	80025f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025b2:	4b14      	ldr	r3, [pc, #80]	@ (8002604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025be:	d1ee      	bne.n	800259e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025c0:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025cc:	f7fe fc20 	bl	8000e10 <HAL_GetTick>
 80025d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025d2:	e009      	b.n	80025e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025d4:	f7fe fc1c 	bl	8000e10 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025e2:	d901      	bls.n	80025e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e007      	b.n	80025f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025f4:	d1ee      	bne.n	80025d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	40007000 	.word	0x40007000

08002608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002610:	2300      	movs	r3, #0
 8002612:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e291      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8087 	beq.w	800273a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800262c:	4b96      	ldr	r3, [pc, #600]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b04      	cmp	r3, #4
 8002636:	d00c      	beq.n	8002652 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002638:	4b93      	ldr	r3, [pc, #588]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d112      	bne.n	800266a <HAL_RCC_OscConfig+0x62>
 8002644:	4b90      	ldr	r3, [pc, #576]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002650:	d10b      	bne.n	800266a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002652:	4b8d      	ldr	r3, [pc, #564]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d06c      	beq.n	8002738 <HAL_RCC_OscConfig+0x130>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d168      	bne.n	8002738 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e26b      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x7a>
 8002674:	4b84      	ldr	r3, [pc, #528]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a83      	ldr	r2, [pc, #524]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e02e      	b.n	80026e0 <HAL_RCC_OscConfig+0xd8>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x9c>
 800268a:	4b7f      	ldr	r3, [pc, #508]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7e      	ldr	r2, [pc, #504]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b7c      	ldr	r3, [pc, #496]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7b      	ldr	r2, [pc, #492]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 800269c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e01d      	b.n	80026e0 <HAL_RCC_OscConfig+0xd8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0xc0>
 80026ae:	4b76      	ldr	r3, [pc, #472]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a75      	ldr	r2, [pc, #468]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b73      	ldr	r3, [pc, #460]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a72      	ldr	r2, [pc, #456]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0xd8>
 80026c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fb92 	bl	8000e10 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fb8e 	bl	8000e10 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e21f      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b61      	ldr	r3, [pc, #388]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xe8>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fb7e 	bl	8000e10 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe fb7a 	bl	8000e10 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	@ 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e20b      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	4b57      	ldr	r3, [pc, #348]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x110>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d069      	beq.n	800281a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002746:	4b50      	ldr	r3, [pc, #320]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002752:	4b4d      	ldr	r3, [pc, #308]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b08      	cmp	r3, #8
 800275c:	d11c      	bne.n	8002798 <HAL_RCC_OscConfig+0x190>
 800275e:	4b4a      	ldr	r3, [pc, #296]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	4b47      	ldr	r3, [pc, #284]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x17a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1df      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b41      	ldr	r3, [pc, #260]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	493d      	ldr	r1, [pc, #244]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	e040      	b.n	800281a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d023      	beq.n	80027e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a0:	4b39      	ldr	r3, [pc, #228]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a38      	ldr	r2, [pc, #224]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fb30 	bl	8000e10 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b4:	f7fe fb2c 	bl	8000e10 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e1bd      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b30      	ldr	r3, [pc, #192]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4929      	ldr	r1, [pc, #164]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
 80027e6:	e018      	b.n	800281a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e8:	4b27      	ldr	r3, [pc, #156]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a26      	ldr	r2, [pc, #152]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fb0c 	bl	8000e10 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fc:	f7fe fb08 	bl	8000e10 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e199      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d038      	beq.n	8002898 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002832:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7fe fae9 	bl	8000e10 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002842:	f7fe fae5 	bl	8000e10 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e176      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x23a>
 8002860:	e01a      	b.n	8002898 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002866:	4a08      	ldr	r2, [pc, #32]	@ (8002888 <HAL_RCC_OscConfig+0x280>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7fe facf 	bl	8000e10 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe facb 	bl	8000e10 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d903      	bls.n	800288c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e15c      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
 8002888:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b91      	ldr	r3, [pc, #580]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800288e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ee      	bne.n	8002876 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a4 	beq.w	80029ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b88      	ldr	r3, [pc, #544]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	4a87      	ldr	r2, [pc, #540]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028be:	4b85      	ldr	r3, [pc, #532]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ca:	2301      	movs	r3, #1
 80028cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ce:	4b82      	ldr	r3, [pc, #520]	@ (8002ad8 <HAL_RCC_OscConfig+0x4d0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d118      	bne.n	800290c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80028da:	4b7f      	ldr	r3, [pc, #508]	@ (8002ad8 <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7e      	ldr	r2, [pc, #504]	@ (8002ad8 <HAL_RCC_OscConfig+0x4d0>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e6:	f7fe fa93 	bl	8000e10 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ee:	f7fe fa8f 	bl	8000e10 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	@ 0x64
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e120      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002900:	4b75      	ldr	r3, [pc, #468]	@ (8002ad8 <HAL_RCC_OscConfig+0x4d0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x31a>
 8002914:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002918:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002920:	e02d      	b.n	800297e <HAL_RCC_OscConfig+0x376>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0x33c>
 800292a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292e:	4a69      	ldr	r2, [pc, #420]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	6713      	str	r3, [r2, #112]	@ 0x70
 8002936:	4b67      	ldr	r3, [pc, #412]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293a:	4a66      	ldr	r2, [pc, #408]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	6713      	str	r3, [r2, #112]	@ 0x70
 8002942:	e01c      	b.n	800297e <HAL_RCC_OscConfig+0x376>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d10c      	bne.n	8002966 <HAL_RCC_OscConfig+0x35e>
 800294c:	4b61      	ldr	r3, [pc, #388]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	4a60      	ldr	r2, [pc, #384]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6713      	str	r3, [r2, #112]	@ 0x70
 8002958:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6713      	str	r3, [r2, #112]	@ 0x70
 8002964:	e00b      	b.n	800297e <HAL_RCC_OscConfig+0x376>
 8002966:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	@ 0x70
 8002972:	4b58      	ldr	r3, [pc, #352]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	4a57      	ldr	r2, [pc, #348]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d015      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7fe fa43 	bl	8000e10 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe fa3f 	bl	8000e10 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e0ce      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ee      	beq.n	800298e <HAL_RCC_OscConfig+0x386>
 80029b0:	e014      	b.n	80029dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe fa2d 	bl	8000e10 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7fe fa29 	bl	8000e10 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	4b40      	ldr	r3, [pc, #256]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ee      	bne.n	80029ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80a4 	beq.w	8002b40 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f8:	4b36      	ldr	r3, [pc, #216]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d06b      	beq.n	8002adc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d149      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0c:	4b31      	ldr	r3, [pc, #196]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a30      	ldr	r2, [pc, #192]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe f9fa 	bl	8000e10 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe f9f6 	bl	8000e10 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e087      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b28      	ldr	r3, [pc, #160]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	019b      	lsls	r3, r3, #6
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	3b01      	subs	r3, #1
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	4313      	orrs	r3, r2
 8002a64:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a6a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a18      	ldr	r2, [pc, #96]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe f9ca 	bl	8000e10 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe f9c6 	bl	8000e10 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e057      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x478>
 8002a9e:	e04f      	b.n	8002b40 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe f9b0 	bl	8000e10 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe f9ac 	bl	8000e10 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e03d      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	4b03      	ldr	r3, [pc, #12]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4ac>
 8002ad2:	e035      	b.n	8002b40 <HAL_RCC_OscConfig+0x538>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x544>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d121      	bne.n	8002b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d11a      	bne.n	8002b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0d0      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b6a      	ldr	r3, [pc, #424]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d910      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b67      	ldr	r3, [pc, #412]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 020f 	bic.w	r2, r3, #15
 8002b7e:	4965      	ldr	r1, [pc, #404]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b63      	ldr	r3, [pc, #396]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0b8      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb0:	4b59      	ldr	r3, [pc, #356]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a58      	ldr	r2, [pc, #352]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc8:	4b53      	ldr	r3, [pc, #332]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a52      	ldr	r2, [pc, #328]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd4:	4b50      	ldr	r3, [pc, #320]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	494d      	ldr	r1, [pc, #308]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d040      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d115      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e07f      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c12:	4b41      	ldr	r3, [pc, #260]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e073      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c22:	4b3d      	ldr	r3, [pc, #244]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06b      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c32:	4b39      	ldr	r3, [pc, #228]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f023 0203 	bic.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4936      	ldr	r1, [pc, #216]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c44:	f7fe f8e4 	bl	8000e10 <HAL_GetTick>
 8002c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4c:	f7fe f8e0 	bl	8000e10 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e053      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	4b2d      	ldr	r3, [pc, #180]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 020c 	and.w	r2, r3, #12
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d1eb      	bne.n	8002c4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c74:	4b27      	ldr	r3, [pc, #156]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d210      	bcs.n	8002ca4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b24      	ldr	r3, [pc, #144]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 020f 	bic.w	r2, r3, #15
 8002c8a:	4922      	ldr	r1, [pc, #136]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b20      	ldr	r3, [pc, #128]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e032      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb0:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4916      	ldr	r1, [pc, #88]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cce:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	490e      	ldr	r1, [pc, #56]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ce2:	f000 f821 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	490a      	ldr	r1, [pc, #40]	@ (8002d1c <HAL_RCC_ClockConfig+0x1cc>)
 8002cf4:	5ccb      	ldrb	r3, [r1, r3]
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	4a09      	ldr	r2, [pc, #36]	@ (8002d20 <HAL_RCC_ClockConfig+0x1d0>)
 8002cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cfe:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <HAL_RCC_ClockConfig+0x1d4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe f840 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023c00 	.word	0x40023c00
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	08012150 	.word	0x08012150
 8002d20:	20000000 	.word	0x20000000
 8002d24:	20000004 	.word	0x20000004

08002d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2c:	b090      	sub	sp, #64	@ 0x40
 8002d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d34:	2300      	movs	r3, #0
 8002d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d38:	2300      	movs	r3, #0
 8002d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d40:	4b59      	ldr	r3, [pc, #356]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d00d      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x40>
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	f200 80a1 	bhi.w	8002e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x34>
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d5a:	e09b      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b53      	ldr	r3, [pc, #332]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x184>)
 8002d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d60:	e09b      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d62:	4b53      	ldr	r3, [pc, #332]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d66:	e098      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d72:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d028      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	2200      	movs	r2, #0
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d90:	2100      	movs	r1, #0
 8002d92:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d94:	fb03 f201 	mul.w	r2, r3, r1
 8002d98:	2300      	movs	r3, #0
 8002d9a:	fb00 f303 	mul.w	r3, r0, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a43      	ldr	r2, [pc, #268]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da2:	fba0 1202 	umull	r1, r2, r0, r2
 8002da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002da8:	460a      	mov	r2, r1
 8002daa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dae:	4413      	add	r3, r2
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db4:	2200      	movs	r2, #0
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	61fa      	str	r2, [r7, #28]
 8002dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002dc2:	f7fd fa75 	bl	80002b0 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4613      	mov	r3, r2
 8002dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dce:	e053      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd0:	4b35      	ldr	r3, [pc, #212]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	617a      	str	r2, [r7, #20]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002de2:	f04f 0b00 	mov.w	fp, #0
 8002de6:	4652      	mov	r2, sl
 8002de8:	465b      	mov	r3, fp
 8002dea:	f04f 0000 	mov.w	r0, #0
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	0159      	lsls	r1, r3, #5
 8002df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df8:	0150      	lsls	r0, r2, #5
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8002e02:	eb63 090b 	sbc.w	r9, r3, fp
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	00eb      	lsls	r3, r5, #3
 8002e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e30:	00e2      	lsls	r2, r4, #3
 8002e32:	4614      	mov	r4, r2
 8002e34:	461d      	mov	r5, r3
 8002e36:	eb14 030a 	adds.w	r3, r4, sl
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	eb45 030b 	adc.w	r3, r5, fp
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e4e:	4629      	mov	r1, r5
 8002e50:	028b      	lsls	r3, r1, #10
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e58:	4621      	mov	r1, r4
 8002e5a:	028a      	lsls	r2, r1, #10
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e62:	2200      	movs	r2, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	60fa      	str	r2, [r7, #12]
 8002e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e6c:	f7fd fa20 	bl	80002b0 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4613      	mov	r3, r2
 8002e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	3301      	adds	r3, #1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e92:	e002      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b05      	ldr	r3, [pc, #20]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x184>)
 8002e96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3740      	adds	r7, #64	@ 0x40
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	017d7840 	.word	0x017d7840

08002eb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	@ (8002ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000000 	.word	0x20000000

08002ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ed0:	f7ff fff0 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0a9b      	lsrs	r3, r3, #10
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	@ (8002ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08012160 	.word	0x08012160

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef8:	f7ff ffdc 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0b5b      	lsrs	r3, r3, #13
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4903      	ldr	r1, [pc, #12]	@ (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08012160 	.word	0x08012160

08002f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d012      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f44:	4b69      	ldr	r3, [pc, #420]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a68      	ldr	r2, [pc, #416]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f4e:	6093      	str	r3, [r2, #8]
 8002f50:	4b66      	ldr	r3, [pc, #408]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f58:	4964      	ldr	r1, [pc, #400]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d017      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f76:	4b5d      	ldr	r3, [pc, #372]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	4959      	ldr	r1, [pc, #356]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f94:	d101      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d017      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fb2:	4b4e      	ldr	r3, [pc, #312]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fb8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	494a      	ldr	r1, [pc, #296]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 808b 	beq.w	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003000:	4b3a      	ldr	r3, [pc, #232]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	4a39      	ldr	r2, [pc, #228]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300a:	6413      	str	r3, [r2, #64]	@ 0x40
 800300c:	4b37      	ldr	r3, [pc, #220]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003018:	4b35      	ldr	r3, [pc, #212]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a34      	ldr	r2, [pc, #208]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003024:	f7fd fef4 	bl	8000e10 <HAL_GetTick>
 8003028:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302c:	f7fd fef0 	bl	8000e10 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	@ 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e357      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800303e:	4b2c      	ldr	r3, [pc, #176]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800304a:	4b28      	ldr	r3, [pc, #160]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003052:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d035      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d02e      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003068:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003070:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003072:	4b1e      	ldr	r3, [pc, #120]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003076:	4a1d      	ldr	r2, [pc, #116]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800307e:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003082:	4a1a      	ldr	r2, [pc, #104]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003088:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800308a:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003090:	4b16      	ldr	r3, [pc, #88]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d114      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fd feb8 	bl	8000e10 <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7fd feb4 	bl	8000e10 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e319      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ee      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030d2:	d111      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030d4:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030e0:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030e2:	400b      	ands	r3, r1
 80030e4:	4901      	ldr	r1, [pc, #4]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
 80030ea:	e00b      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40007000 	.word	0x40007000
 80030f4:	0ffffcff 	.word	0x0ffffcff
 80030f8:	4baa      	ldr	r3, [pc, #680]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4aa9      	ldr	r2, [pc, #676]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003102:	6093      	str	r3, [r2, #8]
 8003104:	4ba7      	ldr	r3, [pc, #668]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003106:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	49a4      	ldr	r1, [pc, #656]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003112:	4313      	orrs	r3, r2
 8003114:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d010      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003122:	4ba0      	ldr	r3, [pc, #640]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003128:	4a9e      	ldr	r2, [pc, #632]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800312e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003132:	4b9c      	ldr	r3, [pc, #624]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003134:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313c:	4999      	ldr	r1, [pc, #612]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003150:	4b94      	ldr	r3, [pc, #592]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003156:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800315e:	4991      	ldr	r1, [pc, #580]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003172:	4b8c      	ldr	r3, [pc, #560]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003178:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003180:	4988      	ldr	r1, [pc, #544]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003194:	4b83      	ldr	r3, [pc, #524]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a2:	4980      	ldr	r1, [pc, #512]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031b6:	4b7b      	ldr	r3, [pc, #492]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	4977      	ldr	r1, [pc, #476]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d8:	4b72      	ldr	r3, [pc, #456]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	496f      	ldr	r1, [pc, #444]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031fa:	4b6a      	ldr	r3, [pc, #424]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003200:	f023 020c 	bic.w	r2, r3, #12
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003208:	4966      	ldr	r1, [pc, #408]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800321c:	4b61      	ldr	r3, [pc, #388]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003222:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322a:	495e      	ldr	r1, [pc, #376]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800323e:	4b59      	ldr	r3, [pc, #356]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003244:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800324c:	4955      	ldr	r1, [pc, #340]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003260:	4b50      	ldr	r3, [pc, #320]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003266:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	494d      	ldr	r1, [pc, #308]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003282:	4b48      	ldr	r3, [pc, #288]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003290:	4944      	ldr	r1, [pc, #272]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032a4:	4b3f      	ldr	r3, [pc, #252]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b2:	493c      	ldr	r1, [pc, #240]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032c6:	4b37      	ldr	r3, [pc, #220]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d4:	4933      	ldr	r1, [pc, #204]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032e8:	4b2e      	ldr	r3, [pc, #184]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032f6:	492b      	ldr	r1, [pc, #172]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d011      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800330a:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003310:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003318:	4922      	ldr	r1, [pc, #136]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003328:	d101      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800332a:	2301      	movs	r3, #1
 800332c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800334a:	4b16      	ldr	r3, [pc, #88]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003350:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003358:	4912      	ldr	r1, [pc, #72]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800336c:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003372:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800337c:	4909      	ldr	r1, [pc, #36]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d006      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80d9 	beq.w	800354a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003398:	4b02      	ldr	r3, [pc, #8]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a01      	ldr	r2, [pc, #4]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033a2:	e001      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80033a4:	40023800 	.word	0x40023800
 80033a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033aa:	f7fd fd31 	bl	8000e10 <HAL_GetTick>
 80033ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033b2:	f7fd fd2d 	bl	8000e10 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b64      	cmp	r3, #100	@ 0x64
 80033be:	d901      	bls.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e194      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f0      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d021      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11d      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033e4:	4b64      	ldr	r3, [pc, #400]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ea:	0c1b      	lsrs	r3, r3, #16
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033f2:	4b61      	ldr	r3, [pc, #388]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f8:	0e1b      	lsrs	r3, r3, #24
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	019a      	lsls	r2, r3, #6
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	431a      	orrs	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	061b      	lsls	r3, r3, #24
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	071b      	lsls	r3, r3, #28
 8003418:	4957      	ldr	r1, [pc, #348]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d004      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800343e:	2b00      	cmp	r3, #0
 8003440:	d02e      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800344a:	d129      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800344c:	4b4a      	ldr	r3, [pc, #296]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003452:	0c1b      	lsrs	r3, r3, #16
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800345a:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003460:	0f1b      	lsrs	r3, r3, #28
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	019a      	lsls	r2, r3, #6
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	041b      	lsls	r3, r3, #16
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	061b      	lsls	r3, r3, #24
 800347a:	431a      	orrs	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	071b      	lsls	r3, r3, #28
 8003480:	493d      	ldr	r1, [pc, #244]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003488:	4b3b      	ldr	r3, [pc, #236]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800348a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800348e:	f023 021f 	bic.w	r2, r3, #31
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	3b01      	subs	r3, #1
 8003498:	4937      	ldr	r1, [pc, #220]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01d      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034ac:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b2:	0e1b      	lsrs	r3, r3, #24
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034c0:	0f1b      	lsrs	r3, r3, #28
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	019a      	lsls	r2, r3, #6
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	431a      	orrs	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	431a      	orrs	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	071b      	lsls	r3, r3, #28
 80034e0:	4925      	ldr	r1, [pc, #148]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d011      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	019a      	lsls	r2, r3, #6
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	061b      	lsls	r3, r3, #24
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	071b      	lsls	r3, r3, #28
 8003510:	4919      	ldr	r1, [pc, #100]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003518:	4b17      	ldr	r3, [pc, #92]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a16      	ldr	r2, [pc, #88]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800351e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003524:	f7fd fc74 	bl	8000e10 <HAL_GetTick>
 8003528:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800352c:	f7fd fc70 	bl	8000e10 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	@ 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0d7      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800353e:	4b0e      	ldr	r3, [pc, #56]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b01      	cmp	r3, #1
 800354e:	f040 80cd 	bne.w	80036ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003552:	4b09      	ldr	r3, [pc, #36]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a08      	ldr	r2, [pc, #32]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800355c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355e:	f7fd fc57 	bl	8000e10 <HAL_GetTick>
 8003562:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003566:	f7fd fc53 	bl	8000e10 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b64      	cmp	r3, #100	@ 0x64
 8003572:	d903      	bls.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0ba      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003578:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800357c:	4b5e      	ldr	r3, [pc, #376]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003588:	d0ed      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02e      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d12a      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035b2:	4b51      	ldr	r3, [pc, #324]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035c0:	4b4d      	ldr	r3, [pc, #308]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	0f1b      	lsrs	r3, r3, #28
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	019a      	lsls	r2, r3, #6
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	061b      	lsls	r3, r3, #24
 80035e0:	431a      	orrs	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	071b      	lsls	r3, r3, #28
 80035e6:	4944      	ldr	r1, [pc, #272]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035ee:	4b42      	ldr	r3, [pc, #264]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	3b01      	subs	r3, #1
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	493d      	ldr	r1, [pc, #244]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d022      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800361c:	d11d      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800361e:	4b36      	ldr	r3, [pc, #216]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	0e1b      	lsrs	r3, r3, #24
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800362c:	4b32      	ldr	r3, [pc, #200]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003632:	0f1b      	lsrs	r3, r3, #28
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	019a      	lsls	r2, r3, #6
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	431a      	orrs	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	061b      	lsls	r3, r3, #24
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	071b      	lsls	r3, r3, #28
 8003652:	4929      	ldr	r1, [pc, #164]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d028      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003666:	4b24      	ldr	r3, [pc, #144]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366c:	0e1b      	lsrs	r3, r3, #24
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003674:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	019a      	lsls	r2, r3, #6
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	431a      	orrs	r2, r3
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	071b      	lsls	r3, r3, #28
 800369a:	4917      	ldr	r1, [pc, #92]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	4911      	ldr	r1, [pc, #68]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036b8:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0e      	ldr	r2, [pc, #56]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c4:	f7fd fba4 	bl	8000e10 <HAL_GetTick>
 80036c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036cc:	f7fd fba0 	bl	8000e10 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	@ 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e007      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036de:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ea:	d1ef      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800

080036fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e040      	b.n	8003790 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd f998 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	@ 0x24
 8003728:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fb16 	bl	8003d74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f8af 	bl	80038ac <UART_SetConfig>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e01b      	b.n	8003790 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003776:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fb95 	bl	8003eb8 <UART_CheckIdleState>
 800378e:	4603      	mov	r3, r0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	@ 0x28
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d177      	bne.n	80038a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_UART_Transmit+0x24>
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e070      	b.n	80038a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2221      	movs	r2, #33	@ 0x21
 80037cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ce:	f7fd fb1f 	bl	8000e10 <HAL_GetTick>
 80037d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ec:	d108      	bne.n	8003800 <HAL_UART_Transmit+0x68>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	e003      	b.n	8003808 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003808:	e02f      	b.n	800386a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2180      	movs	r1, #128	@ 0x80
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fba6 	bl	8003f66 <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e03b      	b.n	80038a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800383e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	3302      	adds	r3, #2
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e007      	b.n	8003858 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3301      	adds	r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1c9      	bne.n	800380a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	2140      	movs	r1, #64	@ 0x40
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fb70 	bl	8003f66 <UART_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d004      	beq.n	8003896 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e005      	b.n	80038a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
  }
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4ba6      	ldr	r3, [pc, #664]	@ (8003b70 <UART_SetConfig+0x2c4>)
 80038d8:	4013      	ands	r3, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	430a      	orrs	r2, r1
 800391c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a94      	ldr	r2, [pc, #592]	@ (8003b74 <UART_SetConfig+0x2c8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d120      	bne.n	800396a <UART_SetConfig+0xbe>
 8003928:	4b93      	ldr	r3, [pc, #588]	@ (8003b78 <UART_SetConfig+0x2cc>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b03      	cmp	r3, #3
 8003934:	d816      	bhi.n	8003964 <UART_SetConfig+0xb8>
 8003936:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <UART_SetConfig+0x90>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	0800394d 	.word	0x0800394d
 8003940:	08003959 	.word	0x08003959
 8003944:	08003953 	.word	0x08003953
 8003948:	0800395f 	.word	0x0800395f
 800394c:	2301      	movs	r3, #1
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e150      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003952:	2302      	movs	r3, #2
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e14d      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003958:	2304      	movs	r3, #4
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e14a      	b.n	8003bf4 <UART_SetConfig+0x348>
 800395e:	2308      	movs	r3, #8
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e147      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003964:	2310      	movs	r3, #16
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e144      	b.n	8003bf4 <UART_SetConfig+0x348>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a83      	ldr	r2, [pc, #524]	@ (8003b7c <UART_SetConfig+0x2d0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d132      	bne.n	80039da <UART_SetConfig+0x12e>
 8003974:	4b80      	ldr	r3, [pc, #512]	@ (8003b78 <UART_SetConfig+0x2cc>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d828      	bhi.n	80039d4 <UART_SetConfig+0x128>
 8003982:	a201      	add	r2, pc, #4	@ (adr r2, 8003988 <UART_SetConfig+0xdc>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039bd 	.word	0x080039bd
 800398c:	080039d5 	.word	0x080039d5
 8003990:	080039d5 	.word	0x080039d5
 8003994:	080039d5 	.word	0x080039d5
 8003998:	080039c9 	.word	0x080039c9
 800399c:	080039d5 	.word	0x080039d5
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	080039d5 	.word	0x080039d5
 80039a8:	080039c3 	.word	0x080039c3
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	080039d5 	.word	0x080039d5
 80039b8:	080039cf 	.word	0x080039cf
 80039bc:	2300      	movs	r3, #0
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e118      	b.n	8003bf4 <UART_SetConfig+0x348>
 80039c2:	2302      	movs	r3, #2
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e115      	b.n	8003bf4 <UART_SetConfig+0x348>
 80039c8:	2304      	movs	r3, #4
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e112      	b.n	8003bf4 <UART_SetConfig+0x348>
 80039ce:	2308      	movs	r3, #8
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e10f      	b.n	8003bf4 <UART_SetConfig+0x348>
 80039d4:	2310      	movs	r3, #16
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e10c      	b.n	8003bf4 <UART_SetConfig+0x348>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a68      	ldr	r2, [pc, #416]	@ (8003b80 <UART_SetConfig+0x2d4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d120      	bne.n	8003a26 <UART_SetConfig+0x17a>
 80039e4:	4b64      	ldr	r3, [pc, #400]	@ (8003b78 <UART_SetConfig+0x2cc>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039ee:	2b30      	cmp	r3, #48	@ 0x30
 80039f0:	d013      	beq.n	8003a1a <UART_SetConfig+0x16e>
 80039f2:	2b30      	cmp	r3, #48	@ 0x30
 80039f4:	d814      	bhi.n	8003a20 <UART_SetConfig+0x174>
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d009      	beq.n	8003a0e <UART_SetConfig+0x162>
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d810      	bhi.n	8003a20 <UART_SetConfig+0x174>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <UART_SetConfig+0x15c>
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d006      	beq.n	8003a14 <UART_SetConfig+0x168>
 8003a06:	e00b      	b.n	8003a20 <UART_SetConfig+0x174>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e0f2      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e0ef      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003a14:	2304      	movs	r3, #4
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e0ec      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e0e9      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003a20:	2310      	movs	r3, #16
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e0e6      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a56      	ldr	r2, [pc, #344]	@ (8003b84 <UART_SetConfig+0x2d8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d120      	bne.n	8003a72 <UART_SetConfig+0x1c6>
 8003a30:	4b51      	ldr	r3, [pc, #324]	@ (8003b78 <UART_SetConfig+0x2cc>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a3c:	d013      	beq.n	8003a66 <UART_SetConfig+0x1ba>
 8003a3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a40:	d814      	bhi.n	8003a6c <UART_SetConfig+0x1c0>
 8003a42:	2b80      	cmp	r3, #128	@ 0x80
 8003a44:	d009      	beq.n	8003a5a <UART_SetConfig+0x1ae>
 8003a46:	2b80      	cmp	r3, #128	@ 0x80
 8003a48:	d810      	bhi.n	8003a6c <UART_SetConfig+0x1c0>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <UART_SetConfig+0x1a8>
 8003a4e:	2b40      	cmp	r3, #64	@ 0x40
 8003a50:	d006      	beq.n	8003a60 <UART_SetConfig+0x1b4>
 8003a52:	e00b      	b.n	8003a6c <UART_SetConfig+0x1c0>
 8003a54:	2300      	movs	r3, #0
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e0cc      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	77fb      	strb	r3, [r7, #31]
 8003a5e:	e0c9      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003a60:	2304      	movs	r3, #4
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e0c6      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003a66:	2308      	movs	r3, #8
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e0c3      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e0c0      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a44      	ldr	r2, [pc, #272]	@ (8003b88 <UART_SetConfig+0x2dc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d125      	bne.n	8003ac8 <UART_SetConfig+0x21c>
 8003a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b78 <UART_SetConfig+0x2cc>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a8a:	d017      	beq.n	8003abc <UART_SetConfig+0x210>
 8003a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a90:	d817      	bhi.n	8003ac2 <UART_SetConfig+0x216>
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a96:	d00b      	beq.n	8003ab0 <UART_SetConfig+0x204>
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a9c:	d811      	bhi.n	8003ac2 <UART_SetConfig+0x216>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <UART_SetConfig+0x1fe>
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa6:	d006      	beq.n	8003ab6 <UART_SetConfig+0x20a>
 8003aa8:	e00b      	b.n	8003ac2 <UART_SetConfig+0x216>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e0a1      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e09e      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e09b      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003abc:	2308      	movs	r3, #8
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e098      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003ac2:	2310      	movs	r3, #16
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e095      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2f      	ldr	r2, [pc, #188]	@ (8003b8c <UART_SetConfig+0x2e0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d125      	bne.n	8003b1e <UART_SetConfig+0x272>
 8003ad2:	4b29      	ldr	r3, [pc, #164]	@ (8003b78 <UART_SetConfig+0x2cc>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ae0:	d017      	beq.n	8003b12 <UART_SetConfig+0x266>
 8003ae2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ae6:	d817      	bhi.n	8003b18 <UART_SetConfig+0x26c>
 8003ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aec:	d00b      	beq.n	8003b06 <UART_SetConfig+0x25a>
 8003aee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003af2:	d811      	bhi.n	8003b18 <UART_SetConfig+0x26c>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <UART_SetConfig+0x254>
 8003af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003afc:	d006      	beq.n	8003b0c <UART_SetConfig+0x260>
 8003afe:	e00b      	b.n	8003b18 <UART_SetConfig+0x26c>
 8003b00:	2301      	movs	r3, #1
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e076      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003b06:	2302      	movs	r3, #2
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e073      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e070      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003b12:	2308      	movs	r3, #8
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e06d      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003b18:	2310      	movs	r3, #16
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e06a      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1b      	ldr	r2, [pc, #108]	@ (8003b90 <UART_SetConfig+0x2e4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d138      	bne.n	8003b9a <UART_SetConfig+0x2ee>
 8003b28:	4b13      	ldr	r3, [pc, #76]	@ (8003b78 <UART_SetConfig+0x2cc>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003b32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b36:	d017      	beq.n	8003b68 <UART_SetConfig+0x2bc>
 8003b38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b3c:	d82a      	bhi.n	8003b94 <UART_SetConfig+0x2e8>
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b42:	d00b      	beq.n	8003b5c <UART_SetConfig+0x2b0>
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b48:	d824      	bhi.n	8003b94 <UART_SetConfig+0x2e8>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <UART_SetConfig+0x2aa>
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b52:	d006      	beq.n	8003b62 <UART_SetConfig+0x2b6>
 8003b54:	e01e      	b.n	8003b94 <UART_SetConfig+0x2e8>
 8003b56:	2300      	movs	r3, #0
 8003b58:	77fb      	strb	r3, [r7, #31]
 8003b5a:	e04b      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e048      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003b62:	2304      	movs	r3, #4
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e045      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003b68:	2308      	movs	r3, #8
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e042      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003b6e:	bf00      	nop
 8003b70:	efff69f3 	.word	0xefff69f3
 8003b74:	40011000 	.word	0x40011000
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40004400 	.word	0x40004400
 8003b80:	40004800 	.word	0x40004800
 8003b84:	40004c00 	.word	0x40004c00
 8003b88:	40005000 	.word	0x40005000
 8003b8c:	40011400 	.word	0x40011400
 8003b90:	40007800 	.word	0x40007800
 8003b94:	2310      	movs	r3, #16
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e02c      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a72      	ldr	r2, [pc, #456]	@ (8003d68 <UART_SetConfig+0x4bc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d125      	bne.n	8003bf0 <UART_SetConfig+0x344>
 8003ba4:	4b71      	ldr	r3, [pc, #452]	@ (8003d6c <UART_SetConfig+0x4c0>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003baa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003bae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003bb2:	d017      	beq.n	8003be4 <UART_SetConfig+0x338>
 8003bb4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003bb8:	d817      	bhi.n	8003bea <UART_SetConfig+0x33e>
 8003bba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bbe:	d00b      	beq.n	8003bd8 <UART_SetConfig+0x32c>
 8003bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc4:	d811      	bhi.n	8003bea <UART_SetConfig+0x33e>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <UART_SetConfig+0x326>
 8003bca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bce:	d006      	beq.n	8003bde <UART_SetConfig+0x332>
 8003bd0:	e00b      	b.n	8003bea <UART_SetConfig+0x33e>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	77fb      	strb	r3, [r7, #31]
 8003bd6:	e00d      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e00a      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003bde:	2304      	movs	r3, #4
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	e007      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003be4:	2308      	movs	r3, #8
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e004      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003bea:	2310      	movs	r3, #16
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e001      	b.n	8003bf4 <UART_SetConfig+0x348>
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bfc:	d15b      	bne.n	8003cb6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003bfe:	7ffb      	ldrb	r3, [r7, #31]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d828      	bhi.n	8003c56 <UART_SetConfig+0x3aa>
 8003c04:	a201      	add	r2, pc, #4	@ (adr r2, 8003c0c <UART_SetConfig+0x360>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003c39 	.word	0x08003c39
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003c57 	.word	0x08003c57
 8003c1c:	08003c47 	.word	0x08003c47
 8003c20:	08003c57 	.word	0x08003c57
 8003c24:	08003c57 	.word	0x08003c57
 8003c28:	08003c57 	.word	0x08003c57
 8003c2c:	08003c4f 	.word	0x08003c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c30:	f7ff f94c 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8003c34:	61b8      	str	r0, [r7, #24]
        break;
 8003c36:	e013      	b.n	8003c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c38:	f7ff f95c 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003c3c:	61b8      	str	r0, [r7, #24]
        break;
 8003c3e:	e00f      	b.n	8003c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c40:	4b4b      	ldr	r3, [pc, #300]	@ (8003d70 <UART_SetConfig+0x4c4>)
 8003c42:	61bb      	str	r3, [r7, #24]
        break;
 8003c44:	e00c      	b.n	8003c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c46:	f7ff f86f 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8003c4a:	61b8      	str	r0, [r7, #24]
        break;
 8003c4c:	e008      	b.n	8003c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c52:	61bb      	str	r3, [r7, #24]
        break;
 8003c54:	e004      	b.n	8003c60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d074      	beq.n	8003d50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	005a      	lsls	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b0f      	cmp	r3, #15
 8003c80:	d916      	bls.n	8003cb0 <UART_SetConfig+0x404>
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c88:	d212      	bcs.n	8003cb0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f023 030f 	bic.w	r3, r3, #15
 8003c92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	89fb      	ldrh	r3, [r7, #14]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	89fa      	ldrh	r2, [r7, #14]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	e04f      	b.n	8003d50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	77bb      	strb	r3, [r7, #30]
 8003cb4:	e04c      	b.n	8003d50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cb6:	7ffb      	ldrb	r3, [r7, #31]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d828      	bhi.n	8003d0e <UART_SetConfig+0x462>
 8003cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <UART_SetConfig+0x418>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003cf1 	.word	0x08003cf1
 8003ccc:	08003cf9 	.word	0x08003cf9
 8003cd0:	08003d0f 	.word	0x08003d0f
 8003cd4:	08003cff 	.word	0x08003cff
 8003cd8:	08003d0f 	.word	0x08003d0f
 8003cdc:	08003d0f 	.word	0x08003d0f
 8003ce0:	08003d0f 	.word	0x08003d0f
 8003ce4:	08003d07 	.word	0x08003d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7ff f8f0 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8003cec:	61b8      	str	r0, [r7, #24]
        break;
 8003cee:	e013      	b.n	8003d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf0:	f7ff f900 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003cf4:	61b8      	str	r0, [r7, #24]
        break;
 8003cf6:	e00f      	b.n	8003d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d70 <UART_SetConfig+0x4c4>)
 8003cfa:	61bb      	str	r3, [r7, #24]
        break;
 8003cfc:	e00c      	b.n	8003d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfe:	f7ff f813 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8003d02:	61b8      	str	r0, [r7, #24]
        break;
 8003d04:	e008      	b.n	8003d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d0a:	61bb      	str	r3, [r7, #24]
        break;
 8003d0c:	e004      	b.n	8003d18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	77bb      	strb	r3, [r7, #30]
        break;
 8003d16:	bf00      	nop
    }

    if (pclk != 0U)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d018      	beq.n	8003d50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	085a      	lsrs	r2, r3, #1
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	441a      	add	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b0f      	cmp	r3, #15
 8003d36:	d909      	bls.n	8003d4c <UART_SetConfig+0x4a0>
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d3e:	d205      	bcs.n	8003d4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	e001      	b.n	8003d50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40007c00 	.word	0x40007c00
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	00f42400 	.word	0x00f42400

08003d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01a      	beq.n	8003e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e72:	d10a      	bne.n	8003e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08c      	sub	sp, #48	@ 0x30
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ec8:	f7fc ffa2 	bl	8000e10 <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d12e      	bne.n	8003f3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003edc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f83b 	bl	8003f66 <UART_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d021      	beq.n	8003f3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f0a:	623b      	str	r3, [r7, #32]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	69b9      	ldr	r1, [r7, #24]
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	617b      	str	r3, [r7, #20]
   return(result);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e6      	bne.n	8003ef6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e011      	b.n	8003f5e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3728      	adds	r7, #40	@ 0x28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f76:	e04f      	b.n	8004018 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d04b      	beq.n	8004018 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f80:	f7fc ff46 	bl	8000e10 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e04e      	b.n	8004038 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d037      	beq.n	8004018 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b80      	cmp	r3, #128	@ 0x80
 8003fac:	d034      	beq.n	8004018 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b40      	cmp	r3, #64	@ 0x40
 8003fb2:	d031      	beq.n	8004018 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d110      	bne.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f838 	bl	8004040 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2208      	movs	r2, #8
 8003fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e029      	b.n	8004038 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff2:	d111      	bne.n	8004018 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ffc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f81e 	bl	8004040 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e00f      	b.n	8004038 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69da      	ldr	r2, [r3, #28]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	429a      	cmp	r2, r3
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	429a      	cmp	r2, r3
 8004034:	d0a0      	beq.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b095      	sub	sp, #84	@ 0x54
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800405c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004066:	643b      	str	r3, [r7, #64]	@ 0x40
 8004068:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800406c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e6      	bne.n	8004048 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	61fb      	str	r3, [r7, #28]
   return(result);
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3308      	adds	r3, #8
 8004098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800409a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800409c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d118      	bne.n	80040e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f023 0310 	bic.w	r3, r3, #16
 80040ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6979      	ldr	r1, [r7, #20]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	613b      	str	r3, [r7, #16]
   return(result);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e6      	bne.n	80040b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040fc:	bf00      	nop
 80040fe:	3754      	adds	r7, #84	@ 0x54
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800410e:	4b87      	ldr	r3, [pc, #540]	@ (800432c <MX_LWIP_Init+0x224>)
 8004110:	22c0      	movs	r2, #192	@ 0xc0
 8004112:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004114:	4b85      	ldr	r3, [pc, #532]	@ (800432c <MX_LWIP_Init+0x224>)
 8004116:	22a8      	movs	r2, #168	@ 0xa8
 8004118:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800411a:	4b84      	ldr	r3, [pc, #528]	@ (800432c <MX_LWIP_Init+0x224>)
 800411c:	2201      	movs	r2, #1
 800411e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8004120:	4b82      	ldr	r3, [pc, #520]	@ (800432c <MX_LWIP_Init+0x224>)
 8004122:	2264      	movs	r2, #100	@ 0x64
 8004124:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004126:	4b82      	ldr	r3, [pc, #520]	@ (8004330 <MX_LWIP_Init+0x228>)
 8004128:	22ff      	movs	r2, #255	@ 0xff
 800412a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800412c:	4b80      	ldr	r3, [pc, #512]	@ (8004330 <MX_LWIP_Init+0x228>)
 800412e:	22ff      	movs	r2, #255	@ 0xff
 8004130:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004132:	4b7f      	ldr	r3, [pc, #508]	@ (8004330 <MX_LWIP_Init+0x228>)
 8004134:	22ff      	movs	r2, #255	@ 0xff
 8004136:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004138:	4b7d      	ldr	r3, [pc, #500]	@ (8004330 <MX_LWIP_Init+0x228>)
 800413a:	2200      	movs	r2, #0
 800413c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800413e:	4b7d      	ldr	r3, [pc, #500]	@ (8004334 <MX_LWIP_Init+0x22c>)
 8004140:	22c0      	movs	r2, #192	@ 0xc0
 8004142:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004144:	4b7b      	ldr	r3, [pc, #492]	@ (8004334 <MX_LWIP_Init+0x22c>)
 8004146:	22a8      	movs	r2, #168	@ 0xa8
 8004148:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800414a:	4b7a      	ldr	r3, [pc, #488]	@ (8004334 <MX_LWIP_Init+0x22c>)
 800414c:	2201      	movs	r2, #1
 800414e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004150:	4b78      	ldr	r3, [pc, #480]	@ (8004334 <MX_LWIP_Init+0x22c>)
 8004152:	2201      	movs	r2, #1
 8004154:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8004156:	f001 fdfb 	bl	8005d50 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800415a:	4b74      	ldr	r3, [pc, #464]	@ (800432c <MX_LWIP_Init+0x224>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	061a      	lsls	r2, r3, #24
 8004160:	4b72      	ldr	r3, [pc, #456]	@ (800432c <MX_LWIP_Init+0x224>)
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	431a      	orrs	r2, r3
 8004168:	4b70      	ldr	r3, [pc, #448]	@ (800432c <MX_LWIP_Init+0x224>)
 800416a:	789b      	ldrb	r3, [r3, #2]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	4313      	orrs	r3, r2
 8004170:	4a6e      	ldr	r2, [pc, #440]	@ (800432c <MX_LWIP_Init+0x224>)
 8004172:	78d2      	ldrb	r2, [r2, #3]
 8004174:	4313      	orrs	r3, r2
 8004176:	061a      	lsls	r2, r3, #24
 8004178:	4b6c      	ldr	r3, [pc, #432]	@ (800432c <MX_LWIP_Init+0x224>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	0619      	lsls	r1, r3, #24
 800417e:	4b6b      	ldr	r3, [pc, #428]	@ (800432c <MX_LWIP_Init+0x224>)
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	4319      	orrs	r1, r3
 8004186:	4b69      	ldr	r3, [pc, #420]	@ (800432c <MX_LWIP_Init+0x224>)
 8004188:	789b      	ldrb	r3, [r3, #2]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	430b      	orrs	r3, r1
 800418e:	4967      	ldr	r1, [pc, #412]	@ (800432c <MX_LWIP_Init+0x224>)
 8004190:	78c9      	ldrb	r1, [r1, #3]
 8004192:	430b      	orrs	r3, r1
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800419a:	431a      	orrs	r2, r3
 800419c:	4b63      	ldr	r3, [pc, #396]	@ (800432c <MX_LWIP_Init+0x224>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	0619      	lsls	r1, r3, #24
 80041a2:	4b62      	ldr	r3, [pc, #392]	@ (800432c <MX_LWIP_Init+0x224>)
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	4319      	orrs	r1, r3
 80041aa:	4b60      	ldr	r3, [pc, #384]	@ (800432c <MX_LWIP_Init+0x224>)
 80041ac:	789b      	ldrb	r3, [r3, #2]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	430b      	orrs	r3, r1
 80041b2:	495e      	ldr	r1, [pc, #376]	@ (800432c <MX_LWIP_Init+0x224>)
 80041b4:	78c9      	ldrb	r1, [r1, #3]
 80041b6:	430b      	orrs	r3, r1
 80041b8:	0a1b      	lsrs	r3, r3, #8
 80041ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80041be:	431a      	orrs	r2, r3
 80041c0:	4b5a      	ldr	r3, [pc, #360]	@ (800432c <MX_LWIP_Init+0x224>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	0619      	lsls	r1, r3, #24
 80041c6:	4b59      	ldr	r3, [pc, #356]	@ (800432c <MX_LWIP_Init+0x224>)
 80041c8:	785b      	ldrb	r3, [r3, #1]
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	4319      	orrs	r1, r3
 80041ce:	4b57      	ldr	r3, [pc, #348]	@ (800432c <MX_LWIP_Init+0x224>)
 80041d0:	789b      	ldrb	r3, [r3, #2]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	430b      	orrs	r3, r1
 80041d6:	4955      	ldr	r1, [pc, #340]	@ (800432c <MX_LWIP_Init+0x224>)
 80041d8:	78c9      	ldrb	r1, [r1, #3]
 80041da:	430b      	orrs	r3, r1
 80041dc:	0e1b      	lsrs	r3, r3, #24
 80041de:	4313      	orrs	r3, r2
 80041e0:	4a55      	ldr	r2, [pc, #340]	@ (8004338 <MX_LWIP_Init+0x230>)
 80041e2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80041e4:	4b52      	ldr	r3, [pc, #328]	@ (8004330 <MX_LWIP_Init+0x228>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	061a      	lsls	r2, r3, #24
 80041ea:	4b51      	ldr	r3, [pc, #324]	@ (8004330 <MX_LWIP_Init+0x228>)
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	431a      	orrs	r2, r3
 80041f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004330 <MX_LWIP_Init+0x228>)
 80041f4:	789b      	ldrb	r3, [r3, #2]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	4313      	orrs	r3, r2
 80041fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004330 <MX_LWIP_Init+0x228>)
 80041fc:	78d2      	ldrb	r2, [r2, #3]
 80041fe:	4313      	orrs	r3, r2
 8004200:	061a      	lsls	r2, r3, #24
 8004202:	4b4b      	ldr	r3, [pc, #300]	@ (8004330 <MX_LWIP_Init+0x228>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	0619      	lsls	r1, r3, #24
 8004208:	4b49      	ldr	r3, [pc, #292]	@ (8004330 <MX_LWIP_Init+0x228>)
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	041b      	lsls	r3, r3, #16
 800420e:	4319      	orrs	r1, r3
 8004210:	4b47      	ldr	r3, [pc, #284]	@ (8004330 <MX_LWIP_Init+0x228>)
 8004212:	789b      	ldrb	r3, [r3, #2]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	430b      	orrs	r3, r1
 8004218:	4945      	ldr	r1, [pc, #276]	@ (8004330 <MX_LWIP_Init+0x228>)
 800421a:	78c9      	ldrb	r1, [r1, #3]
 800421c:	430b      	orrs	r3, r1
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004224:	431a      	orrs	r2, r3
 8004226:	4b42      	ldr	r3, [pc, #264]	@ (8004330 <MX_LWIP_Init+0x228>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	0619      	lsls	r1, r3, #24
 800422c:	4b40      	ldr	r3, [pc, #256]	@ (8004330 <MX_LWIP_Init+0x228>)
 800422e:	785b      	ldrb	r3, [r3, #1]
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	4319      	orrs	r1, r3
 8004234:	4b3e      	ldr	r3, [pc, #248]	@ (8004330 <MX_LWIP_Init+0x228>)
 8004236:	789b      	ldrb	r3, [r3, #2]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	430b      	orrs	r3, r1
 800423c:	493c      	ldr	r1, [pc, #240]	@ (8004330 <MX_LWIP_Init+0x228>)
 800423e:	78c9      	ldrb	r1, [r1, #3]
 8004240:	430b      	orrs	r3, r1
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004248:	431a      	orrs	r2, r3
 800424a:	4b39      	ldr	r3, [pc, #228]	@ (8004330 <MX_LWIP_Init+0x228>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	0619      	lsls	r1, r3, #24
 8004250:	4b37      	ldr	r3, [pc, #220]	@ (8004330 <MX_LWIP_Init+0x228>)
 8004252:	785b      	ldrb	r3, [r3, #1]
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	4319      	orrs	r1, r3
 8004258:	4b35      	ldr	r3, [pc, #212]	@ (8004330 <MX_LWIP_Init+0x228>)
 800425a:	789b      	ldrb	r3, [r3, #2]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	430b      	orrs	r3, r1
 8004260:	4933      	ldr	r1, [pc, #204]	@ (8004330 <MX_LWIP_Init+0x228>)
 8004262:	78c9      	ldrb	r1, [r1, #3]
 8004264:	430b      	orrs	r3, r1
 8004266:	0e1b      	lsrs	r3, r3, #24
 8004268:	4313      	orrs	r3, r2
 800426a:	4a34      	ldr	r2, [pc, #208]	@ (800433c <MX_LWIP_Init+0x234>)
 800426c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800426e:	4b31      	ldr	r3, [pc, #196]	@ (8004334 <MX_LWIP_Init+0x22c>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	061a      	lsls	r2, r3, #24
 8004274:	4b2f      	ldr	r3, [pc, #188]	@ (8004334 <MX_LWIP_Init+0x22c>)
 8004276:	785b      	ldrb	r3, [r3, #1]
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	4b2d      	ldr	r3, [pc, #180]	@ (8004334 <MX_LWIP_Init+0x22c>)
 800427e:	789b      	ldrb	r3, [r3, #2]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	4313      	orrs	r3, r2
 8004284:	4a2b      	ldr	r2, [pc, #172]	@ (8004334 <MX_LWIP_Init+0x22c>)
 8004286:	78d2      	ldrb	r2, [r2, #3]
 8004288:	4313      	orrs	r3, r2
 800428a:	061a      	lsls	r2, r3, #24
 800428c:	4b29      	ldr	r3, [pc, #164]	@ (8004334 <MX_LWIP_Init+0x22c>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	0619      	lsls	r1, r3, #24
 8004292:	4b28      	ldr	r3, [pc, #160]	@ (8004334 <MX_LWIP_Init+0x22c>)
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	041b      	lsls	r3, r3, #16
 8004298:	4319      	orrs	r1, r3
 800429a:	4b26      	ldr	r3, [pc, #152]	@ (8004334 <MX_LWIP_Init+0x22c>)
 800429c:	789b      	ldrb	r3, [r3, #2]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	430b      	orrs	r3, r1
 80042a2:	4924      	ldr	r1, [pc, #144]	@ (8004334 <MX_LWIP_Init+0x22c>)
 80042a4:	78c9      	ldrb	r1, [r1, #3]
 80042a6:	430b      	orrs	r3, r1
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80042ae:	431a      	orrs	r2, r3
 80042b0:	4b20      	ldr	r3, [pc, #128]	@ (8004334 <MX_LWIP_Init+0x22c>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	0619      	lsls	r1, r3, #24
 80042b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004334 <MX_LWIP_Init+0x22c>)
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	4319      	orrs	r1, r3
 80042be:	4b1d      	ldr	r3, [pc, #116]	@ (8004334 <MX_LWIP_Init+0x22c>)
 80042c0:	789b      	ldrb	r3, [r3, #2]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	430b      	orrs	r3, r1
 80042c6:	491b      	ldr	r1, [pc, #108]	@ (8004334 <MX_LWIP_Init+0x22c>)
 80042c8:	78c9      	ldrb	r1, [r1, #3]
 80042ca:	430b      	orrs	r3, r1
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80042d2:	431a      	orrs	r2, r3
 80042d4:	4b17      	ldr	r3, [pc, #92]	@ (8004334 <MX_LWIP_Init+0x22c>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	0619      	lsls	r1, r3, #24
 80042da:	4b16      	ldr	r3, [pc, #88]	@ (8004334 <MX_LWIP_Init+0x22c>)
 80042dc:	785b      	ldrb	r3, [r3, #1]
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	4319      	orrs	r1, r3
 80042e2:	4b14      	ldr	r3, [pc, #80]	@ (8004334 <MX_LWIP_Init+0x22c>)
 80042e4:	789b      	ldrb	r3, [r3, #2]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	430b      	orrs	r3, r1
 80042ea:	4912      	ldr	r1, [pc, #72]	@ (8004334 <MX_LWIP_Init+0x22c>)
 80042ec:	78c9      	ldrb	r1, [r1, #3]
 80042ee:	430b      	orrs	r3, r1
 80042f0:	0e1b      	lsrs	r3, r3, #24
 80042f2:	4313      	orrs	r3, r2
 80042f4:	4a12      	ldr	r2, [pc, #72]	@ (8004340 <MX_LWIP_Init+0x238>)
 80042f6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80042f8:	4b12      	ldr	r3, [pc, #72]	@ (8004344 <MX_LWIP_Init+0x23c>)
 80042fa:	9302      	str	r3, [sp, #8]
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <MX_LWIP_Init+0x240>)
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	2300      	movs	r3, #0
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	4b0e      	ldr	r3, [pc, #56]	@ (8004340 <MX_LWIP_Init+0x238>)
 8004306:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <MX_LWIP_Init+0x234>)
 8004308:	490b      	ldr	r1, [pc, #44]	@ (8004338 <MX_LWIP_Init+0x230>)
 800430a:	4810      	ldr	r0, [pc, #64]	@ (800434c <MX_LWIP_Init+0x244>)
 800430c:	f003 fb1e 	bl	800794c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004310:	480e      	ldr	r0, [pc, #56]	@ (800434c <MX_LWIP_Init+0x244>)
 8004312:	f003 fccd 	bl	8007cb0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004316:	480d      	ldr	r0, [pc, #52]	@ (800434c <MX_LWIP_Init+0x244>)
 8004318:	f003 fcda 	bl	8007cd0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800431c:	490c      	ldr	r1, [pc, #48]	@ (8004350 <MX_LWIP_Init+0x248>)
 800431e:	480b      	ldr	r0, [pc, #44]	@ (800434c <MX_LWIP_Init+0x244>)
 8004320:	f003 fdd8 	bl	8007ed4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200002b4 	.word	0x200002b4
 8004330:	200002b8 	.word	0x200002b8
 8004334:	200002bc 	.word	0x200002bc
 8004338:	200002a8 	.word	0x200002a8
 800433c:	200002ac 	.word	0x200002ac
 8004340:	200002b0 	.word	0x200002b0
 8004344:	08005889 	.word	0x08005889
 8004348:	080045ad 	.word	0x080045ad
 800434c:	20000274 	.word	0x20000274
 8004350:	08004355 	.word	0x08004355

08004354 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004374:	4b44      	ldr	r3, [pc, #272]	@ (8004488 <low_level_init+0x120>)
 8004376:	4a45      	ldr	r2, [pc, #276]	@ (800448c <low_level_init+0x124>)
 8004378:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800437a:	2300      	movs	r3, #0
 800437c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800437e:	2380      	movs	r3, #128	@ 0x80
 8004380:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004382:	23e1      	movs	r3, #225	@ 0xe1
 8004384:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004386:	2300      	movs	r3, #0
 8004388:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800438a:	2300      	movs	r3, #0
 800438c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800438e:	2300      	movs	r3, #0
 8004390:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004392:	4a3d      	ldr	r2, [pc, #244]	@ (8004488 <low_level_init+0x120>)
 8004394:	f107 0308 	add.w	r3, r7, #8
 8004398:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800439a:	4b3b      	ldr	r3, [pc, #236]	@ (8004488 <low_level_init+0x120>)
 800439c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80043a0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80043a2:	4b39      	ldr	r3, [pc, #228]	@ (8004488 <low_level_init+0x120>)
 80043a4:	4a3a      	ldr	r2, [pc, #232]	@ (8004490 <low_level_init+0x128>)
 80043a6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80043a8:	4b37      	ldr	r3, [pc, #220]	@ (8004488 <low_level_init+0x120>)
 80043aa:	4a3a      	ldr	r2, [pc, #232]	@ (8004494 <low_level_init+0x12c>)
 80043ac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80043ae:	4b36      	ldr	r3, [pc, #216]	@ (8004488 <low_level_init+0x120>)
 80043b0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80043b4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80043b6:	4834      	ldr	r0, [pc, #208]	@ (8004488 <low_level_init+0x120>)
 80043b8:	f7fc feb8 	bl	800112c <HAL_ETH_Init>
 80043bc:	4603      	mov	r3, r0
 80043be:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80043c0:	2238      	movs	r2, #56	@ 0x38
 80043c2:	2100      	movs	r1, #0
 80043c4:	4834      	ldr	r0, [pc, #208]	@ (8004498 <low_level_init+0x130>)
 80043c6:	f00a f970 	bl	800e6aa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80043ca:	4b33      	ldr	r3, [pc, #204]	@ (8004498 <low_level_init+0x130>)
 80043cc:	2221      	movs	r2, #33	@ 0x21
 80043ce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80043d0:	4b31      	ldr	r3, [pc, #196]	@ (8004498 <low_level_init+0x130>)
 80043d2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80043d6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80043d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004498 <low_level_init+0x130>)
 80043da:	2200      	movs	r2, #0
 80043dc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80043de:	482f      	ldr	r0, [pc, #188]	@ (800449c <low_level_init+0x134>)
 80043e0:	f003 f97c 	bl	80076dc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2206      	movs	r2, #6
 80043e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80043ec:	4b26      	ldr	r3, [pc, #152]	@ (8004488 <low_level_init+0x120>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	781a      	ldrb	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80043f8:	4b23      	ldr	r3, [pc, #140]	@ (8004488 <low_level_init+0x120>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	785a      	ldrb	r2, [r3, #1]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004404:	4b20      	ldr	r3, [pc, #128]	@ (8004488 <low_level_init+0x120>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	789a      	ldrb	r2, [r3, #2]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004410:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <low_level_init+0x120>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	78da      	ldrb	r2, [r3, #3]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800441c:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <low_level_init+0x120>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	791a      	ldrb	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004428:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <low_level_init+0x120>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	795a      	ldrb	r2, [r3, #5]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800443a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004442:	f043 030a 	orr.w	r3, r3, #10
 8004446:	b2da      	uxtb	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800444e:	4914      	ldr	r1, [pc, #80]	@ (80044a0 <low_level_init+0x138>)
 8004450:	4814      	ldr	r0, [pc, #80]	@ (80044a4 <low_level_init+0x13c>)
 8004452:	f7fc fb86 	bl	8000b62 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004456:	4813      	ldr	r0, [pc, #76]	@ (80044a4 <low_level_init+0x13c>)
 8004458:	f7fc fbb5 	bl	8000bc6 <LAN8742_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d006      	beq.n	8004470 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f003 fd06 	bl	8007e74 <netif_set_link_down>
    netif_set_down(netif);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f003 fc9d 	bl	8007da8 <netif_set_down>
 800446e:	e008      	b.n	8004482 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d103      	bne.n	800447e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f9ce 	bl	8004818 <ethernet_link_check_state>
 800447c:	e001      	b.n	8004482 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800447e:	f7fc f99f 	bl	80007c0 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20004c4c 	.word	0x20004c4c
 800448c:	40028000 	.word	0x40028000
 8004490:	20000128 	.word	0x20000128
 8004494:	20000088 	.word	0x20000088
 8004498:	20004cfc 	.word	0x20004cfc
 800449c:	08012168 	.word	0x08012168
 80044a0:	2000000c 	.word	0x2000000c
 80044a4:	20004d34 	.word	0x20004d34

080044a8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b092      	sub	sp, #72	@ 0x48
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80044c0:	f107 030c 	add.w	r3, r7, #12
 80044c4:	2230      	movs	r2, #48	@ 0x30
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f00a f8ee 	bl	800e6aa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80044ce:	f107 030c 	add.w	r3, r7, #12
 80044d2:	2230      	movs	r2, #48	@ 0x30
 80044d4:	2100      	movs	r1, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f00a f8e7 	bl	800e6aa <memset>

  for(q = p; q != NULL; q = q->next)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	643b      	str	r3, [r7, #64]	@ 0x40
 80044e0:	e045      	b.n	800456e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80044e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d902      	bls.n	80044ee <low_level_output+0x46>
      return ERR_IF;
 80044e8:	f06f 030b 	mvn.w	r3, #11
 80044ec:	e055      	b.n	800459a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80044ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	3348      	adds	r3, #72	@ 0x48
 80044fe:	443b      	add	r3, r7
 8004500:	3b3c      	subs	r3, #60	@ 0x3c
 8004502:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004506:	895b      	ldrh	r3, [r3, #10]
 8004508:	4619      	mov	r1, r3
 800450a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800450c:	4613      	mov	r3, r2
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	3348      	adds	r3, #72	@ 0x48
 8004516:	443b      	add	r3, r7
 8004518:	3b38      	subs	r3, #56	@ 0x38
 800451a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800451c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800451e:	2b00      	cmp	r3, #0
 8004520:	d011      	beq.n	8004546 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004524:	1e5a      	subs	r2, r3, #1
 8004526:	f107 000c 	add.w	r0, r7, #12
 800452a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800452c:	460b      	mov	r3, r1
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	440b      	add	r3, r1
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	18c1      	adds	r1, r0, r3
 8004536:	4613      	mov	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	3348      	adds	r3, #72	@ 0x48
 8004540:	443b      	add	r3, r7
 8004542:	3b34      	subs	r3, #52	@ 0x34
 8004544:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800454e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004550:	4613      	mov	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	3348      	adds	r3, #72	@ 0x48
 800455a:	443b      	add	r3, r7
 800455c:	3b34      	subs	r3, #52	@ 0x34
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004564:	3301      	adds	r3, #1
 8004566:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	643b      	str	r3, [r7, #64]	@ 0x40
 800456e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1b6      	bne.n	80044e2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	891b      	ldrh	r3, [r3, #8]
 8004578:	461a      	mov	r2, r3
 800457a:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <low_level_output+0xfc>)
 800457c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800457e:	4a09      	ldr	r2, [pc, #36]	@ (80045a4 <low_level_output+0xfc>)
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004586:	4a07      	ldr	r2, [pc, #28]	@ (80045a4 <low_level_output+0xfc>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800458c:	2214      	movs	r2, #20
 800458e:	4905      	ldr	r1, [pc, #20]	@ (80045a4 <low_level_output+0xfc>)
 8004590:	4805      	ldr	r0, [pc, #20]	@ (80045a8 <low_level_output+0x100>)
 8004592:	f7fc ff1d 	bl	80013d0 <HAL_ETH_Transmit>

  return errval;
 8004596:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800459a:	4618      	mov	r0, r3
 800459c:	3748      	adds	r7, #72	@ 0x48
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20004cfc 	.word	0x20004cfc
 80045a8:	20004c4c 	.word	0x20004c4c

080045ac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <ethernetif_init+0x1c>
 80045ba:	4b0e      	ldr	r3, [pc, #56]	@ (80045f4 <ethernetif_init+0x48>)
 80045bc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80045c0:	490d      	ldr	r1, [pc, #52]	@ (80045f8 <ethernetif_init+0x4c>)
 80045c2:	480e      	ldr	r0, [pc, #56]	@ (80045fc <ethernetif_init+0x50>)
 80045c4:	f00a f80c 	bl	800e5e0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2273      	movs	r2, #115	@ 0x73
 80045cc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2274      	movs	r2, #116	@ 0x74
 80045d4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <ethernetif_init+0x54>)
 80045dc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a08      	ldr	r2, [pc, #32]	@ (8004604 <ethernetif_init+0x58>)
 80045e2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff febf 	bl	8004368 <low_level_init>

  return ERR_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	0800f408 	.word	0x0800f408
 80045f8:	0800f424 	.word	0x0800f424
 80045fc:	0800f434 	.word	0x0800f434
 8004600:	08005289 	.word	0x08005289
 8004604:	080044a9 	.word	0x080044a9

08004608 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	4807      	ldr	r0, [pc, #28]	@ (8004634 <pbuf_free_custom+0x2c>)
 8004618:	f003 f942 	bl	80078a0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800461c:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <pbuf_free_custom+0x30>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d102      	bne.n	800462a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004624:	4b04      	ldr	r3, [pc, #16]	@ (8004638 <pbuf_free_custom+0x30>)
 8004626:	2200      	movs	r2, #0
 8004628:	701a      	strb	r2, [r3, #0]
  }
}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	08012168 	.word	0x08012168
 8004638:	20004c48 	.word	0x20004c48

0800463c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004640:	f7fc fbe6 	bl	8000e10 <HAL_GetTick>
 8004644:	4603      	mov	r3, r0
}
 8004646:	4618      	mov	r0, r3
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08e      	sub	sp, #56	@ 0x38
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3f      	ldr	r2, [pc, #252]	@ (8004768 <HAL_ETH_MspInit+0x11c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d178      	bne.n	8004760 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800466e:	4b3f      	ldr	r3, [pc, #252]	@ (800476c <HAL_ETH_MspInit+0x120>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	4a3e      	ldr	r2, [pc, #248]	@ (800476c <HAL_ETH_MspInit+0x120>)
 8004674:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004678:	6313      	str	r3, [r2, #48]	@ 0x30
 800467a:	4b3c      	ldr	r3, [pc, #240]	@ (800476c <HAL_ETH_MspInit+0x120>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004682:	623b      	str	r3, [r7, #32]
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	4b39      	ldr	r3, [pc, #228]	@ (800476c <HAL_ETH_MspInit+0x120>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468a:	4a38      	ldr	r2, [pc, #224]	@ (800476c <HAL_ETH_MspInit+0x120>)
 800468c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004690:	6313      	str	r3, [r2, #48]	@ 0x30
 8004692:	4b36      	ldr	r3, [pc, #216]	@ (800476c <HAL_ETH_MspInit+0x120>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4b33      	ldr	r3, [pc, #204]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a2:	4a32      	ldr	r2, [pc, #200]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80046aa:	4b30      	ldr	r3, [pc, #192]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80046b6:	4b2d      	ldr	r3, [pc, #180]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	4a2c      	ldr	r2, [pc, #176]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046c2:	4b2a      	ldr	r3, [pc, #168]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ce:	4b27      	ldr	r3, [pc, #156]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	4a26      	ldr	r2, [pc, #152]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046d4:	f043 0304 	orr.w	r3, r3, #4
 80046d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80046da:	4b24      	ldr	r3, [pc, #144]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e6:	4b21      	ldr	r3, [pc, #132]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	4a20      	ldr	r2, [pc, #128]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046f2:	4b1e      	ldr	r3, [pc, #120]	@ (800476c <HAL_ETH_MspInit+0x120>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 80046fe:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8004702:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004704:	2302      	movs	r3, #2
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470c:	2303      	movs	r3, #3
 800470e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004710:	230b      	movs	r3, #11
 8004712:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004718:	4619      	mov	r1, r3
 800471a:	4815      	ldr	r0, [pc, #84]	@ (8004770 <HAL_ETH_MspInit+0x124>)
 800471c:	f7fd fd78 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004720:	2332      	movs	r3, #50	@ 0x32
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004724:	2302      	movs	r3, #2
 8004726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004728:	2300      	movs	r3, #0
 800472a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800472c:	2303      	movs	r3, #3
 800472e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004730:	230b      	movs	r3, #11
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004738:	4619      	mov	r1, r3
 800473a:	480e      	ldr	r0, [pc, #56]	@ (8004774 <HAL_ETH_MspInit+0x128>)
 800473c:	f7fd fd68 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004740:	2386      	movs	r3, #134	@ 0x86
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004744:	2302      	movs	r3, #2
 8004746:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	2300      	movs	r3, #0
 800474a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800474c:	2303      	movs	r3, #3
 800474e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004750:	230b      	movs	r3, #11
 8004752:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004758:	4619      	mov	r1, r3
 800475a:	4807      	ldr	r0, [pc, #28]	@ (8004778 <HAL_ETH_MspInit+0x12c>)
 800475c:	f7fd fd58 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004760:	bf00      	nop
 8004762:	3738      	adds	r7, #56	@ 0x38
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40028000 	.word	0x40028000
 800476c:	40023800 	.word	0x40023800
 8004770:	40021800 	.word	0x40021800
 8004774:	40020800 	.word	0x40020800
 8004778:	40020000 	.word	0x40020000

0800477c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004780:	4802      	ldr	r0, [pc, #8]	@ (800478c <ETH_PHY_IO_Init+0x10>)
 8004782:	f7fd f8e3 	bl	800194c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20004c4c 	.word	0x20004c4c

08004790 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return 0;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	68f9      	ldr	r1, [r7, #12]
 80047b2:	4807      	ldr	r0, [pc, #28]	@ (80047d0 <ETH_PHY_IO_ReadReg+0x30>)
 80047b4:	f7fc ff24 	bl	8001600 <HAL_ETH_ReadPHYRegister>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80047be:	f04f 33ff 	mov.w	r3, #4294967295
 80047c2:	e000      	b.n	80047c6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20004c4c 	.word	0x20004c4c

080047d4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	68f9      	ldr	r1, [r7, #12]
 80047e6:	4807      	ldr	r0, [pc, #28]	@ (8004804 <ETH_PHY_IO_WriteReg+0x30>)
 80047e8:	f7fc ff55 	bl	8001696 <HAL_ETH_WritePHYRegister>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295
 80047f6:	e000      	b.n	80047fa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20004c4c 	.word	0x20004c4c

08004808 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800480c:	f7fc fb00 	bl	8000e10 <HAL_GetTick>
 8004810:	4603      	mov	r3, r0
}
 8004812:	4618      	mov	r0, r3
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b0a0      	sub	sp, #128	@ 0x80
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004820:	f107 030c 	add.w	r3, r7, #12
 8004824:	2264      	movs	r2, #100	@ 0x64
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f009 ff3e 	bl	800e6aa <memset>
  int32_t PHYLinkState = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004836:	2300      	movs	r3, #0
 8004838:	67bb      	str	r3, [r7, #120]	@ 0x78
 800483a:	2300      	movs	r3, #0
 800483c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800483e:	483a      	ldr	r0, [pc, #232]	@ (8004928 <ethernet_link_check_state+0x110>)
 8004840:	f7fc fa0e 	bl	8000c60 <LAN8742_GetLinkState>
 8004844:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00c      	beq.n	8004872 <ethernet_link_check_state+0x5a>
 8004858:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800485a:	2b01      	cmp	r3, #1
 800485c:	dc09      	bgt.n	8004872 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800485e:	4833      	ldr	r0, [pc, #204]	@ (800492c <ethernet_link_check_state+0x114>)
 8004860:	f7fc fd5d 	bl	800131e <HAL_ETH_Stop>
    netif_set_down(netif);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f003 fa9f 	bl	8007da8 <netif_set_down>
    netif_set_link_down(netif);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f003 fb02 	bl	8007e74 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004870:	e055      	b.n	800491e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d14e      	bne.n	800491e <ethernet_link_check_state+0x106>
 8004880:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004882:	2b01      	cmp	r3, #1
 8004884:	dd4b      	ble.n	800491e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004888:	3b02      	subs	r3, #2
 800488a:	2b03      	cmp	r3, #3
 800488c:	d82a      	bhi.n	80048e4 <ethernet_link_check_state+0xcc>
 800488e:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <ethernet_link_check_state+0x7c>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048a5 	.word	0x080048a5
 8004898:	080048b7 	.word	0x080048b7
 800489c:	080048c7 	.word	0x080048c7
 80048a0:	080048d7 	.word	0x080048d7
      duplex = ETH_FULLDUPLEX_MODE;
 80048a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048a8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80048aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048ae:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80048b0:	2301      	movs	r3, #1
 80048b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80048b4:	e017      	b.n	80048e6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80048ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048be:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80048c0:	2301      	movs	r3, #1
 80048c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80048c4:	e00f      	b.n	80048e6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80048c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048ca:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80048cc:	2300      	movs	r3, #0
 80048ce:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80048d0:	2301      	movs	r3, #1
 80048d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80048d4:	e007      	b.n	80048e6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80048da:	2300      	movs	r3, #0
 80048dc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80048de:	2301      	movs	r3, #1
 80048e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80048e2:	e000      	b.n	80048e6 <ethernet_link_check_state+0xce>
      break;
 80048e4:	bf00      	nop
    if(linkchanged)
 80048e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d018      	beq.n	800491e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	4619      	mov	r1, r3
 80048f2:	480e      	ldr	r0, [pc, #56]	@ (800492c <ethernet_link_check_state+0x114>)
 80048f4:	f7fc ff18 	bl	8001728 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80048f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048fa:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80048fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048fe:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004900:	f107 030c 	add.w	r3, r7, #12
 8004904:	4619      	mov	r1, r3
 8004906:	4809      	ldr	r0, [pc, #36]	@ (800492c <ethernet_link_check_state+0x114>)
 8004908:	f7fd f805 	bl	8001916 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800490c:	4807      	ldr	r0, [pc, #28]	@ (800492c <ethernet_link_check_state+0x114>)
 800490e:	f7fc fca7 	bl	8001260 <HAL_ETH_Start>
      netif_set_up(netif);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f003 f9dc 	bl	8007cd0 <netif_set_up>
      netif_set_link_up(netif);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f003 fa77 	bl	8007e0c <netif_set_link_up>
}
 800491e:	bf00      	nop
 8004920:	3780      	adds	r7, #128	@ 0x80
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20004d34 	.word	0x20004d34
 800492c:	20004c4c 	.word	0x20004c4c

08004930 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af02      	add	r7, sp, #8
 8004936:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004938:	4812      	ldr	r0, [pc, #72]	@ (8004984 <HAL_ETH_RxAllocateCallback+0x54>)
 800493a:	f002 ff43 	bl	80077c4 <memp_malloc_pool>
 800493e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d014      	beq.n	8004970 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f103 0220 	add.w	r2, r3, #32
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a0d      	ldr	r2, [pc, #52]	@ (8004988 <HAL_ETH_RxAllocateCallback+0x58>)
 8004954:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800495e:	9201      	str	r2, [sp, #4]
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2241      	movs	r2, #65	@ 0x41
 8004966:	2100      	movs	r1, #0
 8004968:	2000      	movs	r0, #0
 800496a:	f003 fc5d 	bl	8008228 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800496e:	e005      	b.n	800497c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004970:	4b06      	ldr	r3, [pc, #24]	@ (800498c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	08012168 	.word	0x08012168
 8004988:	08004609 	.word	0x08004609
 800498c:	20004c48 	.word	0x20004c48

08004990 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800499a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	b21a      	sxth	r2, r3
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	b21b      	sxth	r3, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b21b      	sxth	r3, r3
 80049ae:	b29b      	uxth	r3, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	061a      	lsls	r2, r3, #24
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	0a1b      	lsrs	r3, r3, #8
 80049d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	0e1b      	lsrs	r3, r3, #24
 80049e0:	4313      	orrs	r3, r2
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80049f8:	4915      	ldr	r1, [pc, #84]	@ (8004a50 <etharp_free_entry+0x60>)
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	440b      	add	r3, r1
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d013      	beq.n	8004a34 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8004a0c:	4910      	ldr	r1, [pc, #64]	@ (8004a50 <etharp_free_entry+0x60>)
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	440b      	add	r3, r1
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f003 fdbd 	bl	800859c <pbuf_free>
    arp_table[i].q = NULL;
 8004a22:	490b      	ldr	r1, [pc, #44]	@ (8004a50 <etharp_free_entry+0x60>)
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	440b      	add	r3, r1
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004a34:	4906      	ldr	r1, [pc, #24]	@ (8004a50 <etharp_free_entry+0x60>)
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	440b      	add	r3, r1
 8004a42:	3314      	adds	r3, #20
 8004a44:	2200      	movs	r2, #0
 8004a46:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20004d54 	.word	0x20004d54

08004a54 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	e096      	b.n	8004b8e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8004a60:	494f      	ldr	r1, [pc, #316]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4413      	add	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	440b      	add	r3, r1
 8004a6e:	3314      	adds	r3, #20
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 8086 	beq.w	8004b88 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8004a7c:	4948      	ldr	r1, [pc, #288]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	440b      	add	r3, r1
 8004a8a:	3312      	adds	r3, #18
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	b298      	uxth	r0, r3
 8004a92:	4943      	ldr	r1, [pc, #268]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3312      	adds	r3, #18
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004aa6:	493e      	ldr	r1, [pc, #248]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	4413      	add	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3312      	adds	r3, #18
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8004abc:	d215      	bcs.n	8004aea <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004abe:	4938      	ldr	r1, [pc, #224]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	4413      	add	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	440b      	add	r3, r1
 8004acc:	3314      	adds	r3, #20
 8004ace:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d10e      	bne.n	8004af2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8004ad4:	4932      	ldr	r1, [pc, #200]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4413      	add	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	440b      	add	r3, r1
 8004ae2:	3312      	adds	r3, #18
 8004ae4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d903      	bls.n	8004af2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ff80 	bl	80049f0 <etharp_free_entry>
 8004af0:	e04a      	b.n	8004b88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8004af2:	492b      	ldr	r1, [pc, #172]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	440b      	add	r3, r1
 8004b00:	3314      	adds	r3, #20
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d10a      	bne.n	8004b1e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004b08:	4925      	ldr	r1, [pc, #148]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	440b      	add	r3, r1
 8004b16:	3314      	adds	r3, #20
 8004b18:	2204      	movs	r2, #4
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e034      	b.n	8004b88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8004b1e:	4920      	ldr	r1, [pc, #128]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4413      	add	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3314      	adds	r3, #20
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d10a      	bne.n	8004b4a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004b34:	491a      	ldr	r1, [pc, #104]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	440b      	add	r3, r1
 8004b42:	3314      	adds	r3, #20
 8004b44:	2202      	movs	r2, #2
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e01e      	b.n	8004b88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8004b4a:	4915      	ldr	r1, [pc, #84]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	440b      	add	r3, r1
 8004b58:	3314      	adds	r3, #20
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d113      	bne.n	8004b88 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8004b60:	490f      	ldr	r1, [pc, #60]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3308      	adds	r3, #8
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	4413      	add	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4a08      	ldr	r2, [pc, #32]	@ (8004ba0 <etharp_tmr+0x14c>)
 8004b7e:	4413      	add	r3, r2
 8004b80:	3304      	adds	r3, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	f000 fe6e 	bl	8005864 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	607b      	str	r3, [r7, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b09      	cmp	r3, #9
 8004b92:	f77f af65 	ble.w	8004a60 <etharp_tmr+0xc>
      }
    }
  }
}
 8004b96:	bf00      	nop
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20004d54 	.word	0x20004d54

08004ba4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	@ 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	460b      	mov	r3, r1
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8004bb2:	230a      	movs	r3, #10
 8004bb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004bb6:	230a      	movs	r3, #10
 8004bb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8004bba:	230a      	movs	r3, #10
 8004bbc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8004bc2:	230a      	movs	r3, #10
 8004bc4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	83bb      	strh	r3, [r7, #28]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	837b      	strh	r3, [r7, #26]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	843b      	strh	r3, [r7, #32]
 8004bd6:	e0ae      	b.n	8004d36 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8004bd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004bdc:	49a6      	ldr	r1, [pc, #664]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004bde:	4613      	mov	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	440b      	add	r3, r1
 8004be8:	3314      	adds	r3, #20
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004bee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004bf2:	2b0a      	cmp	r3, #10
 8004bf4:	d105      	bne.n	8004c02 <etharp_find_entry+0x5e>
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8004bfc:	8c3b      	ldrh	r3, [r7, #32]
 8004bfe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004c00:	e095      	b.n	8004d2e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8092 	beq.w	8004d2e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d009      	beq.n	8004c24 <etharp_find_entry+0x80>
 8004c10:	7dfb      	ldrb	r3, [r7, #23]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d806      	bhi.n	8004c24 <etharp_find_entry+0x80>
 8004c16:	4b99      	ldr	r3, [pc, #612]	@ (8004e7c <etharp_find_entry+0x2d8>)
 8004c18:	f240 1223 	movw	r2, #291	@ 0x123
 8004c1c:	4998      	ldr	r1, [pc, #608]	@ (8004e80 <etharp_find_entry+0x2dc>)
 8004c1e:	4899      	ldr	r0, [pc, #612]	@ (8004e84 <etharp_find_entry+0x2e0>)
 8004c20:	f009 fcde 	bl	800e5e0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d020      	beq.n	8004c6c <etharp_find_entry+0xc8>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004c32:	4891      	ldr	r0, [pc, #580]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004c34:	4613      	mov	r3, r2
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	4413      	add	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4403      	add	r3, r0
 8004c3e:	3304      	adds	r3, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4299      	cmp	r1, r3
 8004c44:	d112      	bne.n	8004c6c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00c      	beq.n	8004c66 <etharp_find_entry+0xc2>
 8004c4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004c50:	4989      	ldr	r1, [pc, #548]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004c52:	4613      	mov	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d102      	bne.n	8004c6c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8004c66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004c6a:	e100      	b.n	8004e6e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d140      	bne.n	8004cf4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8004c72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004c76:	4980      	ldr	r1, [pc, #512]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004c78:	4613      	mov	r3, r2
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	4413      	add	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	440b      	add	r3, r1
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01a      	beq.n	8004cbe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8004c88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004c8c:	497a      	ldr	r1, [pc, #488]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	440b      	add	r3, r1
 8004c98:	3312      	adds	r3, #18
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	8bba      	ldrh	r2, [r7, #28]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d845      	bhi.n	8004d2e <etharp_find_entry+0x18a>
            old_queue = i;
 8004ca2:	8c3b      	ldrh	r3, [r7, #32]
 8004ca4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8004ca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004caa:	4973      	ldr	r1, [pc, #460]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004cac:	4613      	mov	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3312      	adds	r3, #18
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	83bb      	strh	r3, [r7, #28]
 8004cbc:	e037      	b.n	8004d2e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8004cbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004cc2:	496d      	ldr	r1, [pc, #436]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	440b      	add	r3, r1
 8004cce:	3312      	adds	r3, #18
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	8b7a      	ldrh	r2, [r7, #26]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d82a      	bhi.n	8004d2e <etharp_find_entry+0x18a>
            old_pending = i;
 8004cd8:	8c3b      	ldrh	r3, [r7, #32]
 8004cda:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8004cdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004ce0:	4965      	ldr	r1, [pc, #404]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	4413      	add	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	440b      	add	r3, r1
 8004cec:	3312      	adds	r3, #18
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	837b      	strh	r3, [r7, #26]
 8004cf2:	e01c      	b.n	8004d2e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8004cf4:	7dfb      	ldrb	r3, [r7, #23]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d919      	bls.n	8004d2e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8004cfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004cfe:	495e      	ldr	r1, [pc, #376]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004d00:	4613      	mov	r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	4413      	add	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	440b      	add	r3, r1
 8004d0a:	3312      	adds	r3, #18
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	8b3a      	ldrh	r2, [r7, #24]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d80c      	bhi.n	8004d2e <etharp_find_entry+0x18a>
            old_stable = i;
 8004d14:	8c3b      	ldrh	r3, [r7, #32]
 8004d16:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8004d18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004d1c:	4956      	ldr	r1, [pc, #344]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	440b      	add	r3, r1
 8004d28:	3312      	adds	r3, #18
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004d2e:	8c3b      	ldrh	r3, [r7, #32]
 8004d30:	3301      	adds	r3, #1
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	843b      	strh	r3, [r7, #32]
 8004d36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	f77f af4c 	ble.w	8004bd8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004d40:	7afb      	ldrb	r3, [r7, #11]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <etharp_find_entry+0x1b8>
 8004d4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004d4e:	2b0a      	cmp	r3, #10
 8004d50:	d107      	bne.n	8004d62 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8004d52:	7afb      	ldrb	r3, [r7, #11]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8004d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d60:	e085      	b.n	8004e6e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8004d62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004d66:	2b09      	cmp	r3, #9
 8004d68:	dc02      	bgt.n	8004d70 <etharp_find_entry+0x1cc>
    i = empty;
 8004d6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d6c:	843b      	strh	r3, [r7, #32]
 8004d6e:	e039      	b.n	8004de4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8004d70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004d74:	2b09      	cmp	r3, #9
 8004d76:	dc14      	bgt.n	8004da2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8004d78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d7a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8004d7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004d80:	493d      	ldr	r1, [pc, #244]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004d82:	4613      	mov	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	440b      	add	r3, r1
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d018      	beq.n	8004dc4 <etharp_find_entry+0x220>
 8004d92:	4b3a      	ldr	r3, [pc, #232]	@ (8004e7c <etharp_find_entry+0x2d8>)
 8004d94:	f240 126d 	movw	r2, #365	@ 0x16d
 8004d98:	493b      	ldr	r1, [pc, #236]	@ (8004e88 <etharp_find_entry+0x2e4>)
 8004d9a:	483a      	ldr	r0, [pc, #232]	@ (8004e84 <etharp_find_entry+0x2e0>)
 8004d9c:	f009 fc20 	bl	800e5e0 <iprintf>
 8004da0:	e010      	b.n	8004dc4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004da2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004da6:	2b09      	cmp	r3, #9
 8004da8:	dc02      	bgt.n	8004db0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8004daa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004dac:	843b      	strh	r3, [r7, #32]
 8004dae:	e009      	b.n	8004dc4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8004db0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004db4:	2b09      	cmp	r3, #9
 8004db6:	dc02      	bgt.n	8004dbe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8004db8:	8bfb      	ldrh	r3, [r7, #30]
 8004dba:	843b      	strh	r3, [r7, #32]
 8004dbc:	e002      	b.n	8004dc4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8004dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc2:	e054      	b.n	8004e6e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8004dc4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004dc8:	2b09      	cmp	r3, #9
 8004dca:	dd06      	ble.n	8004dda <etharp_find_entry+0x236>
 8004dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e7c <etharp_find_entry+0x2d8>)
 8004dce:	f240 127f 	movw	r2, #383	@ 0x17f
 8004dd2:	492e      	ldr	r1, [pc, #184]	@ (8004e8c <etharp_find_entry+0x2e8>)
 8004dd4:	482b      	ldr	r0, [pc, #172]	@ (8004e84 <etharp_find_entry+0x2e0>)
 8004dd6:	f009 fc03 	bl	800e5e0 <iprintf>
    etharp_free_entry(i);
 8004dda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fe06 	bl	80049f0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8004de4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004de8:	2b09      	cmp	r3, #9
 8004dea:	dd06      	ble.n	8004dfa <etharp_find_entry+0x256>
 8004dec:	4b23      	ldr	r3, [pc, #140]	@ (8004e7c <etharp_find_entry+0x2d8>)
 8004dee:	f240 1283 	movw	r2, #387	@ 0x183
 8004df2:	4926      	ldr	r1, [pc, #152]	@ (8004e8c <etharp_find_entry+0x2e8>)
 8004df4:	4823      	ldr	r0, [pc, #140]	@ (8004e84 <etharp_find_entry+0x2e0>)
 8004df6:	f009 fbf3 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8004dfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004dfe:	491e      	ldr	r1, [pc, #120]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	440b      	add	r3, r1
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d006      	beq.n	8004e20 <etharp_find_entry+0x27c>
 8004e12:	4b1a      	ldr	r3, [pc, #104]	@ (8004e7c <etharp_find_entry+0x2d8>)
 8004e14:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8004e18:	491d      	ldr	r1, [pc, #116]	@ (8004e90 <etharp_find_entry+0x2ec>)
 8004e1a:	481a      	ldr	r0, [pc, #104]	@ (8004e84 <etharp_find_entry+0x2e0>)
 8004e1c:	f009 fbe0 	bl	800e5e0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00b      	beq.n	8004e3e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8004e26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	4812      	ldr	r0, [pc, #72]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004e30:	4613      	mov	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4413      	add	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4403      	add	r3, r0
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8004e3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004e42:	490d      	ldr	r1, [pc, #52]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004e44:	4613      	mov	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	4413      	add	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	440b      	add	r3, r1
 8004e4e:	3312      	adds	r3, #18
 8004e50:	2200      	movs	r2, #0
 8004e52:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8004e54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004e58:	4907      	ldr	r1, [pc, #28]	@ (8004e78 <etharp_find_entry+0x2d4>)
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	4413      	add	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	440b      	add	r3, r1
 8004e64:	3308      	adds	r3, #8
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8004e6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3728      	adds	r7, #40	@ 0x28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20004d54 	.word	0x20004d54
 8004e7c:	0800f45c 	.word	0x0800f45c
 8004e80:	0800f4cc 	.word	0x0800f4cc
 8004e84:	0800f50c 	.word	0x0800f50c
 8004e88:	0800f534 	.word	0x0800f534
 8004e8c:	0800f54c 	.word	0x0800f54c
 8004e90:	0800f560 	.word	0x0800f560

08004e94 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004ea8:	2b06      	cmp	r3, #6
 8004eaa:	d006      	beq.n	8004eba <etharp_update_arp_entry+0x26>
 8004eac:	4b48      	ldr	r3, [pc, #288]	@ (8004fd0 <etharp_update_arp_entry+0x13c>)
 8004eae:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8004eb2:	4948      	ldr	r1, [pc, #288]	@ (8004fd4 <etharp_update_arp_entry+0x140>)
 8004eb4:	4848      	ldr	r0, [pc, #288]	@ (8004fd8 <etharp_update_arp_entry+0x144>)
 8004eb6:	f009 fb93 	bl	800e5e0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d012      	beq.n	8004ee6 <etharp_update_arp_entry+0x52>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00e      	beq.n	8004ee6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68f9      	ldr	r1, [r7, #12]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f001 f9ea 	bl	80062a8 <ip4_addr_isbroadcast_u32>
 8004ed4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d105      	bne.n	8004ee6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004ee2:	2be0      	cmp	r3, #224	@ 0xe0
 8004ee4:	d102      	bne.n	8004eec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8004ee6:	f06f 030f 	mvn.w	r3, #15
 8004eea:	e06c      	b.n	8004fc6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	68b8      	ldr	r0, [r7, #8]
 8004ef4:	f7ff fe56 	bl	8004ba4 <etharp_find_entry>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8004efc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	da02      	bge.n	8004f0a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8004f04:	8afb      	ldrh	r3, [r7, #22]
 8004f06:	b25b      	sxtb	r3, r3
 8004f08:	e05d      	b.n	8004fc6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8004f0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004f0e:	4933      	ldr	r1, [pc, #204]	@ (8004fdc <etharp_update_arp_entry+0x148>)
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	440b      	add	r3, r1
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8004f20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004f24:	492d      	ldr	r1, [pc, #180]	@ (8004fdc <etharp_update_arp_entry+0x148>)
 8004f26:	4613      	mov	r3, r2
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	440b      	add	r3, r1
 8004f30:	3308      	adds	r3, #8
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8004f36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	4413      	add	r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	3308      	adds	r3, #8
 8004f44:	4a25      	ldr	r2, [pc, #148]	@ (8004fdc <etharp_update_arp_entry+0x148>)
 8004f46:	4413      	add	r3, r2
 8004f48:	3304      	adds	r3, #4
 8004f4a:	2206      	movs	r2, #6
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f009 fc21 	bl	800e796 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8004f54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004f58:	4920      	ldr	r1, [pc, #128]	@ (8004fdc <etharp_update_arp_entry+0x148>)
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	4413      	add	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	440b      	add	r3, r1
 8004f64:	3312      	adds	r3, #18
 8004f66:	2200      	movs	r2, #0
 8004f68:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8004f6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004f6e:	491b      	ldr	r1, [pc, #108]	@ (8004fdc <etharp_update_arp_entry+0x148>)
 8004f70:	4613      	mov	r3, r2
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	440b      	add	r3, r1
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d021      	beq.n	8004fc4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8004f80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004f84:	4915      	ldr	r1, [pc, #84]	@ (8004fdc <etharp_update_arp_entry+0x148>)
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8004f94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004f98:	4910      	ldr	r1, [pc, #64]	@ (8004fdc <etharp_update_arp_entry+0x148>)
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	440b      	add	r3, r1
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8004fae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6939      	ldr	r1, [r7, #16]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 fcf3 	bl	80059a4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8004fbe:	6938      	ldr	r0, [r7, #16]
 8004fc0:	f003 faec 	bl	800859c <pbuf_free>
  }
  return ERR_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	0800f45c 	.word	0x0800f45c
 8004fd4:	0800f58c 	.word	0x0800f58c
 8004fd8:	0800f50c 	.word	0x0800f50c
 8004fdc:	20004d54 	.word	0x20004d54

08004fe0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e01e      	b.n	800502c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8004fee:	4913      	ldr	r1, [pc, #76]	@ (800503c <etharp_cleanup_netif+0x5c>)
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005002:	7afb      	ldrb	r3, [r7, #11]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00e      	beq.n	8005026 <etharp_cleanup_netif+0x46>
 8005008:	490c      	ldr	r1, [pc, #48]	@ (800503c <etharp_cleanup_netif+0x5c>)
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	440b      	add	r3, r1
 8005016:	3308      	adds	r3, #8
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d102      	bne.n	8005026 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff fce5 	bl	80049f0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b09      	cmp	r3, #9
 8005030:	dddd      	ble.n	8004fee <etharp_cleanup_netif+0xe>
    }
  }
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20004d54 	.word	0x20004d54

08005040 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8005040:	b5b0      	push	{r4, r5, r7, lr}
 8005042:	b08a      	sub	sp, #40	@ 0x28
 8005044:	af04      	add	r7, sp, #16
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d107      	bne.n	8005060 <etharp_input+0x20>
 8005050:	4b3d      	ldr	r3, [pc, #244]	@ (8005148 <etharp_input+0x108>)
 8005052:	f240 228a 	movw	r2, #650	@ 0x28a
 8005056:	493d      	ldr	r1, [pc, #244]	@ (800514c <etharp_input+0x10c>)
 8005058:	483d      	ldr	r0, [pc, #244]	@ (8005150 <etharp_input+0x110>)
 800505a:	f009 fac1 	bl	800e5e0 <iprintf>
 800505e:	e06f      	b.n	8005140 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005070:	d10c      	bne.n	800508c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8005076:	2b06      	cmp	r3, #6
 8005078:	d108      	bne.n	800508c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800507e:	2b04      	cmp	r3, #4
 8005080:	d104      	bne.n	800508c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	885b      	ldrh	r3, [r3, #2]
 8005086:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005088:	2b08      	cmp	r3, #8
 800508a:	d003      	beq.n	8005094 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f003 fa85 	bl	800859c <pbuf_free>
    return;
 8005092:	e055      	b.n	8005140 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	330e      	adds	r3, #14
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	3318      	adds	r3, #24
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	3304      	adds	r3, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <etharp_input+0x74>
    for_us = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
 80050b2:	e009      	b.n	80050c8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	3304      	adds	r3, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	bf0c      	ite	eq
 80050c0:	2301      	moveq	r3, #1
 80050c2:	2300      	movne	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f103 0208 	add.w	r2, r3, #8
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <etharp_input+0x98>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <etharp_input+0x9a>
 80050d8:	2302      	movs	r3, #2
 80050da:	f107 010c 	add.w	r1, r7, #12
 80050de:	6838      	ldr	r0, [r7, #0]
 80050e0:	f7ff fed8 	bl	8004e94 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	88db      	ldrh	r3, [r3, #6]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ee:	d003      	beq.n	80050f8 <etharp_input+0xb8>
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f4:	d01e      	beq.n	8005134 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80050f6:	e020      	b.n	800513a <etharp_input+0xfa>
      if (for_us) {
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01c      	beq.n	8005138 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	3208      	adds	r2, #8
        etharp_raw(netif,
 8005118:	2102      	movs	r1, #2
 800511a:	9103      	str	r1, [sp, #12]
 800511c:	f107 010c 	add.w	r1, r7, #12
 8005120:	9102      	str	r1, [sp, #8]
 8005122:	9201      	str	r2, [sp, #4]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	462b      	mov	r3, r5
 8005128:	4622      	mov	r2, r4
 800512a:	4601      	mov	r1, r0
 800512c:	6838      	ldr	r0, [r7, #0]
 800512e:	f000 faeb 	bl	8005708 <etharp_raw>
      break;
 8005132:	e001      	b.n	8005138 <etharp_input+0xf8>
      break;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <etharp_input+0xfa>
      break;
 8005138:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f003 fa2e 	bl	800859c <pbuf_free>
}
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bdb0      	pop	{r4, r5, r7, pc}
 8005146:	bf00      	nop
 8005148:	0800f45c 	.word	0x0800f45c
 800514c:	0800f5e4 	.word	0x0800f5e4
 8005150:	0800f50c 	.word	0x0800f50c

08005154 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	4613      	mov	r3, r2
 8005160:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005162:	79fa      	ldrb	r2, [r7, #7]
 8005164:	4944      	ldr	r1, [pc, #272]	@ (8005278 <etharp_output_to_arp_index+0x124>)
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	3314      	adds	r3, #20
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d806      	bhi.n	8005186 <etharp_output_to_arp_index+0x32>
 8005178:	4b40      	ldr	r3, [pc, #256]	@ (800527c <etharp_output_to_arp_index+0x128>)
 800517a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800517e:	4940      	ldr	r1, [pc, #256]	@ (8005280 <etharp_output_to_arp_index+0x12c>)
 8005180:	4840      	ldr	r0, [pc, #256]	@ (8005284 <etharp_output_to_arp_index+0x130>)
 8005182:	f009 fa2d 	bl	800e5e0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005186:	79fa      	ldrb	r2, [r7, #7]
 8005188:	493b      	ldr	r1, [pc, #236]	@ (8005278 <etharp_output_to_arp_index+0x124>)
 800518a:	4613      	mov	r3, r2
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	4413      	add	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	440b      	add	r3, r1
 8005194:	3314      	adds	r3, #20
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d153      	bne.n	8005244 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800519c:	79fa      	ldrb	r2, [r7, #7]
 800519e:	4936      	ldr	r1, [pc, #216]	@ (8005278 <etharp_output_to_arp_index+0x124>)
 80051a0:	4613      	mov	r3, r2
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	4413      	add	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	440b      	add	r3, r1
 80051aa:	3312      	adds	r3, #18
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80051b2:	d919      	bls.n	80051e8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80051b4:	79fa      	ldrb	r2, [r7, #7]
 80051b6:	4613      	mov	r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	4a2e      	ldr	r2, [pc, #184]	@ (8005278 <etharp_output_to_arp_index+0x124>)
 80051c0:	4413      	add	r3, r2
 80051c2:	3304      	adds	r3, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 fb4c 	bl	8005864 <etharp_request>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d138      	bne.n	8005244 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80051d2:	79fa      	ldrb	r2, [r7, #7]
 80051d4:	4928      	ldr	r1, [pc, #160]	@ (8005278 <etharp_output_to_arp_index+0x124>)
 80051d6:	4613      	mov	r3, r2
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4413      	add	r3, r2
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	440b      	add	r3, r1
 80051e0:	3314      	adds	r3, #20
 80051e2:	2203      	movs	r2, #3
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e02d      	b.n	8005244 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80051e8:	79fa      	ldrb	r2, [r7, #7]
 80051ea:	4923      	ldr	r1, [pc, #140]	@ (8005278 <etharp_output_to_arp_index+0x124>)
 80051ec:	4613      	mov	r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	440b      	add	r3, r1
 80051f6:	3312      	adds	r3, #18
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80051fe:	d321      	bcc.n	8005244 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005200:	79fa      	ldrb	r2, [r7, #7]
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4a1b      	ldr	r2, [pc, #108]	@ (8005278 <etharp_output_to_arp_index+0x124>)
 800520c:	4413      	add	r3, r2
 800520e:	1d19      	adds	r1, r3, #4
 8005210:	79fa      	ldrb	r2, [r7, #7]
 8005212:	4613      	mov	r3, r2
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4413      	add	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	3308      	adds	r3, #8
 800521c:	4a16      	ldr	r2, [pc, #88]	@ (8005278 <etharp_output_to_arp_index+0x124>)
 800521e:	4413      	add	r3, r2
 8005220:	3304      	adds	r3, #4
 8005222:	461a      	mov	r2, r3
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 fafb 	bl	8005820 <etharp_request_dst>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d109      	bne.n	8005244 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005230:	79fa      	ldrb	r2, [r7, #7]
 8005232:	4911      	ldr	r1, [pc, #68]	@ (8005278 <etharp_output_to_arp_index+0x124>)
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	440b      	add	r3, r1
 800523e:	3314      	adds	r3, #20
 8005240:	2203      	movs	r2, #3
 8005242:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800524a:	79fa      	ldrb	r2, [r7, #7]
 800524c:	4613      	mov	r3, r2
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	4413      	add	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	3308      	adds	r3, #8
 8005256:	4a08      	ldr	r2, [pc, #32]	@ (8005278 <etharp_output_to_arp_index+0x124>)
 8005258:	4413      	add	r3, r2
 800525a:	3304      	adds	r3, #4
 800525c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005260:	9200      	str	r2, [sp, #0]
 8005262:	460a      	mov	r2, r1
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 fb9c 	bl	80059a4 <ethernet_output>
 800526c:	4603      	mov	r3, r0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20004d54 	.word	0x20004d54
 800527c:	0800f45c 	.word	0x0800f45c
 8005280:	0800f604 	.word	0x0800f604
 8005284:	0800f50c 	.word	0x0800f50c

08005288 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	@ 0x28
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <etharp_output+0x24>
 800529e:	4b73      	ldr	r3, [pc, #460]	@ (800546c <etharp_output+0x1e4>)
 80052a0:	f240 321e 	movw	r2, #798	@ 0x31e
 80052a4:	4972      	ldr	r1, [pc, #456]	@ (8005470 <etharp_output+0x1e8>)
 80052a6:	4873      	ldr	r0, [pc, #460]	@ (8005474 <etharp_output+0x1ec>)
 80052a8:	f009 f99a 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <etharp_output+0x38>
 80052b2:	4b6e      	ldr	r3, [pc, #440]	@ (800546c <etharp_output+0x1e4>)
 80052b4:	f240 321f 	movw	r2, #799	@ 0x31f
 80052b8:	496f      	ldr	r1, [pc, #444]	@ (8005478 <etharp_output+0x1f0>)
 80052ba:	486e      	ldr	r0, [pc, #440]	@ (8005474 <etharp_output+0x1ec>)
 80052bc:	f009 f990 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <etharp_output+0x4c>
 80052c6:	4b69      	ldr	r3, [pc, #420]	@ (800546c <etharp_output+0x1e4>)
 80052c8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80052cc:	496b      	ldr	r1, [pc, #428]	@ (800547c <etharp_output+0x1f4>)
 80052ce:	4869      	ldr	r0, [pc, #420]	@ (8005474 <etharp_output+0x1ec>)
 80052d0:	f009 f986 	bl	800e5e0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68f9      	ldr	r1, [r7, #12]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 ffe4 	bl	80062a8 <ip4_addr_isbroadcast_u32>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80052e6:	4b66      	ldr	r3, [pc, #408]	@ (8005480 <etharp_output+0x1f8>)
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e0af      	b.n	800544c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052f4:	2be0      	cmp	r3, #224	@ 0xe0
 80052f6:	d118      	bne.n	800532a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80052f8:	2301      	movs	r3, #1
 80052fa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80052fc:	2300      	movs	r3, #0
 80052fe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8005300:	235e      	movs	r3, #94	@ 0x5e
 8005302:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3301      	adds	r3, #1
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800530e:	b2db      	uxtb	r3, r3
 8005310:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3302      	adds	r3, #2
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3303      	adds	r3, #3
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8005322:	f107 0310 	add.w	r3, r7, #16
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	e090      	b.n	800544c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3304      	adds	r3, #4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	405a      	eors	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3308      	adds	r3, #8
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d012      	beq.n	8005368 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005348:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800534c:	4293      	cmp	r3, r2
 800534e:	d00b      	beq.n	8005368 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	330c      	adds	r3, #12
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	330c      	adds	r3, #12
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	e002      	b.n	8005368 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8005362:	f06f 0303 	mvn.w	r3, #3
 8005366:	e07d      	b.n	8005464 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005368:	4b46      	ldr	r3, [pc, #280]	@ (8005484 <etharp_output+0x1fc>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	4619      	mov	r1, r3
 800536e:	4a46      	ldr	r2, [pc, #280]	@ (8005488 <etharp_output+0x200>)
 8005370:	460b      	mov	r3, r1
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	440b      	add	r3, r1
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	3314      	adds	r3, #20
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d925      	bls.n	80053ce <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8005382:	4b40      	ldr	r3, [pc, #256]	@ (8005484 <etharp_output+0x1fc>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	4619      	mov	r1, r3
 8005388:	4a3f      	ldr	r2, [pc, #252]	@ (8005488 <etharp_output+0x200>)
 800538a:	460b      	mov	r3, r1
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	440b      	add	r3, r1
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	3308      	adds	r3, #8
 8005396:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	429a      	cmp	r2, r3
 800539c:	d117      	bne.n	80053ce <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b38      	ldr	r3, [pc, #224]	@ (8005484 <etharp_output+0x1fc>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	4937      	ldr	r1, [pc, #220]	@ (8005488 <etharp_output+0x200>)
 80053aa:	4603      	mov	r3, r0
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	4403      	add	r3, r0
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	440b      	add	r3, r1
 80053b4:	3304      	adds	r3, #4
 80053b6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d108      	bne.n	80053ce <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80053bc:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <etharp_output+0x1fc>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff fec5 	bl	8005154 <etharp_output_to_arp_index>
 80053ca:	4603      	mov	r3, r0
 80053cc:	e04a      	b.n	8005464 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80053ce:	2300      	movs	r3, #0
 80053d0:	75fb      	strb	r3, [r7, #23]
 80053d2:	e031      	b.n	8005438 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80053d4:	7dfa      	ldrb	r2, [r7, #23]
 80053d6:	492c      	ldr	r1, [pc, #176]	@ (8005488 <etharp_output+0x200>)
 80053d8:	4613      	mov	r3, r2
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	4413      	add	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	440b      	add	r3, r1
 80053e2:	3314      	adds	r3, #20
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d923      	bls.n	8005432 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80053ea:	7dfa      	ldrb	r2, [r7, #23]
 80053ec:	4926      	ldr	r1, [pc, #152]	@ (8005488 <etharp_output+0x200>)
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	440b      	add	r3, r1
 80053f8:	3308      	adds	r3, #8
 80053fa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d117      	bne.n	8005432 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	6819      	ldr	r1, [r3, #0]
 8005406:	7dfa      	ldrb	r2, [r7, #23]
 8005408:	481f      	ldr	r0, [pc, #124]	@ (8005488 <etharp_output+0x200>)
 800540a:	4613      	mov	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4413      	add	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4403      	add	r3, r0
 8005414:	3304      	adds	r3, #4
 8005416:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8005418:	4299      	cmp	r1, r3
 800541a:	d10a      	bne.n	8005432 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800541c:	4a19      	ldr	r2, [pc, #100]	@ (8005484 <etharp_output+0x1fc>)
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	461a      	mov	r2, r3
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f7ff fe93 	bl	8005154 <etharp_output_to_arp_index>
 800542e:	4603      	mov	r3, r0
 8005430:	e018      	b.n	8005464 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	3301      	adds	r3, #1
 8005436:	75fb      	strb	r3, [r7, #23]
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b09      	cmp	r3, #9
 800543c:	d9ca      	bls.n	80053d4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f822 	bl	800548c <etharp_query>
 8005448:	4603      	mov	r3, r0
 800544a:	e00b      	b.n	8005464 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8005452:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 faa1 	bl	80059a4 <ethernet_output>
 8005462:	4603      	mov	r3, r0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	0800f45c 	.word	0x0800f45c
 8005470:	0800f5e4 	.word	0x0800f5e4
 8005474:	0800f50c 	.word	0x0800f50c
 8005478:	0800f634 	.word	0x0800f634
 800547c:	0800f5d4 	.word	0x0800f5d4
 8005480:	08012174 	.word	0x08012174
 8005484:	20004e44 	.word	0x20004e44
 8005488:	20004d54 	.word	0x20004d54

0800548c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08c      	sub	sp, #48	@ 0x30
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3326      	adds	r3, #38	@ 0x26
 800549c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800549e:	23ff      	movs	r3, #255	@ 0xff
 80054a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fefa 	bl	80062a8 <ip4_addr_isbroadcast_u32>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10c      	bne.n	80054d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80054c2:	2be0      	cmp	r3, #224	@ 0xe0
 80054c4:	d006      	beq.n	80054d4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80054d4:	f06f 030f 	mvn.w	r3, #15
 80054d8:	e101      	b.n	80056de <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	2101      	movs	r1, #1
 80054de:	68b8      	ldr	r0, [r7, #8]
 80054e0:	f7ff fb60 	bl	8004ba4 <etharp_find_entry>
 80054e4:	4603      	mov	r3, r0
 80054e6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80054e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	da02      	bge.n	80054f6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80054f0:	8a7b      	ldrh	r3, [r7, #18]
 80054f2:	b25b      	sxtb	r3, r3
 80054f4:	e0f3      	b.n	80056de <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80054f6:	8a7b      	ldrh	r3, [r7, #18]
 80054f8:	2b7e      	cmp	r3, #126	@ 0x7e
 80054fa:	d906      	bls.n	800550a <etharp_query+0x7e>
 80054fc:	4b7a      	ldr	r3, [pc, #488]	@ (80056e8 <etharp_query+0x25c>)
 80054fe:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8005502:	497a      	ldr	r1, [pc, #488]	@ (80056ec <etharp_query+0x260>)
 8005504:	487a      	ldr	r0, [pc, #488]	@ (80056f0 <etharp_query+0x264>)
 8005506:	f009 f86b 	bl	800e5e0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800550a:	8a7b      	ldrh	r3, [r7, #18]
 800550c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800550e:	7c7a      	ldrb	r2, [r7, #17]
 8005510:	4978      	ldr	r1, [pc, #480]	@ (80056f4 <etharp_query+0x268>)
 8005512:	4613      	mov	r3, r2
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	4413      	add	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	440b      	add	r3, r1
 800551c:	3314      	adds	r3, #20
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d115      	bne.n	8005550 <etharp_query+0xc4>
    is_new_entry = 1;
 8005524:	2301      	movs	r3, #1
 8005526:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005528:	7c7a      	ldrb	r2, [r7, #17]
 800552a:	4972      	ldr	r1, [pc, #456]	@ (80056f4 <etharp_query+0x268>)
 800552c:	4613      	mov	r3, r2
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	4413      	add	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	440b      	add	r3, r1
 8005536:	3314      	adds	r3, #20
 8005538:	2201      	movs	r2, #1
 800553a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800553c:	7c7a      	ldrb	r2, [r7, #17]
 800553e:	496d      	ldr	r1, [pc, #436]	@ (80056f4 <etharp_query+0x268>)
 8005540:	4613      	mov	r3, r2
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	4413      	add	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	440b      	add	r3, r1
 800554a:	3308      	adds	r3, #8
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005550:	7c7a      	ldrb	r2, [r7, #17]
 8005552:	4968      	ldr	r1, [pc, #416]	@ (80056f4 <etharp_query+0x268>)
 8005554:	4613      	mov	r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4413      	add	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	440b      	add	r3, r1
 800555e:	3314      	adds	r3, #20
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d011      	beq.n	800558a <etharp_query+0xfe>
 8005566:	7c7a      	ldrb	r2, [r7, #17]
 8005568:	4962      	ldr	r1, [pc, #392]	@ (80056f4 <etharp_query+0x268>)
 800556a:	4613      	mov	r3, r2
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	4413      	add	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	440b      	add	r3, r1
 8005574:	3314      	adds	r3, #20
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d806      	bhi.n	800558a <etharp_query+0xfe>
 800557c:	4b5a      	ldr	r3, [pc, #360]	@ (80056e8 <etharp_query+0x25c>)
 800557e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8005582:	495d      	ldr	r1, [pc, #372]	@ (80056f8 <etharp_query+0x26c>)
 8005584:	485a      	ldr	r0, [pc, #360]	@ (80056f0 <etharp_query+0x264>)
 8005586:	f009 f82b 	bl	800e5e0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <etharp_query+0x10a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10c      	bne.n	80055b0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f963 	bl	8005864 <etharp_request>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <etharp_query+0x124>
      return result;
 80055aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80055ae:	e096      	b.n	80056de <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <etharp_query+0x138>
 80055b6:	4b4c      	ldr	r3, [pc, #304]	@ (80056e8 <etharp_query+0x25c>)
 80055b8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80055bc:	494f      	ldr	r1, [pc, #316]	@ (80056fc <etharp_query+0x270>)
 80055be:	484c      	ldr	r0, [pc, #304]	@ (80056f0 <etharp_query+0x264>)
 80055c0:	f009 f80e 	bl	800e5e0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80055c4:	7c7a      	ldrb	r2, [r7, #17]
 80055c6:	494b      	ldr	r1, [pc, #300]	@ (80056f4 <etharp_query+0x268>)
 80055c8:	4613      	mov	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4413      	add	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	440b      	add	r3, r1
 80055d2:	3314      	adds	r3, #20
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d917      	bls.n	800560a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80055da:	4a49      	ldr	r2, [pc, #292]	@ (8005700 <etharp_query+0x274>)
 80055dc:	7c7b      	ldrb	r3, [r7, #17]
 80055de:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80055e0:	7c7a      	ldrb	r2, [r7, #17]
 80055e2:	4613      	mov	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4413      	add	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	3308      	adds	r3, #8
 80055ec:	4a41      	ldr	r2, [pc, #260]	@ (80056f4 <etharp_query+0x268>)
 80055ee:	4413      	add	r3, r2
 80055f0:	3304      	adds	r3, #4
 80055f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055f6:	9200      	str	r2, [sp, #0]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f9d1 	bl	80059a4 <ethernet_output>
 8005602:	4603      	mov	r3, r0
 8005604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005608:	e067      	b.n	80056da <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800560a:	7c7a      	ldrb	r2, [r7, #17]
 800560c:	4939      	ldr	r1, [pc, #228]	@ (80056f4 <etharp_query+0x268>)
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	440b      	add	r3, r1
 8005618:	3314      	adds	r3, #20
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d15c      	bne.n	80056da <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	61fb      	str	r3, [r7, #28]
    while (p) {
 8005628:	e01c      	b.n	8005664 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	895a      	ldrh	r2, [r3, #10]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	891b      	ldrh	r3, [r3, #8]
 8005632:	429a      	cmp	r2, r3
 8005634:	d10a      	bne.n	800564c <etharp_query+0x1c0>
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d006      	beq.n	800564c <etharp_query+0x1c0>
 800563e:	4b2a      	ldr	r3, [pc, #168]	@ (80056e8 <etharp_query+0x25c>)
 8005640:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8005644:	492f      	ldr	r1, [pc, #188]	@ (8005704 <etharp_query+0x278>)
 8005646:	482a      	ldr	r0, [pc, #168]	@ (80056f0 <etharp_query+0x264>)
 8005648:	f008 ffca 	bl	800e5e0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	7b1b      	ldrb	r3, [r3, #12]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <etharp_query+0x1d2>
        copy_needed = 1;
 8005658:	2301      	movs	r3, #1
 800565a:	61bb      	str	r3, [r7, #24]
        break;
 800565c:	e005      	b.n	800566a <etharp_query+0x1de>
      }
      p = p->next;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	61fb      	str	r3, [r7, #28]
    while (p) {
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1df      	bne.n	800562a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8005676:	200e      	movs	r0, #14
 8005678:	f003 f9ec 	bl	8008a54 <pbuf_clone>
 800567c:	61f8      	str	r0, [r7, #28]
 800567e:	e004      	b.n	800568a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8005684:	69f8      	ldr	r0, [r7, #28]
 8005686:	f003 f829 	bl	80086dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d021      	beq.n	80056d4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8005690:	7c7a      	ldrb	r2, [r7, #17]
 8005692:	4918      	ldr	r1, [pc, #96]	@ (80056f4 <etharp_query+0x268>)
 8005694:	4613      	mov	r3, r2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	4413      	add	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	440b      	add	r3, r1
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80056a4:	7c7a      	ldrb	r2, [r7, #17]
 80056a6:	4913      	ldr	r1, [pc, #76]	@ (80056f4 <etharp_query+0x268>)
 80056a8:	4613      	mov	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	4413      	add	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	440b      	add	r3, r1
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f002 ff71 	bl	800859c <pbuf_free>
      }
      arp_table[i].q = p;
 80056ba:	7c7a      	ldrb	r2, [r7, #17]
 80056bc:	490d      	ldr	r1, [pc, #52]	@ (80056f4 <etharp_query+0x268>)
 80056be:	4613      	mov	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4413      	add	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	440b      	add	r3, r1
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80056d2:	e002      	b.n	80056da <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80056d4:	23ff      	movs	r3, #255	@ 0xff
 80056d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80056da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3728      	adds	r7, #40	@ 0x28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	0800f45c 	.word	0x0800f45c
 80056ec:	0800f640 	.word	0x0800f640
 80056f0:	0800f50c 	.word	0x0800f50c
 80056f4:	20004d54 	.word	0x20004d54
 80056f8:	0800f650 	.word	0x0800f650
 80056fc:	0800f634 	.word	0x0800f634
 8005700:	20004e44 	.word	0x20004e44
 8005704:	0800f678 	.word	0x0800f678

08005708 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	@ 0x28
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <etharp_raw+0x26>
 8005720:	4b3a      	ldr	r3, [pc, #232]	@ (800580c <etharp_raw+0x104>)
 8005722:	f240 4257 	movw	r2, #1111	@ 0x457
 8005726:	493a      	ldr	r1, [pc, #232]	@ (8005810 <etharp_raw+0x108>)
 8005728:	483a      	ldr	r0, [pc, #232]	@ (8005814 <etharp_raw+0x10c>)
 800572a:	f008 ff59 	bl	800e5e0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800572e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005732:	211c      	movs	r1, #28
 8005734:	200e      	movs	r0, #14
 8005736:	f002 fc49 	bl	8007fcc <pbuf_alloc>
 800573a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8005742:	f04f 33ff 	mov.w	r3, #4294967295
 8005746:	e05d      	b.n	8005804 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	895b      	ldrh	r3, [r3, #10]
 800574c:	2b1b      	cmp	r3, #27
 800574e:	d806      	bhi.n	800575e <etharp_raw+0x56>
 8005750:	4b2e      	ldr	r3, [pc, #184]	@ (800580c <etharp_raw+0x104>)
 8005752:	f240 4262 	movw	r2, #1122	@ 0x462
 8005756:	4930      	ldr	r1, [pc, #192]	@ (8005818 <etharp_raw+0x110>)
 8005758:	482e      	ldr	r0, [pc, #184]	@ (8005814 <etharp_raw+0x10c>)
 800575a:	f008 ff41 	bl	800e5e0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005764:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff f912 	bl	8004990 <lwip_htons>
 800576c:	4603      	mov	r3, r0
 800576e:	461a      	mov	r2, r3
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800577a:	2b06      	cmp	r3, #6
 800577c:	d006      	beq.n	800578c <etharp_raw+0x84>
 800577e:	4b23      	ldr	r3, [pc, #140]	@ (800580c <etharp_raw+0x104>)
 8005780:	f240 4269 	movw	r2, #1129	@ 0x469
 8005784:	4925      	ldr	r1, [pc, #148]	@ (800581c <etharp_raw+0x114>)
 8005786:	4823      	ldr	r0, [pc, #140]	@ (8005814 <etharp_raw+0x10c>)
 8005788:	f008 ff2a 	bl	800e5e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	3308      	adds	r3, #8
 8005790:	2206      	movs	r2, #6
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	4618      	mov	r0, r3
 8005796:	f008 fffe 	bl	800e796 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	3312      	adds	r3, #18
 800579e:	2206      	movs	r2, #6
 80057a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057a2:	4618      	mov	r0, r3
 80057a4:	f008 fff7 	bl	800e796 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	330e      	adds	r3, #14
 80057ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	3318      	adds	r3, #24
 80057b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f042 0208 	orr.w	r2, r2, #8
 80057d2:	709a      	strb	r2, [r3, #2]
 80057d4:	2200      	movs	r2, #0
 80057d6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2206      	movs	r2, #6
 80057dc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2204      	movs	r2, #4
 80057e2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80057e4:	f640 0306 	movw	r3, #2054	@ 0x806
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	69b9      	ldr	r1, [r7, #24]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f8d7 	bl	80059a4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80057f6:	69b8      	ldr	r0, [r7, #24]
 80057f8:	f002 fed0 	bl	800859c <pbuf_free>
  p = NULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8005800:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	0800f45c 	.word	0x0800f45c
 8005810:	0800f5e4 	.word	0x0800f5e4
 8005814:	0800f50c 	.word	0x0800f50c
 8005818:	0800f694 	.word	0x0800f694
 800581c:	0800f6c8 	.word	0x0800f6c8

08005820 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af04      	add	r7, sp, #16
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800583c:	2201      	movs	r2, #1
 800583e:	9203      	str	r2, [sp, #12]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	9202      	str	r2, [sp, #8]
 8005844:	4a06      	ldr	r2, [pc, #24]	@ (8005860 <etharp_request_dst+0x40>)
 8005846:	9201      	str	r2, [sp, #4]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	4603      	mov	r3, r0
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff ff5a 	bl	8005708 <etharp_raw>
 8005854:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	0801217c 	.word	0x0801217c

08005864 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800586e:	4a05      	ldr	r2, [pc, #20]	@ (8005884 <etharp_request+0x20>)
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ffd4 	bl	8005820 <etharp_request_dst>
 8005878:	4603      	mov	r3, r0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	08012174 	.word	0x08012174

08005888 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8005892:	230e      	movs	r3, #14
 8005894:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	895b      	ldrh	r3, [r3, #10]
 800589a:	2b0e      	cmp	r3, #14
 800589c:	d96e      	bls.n	800597c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	7bdb      	ldrb	r3, [r3, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058ac:	3301      	adds	r3, #1
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	7b1a      	ldrb	r2, [r3, #12]
 80058be:	7b5b      	ldrb	r3, [r3, #13]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	4313      	orrs	r3, r2
 80058c4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d023      	beq.n	800591a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d10f      	bne.n	80058fa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d11b      	bne.n	800591a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80058e6:	2b5e      	cmp	r3, #94	@ 0x5e
 80058e8:	d117      	bne.n	800591a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	7b5b      	ldrb	r3, [r3, #13]
 80058ee:	f043 0310 	orr.w	r3, r3, #16
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	735a      	strb	r2, [r3, #13]
 80058f8:	e00f      	b.n	800591a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2206      	movs	r2, #6
 80058fe:	4928      	ldr	r1, [pc, #160]	@ (80059a0 <ethernet_input+0x118>)
 8005900:	4618      	mov	r0, r3
 8005902:	f008 fec2 	bl	800e68a <memcmp>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	7b5b      	ldrb	r3, [r3, #13]
 8005910:	f043 0308 	orr.w	r3, r3, #8
 8005914:	b2da      	uxtb	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800591a:	89fb      	ldrh	r3, [r7, #14]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d003      	beq.n	8005928 <ethernet_input+0xa0>
 8005920:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8005924:	d014      	beq.n	8005950 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8005926:	e032      	b.n	800598e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d024      	beq.n	8005980 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8005936:	8afb      	ldrh	r3, [r7, #22]
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f002 fda8 	bl	8008490 <pbuf_remove_header>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d11e      	bne.n	8005984 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fab1 	bl	8005eb0 <ip4_input>
      break;
 800594e:	e013      	b.n	8005978 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d014      	beq.n	8005988 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800595e:	8afb      	ldrh	r3, [r7, #22]
 8005960:	4619      	mov	r1, r3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f002 fd94 	bl	8008490 <pbuf_remove_header>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10e      	bne.n	800598c <ethernet_input+0x104>
        etharp_input(p, netif);
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fb65 	bl	8005040 <etharp_input>
      break;
 8005976:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	e00c      	b.n	8005996 <ethernet_input+0x10e>
    goto free_and_return;
 800597c:	bf00      	nop
 800597e:	e006      	b.n	800598e <ethernet_input+0x106>
        goto free_and_return;
 8005980:	bf00      	nop
 8005982:	e004      	b.n	800598e <ethernet_input+0x106>
        goto free_and_return;
 8005984:	bf00      	nop
 8005986:	e002      	b.n	800598e <ethernet_input+0x106>
        goto free_and_return;
 8005988:	bf00      	nop
 800598a:	e000      	b.n	800598e <ethernet_input+0x106>
        goto free_and_return;
 800598c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f002 fe04 	bl	800859c <pbuf_free>
  return ERR_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	08012174 	.word	0x08012174

080059a4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80059b2:	8c3b      	ldrh	r3, [r7, #32]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe ffeb 	bl	8004990 <lwip_htons>
 80059ba:	4603      	mov	r3, r0
 80059bc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80059be:	210e      	movs	r1, #14
 80059c0:	68b8      	ldr	r0, [r7, #8]
 80059c2:	f002 fd55 	bl	8008470 <pbuf_add_header>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d125      	bne.n	8005a18 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	8afa      	ldrh	r2, [r7, #22]
 80059d6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2206      	movs	r2, #6
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f008 fed9 	bl	800e796 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	3306      	adds	r3, #6
 80059e8:	2206      	movs	r2, #6
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f008 fed2 	bl	800e796 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80059f8:	2b06      	cmp	r3, #6
 80059fa:	d006      	beq.n	8005a0a <ethernet_output+0x66>
 80059fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <ethernet_output+0x84>)
 80059fe:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8005a02:	490a      	ldr	r1, [pc, #40]	@ (8005a2c <ethernet_output+0x88>)
 8005a04:	480a      	ldr	r0, [pc, #40]	@ (8005a30 <ethernet_output+0x8c>)
 8005a06:	f008 fdeb 	bl	800e5e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	4798      	blx	r3
 8005a14:	4603      	mov	r3, r0
 8005a16:	e002      	b.n	8005a1e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8005a18:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8005a1a:	f06f 0301 	mvn.w	r3, #1
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	0800f70c 	.word	0x0800f70c
 8005a2c:	0800f77c 	.word	0x0800f77c
 8005a30:	0800f7b0 	.word	0x0800f7b0

08005a34 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08e      	sub	sp, #56	@ 0x38
 8005a38:	af04      	add	r7, sp, #16
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8005a3e:	4b79      	ldr	r3, [pc, #484]	@ (8005c24 <icmp_input+0x1f0>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8005a54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a56:	2b13      	cmp	r3, #19
 8005a58:	f240 80cd 	bls.w	8005bf6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	895b      	ldrh	r3, [r3, #10]
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	f240 80ca 	bls.w	8005bfa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8005a70:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80b7 	beq.w	8005be8 <icmp_input+0x1b4>
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	f040 80b7 	bne.w	8005bee <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8005a80:	4b69      	ldr	r3, [pc, #420]	@ (8005c28 <icmp_input+0x1f4>)
 8005a82:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005a84:	4b67      	ldr	r3, [pc, #412]	@ (8005c24 <icmp_input+0x1f0>)
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a8c:	2be0      	cmp	r3, #224	@ 0xe0
 8005a8e:	f000 80bb 	beq.w	8005c08 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8005a92:	4b64      	ldr	r3, [pc, #400]	@ (8005c24 <icmp_input+0x1f0>)
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	4a63      	ldr	r2, [pc, #396]	@ (8005c24 <icmp_input+0x1f0>)
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fc03 	bl	80062a8 <ip4_addr_isbroadcast_u32>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f040 80b1 	bne.w	8005c0c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	891b      	ldrh	r3, [r3, #8]
 8005aae:	2b07      	cmp	r3, #7
 8005ab0:	f240 80a5 	bls.w	8005bfe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005ab4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ab6:	330e      	adds	r3, #14
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f002 fcd8 	bl	8008470 <pbuf_add_header>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04b      	beq.n	8005b5e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	891a      	ldrh	r2, [r3, #8]
 8005aca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005acc:	4413      	add	r3, r2
 8005ace:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	891b      	ldrh	r3, [r3, #8]
 8005ad4:	8b7a      	ldrh	r2, [r7, #26]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	f0c0 809a 	bcc.w	8005c10 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8005adc:	8b7b      	ldrh	r3, [r7, #26]
 8005ade:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	200e      	movs	r0, #14
 8005ae6:	f002 fa71 	bl	8007fcc <pbuf_alloc>
 8005aea:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 8090 	beq.w	8005c14 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	895b      	ldrh	r3, [r3, #10]
 8005af8:	461a      	mov	r2, r3
 8005afa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005afc:	3308      	adds	r3, #8
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d203      	bcs.n	8005b0a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8005b02:	6978      	ldr	r0, [r7, #20]
 8005b04:	f002 fd4a 	bl	800859c <pbuf_free>
          goto icmperr;
 8005b08:	e085      	b.n	8005c16 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005b10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b12:	4618      	mov	r0, r3
 8005b14:	f008 fe3f 	bl	800e796 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8005b18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6978      	ldr	r0, [r7, #20]
 8005b1e:	f002 fcb7 	bl	8008490 <pbuf_remove_header>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8005b28:	4b40      	ldr	r3, [pc, #256]	@ (8005c2c <icmp_input+0x1f8>)
 8005b2a:	22b6      	movs	r2, #182	@ 0xb6
 8005b2c:	4940      	ldr	r1, [pc, #256]	@ (8005c30 <icmp_input+0x1fc>)
 8005b2e:	4841      	ldr	r0, [pc, #260]	@ (8005c34 <icmp_input+0x200>)
 8005b30:	f008 fd56 	bl	800e5e0 <iprintf>
          pbuf_free(r);
 8005b34:	6978      	ldr	r0, [r7, #20]
 8005b36:	f002 fd31 	bl	800859c <pbuf_free>
          goto icmperr;
 8005b3a:	e06c      	b.n	8005c16 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	6978      	ldr	r0, [r7, #20]
 8005b40:	f002 fe44 	bl	80087cc <pbuf_copy>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8005b4a:	6978      	ldr	r0, [r7, #20]
 8005b4c:	f002 fd26 	bl	800859c <pbuf_free>
          goto icmperr;
 8005b50:	e061      	b.n	8005c16 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f002 fd22 	bl	800859c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	e00f      	b.n	8005b7e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005b5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b60:	330e      	adds	r3, #14
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f002 fc93 	bl	8008490 <pbuf_remove_header>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d006      	beq.n	8005b7e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005b70:	4b2e      	ldr	r3, [pc, #184]	@ (8005c2c <icmp_input+0x1f8>)
 8005b72:	22c7      	movs	r2, #199	@ 0xc7
 8005b74:	4930      	ldr	r1, [pc, #192]	@ (8005c38 <icmp_input+0x204>)
 8005b76:	482f      	ldr	r0, [pc, #188]	@ (8005c34 <icmp_input+0x200>)
 8005b78:	f008 fd32 	bl	800e5e0 <iprintf>
          goto icmperr;
 8005b7c:	e04b      	b.n	8005c16 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8005b84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f002 fc71 	bl	8008470 <pbuf_add_header>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d12b      	bne.n	8005bec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005ba2:	4b20      	ldr	r3, [pc, #128]	@ (8005c24 <icmp_input+0x1f0>)
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	709a      	strb	r2, [r3, #2]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	22ff      	movs	r2, #255	@ 0xff
 8005bbe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	729a      	strb	r2, [r3, #10]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	9302      	str	r3, [sp, #8]
 8005bce:	2301      	movs	r3, #1
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	23ff      	movs	r3, #255	@ 0xff
 8005bd8:	2200      	movs	r2, #0
 8005bda:	69f9      	ldr	r1, [r7, #28]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa8b 	bl	80060f8 <ip4_output_if>
 8005be2:	4603      	mov	r3, r0
 8005be4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8005be6:	e001      	b.n	8005bec <icmp_input+0x1b8>
      break;
 8005be8:	bf00      	nop
 8005bea:	e000      	b.n	8005bee <icmp_input+0x1ba>
      break;
 8005bec:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f002 fcd4 	bl	800859c <pbuf_free>
  return;
 8005bf4:	e013      	b.n	8005c1e <icmp_input+0x1ea>
    goto lenerr;
 8005bf6:	bf00      	nop
 8005bf8:	e002      	b.n	8005c00 <icmp_input+0x1cc>
    goto lenerr;
 8005bfa:	bf00      	nop
 8005bfc:	e000      	b.n	8005c00 <icmp_input+0x1cc>
        goto lenerr;
 8005bfe:	bf00      	nop
lenerr:
  pbuf_free(p);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f002 fccb 	bl	800859c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005c06:	e00a      	b.n	8005c1e <icmp_input+0x1ea>
        goto icmperr;
 8005c08:	bf00      	nop
 8005c0a:	e004      	b.n	8005c16 <icmp_input+0x1e2>
        goto icmperr;
 8005c0c:	bf00      	nop
 8005c0e:	e002      	b.n	8005c16 <icmp_input+0x1e2>
          goto icmperr;
 8005c10:	bf00      	nop
 8005c12:	e000      	b.n	8005c16 <icmp_input+0x1e2>
          goto icmperr;
 8005c14:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f002 fcc0 	bl	800859c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005c1c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8005c1e:	3728      	adds	r7, #40	@ 0x28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20004e48 	.word	0x20004e48
 8005c28:	20004e5c 	.word	0x20004e5c
 8005c2c:	0800f7d8 	.word	0x0800f7d8
 8005c30:	0800f848 	.word	0x0800f848
 8005c34:	0800f880 	.word	0x0800f880
 8005c38:	0800f8a8 	.word	0x0800f8a8

08005c3c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2103      	movs	r1, #3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f814 	bl	8005c7c <icmp_send_response>
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	210b      	movs	r1, #11
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f804 	bl	8005c7c <icmp_send_response>
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08c      	sub	sp, #48	@ 0x30
 8005c80:	af04      	add	r7, sp, #16
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005c8c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005c90:	2124      	movs	r1, #36	@ 0x24
 8005c92:	2022      	movs	r0, #34	@ 0x22
 8005c94:	f002 f99a 	bl	8007fcc <pbuf_alloc>
 8005c98:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d04c      	beq.n	8005d3a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	895b      	ldrh	r3, [r3, #10]
 8005ca4:	2b23      	cmp	r3, #35	@ 0x23
 8005ca6:	d806      	bhi.n	8005cb6 <icmp_send_response+0x3a>
 8005ca8:	4b26      	ldr	r3, [pc, #152]	@ (8005d44 <icmp_send_response+0xc8>)
 8005caa:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8005cae:	4926      	ldr	r1, [pc, #152]	@ (8005d48 <icmp_send_response+0xcc>)
 8005cb0:	4826      	ldr	r0, [pc, #152]	@ (8005d4c <icmp_send_response+0xd0>)
 8005cb2:	f008 fc95 	bl	800e5e0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	78fa      	ldrb	r2, [r7, #3]
 8005cc6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	78ba      	ldrb	r2, [r7, #2]
 8005ccc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	711a      	strb	r2, [r3, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	719a      	strb	r2, [r3, #6]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f103 0008 	add.w	r0, r3, #8
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	221c      	movs	r2, #28
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	f008 fd50 	bl	800e796 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005cfc:	f107 030c 	add.w	r3, r7, #12
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 f83b 	bl	8005d7c <ip4_route>
 8005d06:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d011      	beq.n	8005d32 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2200      	movs	r2, #0
 8005d12:	709a      	strb	r2, [r3, #2]
 8005d14:	2200      	movs	r2, #0
 8005d16:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005d18:	f107 020c 	add.w	r2, r7, #12
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	9302      	str	r3, [sp, #8]
 8005d20:	2301      	movs	r3, #1
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	2300      	movs	r3, #0
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	23ff      	movs	r3, #255	@ 0xff
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	69f8      	ldr	r0, [r7, #28]
 8005d2e:	f000 f9e3 	bl	80060f8 <ip4_output_if>
  }
  pbuf_free(q);
 8005d32:	69f8      	ldr	r0, [r7, #28]
 8005d34:	f002 fc32 	bl	800859c <pbuf_free>
 8005d38:	e000      	b.n	8005d3c <icmp_send_response+0xc0>
    return;
 8005d3a:	bf00      	nop
}
 8005d3c:	3720      	adds	r7, #32
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	0800f7d8 	.word	0x0800f7d8
 8005d48:	0800f8dc 	.word	0x0800f8dc
 8005d4c:	0800f880 	.word	0x0800f880

08005d50 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005d5a:	f001 f9eb 	bl	8007134 <mem_init>
  memp_init();
 8005d5e:	f001 fced 	bl	800773c <memp_init>
  pbuf_init();
  netif_init();
 8005d62:	f001 fdeb 	bl	800793c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005d66:	f008 f96d 	bl	800e044 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005d6a:	f002 fea5 	bl	8008ab8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005d6e:	f008 f921 	bl	800dfb4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8005d84:	4b33      	ldr	r3, [pc, #204]	@ (8005e54 <ip4_route+0xd8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e036      	b.n	8005dfa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d02b      	beq.n	8005df4 <ip4_route+0x78>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005da2:	089b      	lsrs	r3, r3, #2
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d022      	beq.n	8005df4 <ip4_route+0x78>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3304      	adds	r3, #4
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01d      	beq.n	8005df4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	405a      	eors	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	e038      	b.n	8005e46 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d108      	bne.n	8005df4 <ip4_route+0x78>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	330c      	adds	r3, #12
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d101      	bne.n	8005df4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	e028      	b.n	8005e46 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1c5      	bne.n	8005d8c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005e00:	4b15      	ldr	r3, [pc, #84]	@ (8005e58 <ip4_route+0xdc>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01a      	beq.n	8005e3e <ip4_route+0xc2>
 8005e08:	4b13      	ldr	r3, [pc, #76]	@ (8005e58 <ip4_route+0xdc>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d012      	beq.n	8005e3e <ip4_route+0xc2>
 8005e18:	4b0f      	ldr	r3, [pc, #60]	@ (8005e58 <ip4_route+0xdc>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8005e28:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <ip4_route+0xdc>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e3c:	d101      	bne.n	8005e42 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e001      	b.n	8005e46 <ip4_route+0xca>
  }

  return netif_default;
 8005e42:	4b05      	ldr	r3, [pc, #20]	@ (8005e58 <ip4_route+0xdc>)
 8005e44:	681b      	ldr	r3, [r3, #0]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	2000b744 	.word	0x2000b744
 8005e58:	2000b748 	.word	0x2000b748

08005e5c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d016      	beq.n	8005ea2 <ip4_input_accept+0x46>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d011      	beq.n	8005ea2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005eac <ip4_input_accept+0x50>)
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3304      	adds	r3, #4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d008      	beq.n	8005e9e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <ip4_input_accept+0x50>)
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fa08 	bl	80062a8 <ip4_addr_isbroadcast_u32>
 8005e98:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20004e48 	.word	0x20004e48

08005eb0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d004      	beq.n	8005ed6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f002 fb65 	bl	800859c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e107      	b.n	80060e6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	885b      	ldrh	r3, [r3, #2]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fd4f 	bl	8004990 <lwip_htons>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	891b      	ldrh	r3, [r3, #8]
 8005efa:	89ba      	ldrh	r2, [r7, #12]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d204      	bcs.n	8005f0a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8005f00:	89bb      	ldrh	r3, [r7, #12]
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f002 f9c3 	bl	8008290 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	895b      	ldrh	r3, [r3, #10]
 8005f0e:	89fa      	ldrh	r2, [r7, #14]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d807      	bhi.n	8005f24 <ip4_input+0x74>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	891b      	ldrh	r3, [r3, #8]
 8005f18:	89ba      	ldrh	r2, [r7, #12]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d802      	bhi.n	8005f24 <ip4_input+0x74>
 8005f1e:	89fb      	ldrh	r3, [r7, #14]
 8005f20:	2b13      	cmp	r3, #19
 8005f22:	d804      	bhi.n	8005f2e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f002 fb39 	bl	800859c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e0db      	b.n	80060e6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	4a6f      	ldr	r2, [pc, #444]	@ (80060f0 <ip4_input+0x240>)
 8005f34:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	4a6d      	ldr	r2, [pc, #436]	@ (80060f0 <ip4_input+0x240>)
 8005f3c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005f3e:	4b6c      	ldr	r3, [pc, #432]	@ (80060f0 <ip4_input+0x240>)
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f46:	2be0      	cmp	r3, #224	@ 0xe0
 8005f48:	d112      	bne.n	8005f70 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d007      	beq.n	8005f6a <ip4_input+0xba>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <ip4_input+0xba>
      netif = inp;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	e02a      	b.n	8005fc0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	613b      	str	r3, [r7, #16]
 8005f6e:	e027      	b.n	8005fc0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8005f70:	6838      	ldr	r0, [r7, #0]
 8005f72:	f7ff ff73 	bl	8005e5c <ip4_input_accept>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <ip4_input+0xd2>
      netif = inp;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	e01e      	b.n	8005fc0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8005f86:	4b5a      	ldr	r3, [pc, #360]	@ (80060f0 <ip4_input+0x240>)
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f8e:	d017      	beq.n	8005fc0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8005f90:	4b58      	ldr	r3, [pc, #352]	@ (80060f4 <ip4_input+0x244>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	e00e      	b.n	8005fb6 <ip4_input+0x106>
          if (netif == inp) {
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d006      	beq.n	8005fae <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8005fa0:	6938      	ldr	r0, [r7, #16]
 8005fa2:	f7ff ff5b 	bl	8005e5c <ip4_input_accept>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d108      	bne.n	8005fbe <ip4_input+0x10e>
 8005fac:	e000      	b.n	8005fb0 <ip4_input+0x100>
            continue;
 8005fae:	bf00      	nop
        NETIF_FOREACH(netif) {
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1ed      	bne.n	8005f98 <ip4_input+0xe8>
 8005fbc:	e000      	b.n	8005fc0 <ip4_input+0x110>
            break;
 8005fbe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80060f0 <ip4_input+0x240>)
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f96e 	bl	80062a8 <ip4_addr_isbroadcast_u32>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d105      	bne.n	8005fde <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8005fd2:	4b47      	ldr	r3, [pc, #284]	@ (80060f0 <ip4_input+0x240>)
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005fda:	2be0      	cmp	r3, #224	@ 0xe0
 8005fdc:	d104      	bne.n	8005fe8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f002 fadc 	bl	800859c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e07e      	b.n	80060e6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d104      	bne.n	8005ff8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f002 fad4 	bl	800859c <pbuf_free>
    return ERR_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	e076      	b.n	80060e6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	88db      	ldrh	r3, [r3, #6]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8006004:	4013      	ands	r3, r2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fc92 	bl	8006934 <ip4_reass>
 8006010:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <ip4_input+0x16c>
      return ERR_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e064      	b.n	80060e6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8006022:	4a33      	ldr	r2, [pc, #204]	@ (80060f0 <ip4_input+0x240>)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8006028:	4a31      	ldr	r2, [pc, #196]	@ (80060f0 <ip4_input+0x240>)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800602e:	4a30      	ldr	r2, [pc, #192]	@ (80060f0 <ip4_input+0x240>)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	b2db      	uxtb	r3, r3
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	b2db      	uxtb	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	4b2a      	ldr	r3, [pc, #168]	@ (80060f0 <ip4_input+0x240>)
 8006046:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8006048:	89fb      	ldrh	r3, [r7, #14]
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f002 fa1f 	bl	8008490 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	7a5b      	ldrb	r3, [r3, #9]
 8006056:	2b11      	cmp	r3, #17
 8006058:	d006      	beq.n	8006068 <ip4_input+0x1b8>
 800605a:	2b11      	cmp	r3, #17
 800605c:	dc13      	bgt.n	8006086 <ip4_input+0x1d6>
 800605e:	2b01      	cmp	r3, #1
 8006060:	d00c      	beq.n	800607c <ip4_input+0x1cc>
 8006062:	2b06      	cmp	r3, #6
 8006064:	d005      	beq.n	8006072 <ip4_input+0x1c2>
 8006066:	e00e      	b.n	8006086 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f008 f860 	bl	800e130 <udp_input>
        break;
 8006070:	e026      	b.n	80060c0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f004 f905 	bl	800a284 <tcp_input>
        break;
 800607a:	e021      	b.n	80060c0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fcd8 	bl	8005a34 <icmp_input>
        break;
 8006084:	e01c      	b.n	80060c0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8006086:	4b1a      	ldr	r3, [pc, #104]	@ (80060f0 <ip4_input+0x240>)
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	6939      	ldr	r1, [r7, #16]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 f90b 	bl	80062a8 <ip4_addr_isbroadcast_u32>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10f      	bne.n	80060b8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006098:	4b15      	ldr	r3, [pc, #84]	@ (80060f0 <ip4_input+0x240>)
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80060a0:	2be0      	cmp	r3, #224	@ 0xe0
 80060a2:	d009      	beq.n	80060b8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80060a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f002 fa63 	bl	8008576 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80060b0:	2102      	movs	r1, #2
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff fdc2 	bl	8005c3c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f002 fa6f 	bl	800859c <pbuf_free>
        break;
 80060be:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80060c0:	4b0b      	ldr	r3, [pc, #44]	@ (80060f0 <ip4_input+0x240>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80060c6:	4b0a      	ldr	r3, [pc, #40]	@ (80060f0 <ip4_input+0x240>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80060cc:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <ip4_input+0x240>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80060d2:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <ip4_input+0x240>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80060d8:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <ip4_input+0x240>)
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80060de:	4b04      	ldr	r3, [pc, #16]	@ (80060f0 <ip4_input+0x240>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20004e48 	.word	0x20004e48
 80060f4:	2000b744 	.word	0x2000b744

080060f8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	@ 0x28
 80060fc:	af04      	add	r7, sp, #16
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d009      	beq.n	8006124 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <ip4_output_if+0x26>
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	3304      	adds	r3, #4
 8006122:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	9302      	str	r3, [sp, #8]
 800612a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	4613      	mov	r3, r2
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6979      	ldr	r1, [r7, #20]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f805 	bl	800614c <ip4_output_if_src>
 8006142:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	7b9b      	ldrb	r3, [r3, #14]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d006      	beq.n	8006170 <ip4_output_if_src+0x24>
 8006162:	4b4b      	ldr	r3, [pc, #300]	@ (8006290 <ip4_output_if_src+0x144>)
 8006164:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8006168:	494a      	ldr	r1, [pc, #296]	@ (8006294 <ip4_output_if_src+0x148>)
 800616a:	484b      	ldr	r0, [pc, #300]	@ (8006298 <ip4_output_if_src+0x14c>)
 800616c:	f008 fa38 	bl	800e5e0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d060      	beq.n	8006238 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8006176:	2314      	movs	r3, #20
 8006178:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800617a:	2114      	movs	r1, #20
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f002 f977 	bl	8008470 <pbuf_add_header>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8006188:	f06f 0301 	mvn.w	r3, #1
 800618c:	e07c      	b.n	8006288 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	895b      	ldrh	r3, [r3, #10]
 8006198:	2b13      	cmp	r3, #19
 800619a:	d806      	bhi.n	80061aa <ip4_output_if_src+0x5e>
 800619c:	4b3c      	ldr	r3, [pc, #240]	@ (8006290 <ip4_output_if_src+0x144>)
 800619e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80061a2:	493e      	ldr	r1, [pc, #248]	@ (800629c <ip4_output_if_src+0x150>)
 80061a4:	483c      	ldr	r0, [pc, #240]	@ (8006298 <ip4_output_if_src+0x14c>)
 80061a6:	f008 fa1b 	bl	800e5e0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80061b6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80061c0:	8b7b      	ldrh	r3, [r7, #26]
 80061c2:	089b      	lsrs	r3, r3, #2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80061d8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	891b      	ldrh	r3, [r3, #8]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe fbd6 	bl	8004990 <lwip_htons>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	2200      	movs	r2, #0
 80061f0:	719a      	strb	r2, [r3, #6]
 80061f2:	2200      	movs	r2, #0
 80061f4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80061f6:	4b2a      	ldr	r3, [pc, #168]	@ (80062a0 <ip4_output_if_src+0x154>)
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe fbc8 	bl	8004990 <lwip_htons>
 8006200:	4603      	mov	r3, r0
 8006202:	461a      	mov	r2, r3
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8006208:	4b25      	ldr	r3, [pc, #148]	@ (80062a0 <ip4_output_if_src+0x154>)
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	4b23      	ldr	r3, [pc, #140]	@ (80062a0 <ip4_output_if_src+0x154>)
 8006212:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d104      	bne.n	8006224 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800621a:	4b22      	ldr	r3, [pc, #136]	@ (80062a4 <ip4_output_if_src+0x158>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	e003      	b.n	800622c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	2200      	movs	r2, #0
 8006230:	729a      	strb	r2, [r3, #10]
 8006232:	2200      	movs	r2, #0
 8006234:	72da      	strb	r2, [r3, #11]
 8006236:	e00f      	b.n	8006258 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	895b      	ldrh	r3, [r3, #10]
 800623c:	2b13      	cmp	r3, #19
 800623e:	d802      	bhi.n	8006246 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8006240:	f06f 0301 	mvn.w	r3, #1
 8006244:	e020      	b.n	8006288 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8006252:	f107 0314 	add.w	r3, r7, #20
 8006256:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00c      	beq.n	800627a <ip4_output_if_src+0x12e>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	891a      	ldrh	r2, [r3, #8]
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006268:	429a      	cmp	r2, r3
 800626a:	d906      	bls.n	800627a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fd53 	bl	8006d1c <ip4_frag>
 8006276:	4603      	mov	r3, r0
 8006278:	e006      	b.n	8006288 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	68f9      	ldr	r1, [r7, #12]
 8006282:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006284:	4798      	blx	r3
 8006286:	4603      	mov	r3, r0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	0800f908 	.word	0x0800f908
 8006294:	0800f978 	.word	0x0800f978
 8006298:	0800f984 	.word	0x0800f984
 800629c:	0800f9ac 	.word	0x0800f9ac
 80062a0:	20004e60 	.word	0x20004e60
 80062a4:	08012184 	.word	0x08012184

080062a8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d002      	beq.n	80062c4 <ip4_addr_isbroadcast_u32+0x1c>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e02a      	b.n	800631e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e021      	b.n	800631e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	3304      	adds	r3, #4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d101      	bne.n	80062ea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e019      	b.n	800631e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	3304      	adds	r3, #4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	405a      	eors	r2, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10d      	bne.n	800631c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	3308      	adds	r3, #8
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	43da      	mvns	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006314:	429a      	cmp	r2, r3
 8006316:	d101      	bne.n	800631c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800631c:	2300      	movs	r3, #0
  }
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8006336:	4b12      	ldr	r3, [pc, #72]	@ (8006380 <ip_reass_tmr+0x54>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800633c:	e018      	b.n	8006370 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	7fdb      	ldrb	r3, [r3, #31]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <ip_reass_tmr+0x32>
      r->timer--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	7fdb      	ldrb	r3, [r3, #31]
 800634a:	3b01      	subs	r3, #1
 800634c:	b2da      	uxtb	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	e008      	b.n	8006370 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f80a 	bl	8006384 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e3      	bne.n	800633e <ip_reass_tmr+0x12>
    }
  }
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20004e64 	.word	0x20004e64

08006384 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	429a      	cmp	r2, r3
 8006398:	d105      	bne.n	80063a6 <ip_reass_free_complete_datagram+0x22>
 800639a:	4b45      	ldr	r3, [pc, #276]	@ (80064b0 <ip_reass_free_complete_datagram+0x12c>)
 800639c:	22ab      	movs	r2, #171	@ 0xab
 800639e:	4945      	ldr	r1, [pc, #276]	@ (80064b4 <ip_reass_free_complete_datagram+0x130>)
 80063a0:	4845      	ldr	r0, [pc, #276]	@ (80064b8 <ip_reass_free_complete_datagram+0x134>)
 80063a2:	f008 f91d 	bl	800e5e0 <iprintf>
  if (prev != NULL) {
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d005      	beq.n	80063c2 <ip_reass_free_complete_datagram+0x3e>
 80063b6:	4b3e      	ldr	r3, [pc, #248]	@ (80064b0 <ip_reass_free_complete_datagram+0x12c>)
 80063b8:	22ad      	movs	r2, #173	@ 0xad
 80063ba:	4940      	ldr	r1, [pc, #256]	@ (80064bc <ip_reass_free_complete_datagram+0x138>)
 80063bc:	483e      	ldr	r0, [pc, #248]	@ (80064b8 <ip_reass_free_complete_datagram+0x134>)
 80063be:	f008 f90f 	bl	800e5e0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	889b      	ldrh	r3, [r3, #4]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d12a      	bne.n	800642a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	6858      	ldr	r0, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3308      	adds	r3, #8
 80063ea:	2214      	movs	r2, #20
 80063ec:	4619      	mov	r1, r3
 80063ee:	f008 f9d2 	bl	800e796 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80063f2:	2101      	movs	r1, #1
 80063f4:	69b8      	ldr	r0, [r7, #24]
 80063f6:	f7ff fc31 	bl	8005c5c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80063fa:	69b8      	ldr	r0, [r7, #24]
 80063fc:	f002 f956 	bl	80086ac <pbuf_clen>
 8006400:	4603      	mov	r3, r0
 8006402:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006404:	8bfa      	ldrh	r2, [r7, #30]
 8006406:	8a7b      	ldrh	r3, [r7, #18]
 8006408:	4413      	add	r3, r2
 800640a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800640e:	db05      	blt.n	800641c <ip_reass_free_complete_datagram+0x98>
 8006410:	4b27      	ldr	r3, [pc, #156]	@ (80064b0 <ip_reass_free_complete_datagram+0x12c>)
 8006412:	22bc      	movs	r2, #188	@ 0xbc
 8006414:	492a      	ldr	r1, [pc, #168]	@ (80064c0 <ip_reass_free_complete_datagram+0x13c>)
 8006416:	4828      	ldr	r0, [pc, #160]	@ (80064b8 <ip_reass_free_complete_datagram+0x134>)
 8006418:	f008 f8e2 	bl	800e5e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800641c:	8bfa      	ldrh	r2, [r7, #30]
 800641e:	8a7b      	ldrh	r3, [r7, #18]
 8006420:	4413      	add	r3, r2
 8006422:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8006424:	69b8      	ldr	r0, [r7, #24]
 8006426:	f002 f8b9 	bl	800859c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8006430:	e01f      	b.n	8006472 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	617b      	str	r3, [r7, #20]
    pcur = p;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f002 f932 	bl	80086ac <pbuf_clen>
 8006448:	4603      	mov	r3, r0
 800644a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800644c:	8bfa      	ldrh	r2, [r7, #30]
 800644e:	8a7b      	ldrh	r3, [r7, #18]
 8006450:	4413      	add	r3, r2
 8006452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006456:	db05      	blt.n	8006464 <ip_reass_free_complete_datagram+0xe0>
 8006458:	4b15      	ldr	r3, [pc, #84]	@ (80064b0 <ip_reass_free_complete_datagram+0x12c>)
 800645a:	22cc      	movs	r2, #204	@ 0xcc
 800645c:	4918      	ldr	r1, [pc, #96]	@ (80064c0 <ip_reass_free_complete_datagram+0x13c>)
 800645e:	4816      	ldr	r0, [pc, #88]	@ (80064b8 <ip_reass_free_complete_datagram+0x134>)
 8006460:	f008 f8be 	bl	800e5e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8006464:	8bfa      	ldrh	r2, [r7, #30]
 8006466:	8a7b      	ldrh	r3, [r7, #18]
 8006468:	4413      	add	r3, r2
 800646a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f002 f895 	bl	800859c <pbuf_free>
  while (p != NULL) {
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1dc      	bne.n	8006432 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f8c2 	bl	8006604 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8006480:	4b10      	ldr	r3, [pc, #64]	@ (80064c4 <ip_reass_free_complete_datagram+0x140>)
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	8bfa      	ldrh	r2, [r7, #30]
 8006486:	429a      	cmp	r2, r3
 8006488:	d905      	bls.n	8006496 <ip_reass_free_complete_datagram+0x112>
 800648a:	4b09      	ldr	r3, [pc, #36]	@ (80064b0 <ip_reass_free_complete_datagram+0x12c>)
 800648c:	22d2      	movs	r2, #210	@ 0xd2
 800648e:	490e      	ldr	r1, [pc, #56]	@ (80064c8 <ip_reass_free_complete_datagram+0x144>)
 8006490:	4809      	ldr	r0, [pc, #36]	@ (80064b8 <ip_reass_free_complete_datagram+0x134>)
 8006492:	f008 f8a5 	bl	800e5e0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8006496:	4b0b      	ldr	r3, [pc, #44]	@ (80064c4 <ip_reass_free_complete_datagram+0x140>)
 8006498:	881a      	ldrh	r2, [r3, #0]
 800649a:	8bfb      	ldrh	r3, [r7, #30]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	b29a      	uxth	r2, r3
 80064a0:	4b08      	ldr	r3, [pc, #32]	@ (80064c4 <ip_reass_free_complete_datagram+0x140>)
 80064a2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80064a4:	8bfb      	ldrh	r3, [r7, #30]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3720      	adds	r7, #32
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	0800f9dc 	.word	0x0800f9dc
 80064b4:	0800fa50 	.word	0x0800fa50
 80064b8:	0800fa5c 	.word	0x0800fa5c
 80064bc:	0800fa84 	.word	0x0800fa84
 80064c0:	0800fa98 	.word	0x0800fa98
 80064c4:	20004e68 	.word	0x20004e68
 80064c8:	0800fab8 	.word	0x0800fab8

080064cc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08a      	sub	sp, #40	@ 0x28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80064ea:	4b28      	ldr	r3, [pc, #160]	@ (800658c <ip_reass_remove_oldest_datagram+0xc0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80064f0:	e030      	b.n	8006554 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	695a      	ldr	r2, [r3, #20]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d10c      	bne.n	8006518 <ip_reass_remove_oldest_datagram+0x4c>
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	429a      	cmp	r2, r3
 8006508:	d106      	bne.n	8006518 <ip_reass_remove_oldest_datagram+0x4c>
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	899a      	ldrh	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	889b      	ldrh	r3, [r3, #4]
 8006512:	b29b      	uxth	r3, r3
 8006514:	429a      	cmp	r2, r3
 8006516:	d014      	beq.n	8006542 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	3301      	adds	r3, #1
 800651c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	e009      	b.n	8006542 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	7fda      	ldrb	r2, [r3, #31]
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	7fdb      	ldrb	r3, [r3, #31]
 8006536:	429a      	cmp	r2, r3
 8006538:	d803      	bhi.n	8006542 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1cb      	bne.n	80064f2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d008      	beq.n	8006572 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8006560:	69b9      	ldr	r1, [r7, #24]
 8006562:	6a38      	ldr	r0, [r7, #32]
 8006564:	f7ff ff0e 	bl	8006384 <ip_reass_free_complete_datagram>
 8006568:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	da02      	bge.n	8006580 <ip_reass_remove_oldest_datagram+0xb4>
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b01      	cmp	r3, #1
 800657e:	dcac      	bgt.n	80064da <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8006580:	697b      	ldr	r3, [r7, #20]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3728      	adds	r7, #40	@ 0x28
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20004e64 	.word	0x20004e64

08006590 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800659a:	2004      	movs	r0, #4
 800659c:	f001 f934 	bl	8007808 <memp_malloc>
 80065a0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d110      	bne.n	80065ca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff ff8e 	bl	80064cc <ip_reass_remove_oldest_datagram>
 80065b0:	4602      	mov	r2, r0
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	4293      	cmp	r3, r2
 80065b6:	dc03      	bgt.n	80065c0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80065b8:	2004      	movs	r0, #4
 80065ba:	f001 f925 	bl	8007808 <memp_malloc>
 80065be:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	e016      	b.n	80065f8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80065ca:	2220      	movs	r2, #32
 80065cc:	2100      	movs	r1, #0
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f008 f86b 	bl	800e6aa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	220f      	movs	r2, #15
 80065d8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80065da:	4b09      	ldr	r3, [pc, #36]	@ (8006600 <ip_reass_enqueue_new_datagram+0x70>)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80065e2:	4a07      	ldr	r2, [pc, #28]	@ (8006600 <ip_reass_enqueue_new_datagram+0x70>)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3308      	adds	r3, #8
 80065ec:	2214      	movs	r2, #20
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f008 f8d0 	bl	800e796 <memcpy>
  return ipr;
 80065f6:	68fb      	ldr	r3, [r7, #12]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20004e64 	.word	0x20004e64

08006604 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800660e:	4b10      	ldr	r3, [pc, #64]	@ (8006650 <ip_reass_dequeue_datagram+0x4c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d104      	bne.n	8006622 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a0c      	ldr	r2, [pc, #48]	@ (8006650 <ip_reass_dequeue_datagram+0x4c>)
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	e00d      	b.n	800663e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d106      	bne.n	8006636 <ip_reass_dequeue_datagram+0x32>
 8006628:	4b0a      	ldr	r3, [pc, #40]	@ (8006654 <ip_reass_dequeue_datagram+0x50>)
 800662a:	f240 1245 	movw	r2, #325	@ 0x145
 800662e:	490a      	ldr	r1, [pc, #40]	@ (8006658 <ip_reass_dequeue_datagram+0x54>)
 8006630:	480a      	ldr	r0, [pc, #40]	@ (800665c <ip_reass_dequeue_datagram+0x58>)
 8006632:	f007 ffd5 	bl	800e5e0 <iprintf>
    prev->next = ipr->next;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	2004      	movs	r0, #4
 8006642:	f001 f951 	bl	80078e8 <memp_free>
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20004e64 	.word	0x20004e64
 8006654:	0800f9dc 	.word	0x0800f9dc
 8006658:	0800fadc 	.word	0x0800fadc
 800665c:	0800fa5c 	.word	0x0800fa5c

08006660 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08c      	sub	sp, #48	@ 0x30
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8006670:	2301      	movs	r3, #1
 8006672:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	885b      	ldrh	r3, [r3, #2]
 800667e:	b29b      	uxth	r3, r3
 8006680:	4618      	mov	r0, r3
 8006682:	f7fe f985 	bl	8004990 <lwip_htons>
 8006686:	4603      	mov	r3, r0
 8006688:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	b2db      	uxtb	r3, r3
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8006698:	7e7b      	ldrb	r3, [r7, #25]
 800669a:	b29b      	uxth	r3, r3
 800669c:	8b7a      	ldrh	r2, [r7, #26]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d202      	bcs.n	80066a8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80066a2:	f04f 33ff 	mov.w	r3, #4294967295
 80066a6:	e135      	b.n	8006914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80066a8:	7e7b      	ldrb	r3, [r7, #25]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8b7a      	ldrh	r2, [r7, #26]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	88db      	ldrh	r3, [r3, #6]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe f969 	bl	8004990 <lwip_htons>
 80066be:	4603      	mov	r3, r0
 80066c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	705a      	strb	r2, [r3, #1]
 80066da:	2200      	movs	r2, #0
 80066dc:	709a      	strb	r2, [r3, #2]
 80066de:	2200      	movs	r2, #0
 80066e0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80066e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e4:	8afa      	ldrh	r2, [r7, #22]
 80066e6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80066e8:	8afa      	ldrh	r2, [r7, #22]
 80066ea:	8b7b      	ldrh	r3, [r7, #26]
 80066ec:	4413      	add	r3, r2
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80066f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f6:	88db      	ldrh	r3, [r3, #6]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	8afa      	ldrh	r2, [r7, #22]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d902      	bls.n	8006706 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006700:	f04f 33ff 	mov.w	r3, #4294967295
 8006704:	e106      	b.n	8006914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	627b      	str	r3, [r7, #36]	@ 0x24
 800670c:	e068      	b.n	80067e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	889b      	ldrh	r3, [r3, #4]
 8006718:	b29a      	uxth	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	889b      	ldrh	r3, [r3, #4]
 800671e:	b29b      	uxth	r3, r3
 8006720:	429a      	cmp	r2, r3
 8006722:	d235      	bcs.n	8006790 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006728:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	2b00      	cmp	r3, #0
 800672e:	d020      	beq.n	8006772 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006732:	889b      	ldrh	r3, [r3, #4]
 8006734:	b29a      	uxth	r2, r3
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	88db      	ldrh	r3, [r3, #6]
 800673a:	b29b      	uxth	r3, r3
 800673c:	429a      	cmp	r2, r3
 800673e:	d307      	bcc.n	8006750 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006742:	88db      	ldrh	r3, [r3, #6]
 8006744:	b29a      	uxth	r2, r3
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	889b      	ldrh	r3, [r3, #4]
 800674a:	b29b      	uxth	r3, r3
 800674c:	429a      	cmp	r2, r3
 800674e:	d902      	bls.n	8006756 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006750:	f04f 33ff 	mov.w	r3, #4294967295
 8006754:	e0de      	b.n	8006914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	88db      	ldrh	r3, [r3, #6]
 8006760:	b29a      	uxth	r2, r3
 8006762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006764:	889b      	ldrh	r3, [r3, #4]
 8006766:	b29b      	uxth	r3, r3
 8006768:	429a      	cmp	r2, r3
 800676a:	d03d      	beq.n	80067e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8006770:	e03a      	b.n	80067e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8006772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006774:	88db      	ldrh	r3, [r3, #6]
 8006776:	b29a      	uxth	r2, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	889b      	ldrh	r3, [r3, #4]
 800677c:	b29b      	uxth	r3, r3
 800677e:	429a      	cmp	r2, r3
 8006780:	d902      	bls.n	8006788 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006782:	f04f 33ff 	mov.w	r3, #4294967295
 8006786:	e0c5      	b.n	8006914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	605a      	str	r2, [r3, #4]
      break;
 800678e:	e02b      	b.n	80067e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	889b      	ldrh	r3, [r3, #4]
 8006794:	b29a      	uxth	r2, r3
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	889b      	ldrh	r3, [r3, #4]
 800679a:	b29b      	uxth	r3, r3
 800679c:	429a      	cmp	r2, r3
 800679e:	d102      	bne.n	80067a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80067a0:	f04f 33ff 	mov.w	r3, #4294967295
 80067a4:	e0b6      	b.n	8006914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80067a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a8:	889b      	ldrh	r3, [r3, #4]
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	88db      	ldrh	r3, [r3, #6]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d202      	bcs.n	80067bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80067b6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ba:	e0ab      	b.n	8006914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80067bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80067c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c4:	88db      	ldrh	r3, [r3, #6]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	889b      	ldrh	r3, [r3, #4]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d001      	beq.n	80067d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d193      	bne.n	800670e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80067e6:	e000      	b.n	80067ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80067e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d12d      	bne.n	800684c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d01c      	beq.n	8006830 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	88db      	ldrh	r3, [r3, #6]
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fe:	889b      	ldrh	r3, [r3, #4]
 8006800:	b29b      	uxth	r3, r3
 8006802:	429a      	cmp	r2, r3
 8006804:	d906      	bls.n	8006814 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8006806:	4b45      	ldr	r3, [pc, #276]	@ (800691c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006808:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800680c:	4944      	ldr	r1, [pc, #272]	@ (8006920 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800680e:	4845      	ldr	r0, [pc, #276]	@ (8006924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006810:	f007 fee6 	bl	800e5e0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	88db      	ldrh	r3, [r3, #6]
 800681e:	b29a      	uxth	r2, r3
 8006820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006822:	889b      	ldrh	r3, [r3, #4]
 8006824:	b29b      	uxth	r3, r3
 8006826:	429a      	cmp	r2, r3
 8006828:	d010      	beq.n	800684c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	623b      	str	r3, [r7, #32]
 800682e:	e00d      	b.n	800684c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d006      	beq.n	8006846 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8006838:	4b38      	ldr	r3, [pc, #224]	@ (800691c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800683a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800683e:	493a      	ldr	r1, [pc, #232]	@ (8006928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8006840:	4838      	ldr	r0, [pc, #224]	@ (8006924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006842:	f007 fecd 	bl	800e5e0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d105      	bne.n	800685e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	7f9b      	ldrb	r3, [r3, #30]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d059      	beq.n	8006912 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d04f      	beq.n	8006904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d006      	beq.n	800687a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	889b      	ldrh	r3, [r3, #4]
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	e041      	b.n	8006904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8006880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006882:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8006884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800688a:	e012      	b.n	80068b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8006892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006894:	88db      	ldrh	r3, [r3, #6]
 8006896:	b29a      	uxth	r2, r3
 8006898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800689a:	889b      	ldrh	r3, [r3, #4]
 800689c:	b29b      	uxth	r3, r3
 800689e:	429a      	cmp	r2, r3
 80068a0:	d002      	beq.n	80068a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	623b      	str	r3, [r7, #32]
            break;
 80068a6:	e007      	b.n	80068b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80068a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068aa:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80068ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e9      	bne.n	800688c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d022      	beq.n	8006904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80068c6:	4b15      	ldr	r3, [pc, #84]	@ (800691c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80068c8:	f240 12df 	movw	r2, #479	@ 0x1df
 80068cc:	4917      	ldr	r1, [pc, #92]	@ (800692c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80068ce:	4815      	ldr	r0, [pc, #84]	@ (8006924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80068d0:	f007 fe86 	bl	800e5e0 <iprintf>
          LWIP_ASSERT("sanity check",
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068dc:	429a      	cmp	r2, r3
 80068de:	d106      	bne.n	80068ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80068e0:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80068e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80068e6:	4911      	ldr	r1, [pc, #68]	@ (800692c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80068e8:	480e      	ldr	r0, [pc, #56]	@ (8006924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80068ea:	f007 fe79 	bl	800e5e0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80068ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d006      	beq.n	8006904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80068f6:	4b09      	ldr	r3, [pc, #36]	@ (800691c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80068f8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80068fc:	490c      	ldr	r1, [pc, #48]	@ (8006930 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80068fe:	4809      	ldr	r0, [pc, #36]	@ (8006924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006900:	f007 fe6e 	bl	800e5e0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	2b00      	cmp	r3, #0
 8006908:	bf14      	ite	ne
 800690a:	2301      	movne	r3, #1
 800690c:	2300      	moveq	r3, #0
 800690e:	b2db      	uxtb	r3, r3
 8006910:	e000      	b.n	8006914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3730      	adds	r7, #48	@ 0x30
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	0800f9dc 	.word	0x0800f9dc
 8006920:	0800faf8 	.word	0x0800faf8
 8006924:	0800fa5c 	.word	0x0800fa5c
 8006928:	0800fb18 	.word	0x0800fb18
 800692c:	0800fb50 	.word	0x0800fb50
 8006930:	0800fb60 	.word	0x0800fb60

08006934 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08e      	sub	sp, #56	@ 0x38
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	b2db      	uxtb	r3, r3
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b14      	cmp	r3, #20
 8006952:	f040 8171 	bne.w	8006c38 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8006956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006958:	88db      	ldrh	r3, [r3, #6]
 800695a:	b29b      	uxth	r3, r3
 800695c:	4618      	mov	r0, r3
 800695e:	f7fe f817 	bl	8004990 <lwip_htons>
 8006962:	4603      	mov	r3, r0
 8006964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006968:	b29b      	uxth	r3, r3
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800696e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006970:	885b      	ldrh	r3, [r3, #2]
 8006972:	b29b      	uxth	r3, r3
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe f80b 	bl	8004990 <lwip_htons>
 800697a:	4603      	mov	r3, r0
 800697c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800697e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	b2db      	uxtb	r3, r3
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800698e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006992:	b29b      	uxth	r3, r3
 8006994:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006996:	429a      	cmp	r2, r3
 8006998:	f0c0 8150 	bcc.w	8006c3c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800699c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 fe7f 	bl	80086ac <pbuf_clen>
 80069ae:	4603      	mov	r3, r0
 80069b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80069b2:	4b8c      	ldr	r3, [pc, #560]	@ (8006be4 <ip4_reass+0x2b0>)
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	8c3b      	ldrh	r3, [r7, #32]
 80069ba:	4413      	add	r3, r2
 80069bc:	2b0a      	cmp	r3, #10
 80069be:	dd10      	ble.n	80069e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80069c0:	8c3b      	ldrh	r3, [r7, #32]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069c6:	f7ff fd81 	bl	80064cc <ip_reass_remove_oldest_datagram>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 8137 	beq.w	8006c40 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80069d2:	4b84      	ldr	r3, [pc, #528]	@ (8006be4 <ip4_reass+0x2b0>)
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	8c3b      	ldrh	r3, [r7, #32]
 80069da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80069dc:	2b0a      	cmp	r3, #10
 80069de:	f300 812f 	bgt.w	8006c40 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80069e2:	4b81      	ldr	r3, [pc, #516]	@ (8006be8 <ip4_reass+0x2b4>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80069e8:	e015      	b.n	8006a16 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d10c      	bne.n	8006a10 <ip4_reass+0xdc>
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d106      	bne.n	8006a10 <ip4_reass+0xdc>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	899a      	ldrh	r2, [r3, #12]
 8006a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a08:	889b      	ldrh	r3, [r3, #4]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d006      	beq.n	8006a1e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e6      	bne.n	80069ea <ip4_reass+0xb6>
 8006a1c:	e000      	b.n	8006a20 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8006a1e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8006a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8006a26:	8c3b      	ldrh	r3, [r7, #32]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a2c:	f7ff fdb0 	bl	8006590 <ip_reass_enqueue_new_datagram>
 8006a30:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11c      	bne.n	8006a72 <ip4_reass+0x13e>
      goto nullreturn;
 8006a38:	e105      	b.n	8006c46 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3c:	88db      	ldrh	r3, [r3, #6]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fd ffa5 	bl	8004990 <lwip_htons>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d110      	bne.n	8006a72 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	89db      	ldrh	r3, [r3, #14]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fd ff9b 	bl	8004990 <lwip_htons>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d006      	beq.n	8006a72 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	3308      	adds	r3, #8
 8006a68:	2214      	movs	r2, #20
 8006a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f007 fe92 	bl	800e796 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a74:	88db      	ldrh	r3, [r3, #6]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bf0c      	ite	eq
 8006a80:	2301      	moveq	r3, #1
 8006a82:	2300      	movne	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8006a8e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006a90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a92:	4413      	add	r3, r2
 8006a94:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006a96:	8b7a      	ldrh	r2, [r7, #26]
 8006a98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	f0c0 80a0 	bcc.w	8006be0 <ip4_reass+0x2ac>
 8006aa0:	8b7b      	ldrh	r3, [r7, #26]
 8006aa2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	f200 809a 	bhi.w	8006be0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ab2:	f7ff fdd5 	bl	8006660 <ip_reass_chain_frag_into_datagram_and_validate>
 8006ab6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	f000 809b 	beq.w	8006bf8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006ac2:	4b48      	ldr	r3, [pc, #288]	@ (8006be4 <ip4_reass+0x2b0>)
 8006ac4:	881a      	ldrh	r2, [r3, #0]
 8006ac6:	8c3b      	ldrh	r3, [r7, #32]
 8006ac8:	4413      	add	r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	4b45      	ldr	r3, [pc, #276]	@ (8006be4 <ip4_reass+0x2b0>)
 8006ace:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00d      	beq.n	8006af2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8006ad6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006ad8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ada:	4413      	add	r3, r2
 8006adc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	8a7a      	ldrh	r2, [r7, #18]
 8006ae2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	7f9b      	ldrb	r3, [r3, #30]
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d171      	bne.n	8006bdc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	8b9b      	ldrh	r3, [r3, #28]
 8006afc:	3314      	adds	r3, #20
 8006afe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8006b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b14:	3308      	adds	r3, #8
 8006b16:	2214      	movs	r2, #20
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b1c:	f007 fe3b 	bl	800e796 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8006b20:	8a3b      	ldrh	r3, [r7, #16]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fd ff34 	bl	8004990 <lwip_htons>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b32:	2200      	movs	r2, #0
 8006b34:	719a      	strb	r2, [r3, #6]
 8006b36:	2200      	movs	r2, #0
 8006b38:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	729a      	strb	r2, [r3, #10]
 8006b40:	2200      	movs	r2, #0
 8006b42:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8006b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8006b4a:	e00d      	b.n	8006b68 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8006b52:	2114      	movs	r1, #20
 8006b54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006b56:	f001 fc9b 	bl	8008490 <pbuf_remove_header>
      pbuf_cat(p, r);
 8006b5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 fddf 	bl	8008720 <pbuf_cat>
      r = iprh->next_pbuf;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8006b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1ee      	bne.n	8006b4c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8006b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006be8 <ip4_reass+0x2b4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d102      	bne.n	8006b7e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b7c:	e010      	b.n	8006ba0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006be8 <ip4_reass+0x2b4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b84:	e007      	b.n	8006b96 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8006b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d006      	beq.n	8006b9e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f4      	bne.n	8006b86 <ip4_reass+0x252>
 8006b9c:	e000      	b.n	8006ba0 <ip4_reass+0x26c>
          break;
 8006b9e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006ba0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ba2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ba4:	f7ff fd2e 	bl	8006604 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fd7f 	bl	80086ac <pbuf_clen>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006be4 <ip4_reass+0x2b0>)
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	8c3a      	ldrh	r2, [r7, #32]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d906      	bls.n	8006bca <ip4_reass+0x296>
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006bec <ip4_reass+0x2b8>)
 8006bbe:	f240 229b 	movw	r2, #667	@ 0x29b
 8006bc2:	490b      	ldr	r1, [pc, #44]	@ (8006bf0 <ip4_reass+0x2bc>)
 8006bc4:	480b      	ldr	r0, [pc, #44]	@ (8006bf4 <ip4_reass+0x2c0>)
 8006bc6:	f007 fd0b 	bl	800e5e0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8006bca:	4b06      	ldr	r3, [pc, #24]	@ (8006be4 <ip4_reass+0x2b0>)
 8006bcc:	881a      	ldrh	r2, [r3, #0]
 8006bce:	8c3b      	ldrh	r3, [r7, #32]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	4b03      	ldr	r3, [pc, #12]	@ (8006be4 <ip4_reass+0x2b0>)
 8006bd6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	e038      	b.n	8006c4e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e036      	b.n	8006c4e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8006be0:	bf00      	nop
 8006be2:	e00a      	b.n	8006bfa <ip4_reass+0x2c6>
 8006be4:	20004e68 	.word	0x20004e68
 8006be8:	20004e64 	.word	0x20004e64
 8006bec:	0800f9dc 	.word	0x0800f9dc
 8006bf0:	0800fb84 	.word	0x0800fb84
 8006bf4:	0800fa5c 	.word	0x0800fa5c
    goto nullreturn_ipr;
 8006bf8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d106      	bne.n	8006c0e <ip4_reass+0x2da>
 8006c00:	4b15      	ldr	r3, [pc, #84]	@ (8006c58 <ip4_reass+0x324>)
 8006c02:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8006c06:	4915      	ldr	r1, [pc, #84]	@ (8006c5c <ip4_reass+0x328>)
 8006c08:	4815      	ldr	r0, [pc, #84]	@ (8006c60 <ip4_reass+0x32c>)
 8006c0a:	f007 fce9 	bl	800e5e0 <iprintf>
  if (ipr->p == NULL) {
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d116      	bne.n	8006c44 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8006c16:	4b13      	ldr	r3, [pc, #76]	@ (8006c64 <ip4_reass+0x330>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d006      	beq.n	8006c2e <ip4_reass+0x2fa>
 8006c20:	4b0d      	ldr	r3, [pc, #52]	@ (8006c58 <ip4_reass+0x324>)
 8006c22:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8006c26:	4910      	ldr	r1, [pc, #64]	@ (8006c68 <ip4_reass+0x334>)
 8006c28:	480d      	ldr	r0, [pc, #52]	@ (8006c60 <ip4_reass+0x32c>)
 8006c2a:	f007 fcd9 	bl	800e5e0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8006c2e:	2100      	movs	r1, #0
 8006c30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c32:	f7ff fce7 	bl	8006604 <ip_reass_dequeue_datagram>
 8006c36:	e006      	b.n	8006c46 <ip4_reass+0x312>
    goto nullreturn;
 8006c38:	bf00      	nop
 8006c3a:	e004      	b.n	8006c46 <ip4_reass+0x312>
    goto nullreturn;
 8006c3c:	bf00      	nop
 8006c3e:	e002      	b.n	8006c46 <ip4_reass+0x312>
      goto nullreturn;
 8006c40:	bf00      	nop
 8006c42:	e000      	b.n	8006c46 <ip4_reass+0x312>
  }

nullreturn:
 8006c44:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 fca8 	bl	800859c <pbuf_free>
  return NULL;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3738      	adds	r7, #56	@ 0x38
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	0800f9dc 	.word	0x0800f9dc
 8006c5c:	0800fba0 	.word	0x0800fba0
 8006c60:	0800fa5c 	.word	0x0800fa5c
 8006c64:	20004e64 	.word	0x20004e64
 8006c68:	0800fbac 	.word	0x0800fbac

08006c6c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8006c70:	2005      	movs	r0, #5
 8006c72:	f000 fdc9 	bl	8007808 <memp_malloc>
 8006c76:	4603      	mov	r3, r0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <ip_frag_free_pbuf_custom_ref+0x1c>
 8006c8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ca8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8006c8c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8006c90:	4906      	ldr	r1, [pc, #24]	@ (8006cac <ip_frag_free_pbuf_custom_ref+0x30>)
 8006c92:	4807      	ldr	r0, [pc, #28]	@ (8006cb0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8006c94:	f007 fca4 	bl	800e5e0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	2005      	movs	r0, #5
 8006c9c:	f000 fe24 	bl	80078e8 <memp_free>
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	0800f9dc 	.word	0x0800f9dc
 8006cac:	0800fbcc 	.word	0x0800fbcc
 8006cb0:	0800fa5c 	.word	0x0800fa5c

08006cb4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <ipfrag_free_pbuf_custom+0x20>
 8006cc6:	4b11      	ldr	r3, [pc, #68]	@ (8006d0c <ipfrag_free_pbuf_custom+0x58>)
 8006cc8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8006ccc:	4910      	ldr	r1, [pc, #64]	@ (8006d10 <ipfrag_free_pbuf_custom+0x5c>)
 8006cce:	4811      	ldr	r0, [pc, #68]	@ (8006d14 <ipfrag_free_pbuf_custom+0x60>)
 8006cd0:	f007 fc86 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d006      	beq.n	8006cea <ipfrag_free_pbuf_custom+0x36>
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8006d0c <ipfrag_free_pbuf_custom+0x58>)
 8006cde:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8006ce2:	490d      	ldr	r1, [pc, #52]	@ (8006d18 <ipfrag_free_pbuf_custom+0x64>)
 8006ce4:	480b      	ldr	r0, [pc, #44]	@ (8006d14 <ipfrag_free_pbuf_custom+0x60>)
 8006ce6:	f007 fc7b 	bl	800e5e0 <iprintf>
  if (pcr->original != NULL) {
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 fc50 	bl	800859c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff ffbd 	bl	8006c7c <ip_frag_free_pbuf_custom_ref>
}
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	0800f9dc 	.word	0x0800f9dc
 8006d10:	0800fbd8 	.word	0x0800fbd8
 8006d14:	0800fa5c 	.word	0x0800fa5c
 8006d18:	0800fbe4 	.word	0x0800fbe4

08006d1c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b094      	sub	sp, #80	@ 0x50
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006d32:	3b14      	subs	r3, #20
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	da00      	bge.n	8006d3a <ip4_frag+0x1e>
 8006d38:	3307      	adds	r3, #7
 8006d3a:	10db      	asrs	r3, r3, #3
 8006d3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8006d3e:	2314      	movs	r3, #20
 8006d40:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8006d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	f003 030f 	and.w	r3, r3, #15
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b14      	cmp	r3, #20
 8006d5c:	d002      	beq.n	8006d64 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8006d5e:	f06f 0305 	mvn.w	r3, #5
 8006d62:	e110      	b.n	8006f86 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	895b      	ldrh	r3, [r3, #10]
 8006d68:	2b13      	cmp	r3, #19
 8006d6a:	d809      	bhi.n	8006d80 <ip4_frag+0x64>
 8006d6c:	4b88      	ldr	r3, [pc, #544]	@ (8006f90 <ip4_frag+0x274>)
 8006d6e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8006d72:	4988      	ldr	r1, [pc, #544]	@ (8006f94 <ip4_frag+0x278>)
 8006d74:	4888      	ldr	r0, [pc, #544]	@ (8006f98 <ip4_frag+0x27c>)
 8006d76:	f007 fc33 	bl	800e5e0 <iprintf>
 8006d7a:	f06f 0305 	mvn.w	r3, #5
 8006d7e:	e102      	b.n	8006f86 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	88db      	ldrh	r3, [r3, #6]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fd fe02 	bl	8004990 <lwip_htons>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8006d90:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006d92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d96:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8006d9a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006da0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	891b      	ldrh	r3, [r3, #8]
 8006da6:	3b14      	subs	r3, #20
 8006da8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8006dac:	e0e1      	b.n	8006f72 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006dae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8006db8:	4293      	cmp	r3, r2
 8006dba:	bf28      	it	cs
 8006dbc:	4613      	movcs	r3, r2
 8006dbe:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006dc0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8006dc4:	2114      	movs	r1, #20
 8006dc6:	200e      	movs	r0, #14
 8006dc8:	f001 f900 	bl	8007fcc <pbuf_alloc>
 8006dcc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 80d5 	beq.w	8006f80 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd8:	895b      	ldrh	r3, [r3, #10]
 8006dda:	2b13      	cmp	r3, #19
 8006ddc:	d806      	bhi.n	8006dec <ip4_frag+0xd0>
 8006dde:	4b6c      	ldr	r3, [pc, #432]	@ (8006f90 <ip4_frag+0x274>)
 8006de0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8006de4:	496d      	ldr	r1, [pc, #436]	@ (8006f9c <ip4_frag+0x280>)
 8006de6:	486c      	ldr	r0, [pc, #432]	@ (8006f98 <ip4_frag+0x27c>)
 8006de8:	f007 fbfa 	bl	800e5e0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2214      	movs	r2, #20
 8006df2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006df4:	4618      	mov	r0, r3
 8006df6:	f007 fcce 	bl	800e796 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8006e00:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e02:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8006e06:	e064      	b.n	8006ed2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	895a      	ldrh	r2, [r3, #10]
 8006e0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	895b      	ldrh	r3, [r3, #10]
 8006e16:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d906      	bls.n	8006e2a <ip4_frag+0x10e>
 8006e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8006f90 <ip4_frag+0x274>)
 8006e1e:	f240 322d 	movw	r2, #813	@ 0x32d
 8006e22:	495f      	ldr	r1, [pc, #380]	@ (8006fa0 <ip4_frag+0x284>)
 8006e24:	485c      	ldr	r0, [pc, #368]	@ (8006f98 <ip4_frag+0x27c>)
 8006e26:	f007 fbdb 	bl	800e5e0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006e2a:	8bfa      	ldrh	r2, [r7, #30]
 8006e2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006e30:	4293      	cmp	r3, r2
 8006e32:	bf28      	it	cs
 8006e34:	4613      	movcs	r3, r2
 8006e36:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8006e3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d105      	bne.n	8006e4e <ip4_frag+0x132>
        poff = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
        continue;
 8006e4c:	e041      	b.n	8006ed2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8006e4e:	f7ff ff0d 	bl	8006c6c <ip_frag_alloc_pbuf_custom_ref>
 8006e52:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8006e5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e5c:	f001 fb9e 	bl	800859c <pbuf_free>
        goto memerr;
 8006e60:	e08f      	b.n	8006f82 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006e62:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006e68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8006e70:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006e74:	9201      	str	r2, [sp, #4]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2241      	movs	r2, #65	@ 0x41
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	f001 f9d3 	bl	8008228 <pbuf_alloced_custom>
 8006e82:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8006e8a:	69b8      	ldr	r0, [r7, #24]
 8006e8c:	f7ff fef6 	bl	8006c7c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8006e90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e92:	f001 fb83 	bl	800859c <pbuf_free>
        goto memerr;
 8006e96:	e074      	b.n	8006f82 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f001 fc1f 	bl	80086dc <pbuf_ref>
      pcr->original = p;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8006fa4 <ip4_frag+0x288>)
 8006ea8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8006eaa:	6979      	ldr	r1, [r7, #20]
 8006eac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006eae:	f001 fc37 	bl	8008720 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8006eb2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8006eb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8006ec0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <ip4_frag+0x1b6>
        poff = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8006ed2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d196      	bne.n	8006e08 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8006eda:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006edc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006ee0:	4413      	add	r3, r2
 8006ee2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ee8:	f1a3 0213 	sub.w	r2, r3, #19
 8006eec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	bfcc      	ite	gt
 8006ef4:	2301      	movgt	r3, #1
 8006ef6:	2300      	movle	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8006efc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f04:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <ip4_frag+0x1f6>
 8006f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8006f12:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006f14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006f18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006f1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fd fd37 	bl	8004990 <lwip_htons>
 8006f22:	4603      	mov	r3, r0
 8006f24:	461a      	mov	r2, r3
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8006f2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f2c:	3314      	adds	r3, #20
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fd fd2d 	bl	8004990 <lwip_htons>
 8006f36:	4603      	mov	r3, r0
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	2200      	movs	r2, #0
 8006f42:	729a      	strb	r2, [r3, #10]
 8006f44:	2200      	movs	r2, #0
 8006f46:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f50:	68b8      	ldr	r0, [r7, #8]
 8006f52:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8006f54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f56:	f001 fb21 	bl	800859c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8006f5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8006f5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8006f66:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8006f6a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8006f72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f47f af19 	bne.w	8006dae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e002      	b.n	8006f86 <ip4_frag+0x26a>
      goto memerr;
 8006f80:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8006f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3748      	adds	r7, #72	@ 0x48
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	0800f9dc 	.word	0x0800f9dc
 8006f94:	0800fbf0 	.word	0x0800fbf0
 8006f98:	0800fa5c 	.word	0x0800fa5c
 8006f9c:	0800fc0c 	.word	0x0800fc0c
 8006fa0:	0800fc2c 	.word	0x0800fc2c
 8006fa4:	08006cb5 	.word	0x08006cb5

08006fa8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006fb2:	4b05      	ldr	r3, [pc, #20]	@ (8006fc8 <ptr_to_mem+0x20>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	4413      	add	r3, r2
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20004e6c 	.word	0x20004e6c

08006fcc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006fd4:	4b05      	ldr	r3, [pc, #20]	@ (8006fec <mem_to_ptr+0x20>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	b29b      	uxth	r3, r3
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	20004e6c 	.word	0x20004e6c

08006ff0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006ff0:	b590      	push	{r4, r7, lr}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006ff8:	4b45      	ldr	r3, [pc, #276]	@ (8007110 <plug_holes+0x120>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d206      	bcs.n	8007010 <plug_holes+0x20>
 8007002:	4b44      	ldr	r3, [pc, #272]	@ (8007114 <plug_holes+0x124>)
 8007004:	f240 12df 	movw	r2, #479	@ 0x1df
 8007008:	4943      	ldr	r1, [pc, #268]	@ (8007118 <plug_holes+0x128>)
 800700a:	4844      	ldr	r0, [pc, #272]	@ (800711c <plug_holes+0x12c>)
 800700c:	f007 fae8 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007010:	4b43      	ldr	r3, [pc, #268]	@ (8007120 <plug_holes+0x130>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	429a      	cmp	r2, r3
 8007018:	d306      	bcc.n	8007028 <plug_holes+0x38>
 800701a:	4b3e      	ldr	r3, [pc, #248]	@ (8007114 <plug_holes+0x124>)
 800701c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007020:	4940      	ldr	r1, [pc, #256]	@ (8007124 <plug_holes+0x134>)
 8007022:	483e      	ldr	r0, [pc, #248]	@ (800711c <plug_holes+0x12c>)
 8007024:	f007 fadc 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	791b      	ldrb	r3, [r3, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d006      	beq.n	800703e <plug_holes+0x4e>
 8007030:	4b38      	ldr	r3, [pc, #224]	@ (8007114 <plug_holes+0x124>)
 8007032:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8007036:	493c      	ldr	r1, [pc, #240]	@ (8007128 <plug_holes+0x138>)
 8007038:	4838      	ldr	r0, [pc, #224]	@ (800711c <plug_holes+0x12c>)
 800703a:	f007 fad1 	bl	800e5e0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007046:	d906      	bls.n	8007056 <plug_holes+0x66>
 8007048:	4b32      	ldr	r3, [pc, #200]	@ (8007114 <plug_holes+0x124>)
 800704a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800704e:	4937      	ldr	r1, [pc, #220]	@ (800712c <plug_holes+0x13c>)
 8007050:	4832      	ldr	r0, [pc, #200]	@ (800711c <plug_holes+0x12c>)
 8007052:	f007 fac5 	bl	800e5e0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff ffa4 	bl	8006fa8 <ptr_to_mem>
 8007060:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	429a      	cmp	r2, r3
 8007068:	d024      	beq.n	80070b4 <plug_holes+0xc4>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	791b      	ldrb	r3, [r3, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d120      	bne.n	80070b4 <plug_holes+0xc4>
 8007072:	4b2b      	ldr	r3, [pc, #172]	@ (8007120 <plug_holes+0x130>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	429a      	cmp	r2, r3
 800707a:	d01b      	beq.n	80070b4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800707c:	4b2c      	ldr	r3, [pc, #176]	@ (8007130 <plug_holes+0x140>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	429a      	cmp	r2, r3
 8007084:	d102      	bne.n	800708c <plug_holes+0x9c>
      lfree = mem;
 8007086:	4a2a      	ldr	r2, [pc, #168]	@ (8007130 <plug_holes+0x140>)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	881a      	ldrh	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800709c:	d00a      	beq.n	80070b4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff ff80 	bl	8006fa8 <ptr_to_mem>
 80070a8:	4604      	mov	r4, r0
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff ff8e 	bl	8006fcc <mem_to_ptr>
 80070b0:	4603      	mov	r3, r0
 80070b2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	885b      	ldrh	r3, [r3, #2]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff ff75 	bl	8006fa8 <ptr_to_mem>
 80070be:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d01f      	beq.n	8007108 <plug_holes+0x118>
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	791b      	ldrb	r3, [r3, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d11b      	bne.n	8007108 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80070d0:	4b17      	ldr	r3, [pc, #92]	@ (8007130 <plug_holes+0x140>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d102      	bne.n	80070e0 <plug_holes+0xf0>
      lfree = pmem;
 80070da:	4a15      	ldr	r2, [pc, #84]	@ (8007130 <plug_holes+0x140>)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	881a      	ldrh	r2, [r3, #0]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80070f0:	d00a      	beq.n	8007108 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff ff56 	bl	8006fa8 <ptr_to_mem>
 80070fc:	4604      	mov	r4, r0
 80070fe:	68b8      	ldr	r0, [r7, #8]
 8007100:	f7ff ff64 	bl	8006fcc <mem_to_ptr>
 8007104:	4603      	mov	r3, r0
 8007106:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007108:	bf00      	nop
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	bd90      	pop	{r4, r7, pc}
 8007110:	20004e6c 	.word	0x20004e6c
 8007114:	0800fc3c 	.word	0x0800fc3c
 8007118:	0800fca4 	.word	0x0800fca4
 800711c:	0800fcbc 	.word	0x0800fcbc
 8007120:	20004e70 	.word	0x20004e70
 8007124:	0800fce4 	.word	0x0800fce4
 8007128:	0800fd00 	.word	0x0800fd00
 800712c:	0800fd1c 	.word	0x0800fd1c
 8007130:	20004e74 	.word	0x20004e74

08007134 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800713a:	4b16      	ldr	r3, [pc, #88]	@ (8007194 <mem_init+0x60>)
 800713c:	4a16      	ldr	r2, [pc, #88]	@ (8007198 <mem_init+0x64>)
 800713e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007140:	4b14      	ldr	r3, [pc, #80]	@ (8007194 <mem_init+0x60>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800714c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800715a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800715e:	f7ff ff23 	bl	8006fa8 <ptr_to_mem>
 8007162:	4603      	mov	r3, r0
 8007164:	4a0d      	ldr	r2, [pc, #52]	@ (800719c <mem_init+0x68>)
 8007166:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007168:	4b0c      	ldr	r3, [pc, #48]	@ (800719c <mem_init+0x68>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2201      	movs	r2, #1
 800716e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007170:	4b0a      	ldr	r3, [pc, #40]	@ (800719c <mem_init+0x68>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007178:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800717a:	4b08      	ldr	r3, [pc, #32]	@ (800719c <mem_init+0x68>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007182:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007184:	4b03      	ldr	r3, [pc, #12]	@ (8007194 <mem_init+0x60>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a05      	ldr	r2, [pc, #20]	@ (80071a0 <mem_init+0x6c>)
 800718a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800718c:	bf00      	nop
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20004e6c 	.word	0x20004e6c
 8007198:	20048000 	.word	0x20048000
 800719c:	20004e70 	.word	0x20004e70
 80071a0:	20004e74 	.word	0x20004e74

080071a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff ff0d 	bl	8006fcc <mem_to_ptr>
 80071b2:	4603      	mov	r3, r0
 80071b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fef4 	bl	8006fa8 <ptr_to_mem>
 80071c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	885b      	ldrh	r3, [r3, #2]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff feee 	bl	8006fa8 <ptr_to_mem>
 80071cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80071d6:	d818      	bhi.n	800720a <mem_link_valid+0x66>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	885b      	ldrh	r3, [r3, #2]
 80071dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80071e0:	d813      	bhi.n	800720a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071e6:	8afa      	ldrh	r2, [r7, #22]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d004      	beq.n	80071f6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	8afa      	ldrh	r2, [r7, #22]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d109      	bne.n	800720a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80071f6:	4b08      	ldr	r3, [pc, #32]	@ (8007218 <mem_link_valid+0x74>)
 80071f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d006      	beq.n	800720e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	885b      	ldrh	r3, [r3, #2]
 8007204:	8afa      	ldrh	r2, [r7, #22]
 8007206:	429a      	cmp	r2, r3
 8007208:	d001      	beq.n	800720e <mem_link_valid+0x6a>
    return 0;
 800720a:	2300      	movs	r3, #0
 800720c:	e000      	b.n	8007210 <mem_link_valid+0x6c>
  }
  return 1;
 800720e:	2301      	movs	r3, #1
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20004e70 	.word	0x20004e70

0800721c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d04c      	beq.n	80072c4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007234:	4b25      	ldr	r3, [pc, #148]	@ (80072cc <mem_free+0xb0>)
 8007236:	f240 2273 	movw	r2, #627	@ 0x273
 800723a:	4925      	ldr	r1, [pc, #148]	@ (80072d0 <mem_free+0xb4>)
 800723c:	4825      	ldr	r0, [pc, #148]	@ (80072d4 <mem_free+0xb8>)
 800723e:	f007 f9cf 	bl	800e5e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007242:	e040      	b.n	80072c6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3b08      	subs	r3, #8
 8007248:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800724a:	4b23      	ldr	r3, [pc, #140]	@ (80072d8 <mem_free+0xbc>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	429a      	cmp	r2, r3
 8007252:	d306      	bcc.n	8007262 <mem_free+0x46>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f103 020c 	add.w	r2, r3, #12
 800725a:	4b20      	ldr	r3, [pc, #128]	@ (80072dc <mem_free+0xc0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	429a      	cmp	r2, r3
 8007260:	d907      	bls.n	8007272 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007262:	4b1a      	ldr	r3, [pc, #104]	@ (80072cc <mem_free+0xb0>)
 8007264:	f240 227f 	movw	r2, #639	@ 0x27f
 8007268:	491d      	ldr	r1, [pc, #116]	@ (80072e0 <mem_free+0xc4>)
 800726a:	481a      	ldr	r0, [pc, #104]	@ (80072d4 <mem_free+0xb8>)
 800726c:	f007 f9b8 	bl	800e5e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007270:	e029      	b.n	80072c6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	791b      	ldrb	r3, [r3, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d107      	bne.n	800728a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800727a:	4b14      	ldr	r3, [pc, #80]	@ (80072cc <mem_free+0xb0>)
 800727c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007280:	4918      	ldr	r1, [pc, #96]	@ (80072e4 <mem_free+0xc8>)
 8007282:	4814      	ldr	r0, [pc, #80]	@ (80072d4 <mem_free+0xb8>)
 8007284:	f007 f9ac 	bl	800e5e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007288:	e01d      	b.n	80072c6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f7ff ff8a 	bl	80071a4 <mem_link_valid>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d107      	bne.n	80072a6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <mem_free+0xb0>)
 8007298:	f240 2295 	movw	r2, #661	@ 0x295
 800729c:	4912      	ldr	r1, [pc, #72]	@ (80072e8 <mem_free+0xcc>)
 800729e:	480d      	ldr	r0, [pc, #52]	@ (80072d4 <mem_free+0xb8>)
 80072a0:	f007 f99e 	bl	800e5e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80072a4:	e00f      	b.n	80072c6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80072ac:	4b0f      	ldr	r3, [pc, #60]	@ (80072ec <mem_free+0xd0>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d202      	bcs.n	80072bc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80072b6:	4a0d      	ldr	r2, [pc, #52]	@ (80072ec <mem_free+0xd0>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f7ff fe97 	bl	8006ff0 <plug_holes>
 80072c2:	e000      	b.n	80072c6 <mem_free+0xaa>
    return;
 80072c4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	0800fc3c 	.word	0x0800fc3c
 80072d0:	0800fd48 	.word	0x0800fd48
 80072d4:	0800fcbc 	.word	0x0800fcbc
 80072d8:	20004e6c 	.word	0x20004e6c
 80072dc:	20004e70 	.word	0x20004e70
 80072e0:	0800fd6c 	.word	0x0800fd6c
 80072e4:	0800fd88 	.word	0x0800fd88
 80072e8:	0800fdb0 	.word	0x0800fdb0
 80072ec:	20004e74 	.word	0x20004e74

080072f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80072fc:	887b      	ldrh	r3, [r7, #2]
 80072fe:	3303      	adds	r3, #3
 8007300:	b29b      	uxth	r3, r3
 8007302:	f023 0303 	bic.w	r3, r3, #3
 8007306:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007308:	8bfb      	ldrh	r3, [r7, #30]
 800730a:	2b0b      	cmp	r3, #11
 800730c:	d801      	bhi.n	8007312 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800730e:	230c      	movs	r3, #12
 8007310:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007312:	8bfb      	ldrh	r3, [r7, #30]
 8007314:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007318:	d803      	bhi.n	8007322 <mem_trim+0x32>
 800731a:	8bfa      	ldrh	r2, [r7, #30]
 800731c:	887b      	ldrh	r3, [r7, #2]
 800731e:	429a      	cmp	r2, r3
 8007320:	d201      	bcs.n	8007326 <mem_trim+0x36>
    return NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	e0cc      	b.n	80074c0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007326:	4b68      	ldr	r3, [pc, #416]	@ (80074c8 <mem_trim+0x1d8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d304      	bcc.n	800733a <mem_trim+0x4a>
 8007330:	4b66      	ldr	r3, [pc, #408]	@ (80074cc <mem_trim+0x1dc>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	429a      	cmp	r2, r3
 8007338:	d306      	bcc.n	8007348 <mem_trim+0x58>
 800733a:	4b65      	ldr	r3, [pc, #404]	@ (80074d0 <mem_trim+0x1e0>)
 800733c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8007340:	4964      	ldr	r1, [pc, #400]	@ (80074d4 <mem_trim+0x1e4>)
 8007342:	4865      	ldr	r0, [pc, #404]	@ (80074d8 <mem_trim+0x1e8>)
 8007344:	f007 f94c 	bl	800e5e0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007348:	4b5f      	ldr	r3, [pc, #380]	@ (80074c8 <mem_trim+0x1d8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	429a      	cmp	r2, r3
 8007350:	d304      	bcc.n	800735c <mem_trim+0x6c>
 8007352:	4b5e      	ldr	r3, [pc, #376]	@ (80074cc <mem_trim+0x1dc>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	d301      	bcc.n	8007360 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	e0af      	b.n	80074c0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3b08      	subs	r3, #8
 8007364:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007366:	69b8      	ldr	r0, [r7, #24]
 8007368:	f7ff fe30 	bl	8006fcc <mem_to_ptr>
 800736c:	4603      	mov	r3, r0
 800736e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	881a      	ldrh	r2, [r3, #0]
 8007374:	8afb      	ldrh	r3, [r7, #22]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b08      	subs	r3, #8
 800737c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800737e:	8bfa      	ldrh	r2, [r7, #30]
 8007380:	8abb      	ldrh	r3, [r7, #20]
 8007382:	429a      	cmp	r2, r3
 8007384:	d906      	bls.n	8007394 <mem_trim+0xa4>
 8007386:	4b52      	ldr	r3, [pc, #328]	@ (80074d0 <mem_trim+0x1e0>)
 8007388:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800738c:	4953      	ldr	r1, [pc, #332]	@ (80074dc <mem_trim+0x1ec>)
 800738e:	4852      	ldr	r0, [pc, #328]	@ (80074d8 <mem_trim+0x1e8>)
 8007390:	f007 f926 	bl	800e5e0 <iprintf>
  if (newsize > size) {
 8007394:	8bfa      	ldrh	r2, [r7, #30]
 8007396:	8abb      	ldrh	r3, [r7, #20]
 8007398:	429a      	cmp	r2, r3
 800739a:	d901      	bls.n	80073a0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800739c:	2300      	movs	r3, #0
 800739e:	e08f      	b.n	80074c0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80073a0:	8bfa      	ldrh	r2, [r7, #30]
 80073a2:	8abb      	ldrh	r3, [r7, #20]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d101      	bne.n	80073ac <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	e089      	b.n	80074c0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fdf9 	bl	8006fa8 <ptr_to_mem>
 80073b6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	791b      	ldrb	r3, [r3, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d13f      	bne.n	8007440 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80073c8:	d106      	bne.n	80073d8 <mem_trim+0xe8>
 80073ca:	4b41      	ldr	r3, [pc, #260]	@ (80074d0 <mem_trim+0x1e0>)
 80073cc:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80073d0:	4943      	ldr	r1, [pc, #268]	@ (80074e0 <mem_trim+0x1f0>)
 80073d2:	4841      	ldr	r0, [pc, #260]	@ (80074d8 <mem_trim+0x1e8>)
 80073d4:	f007 f904 	bl	800e5e0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80073de:	8afa      	ldrh	r2, [r7, #22]
 80073e0:	8bfb      	ldrh	r3, [r7, #30]
 80073e2:	4413      	add	r3, r2
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3308      	adds	r3, #8
 80073e8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80073ea:	4b3e      	ldr	r3, [pc, #248]	@ (80074e4 <mem_trim+0x1f4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d106      	bne.n	8007402 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80073f4:	89fb      	ldrh	r3, [r7, #14]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff fdd6 	bl	8006fa8 <ptr_to_mem>
 80073fc:	4603      	mov	r3, r0
 80073fe:	4a39      	ldr	r2, [pc, #228]	@ (80074e4 <mem_trim+0x1f4>)
 8007400:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007402:	89fb      	ldrh	r3, [r7, #14]
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fdcf 	bl	8006fa8 <ptr_to_mem>
 800740a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2200      	movs	r2, #0
 8007410:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	89ba      	ldrh	r2, [r7, #12]
 8007416:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	8afa      	ldrh	r2, [r7, #22]
 800741c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	89fa      	ldrh	r2, [r7, #14]
 8007422:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800742c:	d047      	beq.n	80074be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff fdb8 	bl	8006fa8 <ptr_to_mem>
 8007438:	4602      	mov	r2, r0
 800743a:	89fb      	ldrh	r3, [r7, #14]
 800743c:	8053      	strh	r3, [r2, #2]
 800743e:	e03e      	b.n	80074be <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007440:	8bfb      	ldrh	r3, [r7, #30]
 8007442:	f103 0214 	add.w	r2, r3, #20
 8007446:	8abb      	ldrh	r3, [r7, #20]
 8007448:	429a      	cmp	r2, r3
 800744a:	d838      	bhi.n	80074be <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800744c:	8afa      	ldrh	r2, [r7, #22]
 800744e:	8bfb      	ldrh	r3, [r7, #30]
 8007450:	4413      	add	r3, r2
 8007452:	b29b      	uxth	r3, r3
 8007454:	3308      	adds	r3, #8
 8007456:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007460:	d106      	bne.n	8007470 <mem_trim+0x180>
 8007462:	4b1b      	ldr	r3, [pc, #108]	@ (80074d0 <mem_trim+0x1e0>)
 8007464:	f240 3216 	movw	r2, #790	@ 0x316
 8007468:	491d      	ldr	r1, [pc, #116]	@ (80074e0 <mem_trim+0x1f0>)
 800746a:	481b      	ldr	r0, [pc, #108]	@ (80074d8 <mem_trim+0x1e8>)
 800746c:	f007 f8b8 	bl	800e5e0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007470:	89fb      	ldrh	r3, [r7, #14]
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fd98 	bl	8006fa8 <ptr_to_mem>
 8007478:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800747a:	4b1a      	ldr	r3, [pc, #104]	@ (80074e4 <mem_trim+0x1f4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	429a      	cmp	r2, r3
 8007482:	d202      	bcs.n	800748a <mem_trim+0x19a>
      lfree = mem2;
 8007484:	4a17      	ldr	r2, [pc, #92]	@ (80074e4 <mem_trim+0x1f4>)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2200      	movs	r2, #0
 800748e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	881a      	ldrh	r2, [r3, #0]
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	8afa      	ldrh	r2, [r7, #22]
 800749c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	89fa      	ldrh	r2, [r7, #14]
 80074a2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80074ac:	d007      	beq.n	80074be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff fd78 	bl	8006fa8 <ptr_to_mem>
 80074b8:	4602      	mov	r2, r0
 80074ba:	89fb      	ldrh	r3, [r7, #14]
 80074bc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80074be:	687b      	ldr	r3, [r7, #4]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3720      	adds	r7, #32
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20004e6c 	.word	0x20004e6c
 80074cc:	20004e70 	.word	0x20004e70
 80074d0:	0800fc3c 	.word	0x0800fc3c
 80074d4:	0800fde4 	.word	0x0800fde4
 80074d8:	0800fcbc 	.word	0x0800fcbc
 80074dc:	0800fdfc 	.word	0x0800fdfc
 80074e0:	0800fe1c 	.word	0x0800fe1c
 80074e4:	20004e74 	.word	0x20004e74

080074e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <mem_malloc+0x14>
    return NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	e0d9      	b.n	80076b0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	3303      	adds	r3, #3
 8007500:	b29b      	uxth	r3, r3
 8007502:	f023 0303 	bic.w	r3, r3, #3
 8007506:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007508:	8bbb      	ldrh	r3, [r7, #28]
 800750a:	2b0b      	cmp	r3, #11
 800750c:	d801      	bhi.n	8007512 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800750e:	230c      	movs	r3, #12
 8007510:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007512:	8bbb      	ldrh	r3, [r7, #28]
 8007514:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007518:	d803      	bhi.n	8007522 <mem_malloc+0x3a>
 800751a:	8bba      	ldrh	r2, [r7, #28]
 800751c:	88fb      	ldrh	r3, [r7, #6]
 800751e:	429a      	cmp	r2, r3
 8007520:	d201      	bcs.n	8007526 <mem_malloc+0x3e>
    return NULL;
 8007522:	2300      	movs	r3, #0
 8007524:	e0c4      	b.n	80076b0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007526:	4b64      	ldr	r3, [pc, #400]	@ (80076b8 <mem_malloc+0x1d0>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff fd4e 	bl	8006fcc <mem_to_ptr>
 8007530:	4603      	mov	r3, r0
 8007532:	83fb      	strh	r3, [r7, #30]
 8007534:	e0b4      	b.n	80076a0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007536:	8bfb      	ldrh	r3, [r7, #30]
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff fd35 	bl	8006fa8 <ptr_to_mem>
 800753e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	791b      	ldrb	r3, [r3, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f040 80a4 	bne.w	8007692 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	8bfb      	ldrh	r3, [r7, #30]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	f1a3 0208 	sub.w	r2, r3, #8
 8007558:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800755a:	429a      	cmp	r2, r3
 800755c:	f0c0 8099 	bcc.w	8007692 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	461a      	mov	r2, r3
 8007566:	8bfb      	ldrh	r3, [r7, #30]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	f1a3 0208 	sub.w	r2, r3, #8
 800756e:	8bbb      	ldrh	r3, [r7, #28]
 8007570:	3314      	adds	r3, #20
 8007572:	429a      	cmp	r2, r3
 8007574:	d333      	bcc.n	80075de <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007576:	8bfa      	ldrh	r2, [r7, #30]
 8007578:	8bbb      	ldrh	r3, [r7, #28]
 800757a:	4413      	add	r3, r2
 800757c:	b29b      	uxth	r3, r3
 800757e:	3308      	adds	r3, #8
 8007580:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007582:	8a7b      	ldrh	r3, [r7, #18]
 8007584:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007588:	d106      	bne.n	8007598 <mem_malloc+0xb0>
 800758a:	4b4c      	ldr	r3, [pc, #304]	@ (80076bc <mem_malloc+0x1d4>)
 800758c:	f240 3287 	movw	r2, #903	@ 0x387
 8007590:	494b      	ldr	r1, [pc, #300]	@ (80076c0 <mem_malloc+0x1d8>)
 8007592:	484c      	ldr	r0, [pc, #304]	@ (80076c4 <mem_malloc+0x1dc>)
 8007594:	f007 f824 	bl	800e5e0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007598:	8a7b      	ldrh	r3, [r7, #18]
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fd04 	bl	8006fa8 <ptr_to_mem>
 80075a0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	881a      	ldrh	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8bfa      	ldrh	r2, [r7, #30]
 80075b4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	8a7a      	ldrh	r2, [r7, #18]
 80075ba:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2201      	movs	r2, #1
 80075c0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80075ca:	d00b      	beq.n	80075e4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fce9 	bl	8006fa8 <ptr_to_mem>
 80075d6:	4602      	mov	r2, r0
 80075d8:	8a7b      	ldrh	r3, [r7, #18]
 80075da:	8053      	strh	r3, [r2, #2]
 80075dc:	e002      	b.n	80075e4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2201      	movs	r2, #1
 80075e2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80075e4:	4b34      	ldr	r3, [pc, #208]	@ (80076b8 <mem_malloc+0x1d0>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d127      	bne.n	800763e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80075ee:	4b32      	ldr	r3, [pc, #200]	@ (80076b8 <mem_malloc+0x1d0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80075f4:	e005      	b.n	8007602 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fcd4 	bl	8006fa8 <ptr_to_mem>
 8007600:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	791b      	ldrb	r3, [r3, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <mem_malloc+0x12c>
 800760a:	4b2f      	ldr	r3, [pc, #188]	@ (80076c8 <mem_malloc+0x1e0>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	429a      	cmp	r2, r3
 8007612:	d1f0      	bne.n	80075f6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007614:	4a28      	ldr	r2, [pc, #160]	@ (80076b8 <mem_malloc+0x1d0>)
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800761a:	4b27      	ldr	r3, [pc, #156]	@ (80076b8 <mem_malloc+0x1d0>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4b2a      	ldr	r3, [pc, #168]	@ (80076c8 <mem_malloc+0x1e0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	429a      	cmp	r2, r3
 8007624:	d00b      	beq.n	800763e <mem_malloc+0x156>
 8007626:	4b24      	ldr	r3, [pc, #144]	@ (80076b8 <mem_malloc+0x1d0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	791b      	ldrb	r3, [r3, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d006      	beq.n	800763e <mem_malloc+0x156>
 8007630:	4b22      	ldr	r3, [pc, #136]	@ (80076bc <mem_malloc+0x1d4>)
 8007632:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8007636:	4925      	ldr	r1, [pc, #148]	@ (80076cc <mem_malloc+0x1e4>)
 8007638:	4822      	ldr	r0, [pc, #136]	@ (80076c4 <mem_malloc+0x1dc>)
 800763a:	f006 ffd1 	bl	800e5e0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800763e:	8bba      	ldrh	r2, [r7, #28]
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	4413      	add	r3, r2
 8007644:	3308      	adds	r3, #8
 8007646:	4a20      	ldr	r2, [pc, #128]	@ (80076c8 <mem_malloc+0x1e0>)
 8007648:	6812      	ldr	r2, [r2, #0]
 800764a:	4293      	cmp	r3, r2
 800764c:	d906      	bls.n	800765c <mem_malloc+0x174>
 800764e:	4b1b      	ldr	r3, [pc, #108]	@ (80076bc <mem_malloc+0x1d4>)
 8007650:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8007654:	491e      	ldr	r1, [pc, #120]	@ (80076d0 <mem_malloc+0x1e8>)
 8007656:	481b      	ldr	r0, [pc, #108]	@ (80076c4 <mem_malloc+0x1dc>)
 8007658:	f006 ffc2 	bl	800e5e0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d006      	beq.n	8007674 <mem_malloc+0x18c>
 8007666:	4b15      	ldr	r3, [pc, #84]	@ (80076bc <mem_malloc+0x1d4>)
 8007668:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800766c:	4919      	ldr	r1, [pc, #100]	@ (80076d4 <mem_malloc+0x1ec>)
 800766e:	4815      	ldr	r0, [pc, #84]	@ (80076c4 <mem_malloc+0x1dc>)
 8007670:	f006 ffb6 	bl	800e5e0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d006      	beq.n	800768c <mem_malloc+0x1a4>
 800767e:	4b0f      	ldr	r3, [pc, #60]	@ (80076bc <mem_malloc+0x1d4>)
 8007680:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007684:	4914      	ldr	r1, [pc, #80]	@ (80076d8 <mem_malloc+0x1f0>)
 8007686:	480f      	ldr	r0, [pc, #60]	@ (80076c4 <mem_malloc+0x1dc>)
 8007688:	f006 ffaa 	bl	800e5e0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	3308      	adds	r3, #8
 8007690:	e00e      	b.n	80076b0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007692:	8bfb      	ldrh	r3, [r7, #30]
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff fc87 	bl	8006fa8 <ptr_to_mem>
 800769a:	4603      	mov	r3, r0
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80076a0:	8bfa      	ldrh	r2, [r7, #30]
 80076a2:	8bbb      	ldrh	r3, [r7, #28]
 80076a4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80076a8:	429a      	cmp	r2, r3
 80076aa:	f4ff af44 	bcc.w	8007536 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20004e74 	.word	0x20004e74
 80076bc:	0800fc3c 	.word	0x0800fc3c
 80076c0:	0800fe1c 	.word	0x0800fe1c
 80076c4:	0800fcbc 	.word	0x0800fcbc
 80076c8:	20004e70 	.word	0x20004e70
 80076cc:	0800fe30 	.word	0x0800fe30
 80076d0:	0800fe4c 	.word	0x0800fe4c
 80076d4:	0800fe7c 	.word	0x0800fe7c
 80076d8:	0800feac 	.word	0x0800feac

080076dc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	3303      	adds	r3, #3
 80076f2:	f023 0303 	bic.w	r3, r3, #3
 80076f6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	e011      	b.n	8007722 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4413      	add	r3, r2
 800771a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3301      	adds	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	885b      	ldrh	r3, [r3, #2]
 8007726:	461a      	mov	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4293      	cmp	r3, r2
 800772c:	dbe7      	blt.n	80076fe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007742:	2300      	movs	r3, #0
 8007744:	80fb      	strh	r3, [r7, #6]
 8007746:	e009      	b.n	800775c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007748:	88fb      	ldrh	r3, [r7, #6]
 800774a:	4a08      	ldr	r2, [pc, #32]	@ (800776c <memp_init+0x30>)
 800774c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff ffc3 	bl	80076dc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	3301      	adds	r3, #1
 800775a:	80fb      	strh	r3, [r7, #6]
 800775c:	88fb      	ldrh	r3, [r7, #6]
 800775e:	2b08      	cmp	r3, #8
 8007760:	d9f2      	bls.n	8007748 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	080121f4 	.word	0x080121f4

08007770 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d012      	beq.n	80077ac <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	6812      	ldr	r2, [r2, #0]
 800778e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d006      	beq.n	80077a8 <do_memp_malloc_pool+0x38>
 800779a:	4b07      	ldr	r3, [pc, #28]	@ (80077b8 <do_memp_malloc_pool+0x48>)
 800779c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80077a0:	4906      	ldr	r1, [pc, #24]	@ (80077bc <do_memp_malloc_pool+0x4c>)
 80077a2:	4807      	ldr	r0, [pc, #28]	@ (80077c0 <do_memp_malloc_pool+0x50>)
 80077a4:	f006 ff1c 	bl	800e5e0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	e000      	b.n	80077ae <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	0800fed0 	.word	0x0800fed0
 80077bc:	0800ff3c 	.word	0x0800ff3c
 80077c0:	0800ff60 	.word	0x0800ff60

080077c4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <memp_malloc_pool+0x1c>
 80077d2:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <memp_malloc_pool+0x38>)
 80077d4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80077d8:	4909      	ldr	r1, [pc, #36]	@ (8007800 <memp_malloc_pool+0x3c>)
 80077da:	480a      	ldr	r0, [pc, #40]	@ (8007804 <memp_malloc_pool+0x40>)
 80077dc:	f006 ff00 	bl	800e5e0 <iprintf>
  if (desc == NULL) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <memp_malloc_pool+0x26>
    return NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e003      	b.n	80077f2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff ffc0 	bl	8007770 <do_memp_malloc_pool>
 80077f0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	0800fed0 	.word	0x0800fed0
 8007800:	0800ff88 	.word	0x0800ff88
 8007804:	0800ff60 	.word	0x0800ff60

08007808 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	2b08      	cmp	r3, #8
 8007816:	d908      	bls.n	800782a <memp_malloc+0x22>
 8007818:	4b0a      	ldr	r3, [pc, #40]	@ (8007844 <memp_malloc+0x3c>)
 800781a:	f240 1257 	movw	r2, #343	@ 0x157
 800781e:	490a      	ldr	r1, [pc, #40]	@ (8007848 <memp_malloc+0x40>)
 8007820:	480a      	ldr	r0, [pc, #40]	@ (800784c <memp_malloc+0x44>)
 8007822:	f006 fedd 	bl	800e5e0 <iprintf>
 8007826:	2300      	movs	r3, #0
 8007828:	e008      	b.n	800783c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800782a:	79fb      	ldrb	r3, [r7, #7]
 800782c:	4a08      	ldr	r2, [pc, #32]	@ (8007850 <memp_malloc+0x48>)
 800782e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff ff9c 	bl	8007770 <do_memp_malloc_pool>
 8007838:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800783a:	68fb      	ldr	r3, [r7, #12]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	0800fed0 	.word	0x0800fed0
 8007848:	0800ff9c 	.word	0x0800ff9c
 800784c:	0800ff60 	.word	0x0800ff60
 8007850:	080121f4 	.word	0x080121f4

08007854 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	f003 0303 	and.w	r3, r3, #3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d006      	beq.n	8007876 <do_memp_free_pool+0x22>
 8007868:	4b0a      	ldr	r3, [pc, #40]	@ (8007894 <do_memp_free_pool+0x40>)
 800786a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800786e:	490a      	ldr	r1, [pc, #40]	@ (8007898 <do_memp_free_pool+0x44>)
 8007870:	480a      	ldr	r0, [pc, #40]	@ (800789c <do_memp_free_pool+0x48>)
 8007872:	f006 feb5 	bl	800e5e0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800788c:	bf00      	nop
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	0800fed0 	.word	0x0800fed0
 8007898:	0800ffbc 	.word	0x0800ffbc
 800789c:	0800ff60 	.word	0x0800ff60

080078a0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d106      	bne.n	80078be <memp_free_pool+0x1e>
 80078b0:	4b0a      	ldr	r3, [pc, #40]	@ (80078dc <memp_free_pool+0x3c>)
 80078b2:	f240 1295 	movw	r2, #405	@ 0x195
 80078b6:	490a      	ldr	r1, [pc, #40]	@ (80078e0 <memp_free_pool+0x40>)
 80078b8:	480a      	ldr	r0, [pc, #40]	@ (80078e4 <memp_free_pool+0x44>)
 80078ba:	f006 fe91 	bl	800e5e0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <memp_free_pool+0x34>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d004      	beq.n	80078d4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff ffc1 	bl	8007854 <do_memp_free_pool>
 80078d2:	e000      	b.n	80078d6 <memp_free_pool+0x36>
    return;
 80078d4:	bf00      	nop
}
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	0800fed0 	.word	0x0800fed0
 80078e0:	0800ff88 	.word	0x0800ff88
 80078e4:	0800ff60 	.word	0x0800ff60

080078e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	6039      	str	r1, [r7, #0]
 80078f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	2b08      	cmp	r3, #8
 80078f8:	d907      	bls.n	800790a <memp_free+0x22>
 80078fa:	4b0c      	ldr	r3, [pc, #48]	@ (800792c <memp_free+0x44>)
 80078fc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007900:	490b      	ldr	r1, [pc, #44]	@ (8007930 <memp_free+0x48>)
 8007902:	480c      	ldr	r0, [pc, #48]	@ (8007934 <memp_free+0x4c>)
 8007904:	f006 fe6c 	bl	800e5e0 <iprintf>
 8007908:	e00c      	b.n	8007924 <memp_free+0x3c>

  if (mem == NULL) {
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d008      	beq.n	8007922 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	4a09      	ldr	r2, [pc, #36]	@ (8007938 <memp_free+0x50>)
 8007914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff ff9a 	bl	8007854 <do_memp_free_pool>
 8007920:	e000      	b.n	8007924 <memp_free+0x3c>
    return;
 8007922:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	0800fed0 	.word	0x0800fed0
 8007930:	0800ffdc 	.word	0x0800ffdc
 8007934:	0800ff60 	.word	0x0800ff60
 8007938:	080121f4 	.word	0x080121f4

0800793c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007940:	bf00      	nop
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
	...

0800794c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d108      	bne.n	8007972 <netif_add+0x26>
 8007960:	4b57      	ldr	r3, [pc, #348]	@ (8007ac0 <netif_add+0x174>)
 8007962:	f240 1227 	movw	r2, #295	@ 0x127
 8007966:	4957      	ldr	r1, [pc, #348]	@ (8007ac4 <netif_add+0x178>)
 8007968:	4857      	ldr	r0, [pc, #348]	@ (8007ac8 <netif_add+0x17c>)
 800796a:	f006 fe39 	bl	800e5e0 <iprintf>
 800796e:	2300      	movs	r3, #0
 8007970:	e0a2      	b.n	8007ab8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	d108      	bne.n	800798a <netif_add+0x3e>
 8007978:	4b51      	ldr	r3, [pc, #324]	@ (8007ac0 <netif_add+0x174>)
 800797a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800797e:	4953      	ldr	r1, [pc, #332]	@ (8007acc <netif_add+0x180>)
 8007980:	4851      	ldr	r0, [pc, #324]	@ (8007ac8 <netif_add+0x17c>)
 8007982:	f006 fe2d 	bl	800e5e0 <iprintf>
 8007986:	2300      	movs	r3, #0
 8007988:	e096      	b.n	8007ab8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007990:	4b4f      	ldr	r3, [pc, #316]	@ (8007ad0 <netif_add+0x184>)
 8007992:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800799a:	4b4d      	ldr	r3, [pc, #308]	@ (8007ad0 <netif_add+0x184>)
 800799c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80079a4:	4b4a      	ldr	r3, [pc, #296]	@ (8007ad0 <netif_add+0x184>)
 80079a6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4a45      	ldr	r2, [pc, #276]	@ (8007ad4 <netif_add+0x188>)
 80079be:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a3a      	ldr	r2, [r7, #32]
 80079d8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80079da:	4b3f      	ldr	r3, [pc, #252]	@ (8007ad8 <netif_add+0x18c>)
 80079dc:	781a      	ldrb	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079e8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 f913 	bl	8007c1c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80079f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	4798      	blx	r3
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <netif_add+0xba>
    return NULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e058      	b.n	8007ab8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a0c:	2bff      	cmp	r3, #255	@ 0xff
 8007a0e:	d103      	bne.n	8007a18 <netif_add+0xcc>
        netif->num = 0;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8007adc <netif_add+0x190>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	e02b      	b.n	8007a7c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d106      	bne.n	8007a3a <netif_add+0xee>
 8007a2c:	4b24      	ldr	r3, [pc, #144]	@ (8007ac0 <netif_add+0x174>)
 8007a2e:	f240 128b 	movw	r2, #395	@ 0x18b
 8007a32:	492b      	ldr	r1, [pc, #172]	@ (8007ae0 <netif_add+0x194>)
 8007a34:	4824      	ldr	r0, [pc, #144]	@ (8007ac8 <netif_add+0x17c>)
 8007a36:	f006 fdd3 	bl	800e5e0 <iprintf>
        num_netifs++;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	2bff      	cmp	r3, #255	@ 0xff
 8007a44:	dd06      	ble.n	8007a54 <netif_add+0x108>
 8007a46:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac0 <netif_add+0x174>)
 8007a48:	f240 128d 	movw	r2, #397	@ 0x18d
 8007a4c:	4925      	ldr	r1, [pc, #148]	@ (8007ae4 <netif_add+0x198>)
 8007a4e:	481e      	ldr	r0, [pc, #120]	@ (8007ac8 <netif_add+0x17c>)
 8007a50:	f006 fdc6 	bl	800e5e0 <iprintf>
        if (netif2->num == netif->num) {
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d108      	bne.n	8007a76 <netif_add+0x12a>
          netif->num++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8007a74:	e005      	b.n	8007a82 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1d0      	bne.n	8007a24 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1be      	bne.n	8007a06 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007a90:	d103      	bne.n	8007a9a <netif_add+0x14e>
    netif_num = 0;
 8007a92:	4b11      	ldr	r3, [pc, #68]	@ (8007ad8 <netif_add+0x18c>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
 8007a98:	e006      	b.n	8007aa8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad8 <netif_add+0x18c>)
 8007aa6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8007adc <netif_add+0x190>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8007adc <netif_add+0x190>)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	0800fff8 	.word	0x0800fff8
 8007ac4:	080100c4 	.word	0x080100c4
 8007ac8:	08010080 	.word	0x08010080
 8007acc:	080100e0 	.word	0x080100e0
 8007ad0:	08012184 	.word	0x08012184
 8007ad4:	08007ef7 	.word	0x08007ef7
 8007ad8:	2000b74c 	.word	0x2000b74c
 8007adc:	2000b744 	.word	0x2000b744
 8007ae0:	08010104 	.word	0x08010104
 8007ae4:	08010118 	.word	0x08010118

08007ae8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f002 fb73 	bl	800a1e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f006 fc2b 	bl	800e358 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <netif_do_set_ipaddr+0x20>
 8007b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007b94 <netif_do_set_ipaddr+0x88>)
 8007b20:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007b24:	491c      	ldr	r1, [pc, #112]	@ (8007b98 <netif_do_set_ipaddr+0x8c>)
 8007b26:	481d      	ldr	r0, [pc, #116]	@ (8007b9c <netif_do_set_ipaddr+0x90>)
 8007b28:	f006 fd5a 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <netif_do_set_ipaddr+0x34>
 8007b32:	4b18      	ldr	r3, [pc, #96]	@ (8007b94 <netif_do_set_ipaddr+0x88>)
 8007b34:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007b38:	4917      	ldr	r1, [pc, #92]	@ (8007b98 <netif_do_set_ipaddr+0x8c>)
 8007b3a:	4818      	ldr	r0, [pc, #96]	@ (8007b9c <netif_do_set_ipaddr+0x90>)
 8007b3c:	f006 fd50 	bl	800e5e0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3304      	adds	r3, #4
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d01c      	beq.n	8007b88 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3304      	adds	r3, #4
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007b5e:	f107 0314 	add.w	r3, r7, #20
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff ffbf 	bl	8007ae8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <netif_do_set_ipaddr+0x6a>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	e000      	b.n	8007b78 <netif_do_set_ipaddr+0x6c>
 8007b76:	2300      	movs	r3, #0
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 f8d2 	bl	8007d28 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007b84:	2301      	movs	r3, #1
 8007b86:	e000      	b.n	8007b8a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	0800fff8 	.word	0x0800fff8
 8007b98:	08010148 	.word	0x08010148
 8007b9c:	08010080 	.word	0x08010080

08007ba0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d00a      	beq.n	8007bd0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <netif_do_set_netmask+0x26>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	e000      	b.n	8007bc8 <netif_do_set_netmask+0x28>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b085      	sub	sp, #20
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	330c      	adds	r3, #12
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d00a      	beq.n	8007c0e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <netif_do_set_gw+0x26>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	e000      	b.n	8007c06 <netif_do_set_gw+0x28>
 8007c04:	2300      	movs	r3, #0
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007c38:	4b1c      	ldr	r3, [pc, #112]	@ (8007cac <netif_set_addr+0x90>)
 8007c3a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007c42:	4b1a      	ldr	r3, [pc, #104]	@ (8007cac <netif_set_addr+0x90>)
 8007c44:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007c4c:	4b17      	ldr	r3, [pc, #92]	@ (8007cac <netif_set_addr+0x90>)
 8007c4e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <netif_set_addr+0x42>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <netif_set_addr+0x46>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e000      	b.n	8007c64 <netif_set_addr+0x48>
 8007c62:	2300      	movs	r3, #0
 8007c64:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d006      	beq.n	8007c7a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007c6c:	f107 0310 	add.w	r3, r7, #16
 8007c70:	461a      	mov	r2, r3
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7ff ff49 	bl	8007b0c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff ff8e 	bl	8007ba0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7ff ffa8 	bl	8007bde <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d106      	bne.n	8007ca2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007c94:	f107 0310 	add.w	r3, r7, #16
 8007c98:	461a      	mov	r2, r3
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7ff ff35 	bl	8007b0c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007ca2:	bf00      	nop
 8007ca4:	3720      	adds	r7, #32
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	08012184 	.word	0x08012184

08007cb0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007cb8:	4a04      	ldr	r2, [pc, #16]	@ (8007ccc <netif_set_default+0x1c>)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	2000b748 	.word	0x2000b748

08007cd0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d107      	bne.n	8007cee <netif_set_up+0x1e>
 8007cde:	4b0f      	ldr	r3, [pc, #60]	@ (8007d1c <netif_set_up+0x4c>)
 8007ce0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007ce4:	490e      	ldr	r1, [pc, #56]	@ (8007d20 <netif_set_up+0x50>)
 8007ce6:	480f      	ldr	r0, [pc, #60]	@ (8007d24 <netif_set_up+0x54>)
 8007ce8:	f006 fc7a 	bl	800e5e0 <iprintf>
 8007cec:	e013      	b.n	8007d16 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10c      	bne.n	8007d16 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d02:	f043 0301 	orr.w	r3, r3, #1
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007d0e:	2103      	movs	r1, #3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f809 	bl	8007d28 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	0800fff8 	.word	0x0800fff8
 8007d20:	080101b8 	.word	0x080101b8
 8007d24:	08010080 	.word	0x08010080

08007d28 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d106      	bne.n	8007d48 <netif_issue_reports+0x20>
 8007d3a:	4b18      	ldr	r3, [pc, #96]	@ (8007d9c <netif_issue_reports+0x74>)
 8007d3c:	f240 326d 	movw	r2, #877	@ 0x36d
 8007d40:	4917      	ldr	r1, [pc, #92]	@ (8007da0 <netif_issue_reports+0x78>)
 8007d42:	4818      	ldr	r0, [pc, #96]	@ (8007da4 <netif_issue_reports+0x7c>)
 8007d44:	f006 fc4c 	bl	800e5e0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d4e:	f003 0304 	and.w	r3, r3, #4
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d01e      	beq.n	8007d94 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d5c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d017      	beq.n	8007d94 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007d64:	78fb      	ldrb	r3, [r7, #3]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d013      	beq.n	8007d96 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3304      	adds	r3, #4
 8007d72:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00e      	beq.n	8007d96 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7fd fd69 	bl	8005864 <etharp_request>
 8007d92:	e000      	b.n	8007d96 <netif_issue_reports+0x6e>
    return;
 8007d94:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	0800fff8 	.word	0x0800fff8
 8007da0:	080101d4 	.word	0x080101d4
 8007da4:	08010080 	.word	0x08010080

08007da8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d107      	bne.n	8007dc6 <netif_set_down+0x1e>
 8007db6:	4b12      	ldr	r3, [pc, #72]	@ (8007e00 <netif_set_down+0x58>)
 8007db8:	f240 329b 	movw	r2, #923	@ 0x39b
 8007dbc:	4911      	ldr	r1, [pc, #68]	@ (8007e04 <netif_set_down+0x5c>)
 8007dbe:	4812      	ldr	r0, [pc, #72]	@ (8007e08 <netif_set_down+0x60>)
 8007dc0:	f006 fc0e 	bl	800e5e0 <iprintf>
 8007dc4:	e019      	b.n	8007dfa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d012      	beq.n	8007dfa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007dda:	f023 0301 	bic.w	r3, r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7fd f8f3 	bl	8004fe0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	0800fff8 	.word	0x0800fff8
 8007e04:	080101f8 	.word	0x080101f8
 8007e08:	08010080 	.word	0x08010080

08007e0c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d107      	bne.n	8007e2a <netif_set_link_up+0x1e>
 8007e1a:	4b13      	ldr	r3, [pc, #76]	@ (8007e68 <netif_set_link_up+0x5c>)
 8007e1c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007e20:	4912      	ldr	r1, [pc, #72]	@ (8007e6c <netif_set_link_up+0x60>)
 8007e22:	4813      	ldr	r0, [pc, #76]	@ (8007e70 <netif_set_link_up+0x64>)
 8007e24:	f006 fbdc 	bl	800e5e0 <iprintf>
 8007e28:	e01b      	b.n	8007e62 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d114      	bne.n	8007e62 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e3e:	f043 0304 	orr.w	r3, r3, #4
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007e4a:	2103      	movs	r1, #3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff ff6b 	bl	8007d28 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <netif_set_link_up+0x56>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	0800fff8 	.word	0x0800fff8
 8007e6c:	08010218 	.word	0x08010218
 8007e70:	08010080 	.word	0x08010080

08007e74 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d107      	bne.n	8007e92 <netif_set_link_down+0x1e>
 8007e82:	4b11      	ldr	r3, [pc, #68]	@ (8007ec8 <netif_set_link_down+0x54>)
 8007e84:	f240 4206 	movw	r2, #1030	@ 0x406
 8007e88:	4910      	ldr	r1, [pc, #64]	@ (8007ecc <netif_set_link_down+0x58>)
 8007e8a:	4811      	ldr	r0, [pc, #68]	@ (8007ed0 <netif_set_link_down+0x5c>)
 8007e8c:	f006 fba8 	bl	800e5e0 <iprintf>
 8007e90:	e017      	b.n	8007ec2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d010      	beq.n	8007ec2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007ea6:	f023 0304 	bic.w	r3, r3, #4
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <netif_set_link_down+0x4e>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	0800fff8 	.word	0x0800fff8
 8007ecc:	0801023c 	.word	0x0801023c
 8007ed0:	08010080 	.word	0x08010080

08007ed4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	61da      	str	r2, [r3, #28]
  }
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	60f8      	str	r0, [r7, #12]
 8007efe:	60b9      	str	r1, [r7, #8]
 8007f00:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007f02:	f06f 030b 	mvn.w	r3, #11
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007f1e:	79fb      	ldrb	r3, [r7, #7]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d013      	beq.n	8007f4c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007f24:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <netif_get_by_index+0x48>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	e00c      	b.n	8007f46 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f32:	3301      	adds	r3, #1
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	79fa      	ldrb	r2, [r7, #7]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d101      	bne.n	8007f40 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	e006      	b.n	8007f4e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1ef      	bne.n	8007f2c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	2000b744 	.word	0x2000b744

08007f60 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007f60:	b480      	push	{r7}
 8007f62:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007f64:	4b03      	ldr	r3, [pc, #12]	@ (8007f74 <pbuf_pool_is_empty+0x14>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007f6a:	bf00      	nop
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	2000b74d 	.word	0x2000b74d

08007f78 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4611      	mov	r1, r2
 8007f84:	461a      	mov	r2, r3
 8007f86:	460b      	mov	r3, r1
 8007f88:	80fb      	strh	r3, [r7, #6]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	88fa      	ldrh	r2, [r7, #6]
 8007f9e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	88ba      	ldrh	r2, [r7, #4]
 8007fa4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007fa6:	8b3b      	ldrh	r3, [r7, #24]
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	7f3a      	ldrb	r2, [r7, #28]
 8007fb2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	73da      	strb	r2, [r3, #15]
}
 8007fc0:	bf00      	nop
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08c      	sub	sp, #48	@ 0x30
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	71fb      	strb	r3, [r7, #7]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	80bb      	strh	r3, [r7, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007fe2:	887b      	ldrh	r3, [r7, #2]
 8007fe4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007fe8:	f000 8082 	beq.w	80080f0 <pbuf_alloc+0x124>
 8007fec:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007ff0:	f300 80ca 	bgt.w	8008188 <pbuf_alloc+0x1bc>
 8007ff4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007ff8:	d010      	beq.n	800801c <pbuf_alloc+0x50>
 8007ffa:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007ffe:	f300 80c3 	bgt.w	8008188 <pbuf_alloc+0x1bc>
 8008002:	2b01      	cmp	r3, #1
 8008004:	d002      	beq.n	800800c <pbuf_alloc+0x40>
 8008006:	2b41      	cmp	r3, #65	@ 0x41
 8008008:	f040 80be 	bne.w	8008188 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800800c:	887a      	ldrh	r2, [r7, #2]
 800800e:	88bb      	ldrh	r3, [r7, #4]
 8008010:	4619      	mov	r1, r3
 8008012:	2000      	movs	r0, #0
 8008014:	f000 f8d4 	bl	80081c0 <pbuf_alloc_reference>
 8008018:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800801a:	e0bf      	b.n	800819c <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800801c:	2300      	movs	r3, #0
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8008020:	2300      	movs	r3, #0
 8008022:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008024:	88bb      	ldrh	r3, [r7, #4]
 8008026:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008028:	2008      	movs	r0, #8
 800802a:	f7ff fbed 	bl	8007808 <memp_malloc>
 800802e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8008036:	f7ff ff93 	bl	8007f60 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8008040:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008042:	f000 faab 	bl	800859c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	e0a9      	b.n	800819e <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800804a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800804c:	3303      	adds	r3, #3
 800804e:	b29b      	uxth	r3, r3
 8008050:	f023 0303 	bic.w	r3, r3, #3
 8008054:	b29a      	uxth	r2, r3
 8008056:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	b29b      	uxth	r3, r3
 800805e:	8b7a      	ldrh	r2, [r7, #26]
 8008060:	4293      	cmp	r3, r2
 8008062:	bf28      	it	cs
 8008064:	4613      	movcs	r3, r2
 8008066:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008068:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800806a:	3310      	adds	r3, #16
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4413      	add	r3, r2
 8008070:	3303      	adds	r3, #3
 8008072:	f023 0303 	bic.w	r3, r3, #3
 8008076:	4618      	mov	r0, r3
 8008078:	89f9      	ldrh	r1, [r7, #14]
 800807a:	8b7a      	ldrh	r2, [r7, #26]
 800807c:	2300      	movs	r3, #0
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	887b      	ldrh	r3, [r7, #2]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	460b      	mov	r3, r1
 8008086:	4601      	mov	r1, r0
 8008088:	6938      	ldr	r0, [r7, #16]
 800808a:	f7ff ff75 	bl	8007f78 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d006      	beq.n	80080a8 <pbuf_alloc+0xdc>
 800809a:	4b43      	ldr	r3, [pc, #268]	@ (80081a8 <pbuf_alloc+0x1dc>)
 800809c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080a0:	4942      	ldr	r1, [pc, #264]	@ (80081ac <pbuf_alloc+0x1e0>)
 80080a2:	4843      	ldr	r0, [pc, #268]	@ (80081b0 <pbuf_alloc+0x1e4>)
 80080a4:	f006 fa9c 	bl	800e5e0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80080a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080aa:	3303      	adds	r3, #3
 80080ac:	f023 0303 	bic.w	r3, r3, #3
 80080b0:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d106      	bne.n	80080c6 <pbuf_alloc+0xfa>
 80080b8:	4b3b      	ldr	r3, [pc, #236]	@ (80081a8 <pbuf_alloc+0x1dc>)
 80080ba:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80080be:	493d      	ldr	r1, [pc, #244]	@ (80081b4 <pbuf_alloc+0x1e8>)
 80080c0:	483b      	ldr	r0, [pc, #236]	@ (80081b0 <pbuf_alloc+0x1e4>)
 80080c2:	f006 fa8d 	bl	800e5e0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80080d0:	e002      	b.n	80080d8 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80080dc:	8b7a      	ldrh	r2, [r7, #26]
 80080de:	89fb      	ldrh	r3, [r7, #14]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80080e8:	8b7b      	ldrh	r3, [r7, #26]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d19c      	bne.n	8008028 <pbuf_alloc+0x5c>
      break;
 80080ee:	e055      	b.n	800819c <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80080f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080f2:	3303      	adds	r3, #3
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f023 0303 	bic.w	r3, r3, #3
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	88bb      	ldrh	r3, [r7, #4]
 80080fe:	3303      	adds	r3, #3
 8008100:	b29b      	uxth	r3, r3
 8008102:	f023 0303 	bic.w	r3, r3, #3
 8008106:	b29b      	uxth	r3, r3
 8008108:	4413      	add	r3, r2
 800810a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800810c:	8b3b      	ldrh	r3, [r7, #24]
 800810e:	3310      	adds	r3, #16
 8008110:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008112:	8b3a      	ldrh	r2, [r7, #24]
 8008114:	88bb      	ldrh	r3, [r7, #4]
 8008116:	3303      	adds	r3, #3
 8008118:	f023 0303 	bic.w	r3, r3, #3
 800811c:	429a      	cmp	r2, r3
 800811e:	d306      	bcc.n	800812e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008120:	8afa      	ldrh	r2, [r7, #22]
 8008122:	88bb      	ldrh	r3, [r7, #4]
 8008124:	3303      	adds	r3, #3
 8008126:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800812a:	429a      	cmp	r2, r3
 800812c:	d201      	bcs.n	8008132 <pbuf_alloc+0x166>
        return NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	e035      	b.n	800819e <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008132:	8afb      	ldrh	r3, [r7, #22]
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff f9d7 	bl	80074e8 <mem_malloc>
 800813a:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <pbuf_alloc+0x17a>
        return NULL;
 8008142:	2300      	movs	r3, #0
 8008144:	e02b      	b.n	800819e <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008146:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008148:	3310      	adds	r3, #16
 800814a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800814c:	4413      	add	r3, r2
 800814e:	3303      	adds	r3, #3
 8008150:	f023 0303 	bic.w	r3, r3, #3
 8008154:	4618      	mov	r0, r3
 8008156:	88b9      	ldrh	r1, [r7, #4]
 8008158:	88ba      	ldrh	r2, [r7, #4]
 800815a:	2300      	movs	r3, #0
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	887b      	ldrh	r3, [r7, #2]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	460b      	mov	r3, r1
 8008164:	4601      	mov	r1, r0
 8008166:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008168:	f7ff ff06 	bl	8007f78 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800816c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	2b00      	cmp	r3, #0
 8008176:	d010      	beq.n	800819a <pbuf_alloc+0x1ce>
 8008178:	4b0b      	ldr	r3, [pc, #44]	@ (80081a8 <pbuf_alloc+0x1dc>)
 800817a:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800817e:	490e      	ldr	r1, [pc, #56]	@ (80081b8 <pbuf_alloc+0x1ec>)
 8008180:	480b      	ldr	r0, [pc, #44]	@ (80081b0 <pbuf_alloc+0x1e4>)
 8008182:	f006 fa2d 	bl	800e5e0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008186:	e008      	b.n	800819a <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008188:	4b07      	ldr	r3, [pc, #28]	@ (80081a8 <pbuf_alloc+0x1dc>)
 800818a:	f240 1227 	movw	r2, #295	@ 0x127
 800818e:	490b      	ldr	r1, [pc, #44]	@ (80081bc <pbuf_alloc+0x1f0>)
 8008190:	4807      	ldr	r0, [pc, #28]	@ (80081b0 <pbuf_alloc+0x1e4>)
 8008192:	f006 fa25 	bl	800e5e0 <iprintf>
      return NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	e001      	b.n	800819e <pbuf_alloc+0x1d2>
      break;
 800819a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3728      	adds	r7, #40	@ 0x28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	08010260 	.word	0x08010260
 80081ac:	080102cc 	.word	0x080102cc
 80081b0:	080102fc 	.word	0x080102fc
 80081b4:	08010324 	.word	0x08010324
 80081b8:	08010358 	.word	0x08010358
 80081bc:	08010384 	.word	0x08010384

080081c0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
 80081cc:	4613      	mov	r3, r2
 80081ce:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80081d0:	883b      	ldrh	r3, [r7, #0]
 80081d2:	2b41      	cmp	r3, #65	@ 0x41
 80081d4:	d009      	beq.n	80081ea <pbuf_alloc_reference+0x2a>
 80081d6:	883b      	ldrh	r3, [r7, #0]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d006      	beq.n	80081ea <pbuf_alloc_reference+0x2a>
 80081dc:	4b0f      	ldr	r3, [pc, #60]	@ (800821c <pbuf_alloc_reference+0x5c>)
 80081de:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80081e2:	490f      	ldr	r1, [pc, #60]	@ (8008220 <pbuf_alloc_reference+0x60>)
 80081e4:	480f      	ldr	r0, [pc, #60]	@ (8008224 <pbuf_alloc_reference+0x64>)
 80081e6:	f006 f9fb 	bl	800e5e0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80081ea:	2007      	movs	r0, #7
 80081ec:	f7ff fb0c 	bl	8007808 <memp_malloc>
 80081f0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80081f8:	2300      	movs	r3, #0
 80081fa:	e00b      	b.n	8008214 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80081fc:	8879      	ldrh	r1, [r7, #2]
 80081fe:	887a      	ldrh	r2, [r7, #2]
 8008200:	2300      	movs	r3, #0
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	883b      	ldrh	r3, [r7, #0]
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	460b      	mov	r3, r1
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff feb3 	bl	8007f78 <pbuf_init_alloced_pbuf>
  return p;
 8008212:	68fb      	ldr	r3, [r7, #12]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	08010260 	.word	0x08010260
 8008220:	080103a0 	.word	0x080103a0
 8008224:	080102fc 	.word	0x080102fc

08008228 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af02      	add	r7, sp, #8
 800822e:	607b      	str	r3, [r7, #4]
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]
 8008234:	460b      	mov	r3, r1
 8008236:	81bb      	strh	r3, [r7, #12]
 8008238:	4613      	mov	r3, r2
 800823a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008240:	8a7b      	ldrh	r3, [r7, #18]
 8008242:	3303      	adds	r3, #3
 8008244:	f023 0203 	bic.w	r2, r3, #3
 8008248:	89bb      	ldrh	r3, [r7, #12]
 800824a:	441a      	add	r2, r3
 800824c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800824e:	429a      	cmp	r2, r3
 8008250:	d901      	bls.n	8008256 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	e018      	b.n	8008288 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d007      	beq.n	800826c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800825c:	8a7b      	ldrh	r3, [r7, #18]
 800825e:	3303      	adds	r3, #3
 8008260:	f023 0303 	bic.w	r3, r3, #3
 8008264:	6a3a      	ldr	r2, [r7, #32]
 8008266:	4413      	add	r3, r2
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	e001      	b.n	8008270 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	89b9      	ldrh	r1, [r7, #12]
 8008274:	89ba      	ldrh	r2, [r7, #12]
 8008276:	2302      	movs	r3, #2
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	897b      	ldrh	r3, [r7, #10]
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	460b      	mov	r3, r1
 8008280:	6979      	ldr	r1, [r7, #20]
 8008282:	f7ff fe79 	bl	8007f78 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008286:	687b      	ldr	r3, [r7, #4]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <pbuf_realloc+0x20>
 80082a2:	4b3a      	ldr	r3, [pc, #232]	@ (800838c <pbuf_realloc+0xfc>)
 80082a4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80082a8:	4939      	ldr	r1, [pc, #228]	@ (8008390 <pbuf_realloc+0x100>)
 80082aa:	483a      	ldr	r0, [pc, #232]	@ (8008394 <pbuf_realloc+0x104>)
 80082ac:	f006 f998 	bl	800e5e0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	891b      	ldrh	r3, [r3, #8]
 80082b4:	887a      	ldrh	r2, [r7, #2]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d263      	bcs.n	8008382 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	891a      	ldrh	r2, [r3, #8]
 80082be:	887b      	ldrh	r3, [r7, #2]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80082c4:	887b      	ldrh	r3, [r7, #2]
 80082c6:	817b      	strh	r3, [r7, #10]
  q = p;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80082cc:	e018      	b.n	8008300 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	895b      	ldrh	r3, [r3, #10]
 80082d2:	897a      	ldrh	r2, [r7, #10]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	891a      	ldrh	r2, [r3, #8]
 80082dc:	893b      	ldrh	r3, [r7, #8]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <pbuf_realloc+0x70>
 80082f2:	4b26      	ldr	r3, [pc, #152]	@ (800838c <pbuf_realloc+0xfc>)
 80082f4:	f240 12af 	movw	r2, #431	@ 0x1af
 80082f8:	4927      	ldr	r1, [pc, #156]	@ (8008398 <pbuf_realloc+0x108>)
 80082fa:	4826      	ldr	r0, [pc, #152]	@ (8008394 <pbuf_realloc+0x104>)
 80082fc:	f006 f970 	bl	800e5e0 <iprintf>
  while (rem_len > q->len) {
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	895b      	ldrh	r3, [r3, #10]
 8008304:	897a      	ldrh	r2, [r7, #10]
 8008306:	429a      	cmp	r2, r3
 8008308:	d8e1      	bhi.n	80082ce <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	7b1b      	ldrb	r3, [r3, #12]
 800830e:	f003 030f 	and.w	r3, r3, #15
 8008312:	2b00      	cmp	r3, #0
 8008314:	d121      	bne.n	800835a <pbuf_realloc+0xca>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	895b      	ldrh	r3, [r3, #10]
 800831a:	897a      	ldrh	r2, [r7, #10]
 800831c:	429a      	cmp	r2, r3
 800831e:	d01c      	beq.n	800835a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	7b5b      	ldrb	r3, [r3, #13]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d116      	bne.n	800835a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	b29a      	uxth	r2, r3
 8008336:	897b      	ldrh	r3, [r7, #10]
 8008338:	4413      	add	r3, r2
 800833a:	b29b      	uxth	r3, r3
 800833c:	4619      	mov	r1, r3
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7fe ffd6 	bl	80072f0 <mem_trim>
 8008344:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <pbuf_realloc+0xca>
 800834c:	4b0f      	ldr	r3, [pc, #60]	@ (800838c <pbuf_realloc+0xfc>)
 800834e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8008352:	4912      	ldr	r1, [pc, #72]	@ (800839c <pbuf_realloc+0x10c>)
 8008354:	480f      	ldr	r0, [pc, #60]	@ (8008394 <pbuf_realloc+0x104>)
 8008356:	f006 f943 	bl	800e5e0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	897a      	ldrh	r2, [r7, #10]
 800835e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	895a      	ldrh	r2, [r3, #10]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d004      	beq.n	800837a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f000 f911 	bl	800859c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	e000      	b.n	8008384 <pbuf_realloc+0xf4>
    return;
 8008382:	bf00      	nop

}
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	08010260 	.word	0x08010260
 8008390:	080103b4 	.word	0x080103b4
 8008394:	080102fc 	.word	0x080102fc
 8008398:	080103cc 	.word	0x080103cc
 800839c:	080103e4 	.word	0x080103e4

080083a0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d106      	bne.n	80083c2 <pbuf_add_header_impl+0x22>
 80083b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008464 <pbuf_add_header_impl+0xc4>)
 80083b6:	f240 12df 	movw	r2, #479	@ 0x1df
 80083ba:	492b      	ldr	r1, [pc, #172]	@ (8008468 <pbuf_add_header_impl+0xc8>)
 80083bc:	482b      	ldr	r0, [pc, #172]	@ (800846c <pbuf_add_header_impl+0xcc>)
 80083be:	f006 f90f 	bl	800e5e0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <pbuf_add_header_impl+0x30>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ce:	d301      	bcc.n	80083d4 <pbuf_add_header_impl+0x34>
    return 1;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e043      	b.n	800845c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <pbuf_add_header_impl+0x3e>
    return 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	e03e      	b.n	800845c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	891a      	ldrh	r2, [r3, #8]
 80083e6:	8a7b      	ldrh	r3, [r7, #18]
 80083e8:	4413      	add	r3, r2
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	8a7a      	ldrh	r2, [r7, #18]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d901      	bls.n	80083f6 <pbuf_add_header_impl+0x56>
    return 1;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e032      	b.n	800845c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	7b1b      	ldrb	r3, [r3, #12]
 80083fa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80083fc:	8a3b      	ldrh	r3, [r7, #16]
 80083fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00c      	beq.n	8008420 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	425b      	negs	r3, r3
 800840e:	4413      	add	r3, r2
 8008410:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3310      	adds	r3, #16
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	429a      	cmp	r2, r3
 800841a:	d20d      	bcs.n	8008438 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800841c:	2301      	movs	r3, #1
 800841e:	e01d      	b.n	800845c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d006      	beq.n	8008434 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	425b      	negs	r3, r3
 800842e:	4413      	add	r3, r2
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	e001      	b.n	8008438 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008434:	2301      	movs	r3, #1
 8008436:	e011      	b.n	800845c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	895a      	ldrh	r2, [r3, #10]
 8008442:	8a7b      	ldrh	r3, [r7, #18]
 8008444:	4413      	add	r3, r2
 8008446:	b29a      	uxth	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	891a      	ldrh	r2, [r3, #8]
 8008450:	8a7b      	ldrh	r3, [r7, #18]
 8008452:	4413      	add	r3, r2
 8008454:	b29a      	uxth	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	811a      	strh	r2, [r3, #8]


  return 0;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	08010260 	.word	0x08010260
 8008468:	08010400 	.word	0x08010400
 800846c:	080102fc 	.word	0x080102fc

08008470 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800847a:	2200      	movs	r2, #0
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff ff8e 	bl	80083a0 <pbuf_add_header_impl>
 8008484:	4603      	mov	r3, r0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <pbuf_remove_header+0x1e>
 80084a0:	4b20      	ldr	r3, [pc, #128]	@ (8008524 <pbuf_remove_header+0x94>)
 80084a2:	f240 224b 	movw	r2, #587	@ 0x24b
 80084a6:	4920      	ldr	r1, [pc, #128]	@ (8008528 <pbuf_remove_header+0x98>)
 80084a8:	4820      	ldr	r0, [pc, #128]	@ (800852c <pbuf_remove_header+0x9c>)
 80084aa:	f006 f899 	bl	800e5e0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <pbuf_remove_header+0x2c>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ba:	d301      	bcc.n	80084c0 <pbuf_remove_header+0x30>
    return 1;
 80084bc:	2301      	movs	r3, #1
 80084be:	e02c      	b.n	800851a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <pbuf_remove_header+0x3a>
    return 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	e027      	b.n	800851a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	895b      	ldrh	r3, [r3, #10]
 80084d2:	89fa      	ldrh	r2, [r7, #14]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d908      	bls.n	80084ea <pbuf_remove_header+0x5a>
 80084d8:	4b12      	ldr	r3, [pc, #72]	@ (8008524 <pbuf_remove_header+0x94>)
 80084da:	f240 2255 	movw	r2, #597	@ 0x255
 80084de:	4914      	ldr	r1, [pc, #80]	@ (8008530 <pbuf_remove_header+0xa0>)
 80084e0:	4812      	ldr	r0, [pc, #72]	@ (800852c <pbuf_remove_header+0x9c>)
 80084e2:	f006 f87d 	bl	800e5e0 <iprintf>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e017      	b.n	800851a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	441a      	add	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	895a      	ldrh	r2, [r3, #10]
 8008500:	89fb      	ldrh	r3, [r7, #14]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	b29a      	uxth	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	891a      	ldrh	r2, [r3, #8]
 800850e:	89fb      	ldrh	r3, [r7, #14]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	b29a      	uxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	08010260 	.word	0x08010260
 8008528:	08010400 	.word	0x08010400
 800852c:	080102fc 	.word	0x080102fc
 8008530:	0801040c 	.word	0x0801040c

08008534 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	807b      	strh	r3, [r7, #2]
 8008540:	4613      	mov	r3, r2
 8008542:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008544:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008548:	2b00      	cmp	r3, #0
 800854a:	da08      	bge.n	800855e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800854c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008550:	425b      	negs	r3, r3
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff ff9b 	bl	8008490 <pbuf_remove_header>
 800855a:	4603      	mov	r3, r0
 800855c:	e007      	b.n	800856e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800855e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008562:	787a      	ldrb	r2, [r7, #1]
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff ff1a 	bl	80083a0 <pbuf_add_header_impl>
 800856c:	4603      	mov	r3, r0
  }
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	460b      	mov	r3, r1
 8008580:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008582:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008586:	2201      	movs	r2, #1
 8008588:	4619      	mov	r1, r3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff ffd2 	bl	8008534 <pbuf_header_impl>
 8008590:	4603      	mov	r3, r0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d106      	bne.n	80085be <pbuf_free+0x22>
 80085b0:	4b38      	ldr	r3, [pc, #224]	@ (8008694 <pbuf_free+0xf8>)
 80085b2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80085b6:	4938      	ldr	r1, [pc, #224]	@ (8008698 <pbuf_free+0xfc>)
 80085b8:	4838      	ldr	r0, [pc, #224]	@ (800869c <pbuf_free+0x100>)
 80085ba:	f006 f811 	bl	800e5e0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	e063      	b.n	800868a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80085c6:	e05c      	b.n	8008682 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	7b9b      	ldrb	r3, [r3, #14]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d106      	bne.n	80085de <pbuf_free+0x42>
 80085d0:	4b30      	ldr	r3, [pc, #192]	@ (8008694 <pbuf_free+0xf8>)
 80085d2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80085d6:	4932      	ldr	r1, [pc, #200]	@ (80086a0 <pbuf_free+0x104>)
 80085d8:	4830      	ldr	r0, [pc, #192]	@ (800869c <pbuf_free+0x100>)
 80085da:	f006 f801 	bl	800e5e0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	7b9b      	ldrb	r3, [r3, #14]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	739a      	strb	r2, [r3, #14]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	7b9b      	ldrb	r3, [r3, #14]
 80085ee:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80085f0:	7dbb      	ldrb	r3, [r7, #22]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d143      	bne.n	800867e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	7b1b      	ldrb	r3, [r3, #12]
 8008600:	f003 030f 	and.w	r3, r3, #15
 8008604:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	7b5b      	ldrb	r3, [r3, #13]
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d011      	beq.n	8008636 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <pbuf_free+0x90>
 800861e:	4b1d      	ldr	r3, [pc, #116]	@ (8008694 <pbuf_free+0xf8>)
 8008620:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008624:	491f      	ldr	r1, [pc, #124]	@ (80086a4 <pbuf_free+0x108>)
 8008626:	481d      	ldr	r0, [pc, #116]	@ (800869c <pbuf_free+0x100>)
 8008628:	f005 ffda 	bl	800e5e0 <iprintf>
        pc->custom_free_function(p);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	4798      	blx	r3
 8008634:	e01d      	b.n	8008672 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	2b02      	cmp	r3, #2
 800863a:	d104      	bne.n	8008646 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	2008      	movs	r0, #8
 8008640:	f7ff f952 	bl	80078e8 <memp_free>
 8008644:	e015      	b.n	8008672 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d104      	bne.n	8008656 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	2007      	movs	r0, #7
 8008650:	f7ff f94a 	bl	80078e8 <memp_free>
 8008654:	e00d      	b.n	8008672 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d103      	bne.n	8008664 <pbuf_free+0xc8>
          mem_free(p);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7fe fddd 	bl	800721c <mem_free>
 8008662:	e006      	b.n	8008672 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008664:	4b0b      	ldr	r3, [pc, #44]	@ (8008694 <pbuf_free+0xf8>)
 8008666:	f240 320f 	movw	r2, #783	@ 0x30f
 800866a:	490f      	ldr	r1, [pc, #60]	@ (80086a8 <pbuf_free+0x10c>)
 800866c:	480b      	ldr	r0, [pc, #44]	@ (800869c <pbuf_free+0x100>)
 800866e:	f005 ffb7 	bl	800e5e0 <iprintf>
        }
      }
      count++;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	3301      	adds	r3, #1
 8008676:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	607b      	str	r3, [r7, #4]
 800867c:	e001      	b.n	8008682 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800867e:	2300      	movs	r3, #0
 8008680:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d19f      	bne.n	80085c8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008688:	7dfb      	ldrb	r3, [r7, #23]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	08010260 	.word	0x08010260
 8008698:	08010400 	.word	0x08010400
 800869c:	080102fc 	.word	0x080102fc
 80086a0:	0801042c 	.word	0x0801042c
 80086a4:	08010444 	.word	0x08010444
 80086a8:	08010468 	.word	0x08010468

080086ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80086b8:	e005      	b.n	80086c6 <pbuf_clen+0x1a>
    ++len;
 80086ba:	89fb      	ldrh	r3, [r7, #14]
 80086bc:	3301      	adds	r3, #1
 80086be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1f6      	bne.n	80086ba <pbuf_clen+0xe>
  }
  return len;
 80086cc:	89fb      	ldrh	r3, [r7, #14]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d010      	beq.n	800870c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	7b9b      	ldrb	r3, [r3, #14]
 80086ee:	3301      	adds	r3, #1
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7b9b      	ldrb	r3, [r3, #14]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d106      	bne.n	800870c <pbuf_ref+0x30>
 80086fe:	4b05      	ldr	r3, [pc, #20]	@ (8008714 <pbuf_ref+0x38>)
 8008700:	f240 3242 	movw	r2, #834	@ 0x342
 8008704:	4904      	ldr	r1, [pc, #16]	@ (8008718 <pbuf_ref+0x3c>)
 8008706:	4805      	ldr	r0, [pc, #20]	@ (800871c <pbuf_ref+0x40>)
 8008708:	f005 ff6a 	bl	800e5e0 <iprintf>
  }
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	08010260 	.word	0x08010260
 8008718:	0801047c 	.word	0x0801047c
 800871c:	080102fc 	.word	0x080102fc

08008720 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <pbuf_cat+0x16>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d107      	bne.n	8008746 <pbuf_cat+0x26>
 8008736:	4b20      	ldr	r3, [pc, #128]	@ (80087b8 <pbuf_cat+0x98>)
 8008738:	f240 3259 	movw	r2, #857	@ 0x359
 800873c:	491f      	ldr	r1, [pc, #124]	@ (80087bc <pbuf_cat+0x9c>)
 800873e:	4820      	ldr	r0, [pc, #128]	@ (80087c0 <pbuf_cat+0xa0>)
 8008740:	f005 ff4e 	bl	800e5e0 <iprintf>
 8008744:	e034      	b.n	80087b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	e00a      	b.n	8008762 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	891a      	ldrh	r2, [r3, #8]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	891b      	ldrh	r3, [r3, #8]
 8008754:	4413      	add	r3, r2
 8008756:	b29a      	uxth	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	891a      	ldrh	r2, [r3, #8]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	895b      	ldrh	r3, [r3, #10]
 8008772:	429a      	cmp	r2, r3
 8008774:	d006      	beq.n	8008784 <pbuf_cat+0x64>
 8008776:	4b10      	ldr	r3, [pc, #64]	@ (80087b8 <pbuf_cat+0x98>)
 8008778:	f240 3262 	movw	r2, #866	@ 0x362
 800877c:	4911      	ldr	r1, [pc, #68]	@ (80087c4 <pbuf_cat+0xa4>)
 800877e:	4810      	ldr	r0, [pc, #64]	@ (80087c0 <pbuf_cat+0xa0>)
 8008780:	f005 ff2e 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d006      	beq.n	800879a <pbuf_cat+0x7a>
 800878c:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <pbuf_cat+0x98>)
 800878e:	f240 3263 	movw	r2, #867	@ 0x363
 8008792:	490d      	ldr	r1, [pc, #52]	@ (80087c8 <pbuf_cat+0xa8>)
 8008794:	480a      	ldr	r0, [pc, #40]	@ (80087c0 <pbuf_cat+0xa0>)
 8008796:	f005 ff23 	bl	800e5e0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	891a      	ldrh	r2, [r3, #8]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	891b      	ldrh	r3, [r3, #8]
 80087a2:	4413      	add	r3, r2
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	08010260 	.word	0x08010260
 80087bc:	08010490 	.word	0x08010490
 80087c0:	080102fc 	.word	0x080102fc
 80087c4:	080104c8 	.word	0x080104c8
 80087c8:	080104f8 	.word	0x080104f8

080087cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80087d6:	2300      	movs	r3, #0
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	2300      	movs	r3, #0
 80087dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d008      	beq.n	80087f6 <pbuf_copy+0x2a>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <pbuf_copy+0x2a>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	891a      	ldrh	r2, [r3, #8]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	891b      	ldrh	r3, [r3, #8]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d209      	bcs.n	800880a <pbuf_copy+0x3e>
 80087f6:	4b57      	ldr	r3, [pc, #348]	@ (8008954 <pbuf_copy+0x188>)
 80087f8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80087fc:	4956      	ldr	r1, [pc, #344]	@ (8008958 <pbuf_copy+0x18c>)
 80087fe:	4857      	ldr	r0, [pc, #348]	@ (800895c <pbuf_copy+0x190>)
 8008800:	f005 feee 	bl	800e5e0 <iprintf>
 8008804:	f06f 030f 	mvn.w	r3, #15
 8008808:	e09f      	b.n	800894a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	895b      	ldrh	r3, [r3, #10]
 800880e:	461a      	mov	r2, r3
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	1ad2      	subs	r2, r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	895b      	ldrh	r3, [r3, #10]
 8008818:	4619      	mov	r1, r3
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1acb      	subs	r3, r1, r3
 800881e:	429a      	cmp	r2, r3
 8008820:	d306      	bcc.n	8008830 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	895b      	ldrh	r3, [r3, #10]
 8008826:	461a      	mov	r2, r3
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	e005      	b.n	800883c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	895b      	ldrh	r3, [r3, #10]
 8008834:	461a      	mov	r2, r3
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	18d0      	adds	r0, r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	4413      	add	r3, r2
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	4619      	mov	r1, r3
 8008850:	f005 ffa1 	bl	800e796 <memcpy>
    offset_to += len;
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	895b      	ldrh	r3, [r3, #10]
 8008868:	461a      	mov	r2, r3
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	4293      	cmp	r3, r2
 800886e:	d906      	bls.n	800887e <pbuf_copy+0xb2>
 8008870:	4b38      	ldr	r3, [pc, #224]	@ (8008954 <pbuf_copy+0x188>)
 8008872:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8008876:	493a      	ldr	r1, [pc, #232]	@ (8008960 <pbuf_copy+0x194>)
 8008878:	4838      	ldr	r0, [pc, #224]	@ (800895c <pbuf_copy+0x190>)
 800887a:	f005 feb1 	bl	800e5e0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	895b      	ldrh	r3, [r3, #10]
 8008882:	461a      	mov	r2, r3
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	4293      	cmp	r3, r2
 8008888:	d906      	bls.n	8008898 <pbuf_copy+0xcc>
 800888a:	4b32      	ldr	r3, [pc, #200]	@ (8008954 <pbuf_copy+0x188>)
 800888c:	f240 32da 	movw	r2, #986	@ 0x3da
 8008890:	4934      	ldr	r1, [pc, #208]	@ (8008964 <pbuf_copy+0x198>)
 8008892:	4832      	ldr	r0, [pc, #200]	@ (800895c <pbuf_copy+0x190>)
 8008894:	f005 fea4 	bl	800e5e0 <iprintf>
    if (offset_from >= p_from->len) {
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	895b      	ldrh	r3, [r3, #10]
 800889c:	461a      	mov	r2, r3
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d304      	bcc.n	80088ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	895b      	ldrh	r3, [r3, #10]
 80088b2:	461a      	mov	r2, r3
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d114      	bne.n	80088e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10c      	bne.n	80088e4 <pbuf_copy+0x118>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d009      	beq.n	80088e4 <pbuf_copy+0x118>
 80088d0:	4b20      	ldr	r3, [pc, #128]	@ (8008954 <pbuf_copy+0x188>)
 80088d2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80088d6:	4924      	ldr	r1, [pc, #144]	@ (8008968 <pbuf_copy+0x19c>)
 80088d8:	4820      	ldr	r0, [pc, #128]	@ (800895c <pbuf_copy+0x190>)
 80088da:	f005 fe81 	bl	800e5e0 <iprintf>
 80088de:	f06f 030f 	mvn.w	r3, #15
 80088e2:	e032      	b.n	800894a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d013      	beq.n	8008912 <pbuf_copy+0x146>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	895a      	ldrh	r2, [r3, #10]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	891b      	ldrh	r3, [r3, #8]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d10d      	bne.n	8008912 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d009      	beq.n	8008912 <pbuf_copy+0x146>
 80088fe:	4b15      	ldr	r3, [pc, #84]	@ (8008954 <pbuf_copy+0x188>)
 8008900:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008904:	4919      	ldr	r1, [pc, #100]	@ (800896c <pbuf_copy+0x1a0>)
 8008906:	4815      	ldr	r0, [pc, #84]	@ (800895c <pbuf_copy+0x190>)
 8008908:	f005 fe6a 	bl	800e5e0 <iprintf>
 800890c:	f06f 0305 	mvn.w	r3, #5
 8008910:	e01b      	b.n	800894a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d013      	beq.n	8008940 <pbuf_copy+0x174>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	895a      	ldrh	r2, [r3, #10]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	891b      	ldrh	r3, [r3, #8]
 8008920:	429a      	cmp	r2, r3
 8008922:	d10d      	bne.n	8008940 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d009      	beq.n	8008940 <pbuf_copy+0x174>
 800892c:	4b09      	ldr	r3, [pc, #36]	@ (8008954 <pbuf_copy+0x188>)
 800892e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008932:	490e      	ldr	r1, [pc, #56]	@ (800896c <pbuf_copy+0x1a0>)
 8008934:	4809      	ldr	r0, [pc, #36]	@ (800895c <pbuf_copy+0x190>)
 8008936:	f005 fe53 	bl	800e5e0 <iprintf>
 800893a:	f06f 0305 	mvn.w	r3, #5
 800893e:	e004      	b.n	800894a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	f47f af61 	bne.w	800880a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	08010260 	.word	0x08010260
 8008958:	08010544 	.word	0x08010544
 800895c:	080102fc 	.word	0x080102fc
 8008960:	08010574 	.word	0x08010574
 8008964:	0801058c 	.word	0x0801058c
 8008968:	080105a8 	.word	0x080105a8
 800896c:	080105b8 	.word	0x080105b8

08008970 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4611      	mov	r1, r2
 800897c:	461a      	mov	r2, r3
 800897e:	460b      	mov	r3, r1
 8008980:	80fb      	strh	r3, [r7, #6]
 8008982:	4613      	mov	r3, r2
 8008984:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800898a:	2300      	movs	r3, #0
 800898c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d108      	bne.n	80089a6 <pbuf_copy_partial+0x36>
 8008994:	4b2b      	ldr	r3, [pc, #172]	@ (8008a44 <pbuf_copy_partial+0xd4>)
 8008996:	f240 420a 	movw	r2, #1034	@ 0x40a
 800899a:	492b      	ldr	r1, [pc, #172]	@ (8008a48 <pbuf_copy_partial+0xd8>)
 800899c:	482b      	ldr	r0, [pc, #172]	@ (8008a4c <pbuf_copy_partial+0xdc>)
 800899e:	f005 fe1f 	bl	800e5e0 <iprintf>
 80089a2:	2300      	movs	r3, #0
 80089a4:	e04a      	b.n	8008a3c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d108      	bne.n	80089be <pbuf_copy_partial+0x4e>
 80089ac:	4b25      	ldr	r3, [pc, #148]	@ (8008a44 <pbuf_copy_partial+0xd4>)
 80089ae:	f240 420b 	movw	r2, #1035	@ 0x40b
 80089b2:	4927      	ldr	r1, [pc, #156]	@ (8008a50 <pbuf_copy_partial+0xe0>)
 80089b4:	4825      	ldr	r0, [pc, #148]	@ (8008a4c <pbuf_copy_partial+0xdc>)
 80089b6:	f005 fe13 	bl	800e5e0 <iprintf>
 80089ba:	2300      	movs	r3, #0
 80089bc:	e03e      	b.n	8008a3c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	e034      	b.n	8008a2e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80089c4:	88bb      	ldrh	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <pbuf_copy_partial+0x70>
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	895b      	ldrh	r3, [r3, #10]
 80089ce:	88ba      	ldrh	r2, [r7, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d305      	bcc.n	80089e0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	895b      	ldrh	r3, [r3, #10]
 80089d8:	88ba      	ldrh	r2, [r7, #4]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	80bb      	strh	r3, [r7, #4]
 80089de:	e023      	b.n	8008a28 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	895a      	ldrh	r2, [r3, #10]
 80089e4:	88bb      	ldrh	r3, [r7, #4]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80089ea:	8b3a      	ldrh	r2, [r7, #24]
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d901      	bls.n	80089f6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80089f2:	88fb      	ldrh	r3, [r7, #6]
 80089f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80089f6:	8b7b      	ldrh	r3, [r7, #26]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	18d0      	adds	r0, r2, r3
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	88bb      	ldrh	r3, [r7, #4]
 8008a02:	4413      	add	r3, r2
 8008a04:	8b3a      	ldrh	r2, [r7, #24]
 8008a06:	4619      	mov	r1, r3
 8008a08:	f005 fec5 	bl	800e796 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008a0c:	8afa      	ldrh	r2, [r7, #22]
 8008a0e:	8b3b      	ldrh	r3, [r7, #24]
 8008a10:	4413      	add	r3, r2
 8008a12:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008a14:	8b7a      	ldrh	r2, [r7, #26]
 8008a16:	8b3b      	ldrh	r3, [r7, #24]
 8008a18:	4413      	add	r3, r2
 8008a1a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008a1c:	88fa      	ldrh	r2, [r7, #6]
 8008a1e:	8b3b      	ldrh	r3, [r7, #24]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	61fb      	str	r3, [r7, #28]
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <pbuf_copy_partial+0xca>
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1c4      	bne.n	80089c4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008a3a:	8afb      	ldrh	r3, [r7, #22]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3720      	adds	r7, #32
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	08010260 	.word	0x08010260
 8008a48:	080105e4 	.word	0x080105e4
 8008a4c:	080102fc 	.word	0x080102fc
 8008a50:	08010604 	.word	0x08010604

08008a54 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	603a      	str	r2, [r7, #0]
 8008a5e:	71fb      	strb	r3, [r7, #7]
 8008a60:	460b      	mov	r3, r1
 8008a62:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	8919      	ldrh	r1, [r3, #8]
 8008a68:	88ba      	ldrh	r2, [r7, #4]
 8008a6a:	79fb      	ldrb	r3, [r7, #7]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff faad 	bl	8007fcc <pbuf_alloc>
 8008a72:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <pbuf_clone+0x2a>
    return NULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e011      	b.n	8008aa2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f7ff fea3 	bl	80087cc <pbuf_copy>
 8008a86:	4603      	mov	r3, r0
 8008a88:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008a8a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d006      	beq.n	8008aa0 <pbuf_clone+0x4c>
 8008a92:	4b06      	ldr	r3, [pc, #24]	@ (8008aac <pbuf_clone+0x58>)
 8008a94:	f240 5224 	movw	r2, #1316	@ 0x524
 8008a98:	4905      	ldr	r1, [pc, #20]	@ (8008ab0 <pbuf_clone+0x5c>)
 8008a9a:	4806      	ldr	r0, [pc, #24]	@ (8008ab4 <pbuf_clone+0x60>)
 8008a9c:	f005 fda0 	bl	800e5e0 <iprintf>
  return q;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	08010260 	.word	0x08010260
 8008ab0:	08010710 	.word	0x08010710
 8008ab4:	080102fc 	.word	0x080102fc

08008ab8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008abc:	f005 fc90 	bl	800e3e0 <rand>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	4b01      	ldr	r3, [pc, #4]	@ (8008ad8 <tcp_init+0x20>)
 8008ad2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008ad4:	bf00      	nop
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20000020 	.word	0x20000020

08008adc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7d1b      	ldrb	r3, [r3, #20]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d105      	bne.n	8008af8 <tcp_free+0x1c>
 8008aec:	4b06      	ldr	r3, [pc, #24]	@ (8008b08 <tcp_free+0x2c>)
 8008aee:	22d4      	movs	r2, #212	@ 0xd4
 8008af0:	4906      	ldr	r1, [pc, #24]	@ (8008b0c <tcp_free+0x30>)
 8008af2:	4807      	ldr	r0, [pc, #28]	@ (8008b10 <tcp_free+0x34>)
 8008af4:	f005 fd74 	bl	800e5e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	2001      	movs	r0, #1
 8008afc:	f7fe fef4 	bl	80078e8 <memp_free>
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	0801079c 	.word	0x0801079c
 8008b0c:	08010804 	.word	0x08010804
 8008b10:	08010818 	.word	0x08010818

08008b14 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7d1b      	ldrb	r3, [r3, #20]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d105      	bne.n	8008b30 <tcp_free_listen+0x1c>
 8008b24:	4b06      	ldr	r3, [pc, #24]	@ (8008b40 <tcp_free_listen+0x2c>)
 8008b26:	22df      	movs	r2, #223	@ 0xdf
 8008b28:	4906      	ldr	r1, [pc, #24]	@ (8008b44 <tcp_free_listen+0x30>)
 8008b2a:	4807      	ldr	r0, [pc, #28]	@ (8008b48 <tcp_free_listen+0x34>)
 8008b2c:	f005 fd58 	bl	800e5e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	2002      	movs	r0, #2
 8008b34:	f7fe fed8 	bl	80078e8 <memp_free>
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	0801079c 	.word	0x0801079c
 8008b44:	08010840 	.word	0x08010840
 8008b48:	08010818 	.word	0x08010818

08008b4c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008b50:	f000 fee8 	bl	8009924 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008b54:	4b07      	ldr	r3, [pc, #28]	@ (8008b74 <tcp_tmr+0x28>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	4b05      	ldr	r3, [pc, #20]	@ (8008b74 <tcp_tmr+0x28>)
 8008b5e:	701a      	strb	r2, [r3, #0]
 8008b60:	4b04      	ldr	r3, [pc, #16]	@ (8008b74 <tcp_tmr+0x28>)
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008b6c:	f000 fb98 	bl	80092a0 <tcp_slowtmr>
  }
}
 8008b70:	bf00      	nop
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	2000b765 	.word	0x2000b765

08008b78 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d105      	bne.n	8008b94 <tcp_remove_listener+0x1c>
 8008b88:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc0 <tcp_remove_listener+0x48>)
 8008b8a:	22ff      	movs	r2, #255	@ 0xff
 8008b8c:	490d      	ldr	r1, [pc, #52]	@ (8008bc4 <tcp_remove_listener+0x4c>)
 8008b8e:	480e      	ldr	r0, [pc, #56]	@ (8008bc8 <tcp_remove_listener+0x50>)
 8008b90:	f005 fd26 	bl	800e5e0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	e00a      	b.n	8008bb0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d102      	bne.n	8008baa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f1      	bne.n	8008b9a <tcp_remove_listener+0x22>
    }
  }
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	0801079c 	.word	0x0801079c
 8008bc4:	0801085c 	.word	0x0801085c
 8008bc8:	08010818 	.word	0x08010818

08008bcc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <tcp_listen_closed+0x1c>
 8008bda:	4b14      	ldr	r3, [pc, #80]	@ (8008c2c <tcp_listen_closed+0x60>)
 8008bdc:	f240 1211 	movw	r2, #273	@ 0x111
 8008be0:	4913      	ldr	r1, [pc, #76]	@ (8008c30 <tcp_listen_closed+0x64>)
 8008be2:	4814      	ldr	r0, [pc, #80]	@ (8008c34 <tcp_listen_closed+0x68>)
 8008be4:	f005 fcfc 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	7d1b      	ldrb	r3, [r3, #20]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d006      	beq.n	8008bfe <tcp_listen_closed+0x32>
 8008bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8008c2c <tcp_listen_closed+0x60>)
 8008bf2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008bf6:	4910      	ldr	r1, [pc, #64]	@ (8008c38 <tcp_listen_closed+0x6c>)
 8008bf8:	480e      	ldr	r0, [pc, #56]	@ (8008c34 <tcp_listen_closed+0x68>)
 8008bfa:	f005 fcf1 	bl	800e5e0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008bfe:	2301      	movs	r3, #1
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	e00b      	b.n	8008c1c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008c04:	4a0d      	ldr	r2, [pc, #52]	@ (8008c3c <tcp_listen_closed+0x70>)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff ffb1 	bl	8008b78 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d9f0      	bls.n	8008c04 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	0801079c 	.word	0x0801079c
 8008c30:	08010884 	.word	0x08010884
 8008c34:	08010818 	.word	0x08010818
 8008c38:	08010890 	.word	0x08010890
 8008c3c:	08012230 	.word	0x08012230

08008c40 <tcp_backlog_accepted>:
 *
 * @param pcb the connection pcb which is now fully accepted (or closed/aborted)
 */
void
tcp_backlog_accepted(struct tcp_pcb *pcb)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <tcp_backlog_accepted+0x1c>
 8008c4e:	4b17      	ldr	r3, [pc, #92]	@ (8008cac <tcp_backlog_accepted+0x6c>)
 8008c50:	f240 123f 	movw	r2, #319	@ 0x13f
 8008c54:	4916      	ldr	r1, [pc, #88]	@ (8008cb0 <tcp_backlog_accepted+0x70>)
 8008c56:	4817      	ldr	r0, [pc, #92]	@ (8008cb4 <tcp_backlog_accepted+0x74>)
 8008c58:	f005 fcc2 	bl	800e5e0 <iprintf>
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb->flags & TF_BACKLOGPEND) != 0) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	8b5b      	ldrh	r3, [r3, #26]
 8008c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01c      	beq.n	8008ca2 <tcp_backlog_accepted+0x62>
    if (pcb->listener != NULL) {
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d018      	beq.n	8008ca2 <tcp_backlog_accepted+0x62>
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c74:	7f5b      	ldrb	r3, [r3, #29]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d106      	bne.n	8008c88 <tcp_backlog_accepted+0x48>
 8008c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008cac <tcp_backlog_accepted+0x6c>)
 8008c7c:	f240 1243 	movw	r2, #323	@ 0x143
 8008c80:	490d      	ldr	r1, [pc, #52]	@ (8008cb8 <tcp_backlog_accepted+0x78>)
 8008c82:	480c      	ldr	r0, [pc, #48]	@ (8008cb4 <tcp_backlog_accepted+0x74>)
 8008c84:	f005 fcac 	bl	800e5e0 <iprintf>
      pcb->listener->accepts_pending--;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c8c:	7f5a      	ldrb	r2, [r3, #29]
 8008c8e:	3a01      	subs	r2, #1
 8008c90:	b2d2      	uxtb	r2, r2
 8008c92:	775a      	strb	r2, [r3, #29]
      tcp_clear_flags(pcb, TF_BACKLOGPEND);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	8b5b      	ldrh	r3, [r3, #26]
 8008c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	0801079c 	.word	0x0801079c
 8008cb0:	08010884 	.word	0x08010884
 8008cb4:	08010818 	.word	0x08010818
 8008cb8:	080108a8 	.word	0x080108a8

08008cbc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008cbc:	b5b0      	push	{r4, r5, r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af04      	add	r7, sp, #16
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d106      	bne.n	8008cdc <tcp_close_shutdown+0x20>
 8008cce:	4b63      	ldr	r3, [pc, #396]	@ (8008e5c <tcp_close_shutdown+0x1a0>)
 8008cd0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008cd4:	4962      	ldr	r1, [pc, #392]	@ (8008e60 <tcp_close_shutdown+0x1a4>)
 8008cd6:	4863      	ldr	r0, [pc, #396]	@ (8008e64 <tcp_close_shutdown+0x1a8>)
 8008cd8:	f005 fc82 	bl	800e5e0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d067      	beq.n	8008db2 <tcp_close_shutdown+0xf6>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	7d1b      	ldrb	r3, [r3, #20]
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d003      	beq.n	8008cf2 <tcp_close_shutdown+0x36>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	7d1b      	ldrb	r3, [r3, #20]
 8008cee:	2b07      	cmp	r3, #7
 8008cf0:	d15f      	bne.n	8008db2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d105      	bne.n	8008d06 <tcp_close_shutdown+0x4a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cfe:	f640 3268 	movw	r2, #2920	@ 0xb68
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d055      	beq.n	8008db2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	8b5b      	ldrh	r3, [r3, #26]
 8008d0a:	f003 0310 	and.w	r3, r3, #16
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d106      	bne.n	8008d20 <tcp_close_shutdown+0x64>
 8008d12:	4b52      	ldr	r3, [pc, #328]	@ (8008e5c <tcp_close_shutdown+0x1a0>)
 8008d14:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008d18:	4953      	ldr	r1, [pc, #332]	@ (8008e68 <tcp_close_shutdown+0x1ac>)
 8008d1a:	4852      	ldr	r0, [pc, #328]	@ (8008e64 <tcp_close_shutdown+0x1a8>)
 8008d1c:	f005 fc60 	bl	800e5e0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008d28:	687d      	ldr	r5, [r7, #4]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	8ad2      	ldrh	r2, [r2, #22]
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	8b09      	ldrh	r1, [r1, #24]
 8008d36:	9102      	str	r1, [sp, #8]
 8008d38:	9201      	str	r2, [sp, #4]
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	4622      	mov	r2, r4
 8008d40:	4601      	mov	r1, r0
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f004 feb4 	bl	800dab0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 f8cf 	bl	8009eec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008d4e:	4b47      	ldr	r3, [pc, #284]	@ (8008e6c <tcp_close_shutdown+0x1b0>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d105      	bne.n	8008d64 <tcp_close_shutdown+0xa8>
 8008d58:	4b44      	ldr	r3, [pc, #272]	@ (8008e6c <tcp_close_shutdown+0x1b0>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	4a43      	ldr	r2, [pc, #268]	@ (8008e6c <tcp_close_shutdown+0x1b0>)
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	e013      	b.n	8008d8c <tcp_close_shutdown+0xd0>
 8008d64:	4b41      	ldr	r3, [pc, #260]	@ (8008e6c <tcp_close_shutdown+0x1b0>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	e00c      	b.n	8008d86 <tcp_close_shutdown+0xca>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d104      	bne.n	8008d80 <tcp_close_shutdown+0xc4>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	60da      	str	r2, [r3, #12]
 8008d7e:	e005      	b.n	8008d8c <tcp_close_shutdown+0xd0>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1ef      	bne.n	8008d6c <tcp_close_shutdown+0xb0>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	60da      	str	r2, [r3, #12]
 8008d92:	4b37      	ldr	r3, [pc, #220]	@ (8008e70 <tcp_close_shutdown+0x1b4>)
 8008d94:	2201      	movs	r2, #1
 8008d96:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008d98:	4b36      	ldr	r3, [pc, #216]	@ (8008e74 <tcp_close_shutdown+0x1b8>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d102      	bne.n	8008da8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008da2:	f003 fd83 	bl	800c8ac <tcp_trigger_input_pcb_close>
 8008da6:	e002      	b.n	8008dae <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff fe97 	bl	8008adc <tcp_free>
      }
      return ERR_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	e050      	b.n	8008e54 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	7d1b      	ldrb	r3, [r3, #20]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d03b      	beq.n	8008e32 <tcp_close_shutdown+0x176>
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	dc44      	bgt.n	8008e48 <tcp_close_shutdown+0x18c>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <tcp_close_shutdown+0x10c>
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d02a      	beq.n	8008e1c <tcp_close_shutdown+0x160>
 8008dc6:	e03f      	b.n	8008e48 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	8adb      	ldrh	r3, [r3, #22]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d021      	beq.n	8008e14 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008dd0:	4b29      	ldr	r3, [pc, #164]	@ (8008e78 <tcp_close_shutdown+0x1bc>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d105      	bne.n	8008de6 <tcp_close_shutdown+0x12a>
 8008dda:	4b27      	ldr	r3, [pc, #156]	@ (8008e78 <tcp_close_shutdown+0x1bc>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	4a25      	ldr	r2, [pc, #148]	@ (8008e78 <tcp_close_shutdown+0x1bc>)
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	e013      	b.n	8008e0e <tcp_close_shutdown+0x152>
 8008de6:	4b24      	ldr	r3, [pc, #144]	@ (8008e78 <tcp_close_shutdown+0x1bc>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60bb      	str	r3, [r7, #8]
 8008dec:	e00c      	b.n	8008e08 <tcp_close_shutdown+0x14c>
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d104      	bne.n	8008e02 <tcp_close_shutdown+0x146>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68da      	ldr	r2, [r3, #12]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	60da      	str	r2, [r3, #12]
 8008e00:	e005      	b.n	8008e0e <tcp_close_shutdown+0x152>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	60bb      	str	r3, [r7, #8]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1ef      	bne.n	8008dee <tcp_close_shutdown+0x132>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fe61 	bl	8008adc <tcp_free>
      break;
 8008e1a:	e01a      	b.n	8008e52 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff fed5 	bl	8008bcc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4815      	ldr	r0, [pc, #84]	@ (8008e7c <tcp_close_shutdown+0x1c0>)
 8008e26:	f001 f8b5 	bl	8009f94 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff fe72 	bl	8008b14 <tcp_free_listen>
      break;
 8008e30:	e00f      	b.n	8008e52 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	480d      	ldr	r0, [pc, #52]	@ (8008e6c <tcp_close_shutdown+0x1b0>)
 8008e36:	f001 f8ad 	bl	8009f94 <tcp_pcb_remove>
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e70 <tcp_close_shutdown+0x1b4>)
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff fe4b 	bl	8008adc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008e46:	e004      	b.n	8008e52 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f819 	bl	8008e80 <tcp_close_shutdown_fin>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	e000      	b.n	8008e54 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8008e5c:	0801079c 	.word	0x0801079c
 8008e60:	080108c0 	.word	0x080108c0
 8008e64:	08010818 	.word	0x08010818
 8008e68:	080108e0 	.word	0x080108e0
 8008e6c:	2000b75c 	.word	0x2000b75c
 8008e70:	2000b764 	.word	0x2000b764
 8008e74:	2000b79c 	.word	0x2000b79c
 8008e78:	2000b754 	.word	0x2000b754
 8008e7c:	2000b758 	.word	0x2000b758

08008e80 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d106      	bne.n	8008e9c <tcp_close_shutdown_fin+0x1c>
 8008e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008f4c <tcp_close_shutdown_fin+0xcc>)
 8008e90:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008e94:	492e      	ldr	r1, [pc, #184]	@ (8008f50 <tcp_close_shutdown_fin+0xd0>)
 8008e96:	482f      	ldr	r0, [pc, #188]	@ (8008f54 <tcp_close_shutdown_fin+0xd4>)
 8008e98:	f005 fba2 	bl	800e5e0 <iprintf>

  switch (pcb->state) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	7d1b      	ldrb	r3, [r3, #20]
 8008ea0:	2b07      	cmp	r3, #7
 8008ea2:	d023      	beq.n	8008eec <tcp_close_shutdown_fin+0x6c>
 8008ea4:	2b07      	cmp	r3, #7
 8008ea6:	dc2e      	bgt.n	8008f06 <tcp_close_shutdown_fin+0x86>
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d002      	beq.n	8008eb2 <tcp_close_shutdown_fin+0x32>
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d010      	beq.n	8008ed2 <tcp_close_shutdown_fin+0x52>
 8008eb0:	e029      	b.n	8008f06 <tcp_close_shutdown_fin+0x86>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f003 ff0a 	bl	800cccc <tcp_send_fin>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d122      	bne.n	8008f0a <tcp_close_shutdown_fin+0x8a>
        tcp_backlog_accepted(pcb);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff febb 	bl	8008c40 <tcp_backlog_accepted>
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2205      	movs	r2, #5
 8008ece:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ed0:	e01b      	b.n	8008f0a <tcp_close_shutdown_fin+0x8a>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f003 fefa 	bl	800cccc <tcp_send_fin>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d114      	bne.n	8008f0e <tcp_close_shutdown_fin+0x8e>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2205      	movs	r2, #5
 8008ee8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008eea:	e010      	b.n	8008f0e <tcp_close_shutdown_fin+0x8e>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f003 feed 	bl	800cccc <tcp_send_fin>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d109      	bne.n	8008f12 <tcp_close_shutdown_fin+0x92>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2209      	movs	r2, #9
 8008f02:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008f04:	e005      	b.n	8008f12 <tcp_close_shutdown_fin+0x92>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	e01c      	b.n	8008f44 <tcp_close_shutdown_fin+0xc4>
      break;
 8008f0a:	bf00      	nop
 8008f0c:	e002      	b.n	8008f14 <tcp_close_shutdown_fin+0x94>
      break;
 8008f0e:	bf00      	nop
 8008f10:	e000      	b.n	8008f14 <tcp_close_shutdown_fin+0x94>
      break;
 8008f12:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d103      	bne.n	8008f24 <tcp_close_shutdown_fin+0xa4>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f004 f813 	bl	800cf48 <tcp_output>
 8008f22:	e00d      	b.n	8008f40 <tcp_close_shutdown_fin+0xc0>
  } else if (err == ERR_MEM) {
 8008f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2c:	d108      	bne.n	8008f40 <tcp_close_shutdown_fin+0xc0>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	8b5b      	ldrh	r3, [r3, #26]
 8008f32:	f043 0308 	orr.w	r3, r3, #8
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	e001      	b.n	8008f44 <tcp_close_shutdown_fin+0xc4>
  }
  return err;
 8008f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	0801079c 	.word	0x0801079c
 8008f50:	08010884 	.word	0x08010884
 8008f54:	08010818 	.word	0x08010818

08008f58 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d109      	bne.n	8008f7a <tcp_close+0x22>
 8008f66:	4b0f      	ldr	r3, [pc, #60]	@ (8008fa4 <tcp_close+0x4c>)
 8008f68:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008f6c:	490e      	ldr	r1, [pc, #56]	@ (8008fa8 <tcp_close+0x50>)
 8008f6e:	480f      	ldr	r0, [pc, #60]	@ (8008fac <tcp_close+0x54>)
 8008f70:	f005 fb36 	bl	800e5e0 <iprintf>
 8008f74:	f06f 030f 	mvn.w	r3, #15
 8008f78:	e00f      	b.n	8008f9a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	7d1b      	ldrb	r3, [r3, #20]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d006      	beq.n	8008f90 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	8b5b      	ldrh	r3, [r3, #26]
 8008f86:	f043 0310 	orr.w	r3, r3, #16
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008f90:	2101      	movs	r1, #1
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff fe92 	bl	8008cbc <tcp_close_shutdown>
 8008f98:	4603      	mov	r3, r0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	0801079c 	.word	0x0801079c
 8008fa8:	080108fc 	.word	0x080108fc
 8008fac:	08010818 	.word	0x08010818

08008fb0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08e      	sub	sp, #56	@ 0x38
 8008fb4:	af04      	add	r7, sp, #16
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d107      	bne.n	8008fd0 <tcp_abandon+0x20>
 8008fc0:	4b53      	ldr	r3, [pc, #332]	@ (8009110 <tcp_abandon+0x160>)
 8008fc2:	f240 223d 	movw	r2, #573	@ 0x23d
 8008fc6:	4953      	ldr	r1, [pc, #332]	@ (8009114 <tcp_abandon+0x164>)
 8008fc8:	4853      	ldr	r0, [pc, #332]	@ (8009118 <tcp_abandon+0x168>)
 8008fca:	f005 fb09 	bl	800e5e0 <iprintf>
 8008fce:	e09c      	b.n	800910a <tcp_abandon+0x15a>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	7d1b      	ldrb	r3, [r3, #20]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d106      	bne.n	8008fe6 <tcp_abandon+0x36>
 8008fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8009110 <tcp_abandon+0x160>)
 8008fda:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008fde:	494f      	ldr	r1, [pc, #316]	@ (800911c <tcp_abandon+0x16c>)
 8008fe0:	484d      	ldr	r0, [pc, #308]	@ (8009118 <tcp_abandon+0x168>)
 8008fe2:	f005 fafd 	bl	800e5e0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	7d1b      	ldrb	r3, [r3, #20]
 8008fea:	2b0a      	cmp	r3, #10
 8008fec:	d107      	bne.n	8008ffe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	484b      	ldr	r0, [pc, #300]	@ (8009120 <tcp_abandon+0x170>)
 8008ff2:	f000 ffcf 	bl	8009f94 <tcp_pcb_remove>
    tcp_free(pcb);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7ff fd70 	bl	8008adc <tcp_free>
 8008ffc:	e085      	b.n	800910a <tcp_abandon+0x15a>
  } else {
    int send_rst = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800900a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009010:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009018:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	7d1b      	ldrb	r3, [r3, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d126      	bne.n	8009076 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	8adb      	ldrh	r3, [r3, #22]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d02e      	beq.n	800908e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009030:	4b3c      	ldr	r3, [pc, #240]	@ (8009124 <tcp_abandon+0x174>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	429a      	cmp	r2, r3
 8009038:	d105      	bne.n	8009046 <tcp_abandon+0x96>
 800903a:	4b3a      	ldr	r3, [pc, #232]	@ (8009124 <tcp_abandon+0x174>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	4a38      	ldr	r2, [pc, #224]	@ (8009124 <tcp_abandon+0x174>)
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	e013      	b.n	800906e <tcp_abandon+0xbe>
 8009046:	4b37      	ldr	r3, [pc, #220]	@ (8009124 <tcp_abandon+0x174>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	61fb      	str	r3, [r7, #28]
 800904c:	e00c      	b.n	8009068 <tcp_abandon+0xb8>
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	429a      	cmp	r2, r3
 8009056:	d104      	bne.n	8009062 <tcp_abandon+0xb2>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	60da      	str	r2, [r3, #12]
 8009060:	e005      	b.n	800906e <tcp_abandon+0xbe>
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	61fb      	str	r3, [r7, #28]
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1ef      	bne.n	800904e <tcp_abandon+0x9e>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	60da      	str	r2, [r3, #12]
 8009074:	e00b      	b.n	800908e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	8adb      	ldrh	r3, [r3, #22]
 800907e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	4829      	ldr	r0, [pc, #164]	@ (8009128 <tcp_abandon+0x178>)
 8009084:	f000 ff86 	bl	8009f94 <tcp_pcb_remove>
 8009088:	4b28      	ldr	r3, [pc, #160]	@ (800912c <tcp_abandon+0x17c>)
 800908a:	2201      	movs	r2, #1
 800908c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800909a:	4618      	mov	r0, r3
 800909c:	f000 fd24 	bl	8009ae8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d004      	beq.n	80090b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fd1b 	bl	8009ae8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fd12 	bl	8009ae8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff fdbb 	bl	8008c40 <tcp_backlog_accepted>
    if (send_rst) {
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00e      	beq.n	80090ee <tcp_abandon+0x13e>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3304      	adds	r3, #4
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	8b12      	ldrh	r2, [r2, #24]
 80090da:	9202      	str	r2, [sp, #8]
 80090dc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80090de:	9201      	str	r2, [sp, #4]
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	460b      	mov	r3, r1
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	69b9      	ldr	r1, [r7, #24]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f004 fce1 	bl	800dab0 <tcp_rst>
    }
    last_state = pcb->state;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	7d1b      	ldrb	r3, [r3, #20]
 80090f2:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff fcf1 	bl	8008adc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d004      	beq.n	800910a <tcp_abandon+0x15a>
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f06f 010c 	mvn.w	r1, #12
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	4798      	blx	r3
  }
}
 800910a:	3728      	adds	r7, #40	@ 0x28
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	0801079c 	.word	0x0801079c
 8009114:	08010930 	.word	0x08010930
 8009118:	08010818 	.word	0x08010818
 800911c:	0801094c 	.word	0x0801094c
 8009120:	2000b760 	.word	0x2000b760
 8009124:	2000b754 	.word	0x2000b754
 8009128:	2000b75c 	.word	0x2000b75c
 800912c:	2000b764 	.word	0x2000b764

08009130 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009138:	2101      	movs	r1, #1
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff ff38 	bl	8008fb0 <tcp_abandon>
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <tcp_update_rcv_ann_wnd+0x1c>
 8009156:	4b25      	ldr	r3, [pc, #148]	@ (80091ec <tcp_update_rcv_ann_wnd+0xa4>)
 8009158:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800915c:	4924      	ldr	r1, [pc, #144]	@ (80091f0 <tcp_update_rcv_ann_wnd+0xa8>)
 800915e:	4825      	ldr	r0, [pc, #148]	@ (80091f4 <tcp_update_rcv_ann_wnd+0xac>)
 8009160:	f005 fa3e 	bl	800e5e0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800916c:	4413      	add	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009178:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800917c:	428a      	cmp	r2, r1
 800917e:	bf28      	it	cs
 8009180:	460a      	movcs	r2, r1
 8009182:	b292      	uxth	r2, r2
 8009184:	4413      	add	r3, r2
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	db08      	blt.n	80091a0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	e020      	b.n	80091e2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	dd03      	ble.n	80091b6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80091b4:	e014      	b.n	80091e0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091c8:	d306      	bcc.n	80091d8 <tcp_update_rcv_ann_wnd+0x90>
 80091ca:	4b08      	ldr	r3, [pc, #32]	@ (80091ec <tcp_update_rcv_ann_wnd+0xa4>)
 80091cc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80091d0:	4909      	ldr	r1, [pc, #36]	@ (80091f8 <tcp_update_rcv_ann_wnd+0xb0>)
 80091d2:	4808      	ldr	r0, [pc, #32]	@ (80091f4 <tcp_update_rcv_ann_wnd+0xac>)
 80091d4:	f005 fa04 	bl	800e5e0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	b29a      	uxth	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80091e0:	2300      	movs	r3, #0
  }
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	0801079c 	.word	0x0801079c
 80091f0:	08010a78 	.word	0x08010a78
 80091f4:	08010818 	.word	0x08010818
 80091f8:	08010a9c 	.word	0x08010a9c

080091fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d107      	bne.n	800921e <tcp_recved+0x22>
 800920e:	4b20      	ldr	r3, [pc, #128]	@ (8009290 <tcp_recved+0x94>)
 8009210:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8009214:	491f      	ldr	r1, [pc, #124]	@ (8009294 <tcp_recved+0x98>)
 8009216:	4820      	ldr	r0, [pc, #128]	@ (8009298 <tcp_recved+0x9c>)
 8009218:	f005 f9e2 	bl	800e5e0 <iprintf>
 800921c:	e034      	b.n	8009288 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	7d1b      	ldrb	r3, [r3, #20]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d106      	bne.n	8009234 <tcp_recved+0x38>
 8009226:	4b1a      	ldr	r3, [pc, #104]	@ (8009290 <tcp_recved+0x94>)
 8009228:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800922c:	491b      	ldr	r1, [pc, #108]	@ (800929c <tcp_recved+0xa0>)
 800922e:	481a      	ldr	r0, [pc, #104]	@ (8009298 <tcp_recved+0x9c>)
 8009230:	f005 f9d6 	bl	800e5e0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009238:	887b      	ldrh	r3, [r7, #2]
 800923a:	4413      	add	r3, r2
 800923c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800923e:	89fb      	ldrh	r3, [r7, #14]
 8009240:	f640 3268 	movw	r2, #2920	@ 0xb68
 8009244:	4293      	cmp	r3, r2
 8009246:	d804      	bhi.n	8009252 <tcp_recved+0x56>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800924c:	89fa      	ldrh	r2, [r7, #14]
 800924e:	429a      	cmp	r2, r3
 8009250:	d204      	bcs.n	800925c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f640 3268 	movw	r2, #2920	@ 0xb68
 8009258:	851a      	strh	r2, [r3, #40]	@ 0x28
 800925a:	e002      	b.n	8009262 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	89fa      	ldrh	r2, [r7, #14]
 8009260:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff ff70 	bl	8009148 <tcp_update_rcv_ann_wnd>
 8009268:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8009270:	4293      	cmp	r3, r2
 8009272:	d909      	bls.n	8009288 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	8b5b      	ldrh	r3, [r3, #26]
 8009278:	f043 0302 	orr.w	r3, r3, #2
 800927c:	b29a      	uxth	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f003 fe60 	bl	800cf48 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	0801079c 	.word	0x0801079c
 8009294:	08010ab8 	.word	0x08010ab8
 8009298:	08010818 	.word	0x08010818
 800929c:	08010ad0 	.word	0x08010ad0

080092a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80092a0:	b5b0      	push	{r4, r5, r7, lr}
 80092a2:	b090      	sub	sp, #64	@ 0x40
 80092a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80092ac:	4b95      	ldr	r3, [pc, #596]	@ (8009504 <tcp_slowtmr+0x264>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3301      	adds	r3, #1
 80092b2:	4a94      	ldr	r2, [pc, #592]	@ (8009504 <tcp_slowtmr+0x264>)
 80092b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80092b6:	4b94      	ldr	r3, [pc, #592]	@ (8009508 <tcp_slowtmr+0x268>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	3301      	adds	r3, #1
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	4b92      	ldr	r3, [pc, #584]	@ (8009508 <tcp_slowtmr+0x268>)
 80092c0:	701a      	strb	r2, [r3, #0]
 80092c2:	e000      	b.n	80092c6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80092c4:	bf00      	nop
  prev = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80092ca:	4b90      	ldr	r3, [pc, #576]	@ (800950c <tcp_slowtmr+0x26c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80092d0:	e29d      	b.n	800980e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80092d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d4:	7d1b      	ldrb	r3, [r3, #20]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d106      	bne.n	80092e8 <tcp_slowtmr+0x48>
 80092da:	4b8d      	ldr	r3, [pc, #564]	@ (8009510 <tcp_slowtmr+0x270>)
 80092dc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80092e0:	498c      	ldr	r1, [pc, #560]	@ (8009514 <tcp_slowtmr+0x274>)
 80092e2:	488d      	ldr	r0, [pc, #564]	@ (8009518 <tcp_slowtmr+0x278>)
 80092e4:	f005 f97c 	bl	800e5e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80092e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ea:	7d1b      	ldrb	r3, [r3, #20]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d106      	bne.n	80092fe <tcp_slowtmr+0x5e>
 80092f0:	4b87      	ldr	r3, [pc, #540]	@ (8009510 <tcp_slowtmr+0x270>)
 80092f2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80092f6:	4989      	ldr	r1, [pc, #548]	@ (800951c <tcp_slowtmr+0x27c>)
 80092f8:	4887      	ldr	r0, [pc, #540]	@ (8009518 <tcp_slowtmr+0x278>)
 80092fa:	f005 f971 	bl	800e5e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80092fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009300:	7d1b      	ldrb	r3, [r3, #20]
 8009302:	2b0a      	cmp	r3, #10
 8009304:	d106      	bne.n	8009314 <tcp_slowtmr+0x74>
 8009306:	4b82      	ldr	r3, [pc, #520]	@ (8009510 <tcp_slowtmr+0x270>)
 8009308:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800930c:	4984      	ldr	r1, [pc, #528]	@ (8009520 <tcp_slowtmr+0x280>)
 800930e:	4882      	ldr	r0, [pc, #520]	@ (8009518 <tcp_slowtmr+0x278>)
 8009310:	f005 f966 	bl	800e5e0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009316:	7f9a      	ldrb	r2, [r3, #30]
 8009318:	4b7b      	ldr	r3, [pc, #492]	@ (8009508 <tcp_slowtmr+0x268>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	429a      	cmp	r2, r3
 800931e:	d105      	bne.n	800932c <tcp_slowtmr+0x8c>
      prev = pcb;
 8009320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009322:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800932a:	e270      	b.n	800980e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800932c:	4b76      	ldr	r3, [pc, #472]	@ (8009508 <tcp_slowtmr+0x268>)
 800932e:	781a      	ldrb	r2, [r3, #0]
 8009330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009332:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009342:	7d1b      	ldrb	r3, [r3, #20]
 8009344:	2b02      	cmp	r3, #2
 8009346:	d10a      	bne.n	800935e <tcp_slowtmr+0xbe>
 8009348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800934a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800934e:	2b05      	cmp	r3, #5
 8009350:	d905      	bls.n	800935e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009356:	3301      	adds	r3, #1
 8009358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800935c:	e11e      	b.n	800959c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009364:	2b0b      	cmp	r3, #11
 8009366:	d905      	bls.n	8009374 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800936c:	3301      	adds	r3, #1
 800936e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009372:	e113      	b.n	800959c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009376:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800937a:	2b00      	cmp	r3, #0
 800937c:	d075      	beq.n	800946a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800937e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009382:	2b00      	cmp	r3, #0
 8009384:	d006      	beq.n	8009394 <tcp_slowtmr+0xf4>
 8009386:	4b62      	ldr	r3, [pc, #392]	@ (8009510 <tcp_slowtmr+0x270>)
 8009388:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800938c:	4965      	ldr	r1, [pc, #404]	@ (8009524 <tcp_slowtmr+0x284>)
 800938e:	4862      	ldr	r0, [pc, #392]	@ (8009518 <tcp_slowtmr+0x278>)
 8009390:	f005 f926 	bl	800e5e0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d106      	bne.n	80093aa <tcp_slowtmr+0x10a>
 800939c:	4b5c      	ldr	r3, [pc, #368]	@ (8009510 <tcp_slowtmr+0x270>)
 800939e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80093a2:	4961      	ldr	r1, [pc, #388]	@ (8009528 <tcp_slowtmr+0x288>)
 80093a4:	485c      	ldr	r0, [pc, #368]	@ (8009518 <tcp_slowtmr+0x278>)
 80093a6:	f005 f91b 	bl	800e5e0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80093aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ac:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80093b0:	2b0b      	cmp	r3, #11
 80093b2:	d905      	bls.n	80093c0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80093b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093b8:	3301      	adds	r3, #1
 80093ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80093be:	e0ed      	b.n	800959c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80093c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80093c6:	3b01      	subs	r3, #1
 80093c8:	4a58      	ldr	r2, [pc, #352]	@ (800952c <tcp_slowtmr+0x28c>)
 80093ca:	5cd3      	ldrb	r3, [r2, r3]
 80093cc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80093ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80093d4:	7c7a      	ldrb	r2, [r7, #17]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d907      	bls.n	80093ea <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80093da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80093e0:	3301      	adds	r3, #1
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80093ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80093f0:	7c7a      	ldrb	r2, [r7, #17]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	f200 80d2 	bhi.w	800959c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80093f8:	2301      	movs	r3, #1
 80093fa:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80093fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009402:	2b00      	cmp	r3, #0
 8009404:	d108      	bne.n	8009418 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009406:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009408:	f004 fc46 	bl	800dc98 <tcp_zero_window_probe>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d014      	beq.n	800943c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8009412:	2300      	movs	r3, #0
 8009414:	623b      	str	r3, [r7, #32]
 8009416:	e011      	b.n	800943c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800941e:	4619      	mov	r1, r3
 8009420:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009422:	f003 fb0b 	bl	800ca3c <tcp_split_unsent_seg>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d107      	bne.n	800943c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800942c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800942e:	f003 fd8b 	bl	800cf48 <tcp_output>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 80ac 	beq.w	800959c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8009444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800944c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009452:	2b06      	cmp	r3, #6
 8009454:	f200 80a2 	bhi.w	800959c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8009458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800945e:	3301      	adds	r3, #1
 8009460:	b2da      	uxtb	r2, r3
 8009462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009464:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8009468:	e098      	b.n	800959c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800946a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009470:	2b00      	cmp	r3, #0
 8009472:	db0f      	blt.n	8009494 <tcp_slowtmr+0x1f4>
 8009474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009476:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800947a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800947e:	4293      	cmp	r3, r2
 8009480:	d008      	beq.n	8009494 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8009482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009484:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009488:	b29b      	uxth	r3, r3
 800948a:	3301      	adds	r3, #1
 800948c:	b29b      	uxth	r3, r3
 800948e:	b21a      	sxth	r2, r3
 8009490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009492:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8009494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009496:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800949a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80094a0:	429a      	cmp	r2, r3
 80094a2:	db7b      	blt.n	800959c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80094a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094a6:	f004 f843 	bl	800d530 <tcp_rexmit_rto_prepare>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <tcp_slowtmr+0x220>
 80094b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d171      	bne.n	800959c <tcp_slowtmr+0x2fc>
 80094b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d06d      	beq.n	800959c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80094c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c2:	7d1b      	ldrb	r3, [r3, #20]
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d03a      	beq.n	800953e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80094c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094ce:	2b0c      	cmp	r3, #12
 80094d0:	bf28      	it	cs
 80094d2:	230c      	movcs	r3, #12
 80094d4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80094d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80094dc:	10db      	asrs	r3, r3, #3
 80094de:	b21b      	sxth	r3, r3
 80094e0:	461a      	mov	r2, r3
 80094e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80094e8:	4413      	add	r3, r2
 80094ea:	7efa      	ldrb	r2, [r7, #27]
 80094ec:	4910      	ldr	r1, [pc, #64]	@ (8009530 <tcp_slowtmr+0x290>)
 80094ee:	5c8a      	ldrb	r2, [r1, r2]
 80094f0:	4093      	lsls	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80094fa:	4293      	cmp	r3, r2
 80094fc:	dc1a      	bgt.n	8009534 <tcp_slowtmr+0x294>
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	b21a      	sxth	r2, r3
 8009502:	e019      	b.n	8009538 <tcp_slowtmr+0x298>
 8009504:	2000b750 	.word	0x2000b750
 8009508:	2000b766 	.word	0x2000b766
 800950c:	2000b75c 	.word	0x2000b75c
 8009510:	0801079c 	.word	0x0801079c
 8009514:	08010b60 	.word	0x08010b60
 8009518:	08010818 	.word	0x08010818
 800951c:	08010b8c 	.word	0x08010b8c
 8009520:	08010bb8 	.word	0x08010bb8
 8009524:	08010be8 	.word	0x08010be8
 8009528:	08010c1c 	.word	0x08010c1c
 800952c:	08012228 	.word	0x08012228
 8009530:	08012218 	.word	0x08012218
 8009534:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800953e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009540:	2200      	movs	r2, #0
 8009542:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009546:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800954a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009550:	4293      	cmp	r3, r2
 8009552:	bf28      	it	cs
 8009554:	4613      	movcs	r3, r2
 8009556:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009558:	8a7b      	ldrh	r3, [r7, #18]
 800955a:	085b      	lsrs	r3, r3, #1
 800955c:	b29a      	uxth	r2, r3
 800955e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009560:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009566:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800956a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	b29b      	uxth	r3, r3
 8009572:	429a      	cmp	r2, r3
 8009574:	d206      	bcs.n	8009584 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009578:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009580:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8009584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009586:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800958e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009590:	2200      	movs	r2, #0
 8009592:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009596:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009598:	f004 f83a 	bl	800d610 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800959c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959e:	7d1b      	ldrb	r3, [r3, #20]
 80095a0:	2b06      	cmp	r3, #6
 80095a2:	d111      	bne.n	80095c8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80095a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a6:	8b5b      	ldrh	r3, [r3, #26]
 80095a8:	f003 0310 	and.w	r3, r3, #16
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00b      	beq.n	80095c8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095b0:	4b9c      	ldr	r3, [pc, #624]	@ (8009824 <tcp_slowtmr+0x584>)
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b28      	cmp	r3, #40	@ 0x28
 80095bc:	d904      	bls.n	80095c8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80095be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095c2:	3301      	adds	r3, #1
 80095c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80095c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ca:	7a5b      	ldrb	r3, [r3, #9]
 80095cc:	f003 0308 	and.w	r3, r3, #8
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d04a      	beq.n	800966a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80095d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80095d8:	2b04      	cmp	r3, #4
 80095da:	d003      	beq.n	80095e4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80095dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095de:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80095e0:	2b07      	cmp	r3, #7
 80095e2:	d142      	bne.n	800966a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095e4:	4b8f      	ldr	r3, [pc, #572]	@ (8009824 <tcp_slowtmr+0x584>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80095ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80095f4:	4b8c      	ldr	r3, [pc, #560]	@ (8009828 <tcp_slowtmr+0x588>)
 80095f6:	440b      	add	r3, r1
 80095f8:	498c      	ldr	r1, [pc, #560]	@ (800982c <tcp_slowtmr+0x58c>)
 80095fa:	fba1 1303 	umull	r1, r3, r1, r3
 80095fe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009600:	429a      	cmp	r2, r3
 8009602:	d90a      	bls.n	800961a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8009604:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009608:	3301      	adds	r3, #1
 800960a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800960e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009612:	3301      	adds	r3, #1
 8009614:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009618:	e027      	b.n	800966a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800961a:	4b82      	ldr	r3, [pc, #520]	@ (8009824 <tcp_slowtmr+0x584>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009626:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800962a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009630:	4618      	mov	r0, r3
 8009632:	4b7f      	ldr	r3, [pc, #508]	@ (8009830 <tcp_slowtmr+0x590>)
 8009634:	fb00 f303 	mul.w	r3, r0, r3
 8009638:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800963a:	497c      	ldr	r1, [pc, #496]	@ (800982c <tcp_slowtmr+0x58c>)
 800963c:	fba1 1303 	umull	r1, r3, r1, r3
 8009640:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009642:	429a      	cmp	r2, r3
 8009644:	d911      	bls.n	800966a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009646:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009648:	f004 fae6 	bl	800dc18 <tcp_keepalive>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009652:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009656:	2b00      	cmp	r3, #0
 8009658:	d107      	bne.n	800966a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800965a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009660:	3301      	adds	r3, #1
 8009662:	b2da      	uxtb	r2, r3
 8009664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009666:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800966a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800966e:	2b00      	cmp	r3, #0
 8009670:	d011      	beq.n	8009696 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009672:	4b6c      	ldr	r3, [pc, #432]	@ (8009824 <tcp_slowtmr+0x584>)
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	1ad2      	subs	r2, r2, r3
 800967c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009682:	4619      	mov	r1, r3
 8009684:	460b      	mov	r3, r1
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	440b      	add	r3, r1
 800968a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800968c:	429a      	cmp	r2, r3
 800968e:	d302      	bcc.n	8009696 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8009690:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009692:	f000 fde3 	bl	800a25c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8009696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009698:	7d1b      	ldrb	r3, [r3, #20]
 800969a:	2b03      	cmp	r3, #3
 800969c:	d10b      	bne.n	80096b6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800969e:	4b61      	ldr	r3, [pc, #388]	@ (8009824 <tcp_slowtmr+0x584>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	2b28      	cmp	r3, #40	@ 0x28
 80096aa:	d904      	bls.n	80096b6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80096ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096b0:	3301      	adds	r3, #1
 80096b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80096b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b8:	7d1b      	ldrb	r3, [r3, #20]
 80096ba:	2b09      	cmp	r3, #9
 80096bc:	d10b      	bne.n	80096d6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80096be:	4b59      	ldr	r3, [pc, #356]	@ (8009824 <tcp_slowtmr+0x584>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	2bf0      	cmp	r3, #240	@ 0xf0
 80096ca:	d904      	bls.n	80096d6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80096cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096d0:	3301      	adds	r3, #1
 80096d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80096d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d060      	beq.n	80097a0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80096de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096e4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80096e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096e8:	f000 fc00 	bl	8009eec <tcp_pcb_purge>
      if (prev != NULL) {
 80096ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d010      	beq.n	8009714 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80096f2:	4b50      	ldr	r3, [pc, #320]	@ (8009834 <tcp_slowtmr+0x594>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d106      	bne.n	800970a <tcp_slowtmr+0x46a>
 80096fc:	4b4e      	ldr	r3, [pc, #312]	@ (8009838 <tcp_slowtmr+0x598>)
 80096fe:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009702:	494e      	ldr	r1, [pc, #312]	@ (800983c <tcp_slowtmr+0x59c>)
 8009704:	484e      	ldr	r0, [pc, #312]	@ (8009840 <tcp_slowtmr+0x5a0>)
 8009706:	f004 ff6b 	bl	800e5e0 <iprintf>
        prev->next = pcb->next;
 800970a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009710:	60da      	str	r2, [r3, #12]
 8009712:	e00f      	b.n	8009734 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009714:	4b47      	ldr	r3, [pc, #284]	@ (8009834 <tcp_slowtmr+0x594>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800971a:	429a      	cmp	r2, r3
 800971c:	d006      	beq.n	800972c <tcp_slowtmr+0x48c>
 800971e:	4b46      	ldr	r3, [pc, #280]	@ (8009838 <tcp_slowtmr+0x598>)
 8009720:	f240 5271 	movw	r2, #1393	@ 0x571
 8009724:	4947      	ldr	r1, [pc, #284]	@ (8009844 <tcp_slowtmr+0x5a4>)
 8009726:	4846      	ldr	r0, [pc, #280]	@ (8009840 <tcp_slowtmr+0x5a0>)
 8009728:	f004 ff5a 	bl	800e5e0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800972c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	4a40      	ldr	r2, [pc, #256]	@ (8009834 <tcp_slowtmr+0x594>)
 8009732:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009734:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009738:	2b00      	cmp	r3, #0
 800973a:	d013      	beq.n	8009764 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800973c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009742:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009744:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8009746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009748:	3304      	adds	r3, #4
 800974a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800974c:	8ad2      	ldrh	r2, [r2, #22]
 800974e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009750:	8b09      	ldrh	r1, [r1, #24]
 8009752:	9102      	str	r1, [sp, #8]
 8009754:	9201      	str	r2, [sp, #4]
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	462b      	mov	r3, r5
 800975a:	4622      	mov	r2, r4
 800975c:	4601      	mov	r1, r0
 800975e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009760:	f004 f9a6 	bl	800dab0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800976a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976c:	7d1b      	ldrb	r3, [r3, #20]
 800976e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009772:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800977a:	6838      	ldr	r0, [r7, #0]
 800977c:	f7ff f9ae 	bl	8008adc <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009780:	4b31      	ldr	r3, [pc, #196]	@ (8009848 <tcp_slowtmr+0x5a8>)
 8009782:	2200      	movs	r2, #0
 8009784:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d004      	beq.n	8009796 <tcp_slowtmr+0x4f6>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f06f 010c 	mvn.w	r1, #12
 8009792:	68b8      	ldr	r0, [r7, #8]
 8009794:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009796:	4b2c      	ldr	r3, [pc, #176]	@ (8009848 <tcp_slowtmr+0x5a8>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d037      	beq.n	800980e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800979e:	e592      	b.n	80092c6 <tcp_slowtmr+0x26>
      prev = pcb;
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80097a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80097aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ac:	7f1b      	ldrb	r3, [r3, #28]
 80097ae:	3301      	adds	r3, #1
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80097b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b8:	7f1a      	ldrb	r2, [r3, #28]
 80097ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097bc:	7f5b      	ldrb	r3, [r3, #29]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d325      	bcc.n	800980e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80097c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c4:	2200      	movs	r2, #0
 80097c6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80097c8:	4b1f      	ldr	r3, [pc, #124]	@ (8009848 <tcp_slowtmr+0x5a8>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80097ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00b      	beq.n	80097f0 <tcp_slowtmr+0x550>
 80097d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097e0:	6912      	ldr	r2, [r2, #16]
 80097e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097e4:	4610      	mov	r0, r2
 80097e6:	4798      	blx	r3
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80097ee:	e002      	b.n	80097f6 <tcp_slowtmr+0x556>
 80097f0:	2300      	movs	r3, #0
 80097f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80097f6:	4b14      	ldr	r3, [pc, #80]	@ (8009848 <tcp_slowtmr+0x5a8>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f47f ad62 	bne.w	80092c4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009800:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009808:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800980a:	f003 fb9d 	bl	800cf48 <tcp_output>
  while (pcb != NULL) {
 800980e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009810:	2b00      	cmp	r3, #0
 8009812:	f47f ad5e 	bne.w	80092d2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800981a:	4b0c      	ldr	r3, [pc, #48]	@ (800984c <tcp_slowtmr+0x5ac>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009820:	e069      	b.n	80098f6 <tcp_slowtmr+0x656>
 8009822:	bf00      	nop
 8009824:	2000b750 	.word	0x2000b750
 8009828:	000a4cb8 	.word	0x000a4cb8
 800982c:	10624dd3 	.word	0x10624dd3
 8009830:	000124f8 	.word	0x000124f8
 8009834:	2000b75c 	.word	0x2000b75c
 8009838:	0801079c 	.word	0x0801079c
 800983c:	08010c54 	.word	0x08010c54
 8009840:	08010818 	.word	0x08010818
 8009844:	08010c80 	.word	0x08010c80
 8009848:	2000b764 	.word	0x2000b764
 800984c:	2000b760 	.word	0x2000b760
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009852:	7d1b      	ldrb	r3, [r3, #20]
 8009854:	2b0a      	cmp	r3, #10
 8009856:	d006      	beq.n	8009866 <tcp_slowtmr+0x5c6>
 8009858:	4b2b      	ldr	r3, [pc, #172]	@ (8009908 <tcp_slowtmr+0x668>)
 800985a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800985e:	492b      	ldr	r1, [pc, #172]	@ (800990c <tcp_slowtmr+0x66c>)
 8009860:	482b      	ldr	r0, [pc, #172]	@ (8009910 <tcp_slowtmr+0x670>)
 8009862:	f004 febd 	bl	800e5e0 <iprintf>
    pcb_remove = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800986c:	4b29      	ldr	r3, [pc, #164]	@ (8009914 <tcp_slowtmr+0x674>)
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2bf0      	cmp	r3, #240	@ 0xf0
 8009878:	d904      	bls.n	8009884 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800987a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800987e:	3301      	adds	r3, #1
 8009880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009888:	2b00      	cmp	r3, #0
 800988a:	d02f      	beq.n	80098ec <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800988c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800988e:	f000 fb2d 	bl	8009eec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009894:	2b00      	cmp	r3, #0
 8009896:	d010      	beq.n	80098ba <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009898:	4b1f      	ldr	r3, [pc, #124]	@ (8009918 <tcp_slowtmr+0x678>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800989e:	429a      	cmp	r2, r3
 80098a0:	d106      	bne.n	80098b0 <tcp_slowtmr+0x610>
 80098a2:	4b19      	ldr	r3, [pc, #100]	@ (8009908 <tcp_slowtmr+0x668>)
 80098a4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80098a8:	491c      	ldr	r1, [pc, #112]	@ (800991c <tcp_slowtmr+0x67c>)
 80098aa:	4819      	ldr	r0, [pc, #100]	@ (8009910 <tcp_slowtmr+0x670>)
 80098ac:	f004 fe98 	bl	800e5e0 <iprintf>
        prev->next = pcb->next;
 80098b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b6:	60da      	str	r2, [r3, #12]
 80098b8:	e00f      	b.n	80098da <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80098ba:	4b17      	ldr	r3, [pc, #92]	@ (8009918 <tcp_slowtmr+0x678>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d006      	beq.n	80098d2 <tcp_slowtmr+0x632>
 80098c4:	4b10      	ldr	r3, [pc, #64]	@ (8009908 <tcp_slowtmr+0x668>)
 80098c6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80098ca:	4915      	ldr	r1, [pc, #84]	@ (8009920 <tcp_slowtmr+0x680>)
 80098cc:	4810      	ldr	r0, [pc, #64]	@ (8009910 <tcp_slowtmr+0x670>)
 80098ce:	f004 fe87 	bl	800e5e0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80098d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	4a10      	ldr	r2, [pc, #64]	@ (8009918 <tcp_slowtmr+0x678>)
 80098d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80098da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80098e4:	69f8      	ldr	r0, [r7, #28]
 80098e6:	f7ff f8f9 	bl	8008adc <tcp_free>
 80098ea:	e004      	b.n	80098f6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80098ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80098f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80098f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1a9      	bne.n	8009850 <tcp_slowtmr+0x5b0>
    }
  }
}
 80098fc:	bf00      	nop
 80098fe:	bf00      	nop
 8009900:	3730      	adds	r7, #48	@ 0x30
 8009902:	46bd      	mov	sp, r7
 8009904:	bdb0      	pop	{r4, r5, r7, pc}
 8009906:	bf00      	nop
 8009908:	0801079c 	.word	0x0801079c
 800990c:	08010cac 	.word	0x08010cac
 8009910:	08010818 	.word	0x08010818
 8009914:	2000b750 	.word	0x2000b750
 8009918:	2000b760 	.word	0x2000b760
 800991c:	08010cdc 	.word	0x08010cdc
 8009920:	08010d04 	.word	0x08010d04

08009924 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800992a:	4b2d      	ldr	r3, [pc, #180]	@ (80099e0 <tcp_fasttmr+0xbc>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	3301      	adds	r3, #1
 8009930:	b2da      	uxtb	r2, r3
 8009932:	4b2b      	ldr	r3, [pc, #172]	@ (80099e0 <tcp_fasttmr+0xbc>)
 8009934:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009936:	4b2b      	ldr	r3, [pc, #172]	@ (80099e4 <tcp_fasttmr+0xc0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800993c:	e048      	b.n	80099d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	7f9a      	ldrb	r2, [r3, #30]
 8009942:	4b27      	ldr	r3, [pc, #156]	@ (80099e0 <tcp_fasttmr+0xbc>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d03f      	beq.n	80099ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800994a:	4b25      	ldr	r3, [pc, #148]	@ (80099e0 <tcp_fasttmr+0xbc>)
 800994c:	781a      	ldrb	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	8b5b      	ldrh	r3, [r3, #26]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d010      	beq.n	8009980 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	8b5b      	ldrh	r3, [r3, #26]
 8009962:	f043 0302 	orr.w	r3, r3, #2
 8009966:	b29a      	uxth	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f003 faeb 	bl	800cf48 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	8b5b      	ldrh	r3, [r3, #26]
 8009976:	f023 0303 	bic.w	r3, r3, #3
 800997a:	b29a      	uxth	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	8b5b      	ldrh	r3, [r3, #26]
 8009984:	f003 0308 	and.w	r3, r3, #8
 8009988:	2b00      	cmp	r3, #0
 800998a:	d009      	beq.n	80099a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	8b5b      	ldrh	r3, [r3, #26]
 8009990:	f023 0308 	bic.w	r3, r3, #8
 8009994:	b29a      	uxth	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff fa70 	bl	8008e80 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80099ae:	4b0e      	ldr	r3, [pc, #56]	@ (80099e8 <tcp_fasttmr+0xc4>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f819 	bl	80099ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80099ba:	4b0b      	ldr	r3, [pc, #44]	@ (80099e8 <tcp_fasttmr+0xc4>)
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d000      	beq.n	80099c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80099c2:	e7b8      	b.n	8009936 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	607b      	str	r3, [r7, #4]
 80099c8:	e002      	b.n	80099d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1b3      	bne.n	800993e <tcp_fasttmr+0x1a>
    }
  }
}
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	2000b766 	.word	0x2000b766
 80099e4:	2000b75c 	.word	0x2000b75c
 80099e8:	2000b764 	.word	0x2000b764

080099ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80099ec:	b590      	push	{r4, r7, lr}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d109      	bne.n	8009a0e <tcp_process_refused_data+0x22>
 80099fa:	4b38      	ldr	r3, [pc, #224]	@ (8009adc <tcp_process_refused_data+0xf0>)
 80099fc:	f240 6209 	movw	r2, #1545	@ 0x609
 8009a00:	4937      	ldr	r1, [pc, #220]	@ (8009ae0 <tcp_process_refused_data+0xf4>)
 8009a02:	4838      	ldr	r0, [pc, #224]	@ (8009ae4 <tcp_process_refused_data+0xf8>)
 8009a04:	f004 fdec 	bl	800e5e0 <iprintf>
 8009a08:	f06f 030f 	mvn.w	r3, #15
 8009a0c:	e061      	b.n	8009ad2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a12:	7b5b      	ldrb	r3, [r3, #13]
 8009a14:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a1a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00b      	beq.n	8009a44 <tcp_process_refused_data+0x58>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6918      	ldr	r0, [r3, #16]
 8009a36:	2300      	movs	r3, #0
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	47a0      	blx	r4
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]
 8009a42:	e007      	b.n	8009a54 <tcp_process_refused_data+0x68>
 8009a44:	2300      	movs	r3, #0
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	f000 f8a6 	bl	8009b9c <tcp_recv_null>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d12b      	bne.n	8009ab4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009a5c:	7bbb      	ldrb	r3, [r7, #14]
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d034      	beq.n	8009ad0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a6a:	f640 3268 	movw	r2, #2920	@ 0xb68
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d005      	beq.n	8009a7e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a76:	3301      	adds	r3, #1
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00b      	beq.n	8009aa0 <tcp_process_refused_data+0xb4>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6918      	ldr	r0, [r3, #16]
 8009a92:	2300      	movs	r3, #0
 8009a94:	2200      	movs	r2, #0
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	47a0      	blx	r4
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73fb      	strb	r3, [r7, #15]
 8009a9e:	e001      	b.n	8009aa4 <tcp_process_refused_data+0xb8>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aa8:	f113 0f0d 	cmn.w	r3, #13
 8009aac:	d110      	bne.n	8009ad0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8009aae:	f06f 030c 	mvn.w	r3, #12
 8009ab2:	e00e      	b.n	8009ad2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8009ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ab8:	f113 0f0d 	cmn.w	r3, #13
 8009abc:	d102      	bne.n	8009ac4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009abe:	f06f 030c 	mvn.w	r3, #12
 8009ac2:	e006      	b.n	8009ad2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009aca:	f06f 0304 	mvn.w	r3, #4
 8009ace:	e000      	b.n	8009ad2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3714      	adds	r7, #20
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd90      	pop	{r4, r7, pc}
 8009ada:	bf00      	nop
 8009adc:	0801079c 	.word	0x0801079c
 8009ae0:	08010d2c 	.word	0x08010d2c
 8009ae4:	08010818 	.word	0x08010818

08009ae8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009af0:	e007      	b.n	8009b02 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f80a 	bl	8009b12 <tcp_seg_free>
    seg = next;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1f4      	bne.n	8009af2 <tcp_segs_free+0xa>
  }
}
 8009b08:	bf00      	nop
 8009b0a:	bf00      	nop
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b082      	sub	sp, #8
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00c      	beq.n	8009b3a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d004      	beq.n	8009b32 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fe fd35 	bl	800859c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	2003      	movs	r0, #3
 8009b36:	f7fd fed7 	bl	80078e8 <memp_free>
  }
}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d106      	bne.n	8009b60 <tcp_seg_copy+0x1c>
 8009b52:	4b0f      	ldr	r3, [pc, #60]	@ (8009b90 <tcp_seg_copy+0x4c>)
 8009b54:	f240 6282 	movw	r2, #1666	@ 0x682
 8009b58:	490e      	ldr	r1, [pc, #56]	@ (8009b94 <tcp_seg_copy+0x50>)
 8009b5a:	480f      	ldr	r0, [pc, #60]	@ (8009b98 <tcp_seg_copy+0x54>)
 8009b5c:	f004 fd40 	bl	800e5e0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009b60:	2003      	movs	r0, #3
 8009b62:	f7fd fe51 	bl	8007808 <memp_malloc>
 8009b66:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <tcp_seg_copy+0x2e>
    return NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	e00a      	b.n	8009b88 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009b72:	2210      	movs	r2, #16
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f004 fe0d 	bl	800e796 <memcpy>
  pbuf_ref(cseg->p);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fdab 	bl	80086dc <pbuf_ref>
  return cseg;
 8009b86:	68fb      	ldr	r3, [r7, #12]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	0801079c 	.word	0x0801079c
 8009b94:	08010d70 	.word	0x08010d70
 8009b98:	08010818 	.word	0x08010818

08009b9c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d109      	bne.n	8009bc4 <tcp_recv_null+0x28>
 8009bb0:	4b12      	ldr	r3, [pc, #72]	@ (8009bfc <tcp_recv_null+0x60>)
 8009bb2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009bb6:	4912      	ldr	r1, [pc, #72]	@ (8009c00 <tcp_recv_null+0x64>)
 8009bb8:	4812      	ldr	r0, [pc, #72]	@ (8009c04 <tcp_recv_null+0x68>)
 8009bba:	f004 fd11 	bl	800e5e0 <iprintf>
 8009bbe:	f06f 030f 	mvn.w	r3, #15
 8009bc2:	e016      	b.n	8009bf2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d009      	beq.n	8009bde <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	891b      	ldrh	r3, [r3, #8]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	68b8      	ldr	r0, [r7, #8]
 8009bd2:	f7ff fb13 	bl	80091fc <tcp_recved>
    pbuf_free(p);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7fe fce0 	bl	800859c <pbuf_free>
 8009bdc:	e008      	b.n	8009bf0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d104      	bne.n	8009bf0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009be6:	68b8      	ldr	r0, [r7, #8]
 8009be8:	f7ff f9b6 	bl	8008f58 <tcp_close>
 8009bec:	4603      	mov	r3, r0
 8009bee:	e000      	b.n	8009bf2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	0801079c 	.word	0x0801079c
 8009c00:	08010d8c 	.word	0x08010d8c
 8009c04:	08010818 	.word	0x08010818

08009c08 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	db01      	blt.n	8009c1e <tcp_kill_prio+0x16>
 8009c1a:	79fb      	ldrb	r3, [r7, #7]
 8009c1c:	e000      	b.n	8009c20 <tcp_kill_prio+0x18>
 8009c1e:	237f      	movs	r3, #127	@ 0x7f
 8009c20:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009c22:	7afb      	ldrb	r3, [r7, #11]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d034      	beq.n	8009c92 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009c28:	7afb      	ldrb	r3, [r7, #11]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c36:	4b19      	ldr	r3, [pc, #100]	@ (8009c9c <tcp_kill_prio+0x94>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	617b      	str	r3, [r7, #20]
 8009c3c:	e01f      	b.n	8009c7e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	7d5b      	ldrb	r3, [r3, #21]
 8009c42:	7afa      	ldrb	r2, [r7, #11]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d80c      	bhi.n	8009c62 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009c4c:	7afa      	ldrb	r2, [r7, #11]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d112      	bne.n	8009c78 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009c52:	4b13      	ldr	r3, [pc, #76]	@ (8009ca0 <tcp_kill_prio+0x98>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d80a      	bhi.n	8009c78 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009c62:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca0 <tcp_kill_prio+0x98>)
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	7d5b      	ldrb	r3, [r3, #21]
 8009c76:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1dc      	bne.n	8009c3e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d004      	beq.n	8009c94 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009c8a:	6938      	ldr	r0, [r7, #16]
 8009c8c:	f7ff fa50 	bl	8009130 <tcp_abort>
 8009c90:	e000      	b.n	8009c94 <tcp_kill_prio+0x8c>
    return;
 8009c92:	bf00      	nop
  }
}
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	2000b75c 	.word	0x2000b75c
 8009ca0:	2000b750 	.word	0x2000b750

08009ca4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	4603      	mov	r3, r0
 8009cac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009cae:	79fb      	ldrb	r3, [r7, #7]
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d009      	beq.n	8009cc8 <tcp_kill_state+0x24>
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	2b09      	cmp	r3, #9
 8009cb8:	d006      	beq.n	8009cc8 <tcp_kill_state+0x24>
 8009cba:	4b1a      	ldr	r3, [pc, #104]	@ (8009d24 <tcp_kill_state+0x80>)
 8009cbc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009cc0:	4919      	ldr	r1, [pc, #100]	@ (8009d28 <tcp_kill_state+0x84>)
 8009cc2:	481a      	ldr	r0, [pc, #104]	@ (8009d2c <tcp_kill_state+0x88>)
 8009cc4:	f004 fc8c 	bl	800e5e0 <iprintf>

  inactivity = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cd0:	4b17      	ldr	r3, [pc, #92]	@ (8009d30 <tcp_kill_state+0x8c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	617b      	str	r3, [r7, #20]
 8009cd6:	e017      	b.n	8009d08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	7d1b      	ldrb	r3, [r3, #20]
 8009cdc:	79fa      	ldrb	r2, [r7, #7]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d10f      	bne.n	8009d02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ce2:	4b14      	ldr	r3, [pc, #80]	@ (8009d34 <tcp_kill_state+0x90>)
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d807      	bhi.n	8009d02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009cf2:	4b10      	ldr	r3, [pc, #64]	@ (8009d34 <tcp_kill_state+0x90>)
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	617b      	str	r3, [r7, #20]
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e4      	bne.n	8009cd8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009d14:	2100      	movs	r1, #0
 8009d16:	6938      	ldr	r0, [r7, #16]
 8009d18:	f7ff f94a 	bl	8008fb0 <tcp_abandon>
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	0801079c 	.word	0x0801079c
 8009d28:	08010da8 	.word	0x08010da8
 8009d2c:	08010818 	.word	0x08010818
 8009d30:	2000b75c 	.word	0x2000b75c
 8009d34:	2000b750 	.word	0x2000b750

08009d38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d46:	4b12      	ldr	r3, [pc, #72]	@ (8009d90 <tcp_kill_timewait+0x58>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	e012      	b.n	8009d74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009d4e:	4b11      	ldr	r3, [pc, #68]	@ (8009d94 <tcp_kill_timewait+0x5c>)
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d807      	bhi.n	8009d6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d94 <tcp_kill_timewait+0x5c>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1e9      	bne.n	8009d4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009d80:	68b8      	ldr	r0, [r7, #8]
 8009d82:	f7ff f9d5 	bl	8009130 <tcp_abort>
  }
}
 8009d86:	bf00      	nop
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	2000b760 	.word	0x2000b760
 8009d94:	2000b750 	.word	0x2000b750

08009d98 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009d9e:	4b10      	ldr	r3, [pc, #64]	@ (8009de0 <tcp_handle_closepend+0x48>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009da4:	e014      	b.n	8009dd0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	8b5b      	ldrh	r3, [r3, #26]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d009      	beq.n	8009dcc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	8b5b      	ldrh	r3, [r3, #26]
 8009dbc:	f023 0308 	bic.w	r3, r3, #8
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7ff f85a 	bl	8008e80 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e7      	bne.n	8009da6 <tcp_handle_closepend+0xe>
  }
}
 8009dd6:	bf00      	nop
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	2000b75c 	.word	0x2000b75c

08009de4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009dee:	2001      	movs	r0, #1
 8009df0:	f7fd fd0a 	bl	8007808 <memp_malloc>
 8009df4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d126      	bne.n	8009e4a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009dfc:	f7ff ffcc 	bl	8009d98 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009e00:	f7ff ff9a 	bl	8009d38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e04:	2001      	movs	r0, #1
 8009e06:	f7fd fcff 	bl	8007808 <memp_malloc>
 8009e0a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d11b      	bne.n	8009e4a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009e12:	2009      	movs	r0, #9
 8009e14:	f7ff ff46 	bl	8009ca4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e18:	2001      	movs	r0, #1
 8009e1a:	f7fd fcf5 	bl	8007808 <memp_malloc>
 8009e1e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d111      	bne.n	8009e4a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009e26:	2008      	movs	r0, #8
 8009e28:	f7ff ff3c 	bl	8009ca4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e2c:	2001      	movs	r0, #1
 8009e2e:	f7fd fceb 	bl	8007808 <memp_malloc>
 8009e32:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d107      	bne.n	8009e4a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009e3a:	79fb      	ldrb	r3, [r7, #7]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff fee3 	bl	8009c08 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e42:	2001      	movs	r0, #1
 8009e44:	f7fd fce0 	bl	8007808 <memp_malloc>
 8009e48:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d03f      	beq.n	8009ed0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009e50:	229c      	movs	r2, #156	@ 0x9c
 8009e52:	2100      	movs	r1, #0
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f004 fc28 	bl	800e6aa <memset>
    pcb->prio = prio;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	79fa      	ldrb	r2, [r7, #7]
 8009e5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f640 3268 	movw	r2, #2920	@ 0xb68
 8009e66:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f640 3268 	movw	r2, #2920	@ 0xb68
 8009e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	22ff      	movs	r2, #255	@ 0xff
 8009e7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009e86:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2206      	movs	r2, #6
 8009e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2206      	movs	r2, #6
 8009e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e9c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8009edc <tcp_alloc+0xf8>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009eae:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee0 <tcp_alloc+0xfc>)
 8009eb0:	781a      	ldrb	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f640 3268 	movw	r2, #2920	@ 0xb68
 8009ebc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4a08      	ldr	r2, [pc, #32]	@ (8009ee4 <tcp_alloc+0x100>)
 8009ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4a07      	ldr	r2, [pc, #28]	@ (8009ee8 <tcp_alloc+0x104>)
 8009ecc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	2000b750 	.word	0x2000b750
 8009ee0:	2000b766 	.word	0x2000b766
 8009ee4:	08009b9d 	.word	0x08009b9d
 8009ee8:	006ddd00 	.word	0x006ddd00

08009eec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d107      	bne.n	8009f0a <tcp_pcb_purge+0x1e>
 8009efa:	4b23      	ldr	r3, [pc, #140]	@ (8009f88 <tcp_pcb_purge+0x9c>)
 8009efc:	f640 0251 	movw	r2, #2129	@ 0x851
 8009f00:	4922      	ldr	r1, [pc, #136]	@ (8009f8c <tcp_pcb_purge+0xa0>)
 8009f02:	4823      	ldr	r0, [pc, #140]	@ (8009f90 <tcp_pcb_purge+0xa4>)
 8009f04:	f004 fb6c 	bl	800e5e0 <iprintf>
 8009f08:	e03a      	b.n	8009f80 <tcp_pcb_purge+0x94>

  if (pcb->state != CLOSED &&
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	7d1b      	ldrb	r3, [r3, #20]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d036      	beq.n	8009f80 <tcp_pcb_purge+0x94>
      pcb->state != TIME_WAIT &&
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009f16:	2b0a      	cmp	r3, #10
 8009f18:	d032      	beq.n	8009f80 <tcp_pcb_purge+0x94>
      pcb->state != LISTEN) {
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d02e      	beq.n	8009f80 <tcp_pcb_purge+0x94>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7fe fe8c 	bl	8008c40 <tcp_backlog_accepted>

    if (pcb->refused_data != NULL) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d007      	beq.n	8009f40 <tcp_pcb_purge+0x54>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fb31 	bl	800859c <pbuf_free>
      pcb->refused_data = NULL;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <tcp_pcb_purge+0x62>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f987 	bl	800a25c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f54:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff fdc4 	bl	8009ae8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7ff fdbf 	bl	8009ae8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	0801079c 	.word	0x0801079c
 8009f8c:	08010e68 	.word	0x08010e68
 8009f90:	08010818 	.word	0x08010818

08009f94 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <tcp_pcb_remove+0x1e>
 8009fa4:	4b3e      	ldr	r3, [pc, #248]	@ (800a0a0 <tcp_pcb_remove+0x10c>)
 8009fa6:	f640 0283 	movw	r2, #2179	@ 0x883
 8009faa:	493e      	ldr	r1, [pc, #248]	@ (800a0a4 <tcp_pcb_remove+0x110>)
 8009fac:	483e      	ldr	r0, [pc, #248]	@ (800a0a8 <tcp_pcb_remove+0x114>)
 8009fae:	f004 fb17 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d106      	bne.n	8009fc6 <tcp_pcb_remove+0x32>
 8009fb8:	4b39      	ldr	r3, [pc, #228]	@ (800a0a0 <tcp_pcb_remove+0x10c>)
 8009fba:	f640 0284 	movw	r2, #2180	@ 0x884
 8009fbe:	493b      	ldr	r1, [pc, #236]	@ (800a0ac <tcp_pcb_remove+0x118>)
 8009fc0:	4839      	ldr	r0, [pc, #228]	@ (800a0a8 <tcp_pcb_remove+0x114>)
 8009fc2:	f004 fb0d 	bl	800e5e0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d105      	bne.n	8009fdc <tcp_pcb_remove+0x48>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	e013      	b.n	800a004 <tcp_pcb_remove+0x70>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	e00c      	b.n	8009ffe <tcp_pcb_remove+0x6a>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d104      	bne.n	8009ff8 <tcp_pcb_remove+0x64>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68da      	ldr	r2, [r3, #12]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	60da      	str	r2, [r3, #12]
 8009ff6:	e005      	b.n	800a004 <tcp_pcb_remove+0x70>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	60fb      	str	r3, [r7, #12]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1ef      	bne.n	8009fe4 <tcp_pcb_remove+0x50>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2200      	movs	r2, #0
 800a008:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a00a:	6838      	ldr	r0, [r7, #0]
 800a00c:	f7ff ff6e 	bl	8009eec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	7d1b      	ldrb	r3, [r3, #20]
 800a014:	2b0a      	cmp	r3, #10
 800a016:	d013      	beq.n	800a040 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d00f      	beq.n	800a040 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	8b5b      	ldrh	r3, [r3, #26]
 800a024:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d009      	beq.n	800a040 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	8b5b      	ldrh	r3, [r3, #26]
 800a030:	f043 0302 	orr.w	r3, r3, #2
 800a034:	b29a      	uxth	r2, r3
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a03a:	6838      	ldr	r0, [r7, #0]
 800a03c:	f002 ff84 	bl	800cf48 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	7d1b      	ldrb	r3, [r3, #20]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d020      	beq.n	800a08a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <tcp_pcb_remove+0xca>
 800a050:	4b13      	ldr	r3, [pc, #76]	@ (800a0a0 <tcp_pcb_remove+0x10c>)
 800a052:	f640 0293 	movw	r2, #2195	@ 0x893
 800a056:	4916      	ldr	r1, [pc, #88]	@ (800a0b0 <tcp_pcb_remove+0x11c>)
 800a058:	4813      	ldr	r0, [pc, #76]	@ (800a0a8 <tcp_pcb_remove+0x114>)
 800a05a:	f004 fac1 	bl	800e5e0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a062:	2b00      	cmp	r3, #0
 800a064:	d006      	beq.n	800a074 <tcp_pcb_remove+0xe0>
 800a066:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a0 <tcp_pcb_remove+0x10c>)
 800a068:	f640 0294 	movw	r2, #2196	@ 0x894
 800a06c:	4911      	ldr	r1, [pc, #68]	@ (800a0b4 <tcp_pcb_remove+0x120>)
 800a06e:	480e      	ldr	r0, [pc, #56]	@ (800a0a8 <tcp_pcb_remove+0x114>)
 800a070:	f004 fab6 	bl	800e5e0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d006      	beq.n	800a08a <tcp_pcb_remove+0xf6>
 800a07c:	4b08      	ldr	r3, [pc, #32]	@ (800a0a0 <tcp_pcb_remove+0x10c>)
 800a07e:	f640 0296 	movw	r2, #2198	@ 0x896
 800a082:	490d      	ldr	r1, [pc, #52]	@ (800a0b8 <tcp_pcb_remove+0x124>)
 800a084:	4808      	ldr	r0, [pc, #32]	@ (800a0a8 <tcp_pcb_remove+0x114>)
 800a086:	f004 faab 	bl	800e5e0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2200      	movs	r2, #0
 800a08e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2200      	movs	r2, #0
 800a094:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	0801079c 	.word	0x0801079c
 800a0a4:	08010e84 	.word	0x08010e84
 800a0a8:	08010818 	.word	0x08010818
 800a0ac:	08010ea0 	.word	0x08010ea0
 800a0b0:	08010ec0 	.word	0x08010ec0
 800a0b4:	08010ed8 	.word	0x08010ed8
 800a0b8:	08010ef4 	.word	0x08010ef4

0800a0bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d106      	bne.n	800a0d8 <tcp_next_iss+0x1c>
 800a0ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a0f4 <tcp_next_iss+0x38>)
 800a0cc:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a0d0:	4909      	ldr	r1, [pc, #36]	@ (800a0f8 <tcp_next_iss+0x3c>)
 800a0d2:	480a      	ldr	r0, [pc, #40]	@ (800a0fc <tcp_next_iss+0x40>)
 800a0d4:	f004 fa84 	bl	800e5e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a0d8:	4b09      	ldr	r3, [pc, #36]	@ (800a100 <tcp_next_iss+0x44>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	4b09      	ldr	r3, [pc, #36]	@ (800a104 <tcp_next_iss+0x48>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	4a07      	ldr	r2, [pc, #28]	@ (800a100 <tcp_next_iss+0x44>)
 800a0e4:	6013      	str	r3, [r2, #0]
  return iss;
 800a0e6:	4b06      	ldr	r3, [pc, #24]	@ (800a100 <tcp_next_iss+0x44>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	0801079c 	.word	0x0801079c
 800a0f8:	08010f0c 	.word	0x08010f0c
 800a0fc:	08010818 	.word	0x08010818
 800a100:	20000024 	.word	0x20000024
 800a104:	2000b750 	.word	0x2000b750

0800a108 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4603      	mov	r3, r0
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d106      	bne.n	800a12a <tcp_eff_send_mss_netif+0x22>
 800a11c:	4b14      	ldr	r3, [pc, #80]	@ (800a170 <tcp_eff_send_mss_netif+0x68>)
 800a11e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a122:	4914      	ldr	r1, [pc, #80]	@ (800a174 <tcp_eff_send_mss_netif+0x6c>)
 800a124:	4814      	ldr	r0, [pc, #80]	@ (800a178 <tcp_eff_send_mss_netif+0x70>)
 800a126:	f004 fa5b 	bl	800e5e0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a130:	89fb      	ldrh	r3, [r7, #14]
 800a132:	e019      	b.n	800a168 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a138:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a13a:	8afb      	ldrh	r3, [r7, #22]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d012      	beq.n	800a166 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a140:	2328      	movs	r3, #40	@ 0x28
 800a142:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a144:	8afa      	ldrh	r2, [r7, #22]
 800a146:	8abb      	ldrh	r3, [r7, #20]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d904      	bls.n	800a156 <tcp_eff_send_mss_netif+0x4e>
 800a14c:	8afa      	ldrh	r2, [r7, #22]
 800a14e:	8abb      	ldrh	r3, [r7, #20]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	b29b      	uxth	r3, r3
 800a154:	e000      	b.n	800a158 <tcp_eff_send_mss_netif+0x50>
 800a156:	2300      	movs	r3, #0
 800a158:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a15a:	8a7a      	ldrh	r2, [r7, #18]
 800a15c:	89fb      	ldrh	r3, [r7, #14]
 800a15e:	4293      	cmp	r3, r2
 800a160:	bf28      	it	cs
 800a162:	4613      	movcs	r3, r2
 800a164:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a166:	89fb      	ldrh	r3, [r7, #14]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	0801079c 	.word	0x0801079c
 800a174:	08010f28 	.word	0x08010f28
 800a178:	08010818 	.word	0x08010818

0800a17c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d119      	bne.n	800a1c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a190:	4b10      	ldr	r3, [pc, #64]	@ (800a1d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a192:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a196:	4910      	ldr	r1, [pc, #64]	@ (800a1d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a198:	4810      	ldr	r0, [pc, #64]	@ (800a1dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a19a:	f004 fa21 	bl	800e5e0 <iprintf>

  while (pcb != NULL) {
 800a19e:	e011      	b.n	800a1c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d108      	bne.n	800a1be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f7fe ffbc 	bl	8009130 <tcp_abort>
      pcb = next;
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	e002      	b.n	800a1c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1ea      	bne.n	800a1a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a1ca:	bf00      	nop
 800a1cc:	bf00      	nop
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	0801079c 	.word	0x0801079c
 800a1d8:	08010f50 	.word	0x08010f50
 800a1dc:	08010818 	.word	0x08010818

0800a1e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d02a      	beq.n	800a246 <tcp_netif_ip_addr_changed+0x66>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d026      	beq.n	800a246 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a1f8:	4b15      	ldr	r3, [pc, #84]	@ (800a250 <tcp_netif_ip_addr_changed+0x70>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7ff ffbc 	bl	800a17c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a204:	4b13      	ldr	r3, [pc, #76]	@ (800a254 <tcp_netif_ip_addr_changed+0x74>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4619      	mov	r1, r3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7ff ffb6 	bl	800a17c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d017      	beq.n	800a246 <tcp_netif_ip_addr_changed+0x66>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d013      	beq.n	800a246 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a21e:	4b0e      	ldr	r3, [pc, #56]	@ (800a258 <tcp_netif_ip_addr_changed+0x78>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	e00c      	b.n	800a240 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d103      	bne.n	800a23a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1ef      	bne.n	800a226 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	2000b75c 	.word	0x2000b75c
 800a254:	2000b754 	.word	0x2000b754
 800a258:	2000b758 	.word	0x2000b758

0800a25c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d007      	beq.n	800a27c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff fc39 	bl	8009ae8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a284:	b590      	push	{r4, r7, lr}
 800a286:	b08d      	sub	sp, #52	@ 0x34
 800a288:	af04      	add	r7, sp, #16
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d105      	bne.n	800a2a0 <tcp_input+0x1c>
 800a294:	4b9b      	ldr	r3, [pc, #620]	@ (800a504 <tcp_input+0x280>)
 800a296:	2283      	movs	r2, #131	@ 0x83
 800a298:	499b      	ldr	r1, [pc, #620]	@ (800a508 <tcp_input+0x284>)
 800a29a:	489c      	ldr	r0, [pc, #624]	@ (800a50c <tcp_input+0x288>)
 800a29c:	f004 f9a0 	bl	800e5e0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	4a9a      	ldr	r2, [pc, #616]	@ (800a510 <tcp_input+0x28c>)
 800a2a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	895b      	ldrh	r3, [r3, #10]
 800a2ac:	2b13      	cmp	r3, #19
 800a2ae:	f240 83d1 	bls.w	800aa54 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a2b2:	4b98      	ldr	r3, [pc, #608]	@ (800a514 <tcp_input+0x290>)
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	4a97      	ldr	r2, [pc, #604]	@ (800a514 <tcp_input+0x290>)
 800a2b8:	6812      	ldr	r2, [r2, #0]
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fb fff3 	bl	80062a8 <ip4_addr_isbroadcast_u32>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f040 83c7 	bne.w	800aa58 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a2ca:	4b92      	ldr	r3, [pc, #584]	@ (800a514 <tcp_input+0x290>)
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a2d2:	2be0      	cmp	r3, #224	@ 0xe0
 800a2d4:	f000 83c0 	beq.w	800aa58 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a2d8:	4b8d      	ldr	r3, [pc, #564]	@ (800a510 <tcp_input+0x28c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	899b      	ldrh	r3, [r3, #12]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fa fb55 	bl	8004990 <lwip_htons>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	0b1b      	lsrs	r3, r3, #12
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a2f2:	7cbb      	ldrb	r3, [r7, #18]
 800a2f4:	2b13      	cmp	r3, #19
 800a2f6:	f240 83b1 	bls.w	800aa5c <tcp_input+0x7d8>
 800a2fa:	7cbb      	ldrb	r3, [r7, #18]
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	891b      	ldrh	r3, [r3, #8]
 800a302:	429a      	cmp	r2, r3
 800a304:	f200 83aa 	bhi.w	800aa5c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a308:	7cbb      	ldrb	r3, [r7, #18]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	3b14      	subs	r3, #20
 800a30e:	b29a      	uxth	r2, r3
 800a310:	4b81      	ldr	r3, [pc, #516]	@ (800a518 <tcp_input+0x294>)
 800a312:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a314:	4b81      	ldr	r3, [pc, #516]	@ (800a51c <tcp_input+0x298>)
 800a316:	2200      	movs	r2, #0
 800a318:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	895a      	ldrh	r2, [r3, #10]
 800a31e:	7cbb      	ldrb	r3, [r7, #18]
 800a320:	b29b      	uxth	r3, r3
 800a322:	429a      	cmp	r2, r3
 800a324:	d309      	bcc.n	800a33a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a326:	4b7c      	ldr	r3, [pc, #496]	@ (800a518 <tcp_input+0x294>)
 800a328:	881a      	ldrh	r2, [r3, #0]
 800a32a:	4b7d      	ldr	r3, [pc, #500]	@ (800a520 <tcp_input+0x29c>)
 800a32c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a32e:	7cbb      	ldrb	r3, [r7, #18]
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7fe f8ac 	bl	8008490 <pbuf_remove_header>
 800a338:	e04e      	b.n	800a3d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d105      	bne.n	800a34e <tcp_input+0xca>
 800a342:	4b70      	ldr	r3, [pc, #448]	@ (800a504 <tcp_input+0x280>)
 800a344:	22c2      	movs	r2, #194	@ 0xc2
 800a346:	4977      	ldr	r1, [pc, #476]	@ (800a524 <tcp_input+0x2a0>)
 800a348:	4870      	ldr	r0, [pc, #448]	@ (800a50c <tcp_input+0x288>)
 800a34a:	f004 f949 	bl	800e5e0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a34e:	2114      	movs	r1, #20
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7fe f89d 	bl	8008490 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	895a      	ldrh	r2, [r3, #10]
 800a35a:	4b71      	ldr	r3, [pc, #452]	@ (800a520 <tcp_input+0x29c>)
 800a35c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a35e:	4b6e      	ldr	r3, [pc, #440]	@ (800a518 <tcp_input+0x294>)
 800a360:	881a      	ldrh	r2, [r3, #0]
 800a362:	4b6f      	ldr	r3, [pc, #444]	@ (800a520 <tcp_input+0x29c>)
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a36a:	4b6d      	ldr	r3, [pc, #436]	@ (800a520 <tcp_input+0x29c>)
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7fe f88d 	bl	8008490 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	895b      	ldrh	r3, [r3, #10]
 800a37c:	8a3a      	ldrh	r2, [r7, #16]
 800a37e:	429a      	cmp	r2, r3
 800a380:	f200 836e 	bhi.w	800aa60 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	4a64      	ldr	r2, [pc, #400]	@ (800a51c <tcp_input+0x298>)
 800a38c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	8a3a      	ldrh	r2, [r7, #16]
 800a394:	4611      	mov	r1, r2
 800a396:	4618      	mov	r0, r3
 800a398:	f7fe f87a 	bl	8008490 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	891a      	ldrh	r2, [r3, #8]
 800a3a0:	8a3b      	ldrh	r3, [r7, #16]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	895b      	ldrh	r3, [r3, #10]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d005      	beq.n	800a3be <tcp_input+0x13a>
 800a3b2:	4b54      	ldr	r3, [pc, #336]	@ (800a504 <tcp_input+0x280>)
 800a3b4:	22df      	movs	r2, #223	@ 0xdf
 800a3b6:	495c      	ldr	r1, [pc, #368]	@ (800a528 <tcp_input+0x2a4>)
 800a3b8:	4854      	ldr	r0, [pc, #336]	@ (800a50c <tcp_input+0x288>)
 800a3ba:	f004 f911 	bl	800e5e0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	891a      	ldrh	r2, [r3, #8]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	891b      	ldrh	r3, [r3, #8]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d005      	beq.n	800a3d8 <tcp_input+0x154>
 800a3cc:	4b4d      	ldr	r3, [pc, #308]	@ (800a504 <tcp_input+0x280>)
 800a3ce:	22e0      	movs	r2, #224	@ 0xe0
 800a3d0:	4956      	ldr	r1, [pc, #344]	@ (800a52c <tcp_input+0x2a8>)
 800a3d2:	484e      	ldr	r0, [pc, #312]	@ (800a50c <tcp_input+0x288>)
 800a3d4:	f004 f904 	bl	800e5e0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a3d8:	4b4d      	ldr	r3, [pc, #308]	@ (800a510 <tcp_input+0x28c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	4a4b      	ldr	r2, [pc, #300]	@ (800a510 <tcp_input+0x28c>)
 800a3e2:	6814      	ldr	r4, [r2, #0]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fa fad3 	bl	8004990 <lwip_htons>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a3ee:	4b48      	ldr	r3, [pc, #288]	@ (800a510 <tcp_input+0x28c>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	885b      	ldrh	r3, [r3, #2]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	4a46      	ldr	r2, [pc, #280]	@ (800a510 <tcp_input+0x28c>)
 800a3f8:	6814      	ldr	r4, [r2, #0]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fa fac8 	bl	8004990 <lwip_htons>
 800a400:	4603      	mov	r3, r0
 800a402:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a404:	4b42      	ldr	r3, [pc, #264]	@ (800a510 <tcp_input+0x28c>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	4a41      	ldr	r2, [pc, #260]	@ (800a510 <tcp_input+0x28c>)
 800a40c:	6814      	ldr	r4, [r2, #0]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fa fad4 	bl	80049bc <lwip_htonl>
 800a414:	4603      	mov	r3, r0
 800a416:	6063      	str	r3, [r4, #4]
 800a418:	6863      	ldr	r3, [r4, #4]
 800a41a:	4a45      	ldr	r2, [pc, #276]	@ (800a530 <tcp_input+0x2ac>)
 800a41c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a41e:	4b3c      	ldr	r3, [pc, #240]	@ (800a510 <tcp_input+0x28c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	4a3a      	ldr	r2, [pc, #232]	@ (800a510 <tcp_input+0x28c>)
 800a426:	6814      	ldr	r4, [r2, #0]
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fa fac7 	bl	80049bc <lwip_htonl>
 800a42e:	4603      	mov	r3, r0
 800a430:	60a3      	str	r3, [r4, #8]
 800a432:	68a3      	ldr	r3, [r4, #8]
 800a434:	4a3f      	ldr	r2, [pc, #252]	@ (800a534 <tcp_input+0x2b0>)
 800a436:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a438:	4b35      	ldr	r3, [pc, #212]	@ (800a510 <tcp_input+0x28c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	89db      	ldrh	r3, [r3, #14]
 800a43e:	b29b      	uxth	r3, r3
 800a440:	4a33      	ldr	r2, [pc, #204]	@ (800a510 <tcp_input+0x28c>)
 800a442:	6814      	ldr	r4, [r2, #0]
 800a444:	4618      	mov	r0, r3
 800a446:	f7fa faa3 	bl	8004990 <lwip_htons>
 800a44a:	4603      	mov	r3, r0
 800a44c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a44e:	4b30      	ldr	r3, [pc, #192]	@ (800a510 <tcp_input+0x28c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	899b      	ldrh	r3, [r3, #12]
 800a454:	b29b      	uxth	r3, r3
 800a456:	4618      	mov	r0, r3
 800a458:	f7fa fa9a 	bl	8004990 <lwip_htons>
 800a45c:	4603      	mov	r3, r0
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a464:	b2da      	uxtb	r2, r3
 800a466:	4b34      	ldr	r3, [pc, #208]	@ (800a538 <tcp_input+0x2b4>)
 800a468:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	891a      	ldrh	r2, [r3, #8]
 800a46e:	4b33      	ldr	r3, [pc, #204]	@ (800a53c <tcp_input+0x2b8>)
 800a470:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a472:	4b31      	ldr	r3, [pc, #196]	@ (800a538 <tcp_input+0x2b4>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	f003 0303 	and.w	r3, r3, #3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00c      	beq.n	800a498 <tcp_input+0x214>
    tcplen++;
 800a47e:	4b2f      	ldr	r3, [pc, #188]	@ (800a53c <tcp_input+0x2b8>)
 800a480:	881b      	ldrh	r3, [r3, #0]
 800a482:	3301      	adds	r3, #1
 800a484:	b29a      	uxth	r2, r3
 800a486:	4b2d      	ldr	r3, [pc, #180]	@ (800a53c <tcp_input+0x2b8>)
 800a488:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	891a      	ldrh	r2, [r3, #8]
 800a48e:	4b2b      	ldr	r3, [pc, #172]	@ (800a53c <tcp_input+0x2b8>)
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	429a      	cmp	r2, r3
 800a494:	f200 82e6 	bhi.w	800aa64 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a49c:	4b28      	ldr	r3, [pc, #160]	@ (800a540 <tcp_input+0x2bc>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	61fb      	str	r3, [r7, #28]
 800a4a2:	e09d      	b.n	800a5e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	7d1b      	ldrb	r3, [r3, #20]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d105      	bne.n	800a4b8 <tcp_input+0x234>
 800a4ac:	4b15      	ldr	r3, [pc, #84]	@ (800a504 <tcp_input+0x280>)
 800a4ae:	22fb      	movs	r2, #251	@ 0xfb
 800a4b0:	4924      	ldr	r1, [pc, #144]	@ (800a544 <tcp_input+0x2c0>)
 800a4b2:	4816      	ldr	r0, [pc, #88]	@ (800a50c <tcp_input+0x288>)
 800a4b4:	f004 f894 	bl	800e5e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	7d1b      	ldrb	r3, [r3, #20]
 800a4bc:	2b0a      	cmp	r3, #10
 800a4be:	d105      	bne.n	800a4cc <tcp_input+0x248>
 800a4c0:	4b10      	ldr	r3, [pc, #64]	@ (800a504 <tcp_input+0x280>)
 800a4c2:	22fc      	movs	r2, #252	@ 0xfc
 800a4c4:	4920      	ldr	r1, [pc, #128]	@ (800a548 <tcp_input+0x2c4>)
 800a4c6:	4811      	ldr	r0, [pc, #68]	@ (800a50c <tcp_input+0x288>)
 800a4c8:	f004 f88a 	bl	800e5e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	7d1b      	ldrb	r3, [r3, #20]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d105      	bne.n	800a4e0 <tcp_input+0x25c>
 800a4d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a504 <tcp_input+0x280>)
 800a4d6:	22fd      	movs	r2, #253	@ 0xfd
 800a4d8:	491c      	ldr	r1, [pc, #112]	@ (800a54c <tcp_input+0x2c8>)
 800a4da:	480c      	ldr	r0, [pc, #48]	@ (800a50c <tcp_input+0x288>)
 800a4dc:	f004 f880 	bl	800e5e0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	7a1b      	ldrb	r3, [r3, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d033      	beq.n	800a550 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	7a1a      	ldrb	r2, [r3, #8]
 800a4ec:	4b09      	ldr	r3, [pc, #36]	@ (800a514 <tcp_input+0x290>)
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d029      	beq.n	800a550 <tcp_input+0x2cc>
      prev = pcb;
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	61bb      	str	r3, [r7, #24]
      continue;
 800a500:	e06b      	b.n	800a5da <tcp_input+0x356>
 800a502:	bf00      	nop
 800a504:	08010f84 	.word	0x08010f84
 800a508:	08010ff0 	.word	0x08010ff0
 800a50c:	08011008 	.word	0x08011008
 800a510:	2000b778 	.word	0x2000b778
 800a514:	20004e48 	.word	0x20004e48
 800a518:	2000b77c 	.word	0x2000b77c
 800a51c:	2000b780 	.word	0x2000b780
 800a520:	2000b77e 	.word	0x2000b77e
 800a524:	08011030 	.word	0x08011030
 800a528:	08011040 	.word	0x08011040
 800a52c:	0801104c 	.word	0x0801104c
 800a530:	2000b788 	.word	0x2000b788
 800a534:	2000b78c 	.word	0x2000b78c
 800a538:	2000b794 	.word	0x2000b794
 800a53c:	2000b792 	.word	0x2000b792
 800a540:	2000b75c 	.word	0x2000b75c
 800a544:	0801106c 	.word	0x0801106c
 800a548:	08011094 	.word	0x08011094
 800a54c:	080110c0 	.word	0x080110c0
    }

    if (pcb->remote_port == tcphdr->src &&
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	8b1a      	ldrh	r2, [r3, #24]
 800a554:	4b72      	ldr	r3, [pc, #456]	@ (800a720 <tcp_input+0x49c>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d13a      	bne.n	800a5d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	8ada      	ldrh	r2, [r3, #22]
 800a564:	4b6e      	ldr	r3, [pc, #440]	@ (800a720 <tcp_input+0x49c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	885b      	ldrh	r3, [r3, #2]
 800a56a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d132      	bne.n	800a5d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	4b6b      	ldr	r3, [pc, #428]	@ (800a724 <tcp_input+0x4a0>)
 800a576:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a578:	429a      	cmp	r2, r3
 800a57a:	d12c      	bne.n	800a5d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	4b68      	ldr	r3, [pc, #416]	@ (800a724 <tcp_input+0x4a0>)
 800a582:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a584:	429a      	cmp	r2, r3
 800a586:	d126      	bne.n	800a5d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	69fa      	ldr	r2, [r7, #28]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d106      	bne.n	800a5a0 <tcp_input+0x31c>
 800a592:	4b65      	ldr	r3, [pc, #404]	@ (800a728 <tcp_input+0x4a4>)
 800a594:	f240 120d 	movw	r2, #269	@ 0x10d
 800a598:	4964      	ldr	r1, [pc, #400]	@ (800a72c <tcp_input+0x4a8>)
 800a59a:	4865      	ldr	r0, [pc, #404]	@ (800a730 <tcp_input+0x4ac>)
 800a59c:	f004 f820 	bl	800e5e0 <iprintf>
      if (prev != NULL) {
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00a      	beq.n	800a5bc <tcp_input+0x338>
        prev->next = pcb->next;
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	68da      	ldr	r2, [r3, #12]
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a5ae:	4b61      	ldr	r3, [pc, #388]	@ (800a734 <tcp_input+0x4b0>)
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a5b6:	4a5f      	ldr	r2, [pc, #380]	@ (800a734 <tcp_input+0x4b0>)
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d111      	bne.n	800a5ea <tcp_input+0x366>
 800a5c6:	4b58      	ldr	r3, [pc, #352]	@ (800a728 <tcp_input+0x4a4>)
 800a5c8:	f240 1215 	movw	r2, #277	@ 0x115
 800a5cc:	495a      	ldr	r1, [pc, #360]	@ (800a738 <tcp_input+0x4b4>)
 800a5ce:	4858      	ldr	r0, [pc, #352]	@ (800a730 <tcp_input+0x4ac>)
 800a5d0:	f004 f806 	bl	800e5e0 <iprintf>
      break;
 800a5d4:	e009      	b.n	800a5ea <tcp_input+0x366>
    }
    prev = pcb;
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	61fb      	str	r3, [r7, #28]
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f47f af5e 	bne.w	800a4a4 <tcp_input+0x220>
 800a5e8:	e000      	b.n	800a5ec <tcp_input+0x368>
      break;
 800a5ea:	bf00      	nop
  }

  if (pcb == NULL) {
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f040 80aa 	bne.w	800a748 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5f4:	4b51      	ldr	r3, [pc, #324]	@ (800a73c <tcp_input+0x4b8>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	61fb      	str	r3, [r7, #28]
 800a5fa:	e03f      	b.n	800a67c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	7d1b      	ldrb	r3, [r3, #20]
 800a600:	2b0a      	cmp	r3, #10
 800a602:	d006      	beq.n	800a612 <tcp_input+0x38e>
 800a604:	4b48      	ldr	r3, [pc, #288]	@ (800a728 <tcp_input+0x4a4>)
 800a606:	f240 121f 	movw	r2, #287	@ 0x11f
 800a60a:	494d      	ldr	r1, [pc, #308]	@ (800a740 <tcp_input+0x4bc>)
 800a60c:	4848      	ldr	r0, [pc, #288]	@ (800a730 <tcp_input+0x4ac>)
 800a60e:	f003 ffe7 	bl	800e5e0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	7a1b      	ldrb	r3, [r3, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d009      	beq.n	800a62e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	7a1a      	ldrb	r2, [r3, #8]
 800a61e:	4b41      	ldr	r3, [pc, #260]	@ (800a724 <tcp_input+0x4a0>)
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a626:	3301      	adds	r3, #1
 800a628:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d122      	bne.n	800a674 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	8b1a      	ldrh	r2, [r3, #24]
 800a632:	4b3b      	ldr	r3, [pc, #236]	@ (800a720 <tcp_input+0x49c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	881b      	ldrh	r3, [r3, #0]
 800a638:	b29b      	uxth	r3, r3
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d11b      	bne.n	800a676 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	8ada      	ldrh	r2, [r3, #22]
 800a642:	4b37      	ldr	r3, [pc, #220]	@ (800a720 <tcp_input+0x49c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	885b      	ldrh	r3, [r3, #2]
 800a648:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d113      	bne.n	800a676 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	4b34      	ldr	r3, [pc, #208]	@ (800a724 <tcp_input+0x4a0>)
 800a654:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a656:	429a      	cmp	r2, r3
 800a658:	d10d      	bne.n	800a676 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	4b31      	ldr	r3, [pc, #196]	@ (800a724 <tcp_input+0x4a0>)
 800a660:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a662:	429a      	cmp	r2, r3
 800a664:	d107      	bne.n	800a676 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a666:	69f8      	ldr	r0, [r7, #28]
 800a668:	f000 fb6c 	bl	800ad44 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7fd ff95 	bl	800859c <pbuf_free>
        return;
 800a672:	e1fd      	b.n	800aa70 <tcp_input+0x7ec>
        continue;
 800a674:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	61fb      	str	r3, [r7, #28]
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1bc      	bne.n	800a5fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a686:	4b2f      	ldr	r3, [pc, #188]	@ (800a744 <tcp_input+0x4c0>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	e02a      	b.n	800a6e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	7a1b      	ldrb	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00c      	beq.n	800a6b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	7a1a      	ldrb	r2, [r3, #8]
 800a69a:	4b22      	ldr	r3, [pc, #136]	@ (800a724 <tcp_input+0x4a0>)
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d002      	beq.n	800a6b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	61bb      	str	r3, [r7, #24]
        continue;
 800a6ae:	e016      	b.n	800a6de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	8ada      	ldrh	r2, [r3, #22]
 800a6b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a720 <tcp_input+0x49c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	885b      	ldrh	r3, [r3, #2]
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d10c      	bne.n	800a6da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	4b17      	ldr	r3, [pc, #92]	@ (800a724 <tcp_input+0x4a0>)
 800a6c6:	695b      	ldr	r3, [r3, #20]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d00f      	beq.n	800a6ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00d      	beq.n	800a6ee <tcp_input+0x46a>
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d009      	beq.n	800a6ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1d1      	bne.n	800a68e <tcp_input+0x40a>
 800a6ea:	e000      	b.n	800a6ee <tcp_input+0x46a>
            break;
 800a6ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d029      	beq.n	800a748 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a702:	4b10      	ldr	r3, [pc, #64]	@ (800a744 <tcp_input+0x4c0>)
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a70a:	4a0e      	ldr	r2, [pc, #56]	@ (800a744 <tcp_input+0x4c0>)
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a710:	6978      	ldr	r0, [r7, #20]
 800a712:	f000 fa03 	bl	800ab1c <tcp_listen_input>
      }
      pbuf_free(p);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7fd ff40 	bl	800859c <pbuf_free>
      return;
 800a71c:	e1a8      	b.n	800aa70 <tcp_input+0x7ec>
 800a71e:	bf00      	nop
 800a720:	2000b778 	.word	0x2000b778
 800a724:	20004e48 	.word	0x20004e48
 800a728:	08010f84 	.word	0x08010f84
 800a72c:	080110e8 	.word	0x080110e8
 800a730:	08011008 	.word	0x08011008
 800a734:	2000b75c 	.word	0x2000b75c
 800a738:	08011114 	.word	0x08011114
 800a73c:	2000b760 	.word	0x2000b760
 800a740:	08011140 	.word	0x08011140
 800a744:	2000b758 	.word	0x2000b758
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 8158 	beq.w	800aa00 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a750:	4b95      	ldr	r3, [pc, #596]	@ (800a9a8 <tcp_input+0x724>)
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	891a      	ldrh	r2, [r3, #8]
 800a75a:	4b93      	ldr	r3, [pc, #588]	@ (800a9a8 <tcp_input+0x724>)
 800a75c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a75e:	4a92      	ldr	r2, [pc, #584]	@ (800a9a8 <tcp_input+0x724>)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a764:	4b91      	ldr	r3, [pc, #580]	@ (800a9ac <tcp_input+0x728>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a8f      	ldr	r2, [pc, #572]	@ (800a9a8 <tcp_input+0x724>)
 800a76a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a76c:	4b90      	ldr	r3, [pc, #576]	@ (800a9b0 <tcp_input+0x72c>)
 800a76e:	2200      	movs	r2, #0
 800a770:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a772:	4b90      	ldr	r3, [pc, #576]	@ (800a9b4 <tcp_input+0x730>)
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a778:	4b8f      	ldr	r3, [pc, #572]	@ (800a9b8 <tcp_input+0x734>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a77e:	4b8f      	ldr	r3, [pc, #572]	@ (800a9bc <tcp_input+0x738>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	f003 0308 	and.w	r3, r3, #8
 800a786:	2b00      	cmp	r3, #0
 800a788:	d006      	beq.n	800a798 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	7b5b      	ldrb	r3, [r3, #13]
 800a78e:	f043 0301 	orr.w	r3, r3, #1
 800a792:	b2da      	uxtb	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d017      	beq.n	800a7d0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a7a0:	69f8      	ldr	r0, [r7, #28]
 800a7a2:	f7ff f923 	bl	80099ec <tcp_process_refused_data>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	f113 0f0d 	cmn.w	r3, #13
 800a7ac:	d007      	beq.n	800a7be <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00c      	beq.n	800a7d0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a7b6:	4b82      	ldr	r3, [pc, #520]	@ (800a9c0 <tcp_input+0x73c>)
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d008      	beq.n	800a7d0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f040 80e4 	bne.w	800a990 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a7c8:	69f8      	ldr	r0, [r7, #28]
 800a7ca:	f003 f9c3 	bl	800db54 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a7ce:	e0df      	b.n	800a990 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 800a7d0:	4a7c      	ldr	r2, [pc, #496]	@ (800a9c4 <tcp_input+0x740>)
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a7d6:	69f8      	ldr	r0, [r7, #28]
 800a7d8:	f000 fb2e 	bl	800ae38 <tcp_process>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a7e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7e4:	f113 0f0d 	cmn.w	r3, #13
 800a7e8:	f000 80d4 	beq.w	800a994 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 800a7ec:	4b71      	ldr	r3, [pc, #452]	@ (800a9b4 <tcp_input+0x730>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d015      	beq.n	800a824 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d008      	beq.n	800a814 <tcp_input+0x590>
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	6912      	ldr	r2, [r2, #16]
 800a80c:	f06f 010d 	mvn.w	r1, #13
 800a810:	4610      	mov	r0, r2
 800a812:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a814:	69f9      	ldr	r1, [r7, #28]
 800a816:	486c      	ldr	r0, [pc, #432]	@ (800a9c8 <tcp_input+0x744>)
 800a818:	f7ff fbbc 	bl	8009f94 <tcp_pcb_remove>
        tcp_free(pcb);
 800a81c:	69f8      	ldr	r0, [r7, #28]
 800a81e:	f7fe f95d 	bl	8008adc <tcp_free>
 800a822:	e0da      	b.n	800a9da <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a828:	4b63      	ldr	r3, [pc, #396]	@ (800a9b8 <tcp_input+0x734>)
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d01d      	beq.n	800a86c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a830:	4b61      	ldr	r3, [pc, #388]	@ (800a9b8 <tcp_input+0x734>)
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00a      	beq.n	800a856 <tcp_input+0x5d2>
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a846:	69fa      	ldr	r2, [r7, #28]
 800a848:	6910      	ldr	r0, [r2, #16]
 800a84a:	89fa      	ldrh	r2, [r7, #14]
 800a84c:	69f9      	ldr	r1, [r7, #28]
 800a84e:	4798      	blx	r3
 800a850:	4603      	mov	r3, r0
 800a852:	74fb      	strb	r3, [r7, #19]
 800a854:	e001      	b.n	800a85a <tcp_input+0x5d6>
 800a856:	2300      	movs	r3, #0
 800a858:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a85a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a85e:	f113 0f0d 	cmn.w	r3, #13
 800a862:	f000 8099 	beq.w	800a998 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a866:	4b54      	ldr	r3, [pc, #336]	@ (800a9b8 <tcp_input+0x734>)
 800a868:	2200      	movs	r2, #0
 800a86a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a86c:	69f8      	ldr	r0, [r7, #28]
 800a86e:	f000 f915 	bl	800aa9c <tcp_input_delayed_close>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	f040 8091 	bne.w	800a99c <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a87a:	4b4d      	ldr	r3, [pc, #308]	@ (800a9b0 <tcp_input+0x72c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d041      	beq.n	800a906 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a886:	2b00      	cmp	r3, #0
 800a888:	d006      	beq.n	800a898 <tcp_input+0x614>
 800a88a:	4b50      	ldr	r3, [pc, #320]	@ (800a9cc <tcp_input+0x748>)
 800a88c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a890:	494f      	ldr	r1, [pc, #316]	@ (800a9d0 <tcp_input+0x74c>)
 800a892:	4850      	ldr	r0, [pc, #320]	@ (800a9d4 <tcp_input+0x750>)
 800a894:	f003 fea4 	bl	800e5e0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	8b5b      	ldrh	r3, [r3, #26]
 800a89c:	f003 0310 	and.w	r3, r3, #16
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d008      	beq.n	800a8b6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a8a4:	4b42      	ldr	r3, [pc, #264]	@ (800a9b0 <tcp_input+0x72c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7fd fe77 	bl	800859c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a8ae:	69f8      	ldr	r0, [r7, #28]
 800a8b0:	f7fe fc3e 	bl	8009130 <tcp_abort>
            goto aborted;
 800a8b4:	e091      	b.n	800a9da <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00c      	beq.n	800a8da <tcp_input+0x656>
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	6918      	ldr	r0, [r3, #16]
 800a8ca:	4b39      	ldr	r3, [pc, #228]	@ (800a9b0 <tcp_input+0x72c>)
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	69f9      	ldr	r1, [r7, #28]
 800a8d2:	47a0      	blx	r4
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	74fb      	strb	r3, [r7, #19]
 800a8d8:	e008      	b.n	800a8ec <tcp_input+0x668>
 800a8da:	4b35      	ldr	r3, [pc, #212]	@ (800a9b0 <tcp_input+0x72c>)
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	69f9      	ldr	r1, [r7, #28]
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	f7ff f95a 	bl	8009b9c <tcp_recv_null>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a8ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8f0:	f113 0f0d 	cmn.w	r3, #13
 800a8f4:	d054      	beq.n	800a9a0 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a8f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a8fe:	4b2c      	ldr	r3, [pc, #176]	@ (800a9b0 <tcp_input+0x72c>)
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a906:	4b2b      	ldr	r3, [pc, #172]	@ (800a9b4 <tcp_input+0x730>)
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	f003 0320 	and.w	r3, r3, #32
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d031      	beq.n	800a976 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a916:	2b00      	cmp	r3, #0
 800a918:	d009      	beq.n	800a92e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a91e:	7b5a      	ldrb	r2, [r3, #13]
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a924:	f042 0220 	orr.w	r2, r2, #32
 800a928:	b2d2      	uxtb	r2, r2
 800a92a:	735a      	strb	r2, [r3, #13]
 800a92c:	e023      	b.n	800a976 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a932:	f640 3268 	movw	r2, #2920	@ 0xb68
 800a936:	4293      	cmp	r3, r2
 800a938:	d005      	beq.n	800a946 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a93e:	3301      	adds	r3, #1
 800a940:	b29a      	uxth	r2, r3
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00b      	beq.n	800a968 <tcp_input+0x6e4>
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	6918      	ldr	r0, [r3, #16]
 800a95a:	2300      	movs	r3, #0
 800a95c:	2200      	movs	r2, #0
 800a95e:	69f9      	ldr	r1, [r7, #28]
 800a960:	47a0      	blx	r4
 800a962:	4603      	mov	r3, r0
 800a964:	74fb      	strb	r3, [r7, #19]
 800a966:	e001      	b.n	800a96c <tcp_input+0x6e8>
 800a968:	2300      	movs	r3, #0
 800a96a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a96c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a970:	f113 0f0d 	cmn.w	r3, #13
 800a974:	d016      	beq.n	800a9a4 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a976:	4b13      	ldr	r3, [pc, #76]	@ (800a9c4 <tcp_input+0x740>)
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a97c:	69f8      	ldr	r0, [r7, #28]
 800a97e:	f000 f88d 	bl	800aa9c <tcp_input_delayed_close>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d127      	bne.n	800a9d8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a988:	69f8      	ldr	r0, [r7, #28]
 800a98a:	f002 fadd 	bl	800cf48 <tcp_output>
 800a98e:	e024      	b.n	800a9da <tcp_input+0x756>
        goto aborted;
 800a990:	bf00      	nop
 800a992:	e022      	b.n	800a9da <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a994:	bf00      	nop
 800a996:	e020      	b.n	800a9da <tcp_input+0x756>
              goto aborted;
 800a998:	bf00      	nop
 800a99a:	e01e      	b.n	800a9da <tcp_input+0x756>
          goto aborted;
 800a99c:	bf00      	nop
 800a99e:	e01c      	b.n	800a9da <tcp_input+0x756>
            goto aborted;
 800a9a0:	bf00      	nop
 800a9a2:	e01a      	b.n	800a9da <tcp_input+0x756>
              goto aborted;
 800a9a4:	bf00      	nop
 800a9a6:	e018      	b.n	800a9da <tcp_input+0x756>
 800a9a8:	2000b768 	.word	0x2000b768
 800a9ac:	2000b778 	.word	0x2000b778
 800a9b0:	2000b798 	.word	0x2000b798
 800a9b4:	2000b795 	.word	0x2000b795
 800a9b8:	2000b790 	.word	0x2000b790
 800a9bc:	2000b794 	.word	0x2000b794
 800a9c0:	2000b792 	.word	0x2000b792
 800a9c4:	2000b79c 	.word	0x2000b79c
 800a9c8:	2000b75c 	.word	0x2000b75c
 800a9cc:	08010f84 	.word	0x08010f84
 800a9d0:	08011170 	.word	0x08011170
 800a9d4:	08011008 	.word	0x08011008
          goto aborted;
 800a9d8:	bf00      	nop
    tcp_input_pcb = NULL;
 800a9da:	4b27      	ldr	r3, [pc, #156]	@ (800aa78 <tcp_input+0x7f4>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a9e0:	4b26      	ldr	r3, [pc, #152]	@ (800aa7c <tcp_input+0x7f8>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a9e6:	4b26      	ldr	r3, [pc, #152]	@ (800aa80 <tcp_input+0x7fc>)
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d03f      	beq.n	800aa6e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a9ee:	4b24      	ldr	r3, [pc, #144]	@ (800aa80 <tcp_input+0x7fc>)
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fd fdd2 	bl	800859c <pbuf_free>
      inseg.p = NULL;
 800a9f8:	4b21      	ldr	r3, [pc, #132]	@ (800aa80 <tcp_input+0x7fc>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a9fe:	e036      	b.n	800aa6e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800aa00:	4b20      	ldr	r3, [pc, #128]	@ (800aa84 <tcp_input+0x800>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	899b      	ldrh	r3, [r3, #12]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7f9 ffc1 	bl	8004990 <lwip_htons>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	f003 0304 	and.w	r3, r3, #4
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d118      	bne.n	800aa4c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa1a:	4b1b      	ldr	r3, [pc, #108]	@ (800aa88 <tcp_input+0x804>)
 800aa1c:	6819      	ldr	r1, [r3, #0]
 800aa1e:	4b1b      	ldr	r3, [pc, #108]	@ (800aa8c <tcp_input+0x808>)
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	4b1a      	ldr	r3, [pc, #104]	@ (800aa90 <tcp_input+0x80c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa2a:	4b16      	ldr	r3, [pc, #88]	@ (800aa84 <tcp_input+0x800>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa2e:	885b      	ldrh	r3, [r3, #2]
 800aa30:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa32:	4a14      	ldr	r2, [pc, #80]	@ (800aa84 <tcp_input+0x800>)
 800aa34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa36:	8812      	ldrh	r2, [r2, #0]
 800aa38:	b292      	uxth	r2, r2
 800aa3a:	9202      	str	r2, [sp, #8]
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	4b15      	ldr	r3, [pc, #84]	@ (800aa94 <tcp_input+0x810>)
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	4b15      	ldr	r3, [pc, #84]	@ (800aa98 <tcp_input+0x814>)
 800aa44:	4602      	mov	r2, r0
 800aa46:	2000      	movs	r0, #0
 800aa48:	f003 f832 	bl	800dab0 <tcp_rst>
    pbuf_free(p);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7fd fda5 	bl	800859c <pbuf_free>
  return;
 800aa52:	e00c      	b.n	800aa6e <tcp_input+0x7ea>
    goto dropped;
 800aa54:	bf00      	nop
 800aa56:	e006      	b.n	800aa66 <tcp_input+0x7e2>
    goto dropped;
 800aa58:	bf00      	nop
 800aa5a:	e004      	b.n	800aa66 <tcp_input+0x7e2>
    goto dropped;
 800aa5c:	bf00      	nop
 800aa5e:	e002      	b.n	800aa66 <tcp_input+0x7e2>
      goto dropped;
 800aa60:	bf00      	nop
 800aa62:	e000      	b.n	800aa66 <tcp_input+0x7e2>
      goto dropped;
 800aa64:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7fd fd98 	bl	800859c <pbuf_free>
 800aa6c:	e000      	b.n	800aa70 <tcp_input+0x7ec>
  return;
 800aa6e:	bf00      	nop
}
 800aa70:	3724      	adds	r7, #36	@ 0x24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd90      	pop	{r4, r7, pc}
 800aa76:	bf00      	nop
 800aa78:	2000b79c 	.word	0x2000b79c
 800aa7c:	2000b798 	.word	0x2000b798
 800aa80:	2000b768 	.word	0x2000b768
 800aa84:	2000b778 	.word	0x2000b778
 800aa88:	2000b78c 	.word	0x2000b78c
 800aa8c:	2000b792 	.word	0x2000b792
 800aa90:	2000b788 	.word	0x2000b788
 800aa94:	20004e58 	.word	0x20004e58
 800aa98:	20004e5c 	.word	0x20004e5c

0800aa9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <tcp_input_delayed_close+0x1c>
 800aaaa:	4b17      	ldr	r3, [pc, #92]	@ (800ab08 <tcp_input_delayed_close+0x6c>)
 800aaac:	f240 225a 	movw	r2, #602	@ 0x25a
 800aab0:	4916      	ldr	r1, [pc, #88]	@ (800ab0c <tcp_input_delayed_close+0x70>)
 800aab2:	4817      	ldr	r0, [pc, #92]	@ (800ab10 <tcp_input_delayed_close+0x74>)
 800aab4:	f003 fd94 	bl	800e5e0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800aab8:	4b16      	ldr	r3, [pc, #88]	@ (800ab14 <tcp_input_delayed_close+0x78>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	f003 0310 	and.w	r3, r3, #16
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01c      	beq.n	800aafe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	8b5b      	ldrh	r3, [r3, #26]
 800aac8:	f003 0310 	and.w	r3, r3, #16
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10d      	bne.n	800aaec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d008      	beq.n	800aaec <tcp_input_delayed_close+0x50>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	6912      	ldr	r2, [r2, #16]
 800aae4:	f06f 010e 	mvn.w	r1, #14
 800aae8:	4610      	mov	r0, r2
 800aaea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	480a      	ldr	r0, [pc, #40]	@ (800ab18 <tcp_input_delayed_close+0x7c>)
 800aaf0:	f7ff fa50 	bl	8009f94 <tcp_pcb_remove>
    tcp_free(pcb);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7fd fff1 	bl	8008adc <tcp_free>
    return 1;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e000      	b.n	800ab00 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	08010f84 	.word	0x08010f84
 800ab0c:	0801118c 	.word	0x0801118c
 800ab10:	08011008 	.word	0x08011008
 800ab14:	2000b795 	.word	0x2000b795
 800ab18:	2000b75c 	.word	0x2000b75c

0800ab1c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ab1c:	b590      	push	{r4, r7, lr}
 800ab1e:	b08b      	sub	sp, #44	@ 0x2c
 800ab20:	af04      	add	r7, sp, #16
 800ab22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ab24:	4b7a      	ldr	r3, [pc, #488]	@ (800ad10 <tcp_listen_input+0x1f4>)
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	f003 0304 	and.w	r3, r3, #4
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f040 80e6 	bne.w	800acfe <tcp_listen_input+0x1e2>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d106      	bne.n	800ab46 <tcp_listen_input+0x2a>
 800ab38:	4b76      	ldr	r3, [pc, #472]	@ (800ad14 <tcp_listen_input+0x1f8>)
 800ab3a:	f240 2281 	movw	r2, #641	@ 0x281
 800ab3e:	4976      	ldr	r1, [pc, #472]	@ (800ad18 <tcp_listen_input+0x1fc>)
 800ab40:	4876      	ldr	r0, [pc, #472]	@ (800ad1c <tcp_listen_input+0x200>)
 800ab42:	f003 fd4d 	bl	800e5e0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ab46:	4b72      	ldr	r3, [pc, #456]	@ (800ad10 <tcp_listen_input+0x1f4>)
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	f003 0310 	and.w	r3, r3, #16
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d019      	beq.n	800ab86 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab52:	4b73      	ldr	r3, [pc, #460]	@ (800ad20 <tcp_listen_input+0x204>)
 800ab54:	6819      	ldr	r1, [r3, #0]
 800ab56:	4b73      	ldr	r3, [pc, #460]	@ (800ad24 <tcp_listen_input+0x208>)
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	4b72      	ldr	r3, [pc, #456]	@ (800ad28 <tcp_listen_input+0x20c>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab62:	4b72      	ldr	r3, [pc, #456]	@ (800ad2c <tcp_listen_input+0x210>)
 800ab64:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab66:	885b      	ldrh	r3, [r3, #2]
 800ab68:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab6a:	4a70      	ldr	r2, [pc, #448]	@ (800ad2c <tcp_listen_input+0x210>)
 800ab6c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab6e:	8812      	ldrh	r2, [r2, #0]
 800ab70:	b292      	uxth	r2, r2
 800ab72:	9202      	str	r2, [sp, #8]
 800ab74:	9301      	str	r3, [sp, #4]
 800ab76:	4b6e      	ldr	r3, [pc, #440]	@ (800ad30 <tcp_listen_input+0x214>)
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	4b6e      	ldr	r3, [pc, #440]	@ (800ad34 <tcp_listen_input+0x218>)
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f002 ff96 	bl	800dab0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ab84:	e0bd      	b.n	800ad02 <tcp_listen_input+0x1e6>
  } else if (flags & TCP_SYN) {
 800ab86:	4b62      	ldr	r3, [pc, #392]	@ (800ad10 <tcp_listen_input+0x1f4>)
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	f003 0302 	and.w	r3, r3, #2
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 80b7 	beq.w	800ad02 <tcp_listen_input+0x1e6>
    if (pcb->accepts_pending >= pcb->backlog) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7f5a      	ldrb	r2, [r3, #29]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	7f1b      	ldrb	r3, [r3, #28]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	f080 80b2 	bcs.w	800ad06 <tcp_listen_input+0x1ea>
    npcb = tcp_alloc(pcb->prio);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	7d5b      	ldrb	r3, [r3, #21]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff f91c 	bl	8009de4 <tcp_alloc>
 800abac:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d111      	bne.n	800abd8 <tcp_listen_input+0xbc>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	699b      	ldr	r3, [r3, #24]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00a      	beq.n	800abd2 <tcp_listen_input+0xb6>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	6910      	ldr	r0, [r2, #16]
 800abc4:	f04f 32ff 	mov.w	r2, #4294967295
 800abc8:	2100      	movs	r1, #0
 800abca:	4798      	blx	r3
 800abcc:	4603      	mov	r3, r0
 800abce:	73bb      	strb	r3, [r7, #14]
      return;
 800abd0:	e09a      	b.n	800ad08 <tcp_listen_input+0x1ec>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800abd2:	23f0      	movs	r3, #240	@ 0xf0
 800abd4:	73bb      	strb	r3, [r7, #14]
      return;
 800abd6:	e097      	b.n	800ad08 <tcp_listen_input+0x1ec>
    pcb->accepts_pending++;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	7f5b      	ldrb	r3, [r3, #29]
 800abdc:	3301      	adds	r3, #1
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	775a      	strb	r2, [r3, #29]
    tcp_set_flags(npcb, TF_BACKLOGPEND);
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	8b5b      	ldrh	r3, [r3, #26]
 800abe8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800abec:	b29a      	uxth	r2, r3
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	835a      	strh	r2, [r3, #26]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800abf2:	4b51      	ldr	r3, [pc, #324]	@ (800ad38 <tcp_listen_input+0x21c>)
 800abf4:	695a      	ldr	r2, [r3, #20]
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800abfa:	4b4f      	ldr	r3, [pc, #316]	@ (800ad38 <tcp_listen_input+0x21c>)
 800abfc:	691a      	ldr	r2, [r3, #16]
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	8ada      	ldrh	r2, [r3, #22]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ac0a:	4b48      	ldr	r3, [pc, #288]	@ (800ad2c <tcp_listen_input+0x210>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2203      	movs	r2, #3
 800ac1a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ac1c:	4b42      	ldr	r3, [pc, #264]	@ (800ad28 <tcp_listen_input+0x20c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ac2e:	6978      	ldr	r0, [r7, #20]
 800ac30:	f7ff fa44 	bl	800a0bc <tcp_next_iss>
 800ac34:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ac4e:	4b36      	ldr	r3, [pc, #216]	@ (800ad28 <tcp_listen_input+0x20c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	1e5a      	subs	r2, r3, #1
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	691a      	ldr	r2, [r3, #16]
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	7a5b      	ldrb	r3, [r3, #9]
 800ac6a:	f003 030c 	and.w	r3, r3, #12
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	7a1a      	ldrb	r2, [r3, #8]
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ac7c:	4b2f      	ldr	r3, [pc, #188]	@ (800ad3c <tcp_listen_input+0x220>)
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	60da      	str	r2, [r3, #12]
 800ac84:	4a2d      	ldr	r2, [pc, #180]	@ (800ad3c <tcp_listen_input+0x220>)
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	f003 f8d3 	bl	800de34 <tcp_timer_needed>
 800ac8e:	4b2c      	ldr	r3, [pc, #176]	@ (800ad40 <tcp_listen_input+0x224>)
 800ac90:	2201      	movs	r2, #1
 800ac92:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ac94:	6978      	ldr	r0, [r7, #20]
 800ac96:	f001 fd91 	bl	800c7bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ac9a:	4b24      	ldr	r3, [pc, #144]	@ (800ad2c <tcp_listen_input+0x210>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	89db      	ldrh	r3, [r3, #14]
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	3304      	adds	r3, #4
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fb f85d 	bl	8005d7c <ip4_route>
 800acc2:	4601      	mov	r1, r0
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	3304      	adds	r3, #4
 800acc8:	461a      	mov	r2, r3
 800acca:	4620      	mov	r0, r4
 800accc:	f7ff fa1c 	bl	800a108 <tcp_eff_send_mss_netif>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800acd8:	2112      	movs	r1, #18
 800acda:	6978      	ldr	r0, [r7, #20]
 800acdc:	f002 f846 	bl	800cd6c <tcp_enqueue_flags>
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ace4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d004      	beq.n	800acf6 <tcp_listen_input+0x1da>
      tcp_abandon(npcb, 0);
 800acec:	2100      	movs	r1, #0
 800acee:	6978      	ldr	r0, [r7, #20]
 800acf0:	f7fe f95e 	bl	8008fb0 <tcp_abandon>
      return;
 800acf4:	e008      	b.n	800ad08 <tcp_listen_input+0x1ec>
    tcp_output(npcb);
 800acf6:	6978      	ldr	r0, [r7, #20]
 800acf8:	f002 f926 	bl	800cf48 <tcp_output>
  return;
 800acfc:	e001      	b.n	800ad02 <tcp_listen_input+0x1e6>
    return;
 800acfe:	bf00      	nop
 800ad00:	e002      	b.n	800ad08 <tcp_listen_input+0x1ec>
  return;
 800ad02:	bf00      	nop
 800ad04:	e000      	b.n	800ad08 <tcp_listen_input+0x1ec>
      return;
 800ad06:	bf00      	nop
}
 800ad08:	371c      	adds	r7, #28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd90      	pop	{r4, r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	2000b794 	.word	0x2000b794
 800ad14:	08010f84 	.word	0x08010f84
 800ad18:	080111b4 	.word	0x080111b4
 800ad1c:	08011008 	.word	0x08011008
 800ad20:	2000b78c 	.word	0x2000b78c
 800ad24:	2000b792 	.word	0x2000b792
 800ad28:	2000b788 	.word	0x2000b788
 800ad2c:	2000b778 	.word	0x2000b778
 800ad30:	20004e58 	.word	0x20004e58
 800ad34:	20004e5c 	.word	0x20004e5c
 800ad38:	20004e48 	.word	0x20004e48
 800ad3c:	2000b75c 	.word	0x2000b75c
 800ad40:	2000b764 	.word	0x2000b764

0800ad44 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af04      	add	r7, sp, #16
 800ad4a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ad4c:	4b2f      	ldr	r3, [pc, #188]	@ (800ae0c <tcp_timewait_input+0xc8>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	f003 0304 	and.w	r3, r3, #4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d153      	bne.n	800ae00 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d106      	bne.n	800ad6c <tcp_timewait_input+0x28>
 800ad5e:	4b2c      	ldr	r3, [pc, #176]	@ (800ae10 <tcp_timewait_input+0xcc>)
 800ad60:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ad64:	492b      	ldr	r1, [pc, #172]	@ (800ae14 <tcp_timewait_input+0xd0>)
 800ad66:	482c      	ldr	r0, [pc, #176]	@ (800ae18 <tcp_timewait_input+0xd4>)
 800ad68:	f003 fc3a 	bl	800e5e0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ad6c:	4b27      	ldr	r3, [pc, #156]	@ (800ae0c <tcp_timewait_input+0xc8>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	f003 0302 	and.w	r3, r3, #2
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d02a      	beq.n	800adce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ad78:	4b28      	ldr	r3, [pc, #160]	@ (800ae1c <tcp_timewait_input+0xd8>)
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	db2d      	blt.n	800ade2 <tcp_timewait_input+0x9e>
 800ad86:	4b25      	ldr	r3, [pc, #148]	@ (800ae1c <tcp_timewait_input+0xd8>)
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8e:	6879      	ldr	r1, [r7, #4]
 800ad90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ad92:	440b      	add	r3, r1
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	dc23      	bgt.n	800ade2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad9a:	4b21      	ldr	r3, [pc, #132]	@ (800ae20 <tcp_timewait_input+0xdc>)
 800ad9c:	6819      	ldr	r1, [r3, #0]
 800ad9e:	4b21      	ldr	r3, [pc, #132]	@ (800ae24 <tcp_timewait_input+0xe0>)
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae1c <tcp_timewait_input+0xd8>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adaa:	4b1f      	ldr	r3, [pc, #124]	@ (800ae28 <tcp_timewait_input+0xe4>)
 800adac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adae:	885b      	ldrh	r3, [r3, #2]
 800adb0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adb2:	4a1d      	ldr	r2, [pc, #116]	@ (800ae28 <tcp_timewait_input+0xe4>)
 800adb4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adb6:	8812      	ldrh	r2, [r2, #0]
 800adb8:	b292      	uxth	r2, r2
 800adba:	9202      	str	r2, [sp, #8]
 800adbc:	9301      	str	r3, [sp, #4]
 800adbe:	4b1b      	ldr	r3, [pc, #108]	@ (800ae2c <tcp_timewait_input+0xe8>)
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae30 <tcp_timewait_input+0xec>)
 800adc4:	4602      	mov	r2, r0
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f002 fe72 	bl	800dab0 <tcp_rst>
      return;
 800adcc:	e01b      	b.n	800ae06 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800adce:	4b0f      	ldr	r3, [pc, #60]	@ (800ae0c <tcp_timewait_input+0xc8>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800adda:	4b16      	ldr	r3, [pc, #88]	@ (800ae34 <tcp_timewait_input+0xf0>)
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ade2:	4b10      	ldr	r3, [pc, #64]	@ (800ae24 <tcp_timewait_input+0xe0>)
 800ade4:	881b      	ldrh	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00c      	beq.n	800ae04 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	8b5b      	ldrh	r3, [r3, #26]
 800adee:	f043 0302 	orr.w	r3, r3, #2
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f002 f8a5 	bl	800cf48 <tcp_output>
  }
  return;
 800adfe:	e001      	b.n	800ae04 <tcp_timewait_input+0xc0>
    return;
 800ae00:	bf00      	nop
 800ae02:	e000      	b.n	800ae06 <tcp_timewait_input+0xc2>
  return;
 800ae04:	bf00      	nop
}
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	2000b794 	.word	0x2000b794
 800ae10:	08010f84 	.word	0x08010f84
 800ae14:	080111d4 	.word	0x080111d4
 800ae18:	08011008 	.word	0x08011008
 800ae1c:	2000b788 	.word	0x2000b788
 800ae20:	2000b78c 	.word	0x2000b78c
 800ae24:	2000b792 	.word	0x2000b792
 800ae28:	2000b778 	.word	0x2000b778
 800ae2c:	20004e58 	.word	0x20004e58
 800ae30:	20004e5c 	.word	0x20004e5c
 800ae34:	2000b750 	.word	0x2000b750

0800ae38 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ae38:	b590      	push	{r4, r7, lr}
 800ae3a:	b08d      	sub	sp, #52	@ 0x34
 800ae3c:	af04      	add	r7, sp, #16
 800ae3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d106      	bne.n	800ae5c <tcp_process+0x24>
 800ae4e:	4b9d      	ldr	r3, [pc, #628]	@ (800b0c4 <tcp_process+0x28c>)
 800ae50:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ae54:	499c      	ldr	r1, [pc, #624]	@ (800b0c8 <tcp_process+0x290>)
 800ae56:	489d      	ldr	r0, [pc, #628]	@ (800b0cc <tcp_process+0x294>)
 800ae58:	f003 fbc2 	bl	800e5e0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ae5c:	4b9c      	ldr	r3, [pc, #624]	@ (800b0d0 <tcp_process+0x298>)
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d04e      	beq.n	800af06 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	7d1b      	ldrb	r3, [r3, #20]
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d108      	bne.n	800ae82 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae74:	4b97      	ldr	r3, [pc, #604]	@ (800b0d4 <tcp_process+0x29c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d123      	bne.n	800aec4 <tcp_process+0x8c>
        acceptable = 1;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	76fb      	strb	r3, [r7, #27]
 800ae80:	e020      	b.n	800aec4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae86:	4b94      	ldr	r3, [pc, #592]	@ (800b0d8 <tcp_process+0x2a0>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d102      	bne.n	800ae94 <tcp_process+0x5c>
        acceptable = 1;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	76fb      	strb	r3, [r7, #27]
 800ae92:	e017      	b.n	800aec4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae94:	4b90      	ldr	r3, [pc, #576]	@ (800b0d8 <tcp_process+0x2a0>)
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	db10      	blt.n	800aec4 <tcp_process+0x8c>
 800aea2:	4b8d      	ldr	r3, [pc, #564]	@ (800b0d8 <tcp_process+0x2a0>)
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800aeae:	440b      	add	r3, r1
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	dc06      	bgt.n	800aec4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	8b5b      	ldrh	r3, [r3, #26]
 800aeba:	f043 0302 	orr.w	r3, r3, #2
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800aec4:	7efb      	ldrb	r3, [r7, #27]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d01b      	beq.n	800af02 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	7d1b      	ldrb	r3, [r3, #20]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d106      	bne.n	800aee0 <tcp_process+0xa8>
 800aed2:	4b7c      	ldr	r3, [pc, #496]	@ (800b0c4 <tcp_process+0x28c>)
 800aed4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800aed8:	4980      	ldr	r1, [pc, #512]	@ (800b0dc <tcp_process+0x2a4>)
 800aeda:	487c      	ldr	r0, [pc, #496]	@ (800b0cc <tcp_process+0x294>)
 800aedc:	f003 fb80 	bl	800e5e0 <iprintf>
      recv_flags |= TF_RESET;
 800aee0:	4b7f      	ldr	r3, [pc, #508]	@ (800b0e0 <tcp_process+0x2a8>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	f043 0308 	orr.w	r3, r3, #8
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	4b7d      	ldr	r3, [pc, #500]	@ (800b0e0 <tcp_process+0x2a8>)
 800aeec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	8b5b      	ldrh	r3, [r3, #26]
 800aef2:	f023 0301 	bic.w	r3, r3, #1
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800aefc:	f06f 030d 	mvn.w	r3, #13
 800af00:	e37e      	b.n	800b600 <tcp_process+0x7c8>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	e37c      	b.n	800b600 <tcp_process+0x7c8>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800af06:	4b72      	ldr	r3, [pc, #456]	@ (800b0d0 <tcp_process+0x298>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d010      	beq.n	800af34 <tcp_process+0xfc>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	7d1b      	ldrb	r3, [r3, #20]
 800af16:	2b02      	cmp	r3, #2
 800af18:	d00c      	beq.n	800af34 <tcp_process+0xfc>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	7d1b      	ldrb	r3, [r3, #20]
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d008      	beq.n	800af34 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	8b5b      	ldrh	r3, [r3, #26]
 800af26:	f043 0302 	orr.w	r3, r3, #2
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	e365      	b.n	800b600 <tcp_process+0x7c8>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	8b5b      	ldrh	r3, [r3, #26]
 800af38:	f003 0310 	and.w	r3, r3, #16
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d103      	bne.n	800af48 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800af40:	4b68      	ldr	r3, [pc, #416]	@ (800b0e4 <tcp_process+0x2ac>)
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f001 fc2f 	bl	800c7bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7d1b      	ldrb	r3, [r3, #20]
 800af62:	3b02      	subs	r3, #2
 800af64:	2b07      	cmp	r3, #7
 800af66:	f200 833b 	bhi.w	800b5e0 <tcp_process+0x7a8>
 800af6a:	a201      	add	r2, pc, #4	@ (adr r2, 800af70 <tcp_process+0x138>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800af91 	.word	0x0800af91
 800af74:	0800b1c1 	.word	0x0800b1c1
 800af78:	0800b341 	.word	0x0800b341
 800af7c:	0800b36b 	.word	0x0800b36b
 800af80:	0800b48f 	.word	0x0800b48f
 800af84:	0800b341 	.word	0x0800b341
 800af88:	0800b51b 	.word	0x0800b51b
 800af8c:	0800b5ab 	.word	0x0800b5ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800af90:	4b4f      	ldr	r3, [pc, #316]	@ (800b0d0 <tcp_process+0x298>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	f003 0310 	and.w	r3, r3, #16
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 80e4 	beq.w	800b166 <tcp_process+0x32e>
 800af9e:	4b4c      	ldr	r3, [pc, #304]	@ (800b0d0 <tcp_process+0x298>)
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	f003 0302 	and.w	r3, r3, #2
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 80dd 	beq.w	800b166 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	4b48      	ldr	r3, [pc, #288]	@ (800b0d4 <tcp_process+0x29c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	f040 80d5 	bne.w	800b166 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800afbc:	4b46      	ldr	r3, [pc, #280]	@ (800b0d8 <tcp_process+0x2a0>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800afce:	4b41      	ldr	r3, [pc, #260]	@ (800b0d4 <tcp_process+0x29c>)
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800afd6:	4b44      	ldr	r3, [pc, #272]	@ (800b0e8 <tcp_process+0x2b0>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	89db      	ldrh	r3, [r3, #14]
 800afdc:	b29a      	uxth	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800aff0:	4b39      	ldr	r3, [pc, #228]	@ (800b0d8 <tcp_process+0x2a0>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	1e5a      	subs	r2, r3, #1
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2204      	movs	r2, #4
 800affe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3304      	adds	r3, #4
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fa feb7 	bl	8005d7c <ip4_route>
 800b00e:	4601      	mov	r1, r0
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3304      	adds	r3, #4
 800b014:	461a      	mov	r2, r3
 800b016:	4620      	mov	r0, r4
 800b018:	f7ff f876 	bl	800a108 <tcp_eff_send_mss_netif>
 800b01c:	4603      	mov	r3, r0
 800b01e:	461a      	mov	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b028:	009a      	lsls	r2, r3, #2
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b02e:	005b      	lsls	r3, r3, #1
 800b030:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b034:	428b      	cmp	r3, r1
 800b036:	bf38      	it	cc
 800b038:	460b      	movcc	r3, r1
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d204      	bcs.n	800b048 <tcp_process+0x210>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	b29b      	uxth	r3, r3
 800b046:	e00d      	b.n	800b064 <tcp_process+0x22c>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b04c:	005b      	lsls	r3, r3, #1
 800b04e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b052:	4293      	cmp	r3, r2
 800b054:	d904      	bls.n	800b060 <tcp_process+0x228>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	e001      	b.n	800b064 <tcp_process+0x22c>
 800b060:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b070:	2b00      	cmp	r3, #0
 800b072:	d106      	bne.n	800b082 <tcp_process+0x24a>
 800b074:	4b13      	ldr	r3, [pc, #76]	@ (800b0c4 <tcp_process+0x28c>)
 800b076:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b07a:	491c      	ldr	r1, [pc, #112]	@ (800b0ec <tcp_process+0x2b4>)
 800b07c:	4813      	ldr	r0, [pc, #76]	@ (800b0cc <tcp_process+0x294>)
 800b07e:	f003 faaf 	bl	800e5e0 <iprintf>
        --pcb->snd_queuelen;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b088:	3b01      	subs	r3, #1
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b096:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d12a      	bne.n	800b0f4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0a2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <tcp_process+0x280>
 800b0aa:	4b06      	ldr	r3, [pc, #24]	@ (800b0c4 <tcp_process+0x28c>)
 800b0ac:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b0b0:	490f      	ldr	r1, [pc, #60]	@ (800b0f0 <tcp_process+0x2b8>)
 800b0b2:	4806      	ldr	r0, [pc, #24]	@ (800b0cc <tcp_process+0x294>)
 800b0b4:	f003 fa94 	bl	800e5e0 <iprintf>
          pcb->unsent = rseg->next;
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b0c0:	e01c      	b.n	800b0fc <tcp_process+0x2c4>
 800b0c2:	bf00      	nop
 800b0c4:	08010f84 	.word	0x08010f84
 800b0c8:	080111f4 	.word	0x080111f4
 800b0cc:	08011008 	.word	0x08011008
 800b0d0:	2000b794 	.word	0x2000b794
 800b0d4:	2000b78c 	.word	0x2000b78c
 800b0d8:	2000b788 	.word	0x2000b788
 800b0dc:	08011210 	.word	0x08011210
 800b0e0:	2000b795 	.word	0x2000b795
 800b0e4:	2000b750 	.word	0x2000b750
 800b0e8:	2000b778 	.word	0x2000b778
 800b0ec:	08011230 	.word	0x08011230
 800b0f0:	08011248 	.word	0x08011248
        } else {
          pcb->unacked = rseg->next;
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b0fc:	69f8      	ldr	r0, [r7, #28]
 800b0fe:	f7fe fd08 	bl	8009b12 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b106:	2b00      	cmp	r3, #0
 800b108:	d104      	bne.n	800b114 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b110:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b112:	e006      	b.n	800b122 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00a      	beq.n	800b142 <tcp_process+0x30a>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	6910      	ldr	r0, [r2, #16]
 800b136:	2200      	movs	r2, #0
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	4798      	blx	r3
 800b13c:	4603      	mov	r3, r0
 800b13e:	76bb      	strb	r3, [r7, #26]
 800b140:	e001      	b.n	800b146 <tcp_process+0x30e>
 800b142:	2300      	movs	r3, #0
 800b144:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b146:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b14a:	f113 0f0d 	cmn.w	r3, #13
 800b14e:	d102      	bne.n	800b156 <tcp_process+0x31e>
          return ERR_ABRT;
 800b150:	f06f 030c 	mvn.w	r3, #12
 800b154:	e254      	b.n	800b600 <tcp_process+0x7c8>
        }
        tcp_ack_now(pcb);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	8b5b      	ldrh	r3, [r3, #26]
 800b15a:	f043 0302 	orr.w	r3, r3, #2
 800b15e:	b29a      	uxth	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b164:	e23e      	b.n	800b5e4 <tcp_process+0x7ac>
      else if (flags & TCP_ACK) {
 800b166:	4b9a      	ldr	r3, [pc, #616]	@ (800b3d0 <tcp_process+0x598>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	f003 0310 	and.w	r3, r3, #16
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 8238 	beq.w	800b5e4 <tcp_process+0x7ac>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b174:	4b97      	ldr	r3, [pc, #604]	@ (800b3d4 <tcp_process+0x59c>)
 800b176:	6819      	ldr	r1, [r3, #0]
 800b178:	4b97      	ldr	r3, [pc, #604]	@ (800b3d8 <tcp_process+0x5a0>)
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	461a      	mov	r2, r3
 800b17e:	4b97      	ldr	r3, [pc, #604]	@ (800b3dc <tcp_process+0x5a4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b184:	4b96      	ldr	r3, [pc, #600]	@ (800b3e0 <tcp_process+0x5a8>)
 800b186:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b188:	885b      	ldrh	r3, [r3, #2]
 800b18a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b18c:	4a94      	ldr	r2, [pc, #592]	@ (800b3e0 <tcp_process+0x5a8>)
 800b18e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b190:	8812      	ldrh	r2, [r2, #0]
 800b192:	b292      	uxth	r2, r2
 800b194:	9202      	str	r2, [sp, #8]
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	4b92      	ldr	r3, [pc, #584]	@ (800b3e4 <tcp_process+0x5ac>)
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	4b92      	ldr	r3, [pc, #584]	@ (800b3e8 <tcp_process+0x5b0>)
 800b19e:	4602      	mov	r2, r0
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f002 fc85 	bl	800dab0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b1ac:	2b05      	cmp	r3, #5
 800b1ae:	f200 8219 	bhi.w	800b5e4 <tcp_process+0x7ac>
          pcb->rtime = 0;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f002 fa51 	bl	800d660 <tcp_rexmit_rto>
      break;
 800b1be:	e211      	b.n	800b5e4 <tcp_process+0x7ac>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b1c0:	4b83      	ldr	r3, [pc, #524]	@ (800b3d0 <tcp_process+0x598>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	f003 0310 	and.w	r3, r3, #16
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 80a5 	beq.w	800b318 <tcp_process+0x4e0>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1ce:	4b81      	ldr	r3, [pc, #516]	@ (800b3d4 <tcp_process+0x59c>)
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f2c0 8082 	blt.w	800b2e4 <tcp_process+0x4ac>
 800b1e0:	4b7c      	ldr	r3, [pc, #496]	@ (800b3d4 <tcp_process+0x59c>)
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	dc7a      	bgt.n	800b2e4 <tcp_process+0x4ac>
          pcb->state = ESTABLISHED;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2204      	movs	r2, #4
 800b1f2:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d102      	bne.n	800b202 <tcp_process+0x3ca>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b1fc:	23fa      	movs	r3, #250	@ 0xfa
 800b1fe:	76bb      	strb	r3, [r7, #26]
 800b200:	e020      	b.n	800b244 <tcp_process+0x40c>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b206:	699b      	ldr	r3, [r3, #24]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d106      	bne.n	800b21a <tcp_process+0x3e2>
 800b20c:	4b77      	ldr	r3, [pc, #476]	@ (800b3ec <tcp_process+0x5b4>)
 800b20e:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b212:	4977      	ldr	r1, [pc, #476]	@ (800b3f0 <tcp_process+0x5b8>)
 800b214:	4877      	ldr	r0, [pc, #476]	@ (800b3f4 <tcp_process+0x5bc>)
 800b216:	f003 f9e3 	bl	800e5e0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7fd fd10 	bl	8008c40 <tcp_backlog_accepted>
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <tcp_process+0x408>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	6910      	ldr	r0, [r2, #16]
 800b234:	2200      	movs	r2, #0
 800b236:	6879      	ldr	r1, [r7, #4]
 800b238:	4798      	blx	r3
 800b23a:	4603      	mov	r3, r0
 800b23c:	76bb      	strb	r3, [r7, #26]
 800b23e:	e001      	b.n	800b244 <tcp_process+0x40c>
 800b240:	23f0      	movs	r3, #240	@ 0xf0
 800b242:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b244:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00a      	beq.n	800b262 <tcp_process+0x42a>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b24c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b250:	f113 0f0d 	cmn.w	r3, #13
 800b254:	d002      	beq.n	800b25c <tcp_process+0x424>
              tcp_abort(pcb);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7fd ff6a 	bl	8009130 <tcp_abort>
            }
            return ERR_ABRT;
 800b25c:	f06f 030c 	mvn.w	r3, #12
 800b260:	e1ce      	b.n	800b600 <tcp_process+0x7c8>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fae0 	bl	800b828 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b268:	4b63      	ldr	r3, [pc, #396]	@ (800b3f8 <tcp_process+0x5c0>)
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d005      	beq.n	800b27c <tcp_process+0x444>
            recv_acked--;
 800b270:	4b61      	ldr	r3, [pc, #388]	@ (800b3f8 <tcp_process+0x5c0>)
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	3b01      	subs	r3, #1
 800b276:	b29a      	uxth	r2, r3
 800b278:	4b5f      	ldr	r3, [pc, #380]	@ (800b3f8 <tcp_process+0x5c0>)
 800b27a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b280:	009a      	lsls	r2, r3, #2
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b28c:	428b      	cmp	r3, r1
 800b28e:	bf38      	it	cc
 800b290:	460b      	movcc	r3, r1
 800b292:	429a      	cmp	r2, r3
 800b294:	d204      	bcs.n	800b2a0 <tcp_process+0x468>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	e00d      	b.n	800b2bc <tcp_process+0x484>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d904      	bls.n	800b2b8 <tcp_process+0x480>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	e001      	b.n	800b2bc <tcp_process+0x484>
 800b2b8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b2c2:	4b4e      	ldr	r3, [pc, #312]	@ (800b3fc <tcp_process+0x5c4>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	f003 0320 	and.w	r3, r3, #32
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d037      	beq.n	800b33e <tcp_process+0x506>
            tcp_ack_now(pcb);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	8b5b      	ldrh	r3, [r3, #26]
 800b2d2:	f043 0302 	orr.w	r3, r3, #2
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2207      	movs	r2, #7
 800b2e0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b2e2:	e02c      	b.n	800b33e <tcp_process+0x506>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2e4:	4b3b      	ldr	r3, [pc, #236]	@ (800b3d4 <tcp_process+0x59c>)
 800b2e6:	6819      	ldr	r1, [r3, #0]
 800b2e8:	4b3b      	ldr	r3, [pc, #236]	@ (800b3d8 <tcp_process+0x5a0>)
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	4b3b      	ldr	r3, [pc, #236]	@ (800b3dc <tcp_process+0x5a4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2f4:	4b3a      	ldr	r3, [pc, #232]	@ (800b3e0 <tcp_process+0x5a8>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2f8:	885b      	ldrh	r3, [r3, #2]
 800b2fa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2fc:	4a38      	ldr	r2, [pc, #224]	@ (800b3e0 <tcp_process+0x5a8>)
 800b2fe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b300:	8812      	ldrh	r2, [r2, #0]
 800b302:	b292      	uxth	r2, r2
 800b304:	9202      	str	r2, [sp, #8]
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	4b36      	ldr	r3, [pc, #216]	@ (800b3e4 <tcp_process+0x5ac>)
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	4b36      	ldr	r3, [pc, #216]	@ (800b3e8 <tcp_process+0x5b0>)
 800b30e:	4602      	mov	r2, r0
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f002 fbcd 	bl	800dab0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b316:	e167      	b.n	800b5e8 <tcp_process+0x7b0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b318:	4b2d      	ldr	r3, [pc, #180]	@ (800b3d0 <tcp_process+0x598>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	f003 0302 	and.w	r3, r3, #2
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 8161 	beq.w	800b5e8 <tcp_process+0x7b0>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b32a:	1e5a      	subs	r2, r3, #1
 800b32c:	4b2b      	ldr	r3, [pc, #172]	@ (800b3dc <tcp_process+0x5a4>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	f040 8159 	bne.w	800b5e8 <tcp_process+0x7b0>
        tcp_rexmit(pcb);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f002 f9b4 	bl	800d6a4 <tcp_rexmit>
      break;
 800b33c:	e154      	b.n	800b5e8 <tcp_process+0x7b0>
 800b33e:	e153      	b.n	800b5e8 <tcp_process+0x7b0>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fa71 	bl	800b828 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b346:	4b2d      	ldr	r3, [pc, #180]	@ (800b3fc <tcp_process+0x5c4>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	f003 0320 	and.w	r3, r3, #32
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f000 814c 	beq.w	800b5ec <tcp_process+0x7b4>
        tcp_ack_now(pcb);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	8b5b      	ldrh	r3, [r3, #26]
 800b358:	f043 0302 	orr.w	r3, r3, #2
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2207      	movs	r2, #7
 800b366:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b368:	e140      	b.n	800b5ec <tcp_process+0x7b4>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fa5c 	bl	800b828 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b370:	4b22      	ldr	r3, [pc, #136]	@ (800b3fc <tcp_process+0x5c4>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	f003 0320 	and.w	r3, r3, #32
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d071      	beq.n	800b460 <tcp_process+0x628>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b37c:	4b14      	ldr	r3, [pc, #80]	@ (800b3d0 <tcp_process+0x598>)
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	f003 0310 	and.w	r3, r3, #16
 800b384:	2b00      	cmp	r3, #0
 800b386:	d060      	beq.n	800b44a <tcp_process+0x612>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b38c:	4b11      	ldr	r3, [pc, #68]	@ (800b3d4 <tcp_process+0x59c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	429a      	cmp	r2, r3
 800b392:	d15a      	bne.n	800b44a <tcp_process+0x612>
            pcb->unsent == NULL) {
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d156      	bne.n	800b44a <tcp_process+0x612>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	8b5b      	ldrh	r3, [r3, #26]
 800b3a0:	f043 0302 	orr.w	r3, r3, #2
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7fe fd9e 	bl	8009eec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b3b0:	4b13      	ldr	r3, [pc, #76]	@ (800b400 <tcp_process+0x5c8>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d105      	bne.n	800b3c6 <tcp_process+0x58e>
 800b3ba:	4b11      	ldr	r3, [pc, #68]	@ (800b400 <tcp_process+0x5c8>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	4a0f      	ldr	r2, [pc, #60]	@ (800b400 <tcp_process+0x5c8>)
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	e02e      	b.n	800b424 <tcp_process+0x5ec>
 800b3c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b400 <tcp_process+0x5c8>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	617b      	str	r3, [r7, #20]
 800b3cc:	e027      	b.n	800b41e <tcp_process+0x5e6>
 800b3ce:	bf00      	nop
 800b3d0:	2000b794 	.word	0x2000b794
 800b3d4:	2000b78c 	.word	0x2000b78c
 800b3d8:	2000b792 	.word	0x2000b792
 800b3dc:	2000b788 	.word	0x2000b788
 800b3e0:	2000b778 	.word	0x2000b778
 800b3e4:	20004e58 	.word	0x20004e58
 800b3e8:	20004e5c 	.word	0x20004e5c
 800b3ec:	08010f84 	.word	0x08010f84
 800b3f0:	0801125c 	.word	0x0801125c
 800b3f4:	08011008 	.word	0x08011008
 800b3f8:	2000b790 	.word	0x2000b790
 800b3fc:	2000b795 	.word	0x2000b795
 800b400:	2000b75c 	.word	0x2000b75c
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d104      	bne.n	800b418 <tcp_process+0x5e0>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	68da      	ldr	r2, [r3, #12]
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	60da      	str	r2, [r3, #12]
 800b416:	e005      	b.n	800b424 <tcp_process+0x5ec>
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	617b      	str	r3, [r7, #20]
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1ef      	bne.n	800b404 <tcp_process+0x5cc>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	60da      	str	r2, [r3, #12]
 800b42a:	4b77      	ldr	r3, [pc, #476]	@ (800b608 <tcp_process+0x7d0>)
 800b42c:	2201      	movs	r2, #1
 800b42e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	220a      	movs	r2, #10
 800b434:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b436:	4b75      	ldr	r3, [pc, #468]	@ (800b60c <tcp_process+0x7d4>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	60da      	str	r2, [r3, #12]
 800b43e:	4a73      	ldr	r2, [pc, #460]	@ (800b60c <tcp_process+0x7d4>)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	f002 fcf6 	bl	800de34 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b448:	e0d2      	b.n	800b5f0 <tcp_process+0x7b8>
          tcp_ack_now(pcb);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	8b5b      	ldrh	r3, [r3, #26]
 800b44e:	f043 0302 	orr.w	r3, r3, #2
 800b452:	b29a      	uxth	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2208      	movs	r2, #8
 800b45c:	751a      	strb	r2, [r3, #20]
      break;
 800b45e:	e0c7      	b.n	800b5f0 <tcp_process+0x7b8>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b460:	4b6b      	ldr	r3, [pc, #428]	@ (800b610 <tcp_process+0x7d8>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	f003 0310 	and.w	r3, r3, #16
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 80c1 	beq.w	800b5f0 <tcp_process+0x7b8>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b472:	4b68      	ldr	r3, [pc, #416]	@ (800b614 <tcp_process+0x7dc>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	429a      	cmp	r2, r3
 800b478:	f040 80ba 	bne.w	800b5f0 <tcp_process+0x7b8>
                 pcb->unsent == NULL) {
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b480:	2b00      	cmp	r3, #0
 800b482:	f040 80b5 	bne.w	800b5f0 <tcp_process+0x7b8>
        pcb->state = FIN_WAIT_2;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2206      	movs	r2, #6
 800b48a:	751a      	strb	r2, [r3, #20]
      break;
 800b48c:	e0b0      	b.n	800b5f0 <tcp_process+0x7b8>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f9ca 	bl	800b828 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b494:	4b60      	ldr	r3, [pc, #384]	@ (800b618 <tcp_process+0x7e0>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	f003 0320 	and.w	r3, r3, #32
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 80a9 	beq.w	800b5f4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	8b5b      	ldrh	r3, [r3, #26]
 800b4a6:	f043 0302 	orr.w	r3, r3, #2
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7fe fd1b 	bl	8009eec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b4b6:	4b59      	ldr	r3, [pc, #356]	@ (800b61c <tcp_process+0x7e4>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d105      	bne.n	800b4cc <tcp_process+0x694>
 800b4c0:	4b56      	ldr	r3, [pc, #344]	@ (800b61c <tcp_process+0x7e4>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	4a55      	ldr	r2, [pc, #340]	@ (800b61c <tcp_process+0x7e4>)
 800b4c8:	6013      	str	r3, [r2, #0]
 800b4ca:	e013      	b.n	800b4f4 <tcp_process+0x6bc>
 800b4cc:	4b53      	ldr	r3, [pc, #332]	@ (800b61c <tcp_process+0x7e4>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	613b      	str	r3, [r7, #16]
 800b4d2:	e00c      	b.n	800b4ee <tcp_process+0x6b6>
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d104      	bne.n	800b4e8 <tcp_process+0x6b0>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68da      	ldr	r2, [r3, #12]
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	60da      	str	r2, [r3, #12]
 800b4e6:	e005      	b.n	800b4f4 <tcp_process+0x6bc>
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	613b      	str	r3, [r7, #16]
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1ef      	bne.n	800b4d4 <tcp_process+0x69c>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	60da      	str	r2, [r3, #12]
 800b4fa:	4b43      	ldr	r3, [pc, #268]	@ (800b608 <tcp_process+0x7d0>)
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	220a      	movs	r2, #10
 800b504:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b506:	4b41      	ldr	r3, [pc, #260]	@ (800b60c <tcp_process+0x7d4>)
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	60da      	str	r2, [r3, #12]
 800b50e:	4a3f      	ldr	r2, [pc, #252]	@ (800b60c <tcp_process+0x7d4>)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6013      	str	r3, [r2, #0]
 800b514:	f002 fc8e 	bl	800de34 <tcp_timer_needed>
      }
      break;
 800b518:	e06c      	b.n	800b5f4 <tcp_process+0x7bc>
    case CLOSING:
      tcp_receive(pcb);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f984 	bl	800b828 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b520:	4b3b      	ldr	r3, [pc, #236]	@ (800b610 <tcp_process+0x7d8>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	f003 0310 	and.w	r3, r3, #16
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d065      	beq.n	800b5f8 <tcp_process+0x7c0>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b530:	4b38      	ldr	r3, [pc, #224]	@ (800b614 <tcp_process+0x7dc>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	429a      	cmp	r2, r3
 800b536:	d15f      	bne.n	800b5f8 <tcp_process+0x7c0>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d15b      	bne.n	800b5f8 <tcp_process+0x7c0>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7fe fcd3 	bl	8009eec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b546:	4b35      	ldr	r3, [pc, #212]	@ (800b61c <tcp_process+0x7e4>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d105      	bne.n	800b55c <tcp_process+0x724>
 800b550:	4b32      	ldr	r3, [pc, #200]	@ (800b61c <tcp_process+0x7e4>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	4a31      	ldr	r2, [pc, #196]	@ (800b61c <tcp_process+0x7e4>)
 800b558:	6013      	str	r3, [r2, #0]
 800b55a:	e013      	b.n	800b584 <tcp_process+0x74c>
 800b55c:	4b2f      	ldr	r3, [pc, #188]	@ (800b61c <tcp_process+0x7e4>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	e00c      	b.n	800b57e <tcp_process+0x746>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d104      	bne.n	800b578 <tcp_process+0x740>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68da      	ldr	r2, [r3, #12]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	60da      	str	r2, [r3, #12]
 800b576:	e005      	b.n	800b584 <tcp_process+0x74c>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1ef      	bne.n	800b564 <tcp_process+0x72c>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	60da      	str	r2, [r3, #12]
 800b58a:	4b1f      	ldr	r3, [pc, #124]	@ (800b608 <tcp_process+0x7d0>)
 800b58c:	2201      	movs	r2, #1
 800b58e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	220a      	movs	r2, #10
 800b594:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b596:	4b1d      	ldr	r3, [pc, #116]	@ (800b60c <tcp_process+0x7d4>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	60da      	str	r2, [r3, #12]
 800b59e:	4a1b      	ldr	r2, [pc, #108]	@ (800b60c <tcp_process+0x7d4>)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	f002 fc46 	bl	800de34 <tcp_timer_needed>
      }
      break;
 800b5a8:	e026      	b.n	800b5f8 <tcp_process+0x7c0>
    case LAST_ACK:
      tcp_receive(pcb);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f93c 	bl	800b828 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b5b0:	4b17      	ldr	r3, [pc, #92]	@ (800b610 <tcp_process+0x7d8>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	f003 0310 	and.w	r3, r3, #16
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d01f      	beq.n	800b5fc <tcp_process+0x7c4>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5c0:	4b14      	ldr	r3, [pc, #80]	@ (800b614 <tcp_process+0x7dc>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d119      	bne.n	800b5fc <tcp_process+0x7c4>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d115      	bne.n	800b5fc <tcp_process+0x7c4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b5d0:	4b11      	ldr	r3, [pc, #68]	@ (800b618 <tcp_process+0x7e0>)
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	f043 0310 	orr.w	r3, r3, #16
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	4b0f      	ldr	r3, [pc, #60]	@ (800b618 <tcp_process+0x7e0>)
 800b5dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b5de:	e00d      	b.n	800b5fc <tcp_process+0x7c4>
    default:
      break;
 800b5e0:	bf00      	nop
 800b5e2:	e00c      	b.n	800b5fe <tcp_process+0x7c6>
      break;
 800b5e4:	bf00      	nop
 800b5e6:	e00a      	b.n	800b5fe <tcp_process+0x7c6>
      break;
 800b5e8:	bf00      	nop
 800b5ea:	e008      	b.n	800b5fe <tcp_process+0x7c6>
      break;
 800b5ec:	bf00      	nop
 800b5ee:	e006      	b.n	800b5fe <tcp_process+0x7c6>
      break;
 800b5f0:	bf00      	nop
 800b5f2:	e004      	b.n	800b5fe <tcp_process+0x7c6>
      break;
 800b5f4:	bf00      	nop
 800b5f6:	e002      	b.n	800b5fe <tcp_process+0x7c6>
      break;
 800b5f8:	bf00      	nop
 800b5fa:	e000      	b.n	800b5fe <tcp_process+0x7c6>
      break;
 800b5fc:	bf00      	nop
  }
  return ERR_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3724      	adds	r7, #36	@ 0x24
 800b604:	46bd      	mov	sp, r7
 800b606:	bd90      	pop	{r4, r7, pc}
 800b608:	2000b764 	.word	0x2000b764
 800b60c:	2000b760 	.word	0x2000b760
 800b610:	2000b794 	.word	0x2000b794
 800b614:	2000b78c 	.word	0x2000b78c
 800b618:	2000b795 	.word	0x2000b795
 800b61c:	2000b75c 	.word	0x2000b75c

0800b620 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b620:	b590      	push	{r4, r7, lr}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d106      	bne.n	800b63e <tcp_oos_insert_segment+0x1e>
 800b630:	4b3b      	ldr	r3, [pc, #236]	@ (800b720 <tcp_oos_insert_segment+0x100>)
 800b632:	f240 421f 	movw	r2, #1055	@ 0x41f
 800b636:	493b      	ldr	r1, [pc, #236]	@ (800b724 <tcp_oos_insert_segment+0x104>)
 800b638:	483b      	ldr	r0, [pc, #236]	@ (800b728 <tcp_oos_insert_segment+0x108>)
 800b63a:	f002 ffd1 	bl	800e5e0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	899b      	ldrh	r3, [r3, #12]
 800b644:	b29b      	uxth	r3, r3
 800b646:	4618      	mov	r0, r3
 800b648:	f7f9 f9a2 	bl	8004990 <lwip_htons>
 800b64c:	4603      	mov	r3, r0
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	f003 0301 	and.w	r3, r3, #1
 800b654:	2b00      	cmp	r3, #0
 800b656:	d028      	beq.n	800b6aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b658:	6838      	ldr	r0, [r7, #0]
 800b65a:	f7fe fa45 	bl	8009ae8 <tcp_segs_free>
    next = NULL;
 800b65e:	2300      	movs	r3, #0
 800b660:	603b      	str	r3, [r7, #0]
 800b662:	e056      	b.n	800b712 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	899b      	ldrh	r3, [r3, #12]
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7f9 f98f 	bl	8004990 <lwip_htons>
 800b672:	4603      	mov	r3, r0
 800b674:	b2db      	uxtb	r3, r3
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00d      	beq.n	800b69a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	899b      	ldrh	r3, [r3, #12]
 800b684:	b29c      	uxth	r4, r3
 800b686:	2001      	movs	r0, #1
 800b688:	f7f9 f982 	bl	8004990 <lwip_htons>
 800b68c:	4603      	mov	r3, r0
 800b68e:	461a      	mov	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	4322      	orrs	r2, r4
 800b696:	b292      	uxth	r2, r2
 800b698:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f7fe fa34 	bl	8009b12 <tcp_seg_free>
    while (next &&
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00e      	beq.n	800b6ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	891b      	ldrh	r3, [r3, #8]
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b72c <tcp_oos_insert_segment+0x10c>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	441a      	add	r2, r3
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	8909      	ldrh	r1, [r1, #8]
 800b6c6:	440b      	add	r3, r1
 800b6c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	daca      	bge.n	800b664 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d01e      	beq.n	800b712 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	891b      	ldrh	r3, [r3, #8]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4b14      	ldr	r3, [pc, #80]	@ (800b72c <tcp_oos_insert_segment+0x10c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	441a      	add	r2, r3
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	dd12      	ble.n	800b712 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	4b0d      	ldr	r3, [pc, #52]	@ (800b72c <tcp_oos_insert_segment+0x10c>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	891b      	ldrh	r3, [r3, #8]
 800b70a:	4619      	mov	r1, r3
 800b70c:	4610      	mov	r0, r2
 800b70e:	f7fc fdbf 	bl	8008290 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	601a      	str	r2, [r3, #0]
}
 800b718:	bf00      	nop
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd90      	pop	{r4, r7, pc}
 800b720:	08010f84 	.word	0x08010f84
 800b724:	0801127c 	.word	0x0801127c
 800b728:	08011008 	.word	0x08011008
 800b72c:	2000b788 	.word	0x2000b788

0800b730 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b730:	b5b0      	push	{r4, r5, r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b73e:	e03e      	b.n	800b7be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fc ffac 	bl	80086ac <pbuf_clen>
 800b754:	4603      	mov	r3, r0
 800b756:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b75e:	8a7a      	ldrh	r2, [r7, #18]
 800b760:	429a      	cmp	r2, r3
 800b762:	d906      	bls.n	800b772 <tcp_free_acked_segments+0x42>
 800b764:	4b2a      	ldr	r3, [pc, #168]	@ (800b810 <tcp_free_acked_segments+0xe0>)
 800b766:	f240 4257 	movw	r2, #1111	@ 0x457
 800b76a:	492a      	ldr	r1, [pc, #168]	@ (800b814 <tcp_free_acked_segments+0xe4>)
 800b76c:	482a      	ldr	r0, [pc, #168]	@ (800b818 <tcp_free_acked_segments+0xe8>)
 800b76e:	f002 ff37 	bl	800e5e0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800b778:	8a7b      	ldrh	r3, [r7, #18]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	891a      	ldrh	r2, [r3, #8]
 800b788:	4b24      	ldr	r3, [pc, #144]	@ (800b81c <tcp_free_acked_segments+0xec>)
 800b78a:	881b      	ldrh	r3, [r3, #0]
 800b78c:	4413      	add	r3, r2
 800b78e:	b29a      	uxth	r2, r3
 800b790:	4b22      	ldr	r3, [pc, #136]	@ (800b81c <tcp_free_acked_segments+0xec>)
 800b792:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b794:	6978      	ldr	r0, [r7, #20]
 800b796:	f7fe f9bc 	bl	8009b12 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00c      	beq.n	800b7be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d109      	bne.n	800b7be <tcp_free_acked_segments+0x8e>
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d106      	bne.n	800b7be <tcp_free_acked_segments+0x8e>
 800b7b0:	4b17      	ldr	r3, [pc, #92]	@ (800b810 <tcp_free_acked_segments+0xe0>)
 800b7b2:	f240 4261 	movw	r2, #1121	@ 0x461
 800b7b6:	491a      	ldr	r1, [pc, #104]	@ (800b820 <tcp_free_acked_segments+0xf0>)
 800b7b8:	4817      	ldr	r0, [pc, #92]	@ (800b818 <tcp_free_acked_segments+0xe8>)
 800b7ba:	f002 ff11 	bl	800e5e0 <iprintf>
  while (seg_list != NULL &&
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d020      	beq.n	800b806 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7f9 f8f6 	bl	80049bc <lwip_htonl>
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	891b      	ldrh	r3, [r3, #8]
 800b7d6:	461d      	mov	r5, r3
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	899b      	ldrh	r3, [r3, #12]
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7f9 f8d5 	bl	8004990 <lwip_htons>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	f003 0303 	and.w	r3, r3, #3
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d001      	beq.n	800b7f6 <tcp_free_acked_segments+0xc6>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <tcp_free_acked_segments+0xc8>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	442b      	add	r3, r5
 800b7fa:	18e2      	adds	r2, r4, r3
 800b7fc:	4b09      	ldr	r3, [pc, #36]	@ (800b824 <tcp_free_acked_segments+0xf4>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b802:	2b00      	cmp	r3, #0
 800b804:	dd9c      	ble.n	800b740 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b806:	68bb      	ldr	r3, [r7, #8]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bdb0      	pop	{r4, r5, r7, pc}
 800b810:	08010f84 	.word	0x08010f84
 800b814:	080112a4 	.word	0x080112a4
 800b818:	08011008 	.word	0x08011008
 800b81c:	2000b790 	.word	0x2000b790
 800b820:	080112cc 	.word	0x080112cc
 800b824:	2000b78c 	.word	0x2000b78c

0800b828 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b828:	b5b0      	push	{r4, r5, r7, lr}
 800b82a:	b094      	sub	sp, #80	@ 0x50
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d106      	bne.n	800b848 <tcp_receive+0x20>
 800b83a:	4b91      	ldr	r3, [pc, #580]	@ (800ba80 <tcp_receive+0x258>)
 800b83c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800b840:	4990      	ldr	r1, [pc, #576]	@ (800ba84 <tcp_receive+0x25c>)
 800b842:	4891      	ldr	r0, [pc, #580]	@ (800ba88 <tcp_receive+0x260>)
 800b844:	f002 fecc 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	7d1b      	ldrb	r3, [r3, #20]
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d806      	bhi.n	800b85e <tcp_receive+0x36>
 800b850:	4b8b      	ldr	r3, [pc, #556]	@ (800ba80 <tcp_receive+0x258>)
 800b852:	f240 427c 	movw	r2, #1148	@ 0x47c
 800b856:	498d      	ldr	r1, [pc, #564]	@ (800ba8c <tcp_receive+0x264>)
 800b858:	488b      	ldr	r0, [pc, #556]	@ (800ba88 <tcp_receive+0x260>)
 800b85a:	f002 fec1 	bl	800e5e0 <iprintf>

  if (flags & TCP_ACK) {
 800b85e:	4b8c      	ldr	r3, [pc, #560]	@ (800ba90 <tcp_receive+0x268>)
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	f003 0310 	and.w	r3, r3, #16
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 8264 	beq.w	800bd34 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b872:	461a      	mov	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b878:	4413      	add	r3, r2
 800b87a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b880:	4b84      	ldr	r3, [pc, #528]	@ (800ba94 <tcp_receive+0x26c>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	db1b      	blt.n	800b8c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b88e:	4b81      	ldr	r3, [pc, #516]	@ (800ba94 <tcp_receive+0x26c>)
 800b890:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b892:	429a      	cmp	r2, r3
 800b894:	d106      	bne.n	800b8a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b89a:	4b7f      	ldr	r3, [pc, #508]	@ (800ba98 <tcp_receive+0x270>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	db0e      	blt.n	800b8c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b8a8:	4b7b      	ldr	r3, [pc, #492]	@ (800ba98 <tcp_receive+0x270>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d125      	bne.n	800b8fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b8b0:	4b7a      	ldr	r3, [pc, #488]	@ (800ba9c <tcp_receive+0x274>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	89db      	ldrh	r3, [r3, #14]
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d91c      	bls.n	800b8fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b8c2:	4b76      	ldr	r3, [pc, #472]	@ (800ba9c <tcp_receive+0x274>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	89db      	ldrh	r3, [r3, #14]
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d205      	bcs.n	800b8ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800b8ec:	4b69      	ldr	r3, [pc, #420]	@ (800ba94 <tcp_receive+0x26c>)
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800b8f4:	4b68      	ldr	r3, [pc, #416]	@ (800ba98 <tcp_receive+0x270>)
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b8fc:	4b66      	ldr	r3, [pc, #408]	@ (800ba98 <tcp_receive+0x270>)
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	dc58      	bgt.n	800b9bc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b90a:	4b65      	ldr	r3, [pc, #404]	@ (800baa0 <tcp_receive+0x278>)
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d14b      	bne.n	800b9aa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800b91c:	4413      	add	r3, r2
 800b91e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b920:	429a      	cmp	r2, r3
 800b922:	d142      	bne.n	800b9aa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	db3d      	blt.n	800b9aa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b932:	4b59      	ldr	r3, [pc, #356]	@ (800ba98 <tcp_receive+0x270>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d137      	bne.n	800b9aa <tcp_receive+0x182>
              found_dupack = 1;
 800b93a:	2301      	movs	r3, #1
 800b93c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b944:	2bff      	cmp	r3, #255	@ 0xff
 800b946:	d007      	beq.n	800b958 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b94e:	3301      	adds	r3, #1
 800b950:	b2da      	uxtb	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b95e:	2b03      	cmp	r3, #3
 800b960:	d91b      	bls.n	800b99a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b96c:	4413      	add	r3, r2
 800b96e:	b29a      	uxth	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b976:	429a      	cmp	r2, r3
 800b978:	d30a      	bcc.n	800b990 <tcp_receive+0x168>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b984:	4413      	add	r3, r2
 800b986:	b29a      	uxth	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b98e:	e004      	b.n	800b99a <tcp_receive+0x172>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b996:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d902      	bls.n	800b9aa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f001 fee9 	bl	800d77c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b9aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f040 8161 	bne.w	800bc74 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b9ba:	e15b      	b.n	800bc74 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b9bc:	4b36      	ldr	r3, [pc, #216]	@ (800ba98 <tcp_receive+0x270>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f2c0 814e 	blt.w	800bc6a <tcp_receive+0x442>
 800b9ce:	4b32      	ldr	r3, [pc, #200]	@ (800ba98 <tcp_receive+0x270>)
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f300 8146 	bgt.w	800bc6a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	8b5b      	ldrh	r3, [r3, #26]
 800b9e2:	f003 0304 	and.w	r3, r3, #4
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d010      	beq.n	800ba0c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	8b5b      	ldrh	r3, [r3, #26]
 800b9ee:	f023 0304 	bic.w	r3, r3, #4
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ba1a:	10db      	asrs	r3, r3, #3
 800ba1c:	b21b      	sxth	r3, r3
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	4413      	add	r3, r2
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	b21a      	sxth	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ba34:	4b18      	ldr	r3, [pc, #96]	@ (800ba98 <tcp_receive+0x270>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800ba4c:	4b12      	ldr	r3, [pc, #72]	@ (800ba98 <tcp_receive+0x270>)
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7d1b      	ldrb	r3, [r3, #20]
 800ba58:	2b03      	cmp	r3, #3
 800ba5a:	f240 8097 	bls.w	800bb8c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d245      	bcs.n	800bafa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	8b5b      	ldrh	r3, [r3, #26]
 800ba72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d014      	beq.n	800baa4 <tcp_receive+0x27c>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e013      	b.n	800baa6 <tcp_receive+0x27e>
 800ba7e:	bf00      	nop
 800ba80:	08010f84 	.word	0x08010f84
 800ba84:	080112ec 	.word	0x080112ec
 800ba88:	08011008 	.word	0x08011008
 800ba8c:	08011308 	.word	0x08011308
 800ba90:	2000b794 	.word	0x2000b794
 800ba94:	2000b788 	.word	0x2000b788
 800ba98:	2000b78c 	.word	0x2000b78c
 800ba9c:	2000b778 	.word	0x2000b778
 800baa0:	2000b792 	.word	0x2000b792
 800baa4:	2302      	movs	r3, #2
 800baa6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800baaa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800baae:	b29a      	uxth	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bab4:	fb12 f303 	smulbb	r3, r2, r3
 800bab8:	b29b      	uxth	r3, r3
 800baba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800babc:	4293      	cmp	r3, r2
 800babe:	bf28      	it	cs
 800bac0:	4613      	movcs	r3, r2
 800bac2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800baca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bacc:	4413      	add	r3, r2
 800bace:	b29a      	uxth	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d309      	bcc.n	800baee <tcp_receive+0x2c6>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bae0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bae2:	4413      	add	r3, r2
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800baec:	e04e      	b.n	800bb8c <tcp_receive+0x364>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800baf4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800baf8:	e048      	b.n	800bb8c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bb00:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bb02:	4413      	add	r3, r2
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d309      	bcc.n	800bb24 <tcp_receive+0x2fc>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bb16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bb18:	4413      	add	r3, r2
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb22:	e004      	b.n	800bb2e <tcp_receive+0x306>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d326      	bcc.n	800bb8c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb5e:	4413      	add	r3, r2
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d30a      	bcc.n	800bb82 <tcp_receive+0x35a>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb76:	4413      	add	r3, r2
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bb80:	e004      	b.n	800bb8c <tcp_receive+0x364>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb94:	4a98      	ldr	r2, [pc, #608]	@ (800bdf8 <tcp_receive+0x5d0>)
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7ff fdca 	bl	800b730 <tcp_free_acked_segments>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbaa:	4a94      	ldr	r2, [pc, #592]	@ (800bdfc <tcp_receive+0x5d4>)
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7ff fdbf 	bl	800b730 <tcp_free_acked_segments>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d104      	bne.n	800bbca <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bbc6:	861a      	strh	r2, [r3, #48]	@ 0x30
 800bbc8:	e002      	b.n	800bbd0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d103      	bne.n	800bbe6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800bbec:	4b84      	ldr	r3, [pc, #528]	@ (800be00 <tcp_receive+0x5d8>)
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	8b5b      	ldrh	r3, [r3, #26]
 800bbfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d035      	beq.n	800bc72 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d118      	bne.n	800bc40 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00c      	beq.n	800bc30 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7f8 feca 	bl	80049bc <lwip_htonl>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	dc20      	bgt.n	800bc72 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	8b5b      	ldrh	r3, [r3, #26]
 800bc34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc3e:	e018      	b.n	800bc72 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7f8 feb5 	bl	80049bc <lwip_htonl>
 800bc52:	4603      	mov	r3, r0
 800bc54:	1ae3      	subs	r3, r4, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	dc0b      	bgt.n	800bc72 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	8b5b      	ldrh	r3, [r3, #26]
 800bc5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc68:	e003      	b.n	800bc72 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f001 ff72 	bl	800db54 <tcp_send_empty_ack>
 800bc70:	e000      	b.n	800bc74 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc72:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d05b      	beq.n	800bd34 <tcp_receive+0x50c>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc80:	4b60      	ldr	r3, [pc, #384]	@ (800be04 <tcp_receive+0x5dc>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	da54      	bge.n	800bd34 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bc8a:	4b5f      	ldr	r3, [pc, #380]	@ (800be08 <tcp_receive+0x5e0>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bc9e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bca8:	10db      	asrs	r3, r3, #3
 800bcaa:	b21b      	sxth	r3, r3
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bcc2:	4413      	add	r3, r2
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	b21a      	sxth	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800bccc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	da05      	bge.n	800bce0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bcd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bcd8:	425b      	negs	r3, r3
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bce0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bcea:	109b      	asrs	r3, r3, #2
 800bcec:	b21b      	sxth	r3, r3
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bd04:	4413      	add	r3, r2
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	b21a      	sxth	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bd14:	10db      	asrs	r3, r3, #3
 800bd16:	b21b      	sxth	r3, r3
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	4413      	add	r3, r2
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	b21a      	sxth	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bd34:	4b35      	ldr	r3, [pc, #212]	@ (800be0c <tcp_receive+0x5e4>)
 800bd36:	881b      	ldrh	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f000 84df 	beq.w	800c6fc <tcp_receive+0xed4>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	7d1b      	ldrb	r3, [r3, #20]
 800bd42:	2b06      	cmp	r3, #6
 800bd44:	f200 84da 	bhi.w	800c6fc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd4c:	4b30      	ldr	r3, [pc, #192]	@ (800be10 <tcp_receive+0x5e8>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	3b01      	subs	r3, #1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f2c0 808f 	blt.w	800be78 <tcp_receive+0x650>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd5e:	4b2b      	ldr	r3, [pc, #172]	@ (800be0c <tcp_receive+0x5e4>)
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	4619      	mov	r1, r3
 800bd64:	4b2a      	ldr	r3, [pc, #168]	@ (800be10 <tcp_receive+0x5e8>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	440b      	add	r3, r1
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f300 8082 	bgt.w	800be78 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bd74:	4b27      	ldr	r3, [pc, #156]	@ (800be14 <tcp_receive+0x5ec>)
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd7e:	4b24      	ldr	r3, [pc, #144]	@ (800be10 <tcp_receive+0x5e8>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bd86:	4b23      	ldr	r3, [pc, #140]	@ (800be14 <tcp_receive+0x5ec>)
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <tcp_receive+0x574>
 800bd8e:	4b22      	ldr	r3, [pc, #136]	@ (800be18 <tcp_receive+0x5f0>)
 800bd90:	f240 5294 	movw	r2, #1428	@ 0x594
 800bd94:	4921      	ldr	r1, [pc, #132]	@ (800be1c <tcp_receive+0x5f4>)
 800bd96:	4822      	ldr	r0, [pc, #136]	@ (800be20 <tcp_receive+0x5f8>)
 800bd98:	f002 fc22 	bl	800e5e0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d906      	bls.n	800bdb4 <tcp_receive+0x58c>
 800bda6:	4b1c      	ldr	r3, [pc, #112]	@ (800be18 <tcp_receive+0x5f0>)
 800bda8:	f240 5295 	movw	r2, #1429	@ 0x595
 800bdac:	491d      	ldr	r1, [pc, #116]	@ (800be24 <tcp_receive+0x5fc>)
 800bdae:	481c      	ldr	r0, [pc, #112]	@ (800be20 <tcp_receive+0x5f8>)
 800bdb0:	f002 fc16 	bl	800e5e0 <iprintf>
      off = (u16_t)off32;
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bdba:	4b16      	ldr	r3, [pc, #88]	@ (800be14 <tcp_receive+0x5ec>)
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	891b      	ldrh	r3, [r3, #8]
 800bdc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d906      	bls.n	800bdd6 <tcp_receive+0x5ae>
 800bdc8:	4b13      	ldr	r3, [pc, #76]	@ (800be18 <tcp_receive+0x5f0>)
 800bdca:	f240 5297 	movw	r2, #1431	@ 0x597
 800bdce:	4916      	ldr	r1, [pc, #88]	@ (800be28 <tcp_receive+0x600>)
 800bdd0:	4813      	ldr	r0, [pc, #76]	@ (800be20 <tcp_receive+0x5f8>)
 800bdd2:	f002 fc05 	bl	800e5e0 <iprintf>
      inseg.len -= off;
 800bdd6:	4b0f      	ldr	r3, [pc, #60]	@ (800be14 <tcp_receive+0x5ec>)
 800bdd8:	891a      	ldrh	r2, [r3, #8]
 800bdda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	4b0c      	ldr	r3, [pc, #48]	@ (800be14 <tcp_receive+0x5ec>)
 800bde4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bde6:	4b0b      	ldr	r3, [pc, #44]	@ (800be14 <tcp_receive+0x5ec>)
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	891a      	ldrh	r2, [r3, #8]
 800bdec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800bdf4:	e02a      	b.n	800be4c <tcp_receive+0x624>
 800bdf6:	bf00      	nop
 800bdf8:	08011324 	.word	0x08011324
 800bdfc:	0801132c 	.word	0x0801132c
 800be00:	2000b790 	.word	0x2000b790
 800be04:	2000b78c 	.word	0x2000b78c
 800be08:	2000b750 	.word	0x2000b750
 800be0c:	2000b792 	.word	0x2000b792
 800be10:	2000b788 	.word	0x2000b788
 800be14:	2000b768 	.word	0x2000b768
 800be18:	08010f84 	.word	0x08010f84
 800be1c:	08011334 	.word	0x08011334
 800be20:	08011008 	.word	0x08011008
 800be24:	08011344 	.word	0x08011344
 800be28:	08011354 	.word	0x08011354
        off -= p->len;
 800be2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be2e:	895b      	ldrh	r3, [r3, #10]
 800be30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800be3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be3c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800be3e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800be40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be42:	2200      	movs	r2, #0
 800be44:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800be46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800be4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be4e:	895b      	ldrh	r3, [r3, #10]
 800be50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800be54:	429a      	cmp	r2, r3
 800be56:	d8e9      	bhi.n	800be2c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800be58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be5c:	4619      	mov	r1, r3
 800be5e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800be60:	f7fc fb16 	bl	8008490 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be68:	4a90      	ldr	r2, [pc, #576]	@ (800c0ac <tcp_receive+0x884>)
 800be6a:	6013      	str	r3, [r2, #0]
 800be6c:	4b90      	ldr	r3, [pc, #576]	@ (800c0b0 <tcp_receive+0x888>)
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	4a8e      	ldr	r2, [pc, #568]	@ (800c0ac <tcp_receive+0x884>)
 800be72:	6812      	ldr	r2, [r2, #0]
 800be74:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800be76:	e00d      	b.n	800be94 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800be78:	4b8c      	ldr	r3, [pc, #560]	@ (800c0ac <tcp_receive+0x884>)
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	da06      	bge.n	800be94 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	8b5b      	ldrh	r3, [r3, #26]
 800be8a:	f043 0302 	orr.w	r3, r3, #2
 800be8e:	b29a      	uxth	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be94:	4b85      	ldr	r3, [pc, #532]	@ (800c0ac <tcp_receive+0x884>)
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f2c0 8427 	blt.w	800c6f2 <tcp_receive+0xeca>
 800bea4:	4b81      	ldr	r3, [pc, #516]	@ (800c0ac <tcp_receive+0x884>)
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beac:	6879      	ldr	r1, [r7, #4]
 800beae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800beb0:	440b      	add	r3, r1
 800beb2:	1ad3      	subs	r3, r2, r3
 800beb4:	3301      	adds	r3, #1
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f300 841b 	bgt.w	800c6f2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bec0:	4b7a      	ldr	r3, [pc, #488]	@ (800c0ac <tcp_receive+0x884>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	f040 8298 	bne.w	800c3fa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800beca:	4b79      	ldr	r3, [pc, #484]	@ (800c0b0 <tcp_receive+0x888>)
 800becc:	891c      	ldrh	r4, [r3, #8]
 800bece:	4b78      	ldr	r3, [pc, #480]	@ (800c0b0 <tcp_receive+0x888>)
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	899b      	ldrh	r3, [r3, #12]
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f8 fd5a 	bl	8004990 <lwip_htons>
 800bedc:	4603      	mov	r3, r0
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	f003 0303 	and.w	r3, r3, #3
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d001      	beq.n	800beec <tcp_receive+0x6c4>
 800bee8:	2301      	movs	r3, #1
 800beea:	e000      	b.n	800beee <tcp_receive+0x6c6>
 800beec:	2300      	movs	r3, #0
 800beee:	4423      	add	r3, r4
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	4b70      	ldr	r3, [pc, #448]	@ (800c0b4 <tcp_receive+0x88c>)
 800bef4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800befa:	4b6e      	ldr	r3, [pc, #440]	@ (800c0b4 <tcp_receive+0x88c>)
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d274      	bcs.n	800bfec <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bf02:	4b6b      	ldr	r3, [pc, #428]	@ (800c0b0 <tcp_receive+0x888>)
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	899b      	ldrh	r3, [r3, #12]
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7f8 fd40 	bl	8004990 <lwip_htons>
 800bf10:	4603      	mov	r3, r0
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	f003 0301 	and.w	r3, r3, #1
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d01e      	beq.n	800bf5a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bf1c:	4b64      	ldr	r3, [pc, #400]	@ (800c0b0 <tcp_receive+0x888>)
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	899b      	ldrh	r3, [r3, #12]
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	b21b      	sxth	r3, r3
 800bf26:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bf2a:	b21c      	sxth	r4, r3
 800bf2c:	4b60      	ldr	r3, [pc, #384]	@ (800c0b0 <tcp_receive+0x888>)
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	899b      	ldrh	r3, [r3, #12]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7f8 fd2b 	bl	8004990 <lwip_htons>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7f8 fd23 	bl	8004990 <lwip_htons>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	b21b      	sxth	r3, r3
 800bf4e:	4323      	orrs	r3, r4
 800bf50:	b21a      	sxth	r2, r3
 800bf52:	4b57      	ldr	r3, [pc, #348]	@ (800c0b0 <tcp_receive+0x888>)
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	b292      	uxth	r2, r2
 800bf58:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bf5e:	4b54      	ldr	r3, [pc, #336]	@ (800c0b0 <tcp_receive+0x888>)
 800bf60:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bf62:	4b53      	ldr	r3, [pc, #332]	@ (800c0b0 <tcp_receive+0x888>)
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	899b      	ldrh	r3, [r3, #12]
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7f8 fd10 	bl	8004990 <lwip_htons>
 800bf70:	4603      	mov	r3, r0
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	f003 0302 	and.w	r3, r3, #2
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d005      	beq.n	800bf88 <tcp_receive+0x760>
            inseg.len -= 1;
 800bf7c:	4b4c      	ldr	r3, [pc, #304]	@ (800c0b0 <tcp_receive+0x888>)
 800bf7e:	891b      	ldrh	r3, [r3, #8]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	4b4a      	ldr	r3, [pc, #296]	@ (800c0b0 <tcp_receive+0x888>)
 800bf86:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bf88:	4b49      	ldr	r3, [pc, #292]	@ (800c0b0 <tcp_receive+0x888>)
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	4a48      	ldr	r2, [pc, #288]	@ (800c0b0 <tcp_receive+0x888>)
 800bf8e:	8912      	ldrh	r2, [r2, #8]
 800bf90:	4611      	mov	r1, r2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fc f97c 	bl	8008290 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bf98:	4b45      	ldr	r3, [pc, #276]	@ (800c0b0 <tcp_receive+0x888>)
 800bf9a:	891c      	ldrh	r4, [r3, #8]
 800bf9c:	4b44      	ldr	r3, [pc, #272]	@ (800c0b0 <tcp_receive+0x888>)
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	899b      	ldrh	r3, [r3, #12]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7f8 fcf3 	bl	8004990 <lwip_htons>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	f003 0303 	and.w	r3, r3, #3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <tcp_receive+0x792>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e000      	b.n	800bfbc <tcp_receive+0x794>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	4423      	add	r3, r4
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	4b3c      	ldr	r3, [pc, #240]	@ (800c0b4 <tcp_receive+0x88c>)
 800bfc2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bfc4:	4b3b      	ldr	r3, [pc, #236]	@ (800c0b4 <tcp_receive+0x88c>)
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	4b38      	ldr	r3, [pc, #224]	@ (800c0ac <tcp_receive+0x884>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	441a      	add	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bfd8:	440b      	add	r3, r1
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d006      	beq.n	800bfec <tcp_receive+0x7c4>
 800bfde:	4b36      	ldr	r3, [pc, #216]	@ (800c0b8 <tcp_receive+0x890>)
 800bfe0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800bfe4:	4935      	ldr	r1, [pc, #212]	@ (800c0bc <tcp_receive+0x894>)
 800bfe6:	4836      	ldr	r0, [pc, #216]	@ (800c0c0 <tcp_receive+0x898>)
 800bfe8:	f002 fafa 	bl	800e5e0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f000 80e6 	beq.w	800c1c2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bff6:	4b2e      	ldr	r3, [pc, #184]	@ (800c0b0 <tcp_receive+0x888>)
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	899b      	ldrh	r3, [r3, #12]
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	4618      	mov	r0, r3
 800c000:	f7f8 fcc6 	bl	8004990 <lwip_htons>
 800c004:	4603      	mov	r3, r0
 800c006:	b2db      	uxtb	r3, r3
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d010      	beq.n	800c032 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c010:	e00a      	b.n	800c028 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c016:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7fd fd75 	bl	8009b12 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1f0      	bne.n	800c012 <tcp_receive+0x7ea>
 800c030:	e0c7      	b.n	800c1c2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c036:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c038:	e051      	b.n	800c0de <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	899b      	ldrh	r3, [r3, #12]
 800c040:	b29b      	uxth	r3, r3
 800c042:	4618      	mov	r0, r3
 800c044:	f7f8 fca4 	bl	8004990 <lwip_htons>
 800c048:	4603      	mov	r3, r0
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b00      	cmp	r3, #0
 800c052:	d03c      	beq.n	800c0ce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c054:	4b16      	ldr	r3, [pc, #88]	@ (800c0b0 <tcp_receive+0x888>)
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	899b      	ldrh	r3, [r3, #12]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7f8 fc97 	bl	8004990 <lwip_htons>
 800c062:	4603      	mov	r3, r0
 800c064:	b2db      	uxtb	r3, r3
 800c066:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d12f      	bne.n	800c0ce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c06e:	4b10      	ldr	r3, [pc, #64]	@ (800c0b0 <tcp_receive+0x888>)
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	899b      	ldrh	r3, [r3, #12]
 800c074:	b29c      	uxth	r4, r3
 800c076:	2001      	movs	r0, #1
 800c078:	f7f8 fc8a 	bl	8004990 <lwip_htons>
 800c07c:	4603      	mov	r3, r0
 800c07e:	461a      	mov	r2, r3
 800c080:	4b0b      	ldr	r3, [pc, #44]	@ (800c0b0 <tcp_receive+0x888>)
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	4322      	orrs	r2, r4
 800c086:	b292      	uxth	r2, r2
 800c088:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c08a:	4b09      	ldr	r3, [pc, #36]	@ (800c0b0 <tcp_receive+0x888>)
 800c08c:	891c      	ldrh	r4, [r3, #8]
 800c08e:	4b08      	ldr	r3, [pc, #32]	@ (800c0b0 <tcp_receive+0x888>)
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	899b      	ldrh	r3, [r3, #12]
 800c094:	b29b      	uxth	r3, r3
 800c096:	4618      	mov	r0, r3
 800c098:	f7f8 fc7a 	bl	8004990 <lwip_htons>
 800c09c:	4603      	mov	r3, r0
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	f003 0303 	and.w	r3, r3, #3
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00d      	beq.n	800c0c4 <tcp_receive+0x89c>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e00c      	b.n	800c0c6 <tcp_receive+0x89e>
 800c0ac:	2000b788 	.word	0x2000b788
 800c0b0:	2000b768 	.word	0x2000b768
 800c0b4:	2000b792 	.word	0x2000b792
 800c0b8:	08010f84 	.word	0x08010f84
 800c0bc:	08011364 	.word	0x08011364
 800c0c0:	08011008 	.word	0x08011008
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4423      	add	r3, r4
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	4b98      	ldr	r3, [pc, #608]	@ (800c32c <tcp_receive+0xb04>)
 800c0cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c0d8:	6938      	ldr	r0, [r7, #16]
 800c0da:	f7fd fd1a 	bl	8009b12 <tcp_seg_free>
            while (next &&
 800c0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00e      	beq.n	800c102 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c0e4:	4b91      	ldr	r3, [pc, #580]	@ (800c32c <tcp_receive+0xb04>)
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	4b91      	ldr	r3, [pc, #580]	@ (800c330 <tcp_receive+0xb08>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	441a      	add	r2, r3
 800c0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0f8:	8909      	ldrh	r1, [r1, #8]
 800c0fa:	440b      	add	r3, r1
 800c0fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	da9b      	bge.n	800c03a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c104:	2b00      	cmp	r3, #0
 800c106:	d059      	beq.n	800c1bc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c108:	4b88      	ldr	r3, [pc, #544]	@ (800c32c <tcp_receive+0xb04>)
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	461a      	mov	r2, r3
 800c10e:	4b88      	ldr	r3, [pc, #544]	@ (800c330 <tcp_receive+0xb08>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	441a      	add	r2, r3
 800c114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dd4d      	ble.n	800c1bc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	b29a      	uxth	r2, r3
 800c128:	4b81      	ldr	r3, [pc, #516]	@ (800c330 <tcp_receive+0xb08>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	b29a      	uxth	r2, r3
 800c132:	4b80      	ldr	r3, [pc, #512]	@ (800c334 <tcp_receive+0xb0c>)
 800c134:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c136:	4b7f      	ldr	r3, [pc, #508]	@ (800c334 <tcp_receive+0xb0c>)
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	899b      	ldrh	r3, [r3, #12]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	4618      	mov	r0, r3
 800c140:	f7f8 fc26 	bl	8004990 <lwip_htons>
 800c144:	4603      	mov	r3, r0
 800c146:	b2db      	uxtb	r3, r3
 800c148:	f003 0302 	and.w	r3, r3, #2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d005      	beq.n	800c15c <tcp_receive+0x934>
                inseg.len -= 1;
 800c150:	4b78      	ldr	r3, [pc, #480]	@ (800c334 <tcp_receive+0xb0c>)
 800c152:	891b      	ldrh	r3, [r3, #8]
 800c154:	3b01      	subs	r3, #1
 800c156:	b29a      	uxth	r2, r3
 800c158:	4b76      	ldr	r3, [pc, #472]	@ (800c334 <tcp_receive+0xb0c>)
 800c15a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c15c:	4b75      	ldr	r3, [pc, #468]	@ (800c334 <tcp_receive+0xb0c>)
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	4a74      	ldr	r2, [pc, #464]	@ (800c334 <tcp_receive+0xb0c>)
 800c162:	8912      	ldrh	r2, [r2, #8]
 800c164:	4611      	mov	r1, r2
 800c166:	4618      	mov	r0, r3
 800c168:	f7fc f892 	bl	8008290 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c16c:	4b71      	ldr	r3, [pc, #452]	@ (800c334 <tcp_receive+0xb0c>)
 800c16e:	891c      	ldrh	r4, [r3, #8]
 800c170:	4b70      	ldr	r3, [pc, #448]	@ (800c334 <tcp_receive+0xb0c>)
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	899b      	ldrh	r3, [r3, #12]
 800c176:	b29b      	uxth	r3, r3
 800c178:	4618      	mov	r0, r3
 800c17a:	f7f8 fc09 	bl	8004990 <lwip_htons>
 800c17e:	4603      	mov	r3, r0
 800c180:	b2db      	uxtb	r3, r3
 800c182:	f003 0303 	and.w	r3, r3, #3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <tcp_receive+0x966>
 800c18a:	2301      	movs	r3, #1
 800c18c:	e000      	b.n	800c190 <tcp_receive+0x968>
 800c18e:	2300      	movs	r3, #0
 800c190:	4423      	add	r3, r4
 800c192:	b29a      	uxth	r2, r3
 800c194:	4b65      	ldr	r3, [pc, #404]	@ (800c32c <tcp_receive+0xb04>)
 800c196:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c198:	4b64      	ldr	r3, [pc, #400]	@ (800c32c <tcp_receive+0xb04>)
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	461a      	mov	r2, r3
 800c19e:	4b64      	ldr	r3, [pc, #400]	@ (800c330 <tcp_receive+0xb08>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	441a      	add	r2, r3
 800c1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d006      	beq.n	800c1bc <tcp_receive+0x994>
 800c1ae:	4b62      	ldr	r3, [pc, #392]	@ (800c338 <tcp_receive+0xb10>)
 800c1b0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c1b4:	4961      	ldr	r1, [pc, #388]	@ (800c33c <tcp_receive+0xb14>)
 800c1b6:	4862      	ldr	r0, [pc, #392]	@ (800c340 <tcp_receive+0xb18>)
 800c1b8:	f002 fa12 	bl	800e5e0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c1c0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c1c2:	4b5a      	ldr	r3, [pc, #360]	@ (800c32c <tcp_receive+0xb04>)
 800c1c4:	881b      	ldrh	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	4b59      	ldr	r3, [pc, #356]	@ (800c330 <tcp_receive+0xb08>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	441a      	add	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c1d6:	4b55      	ldr	r3, [pc, #340]	@ (800c32c <tcp_receive+0xb04>)
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d206      	bcs.n	800c1ec <tcp_receive+0x9c4>
 800c1de:	4b56      	ldr	r3, [pc, #344]	@ (800c338 <tcp_receive+0xb10>)
 800c1e0:	f240 6207 	movw	r2, #1543	@ 0x607
 800c1e4:	4957      	ldr	r1, [pc, #348]	@ (800c344 <tcp_receive+0xb1c>)
 800c1e6:	4856      	ldr	r0, [pc, #344]	@ (800c340 <tcp_receive+0xb18>)
 800c1e8:	f002 f9fa 	bl	800e5e0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c1f0:	4b4e      	ldr	r3, [pc, #312]	@ (800c32c <tcp_receive+0xb04>)
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	1ad3      	subs	r3, r2, r3
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7fc ffa3 	bl	8009148 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c202:	4b4c      	ldr	r3, [pc, #304]	@ (800c334 <tcp_receive+0xb0c>)
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	891b      	ldrh	r3, [r3, #8]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d006      	beq.n	800c21a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c20c:	4b49      	ldr	r3, [pc, #292]	@ (800c334 <tcp_receive+0xb0c>)
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	4a4d      	ldr	r2, [pc, #308]	@ (800c348 <tcp_receive+0xb20>)
 800c212:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c214:	4b47      	ldr	r3, [pc, #284]	@ (800c334 <tcp_receive+0xb0c>)
 800c216:	2200      	movs	r2, #0
 800c218:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c21a:	4b46      	ldr	r3, [pc, #280]	@ (800c334 <tcp_receive+0xb0c>)
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	899b      	ldrh	r3, [r3, #12]
 800c220:	b29b      	uxth	r3, r3
 800c222:	4618      	mov	r0, r3
 800c224:	f7f8 fbb4 	bl	8004990 <lwip_htons>
 800c228:	4603      	mov	r3, r0
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	f003 0301 	and.w	r3, r3, #1
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 80b8 	beq.w	800c3a6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c236:	4b45      	ldr	r3, [pc, #276]	@ (800c34c <tcp_receive+0xb24>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	f043 0320 	orr.w	r3, r3, #32
 800c23e:	b2da      	uxtb	r2, r3
 800c240:	4b42      	ldr	r3, [pc, #264]	@ (800c34c <tcp_receive+0xb24>)
 800c242:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c244:	e0af      	b.n	800c3a6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c24a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	4a36      	ldr	r2, [pc, #216]	@ (800c330 <tcp_receive+0xb08>)
 800c256:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	891b      	ldrh	r3, [r3, #8]
 800c25c:	461c      	mov	r4, r3
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	899b      	ldrh	r3, [r3, #12]
 800c264:	b29b      	uxth	r3, r3
 800c266:	4618      	mov	r0, r3
 800c268:	f7f8 fb92 	bl	8004990 <lwip_htons>
 800c26c:	4603      	mov	r3, r0
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	f003 0303 	and.w	r3, r3, #3
 800c274:	2b00      	cmp	r3, #0
 800c276:	d001      	beq.n	800c27c <tcp_receive+0xa54>
 800c278:	2301      	movs	r3, #1
 800c27a:	e000      	b.n	800c27e <tcp_receive+0xa56>
 800c27c:	2300      	movs	r3, #0
 800c27e:	191a      	adds	r2, r3, r4
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c284:	441a      	add	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c28e:	461c      	mov	r4, r3
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	891b      	ldrh	r3, [r3, #8]
 800c294:	461d      	mov	r5, r3
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	899b      	ldrh	r3, [r3, #12]
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7f8 fb76 	bl	8004990 <lwip_htons>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	f003 0303 	and.w	r3, r3, #3
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <tcp_receive+0xa8c>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e000      	b.n	800c2b6 <tcp_receive+0xa8e>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	442b      	add	r3, r5
 800c2b8:	429c      	cmp	r4, r3
 800c2ba:	d206      	bcs.n	800c2ca <tcp_receive+0xaa2>
 800c2bc:	4b1e      	ldr	r3, [pc, #120]	@ (800c338 <tcp_receive+0xb10>)
 800c2be:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c2c2:	4923      	ldr	r1, [pc, #140]	@ (800c350 <tcp_receive+0xb28>)
 800c2c4:	481e      	ldr	r0, [pc, #120]	@ (800c340 <tcp_receive+0xb18>)
 800c2c6:	f002 f98b 	bl	800e5e0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	891b      	ldrh	r3, [r3, #8]
 800c2ce:	461c      	mov	r4, r3
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	899b      	ldrh	r3, [r3, #12]
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7f8 fb59 	bl	8004990 <lwip_htons>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	f003 0303 	and.w	r3, r3, #3
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <tcp_receive+0xac6>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e000      	b.n	800c2f0 <tcp_receive+0xac8>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	1919      	adds	r1, r3, r4
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c2f6:	b28b      	uxth	r3, r1
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7fc ff21 	bl	8009148 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	891b      	ldrh	r3, [r3, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d028      	beq.n	800c362 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c310:	4b0d      	ldr	r3, [pc, #52]	@ (800c348 <tcp_receive+0xb20>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d01d      	beq.n	800c354 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c318:	4b0b      	ldr	r3, [pc, #44]	@ (800c348 <tcp_receive+0xb20>)
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	4619      	mov	r1, r3
 800c322:	4610      	mov	r0, r2
 800c324:	f7fc f9fc 	bl	8008720 <pbuf_cat>
 800c328:	e018      	b.n	800c35c <tcp_receive+0xb34>
 800c32a:	bf00      	nop
 800c32c:	2000b792 	.word	0x2000b792
 800c330:	2000b788 	.word	0x2000b788
 800c334:	2000b768 	.word	0x2000b768
 800c338:	08010f84 	.word	0x08010f84
 800c33c:	0801139c 	.word	0x0801139c
 800c340:	08011008 	.word	0x08011008
 800c344:	080113d8 	.word	0x080113d8
 800c348:	2000b798 	.word	0x2000b798
 800c34c:	2000b795 	.word	0x2000b795
 800c350:	080113f8 	.word	0x080113f8
            } else {
              recv_data = cseg->p;
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	4a70      	ldr	r2, [pc, #448]	@ (800c51c <tcp_receive+0xcf4>)
 800c35a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2200      	movs	r2, #0
 800c360:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	899b      	ldrh	r3, [r3, #12]
 800c368:	b29b      	uxth	r3, r3
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7f8 fb10 	bl	8004990 <lwip_htons>
 800c370:	4603      	mov	r3, r0
 800c372:	b2db      	uxtb	r3, r3
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00d      	beq.n	800c398 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c37c:	4b68      	ldr	r3, [pc, #416]	@ (800c520 <tcp_receive+0xcf8>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	f043 0320 	orr.w	r3, r3, #32
 800c384:	b2da      	uxtb	r2, r3
 800c386:	4b66      	ldr	r3, [pc, #408]	@ (800c520 <tcp_receive+0xcf8>)
 800c388:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	7d1b      	ldrb	r3, [r3, #20]
 800c38e:	2b04      	cmp	r3, #4
 800c390:	d102      	bne.n	800c398 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2207      	movs	r2, #7
 800c396:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c3a0:	68b8      	ldr	r0, [r7, #8]
 800c3a2:	f7fd fbb6 	bl	8009b12 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d008      	beq.n	800c3c0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	f43f af43 	beq.w	800c246 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	8b5b      	ldrh	r3, [r3, #26]
 800c3c4:	f003 0301 	and.w	r3, r3, #1
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00e      	beq.n	800c3ea <tcp_receive+0xbc2>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	8b5b      	ldrh	r3, [r3, #26]
 800c3d0:	f023 0301 	bic.w	r3, r3, #1
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	835a      	strh	r2, [r3, #26]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	8b5b      	ldrh	r3, [r3, #26]
 800c3de:	f043 0302 	orr.w	r3, r3, #2
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c3e8:	e187      	b.n	800c6fa <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	8b5b      	ldrh	r3, [r3, #26]
 800c3ee:	f043 0301 	orr.w	r3, r3, #1
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c3f8:	e17f      	b.n	800c6fa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d106      	bne.n	800c410 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c402:	4848      	ldr	r0, [pc, #288]	@ (800c524 <tcp_receive+0xcfc>)
 800c404:	f7fd fb9e 	bl	8009b44 <tcp_seg_copy>
 800c408:	4602      	mov	r2, r0
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	675a      	str	r2, [r3, #116]	@ 0x74
 800c40e:	e16c      	b.n	800c6ea <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c410:	2300      	movs	r3, #0
 800c412:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c418:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c41a:	e156      	b.n	800c6ca <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800c41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	4b41      	ldr	r3, [pc, #260]	@ (800c528 <tcp_receive+0xd00>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	429a      	cmp	r2, r3
 800c428:	d11d      	bne.n	800c466 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c42a:	4b3e      	ldr	r3, [pc, #248]	@ (800c524 <tcp_receive+0xcfc>)
 800c42c:	891a      	ldrh	r2, [r3, #8]
 800c42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c430:	891b      	ldrh	r3, [r3, #8]
 800c432:	429a      	cmp	r2, r3
 800c434:	f240 814e 	bls.w	800c6d4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c438:	483a      	ldr	r0, [pc, #232]	@ (800c524 <tcp_receive+0xcfc>)
 800c43a:	f7fd fb83 	bl	8009b44 <tcp_seg_copy>
 800c43e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 8148 	beq.w	800c6d8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800c448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d003      	beq.n	800c456 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c450:	697a      	ldr	r2, [r7, #20]
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	e002      	b.n	800c45c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	697a      	ldr	r2, [r7, #20]
 800c45a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c45c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c45e:	6978      	ldr	r0, [r7, #20]
 800c460:	f7ff f8de 	bl	800b620 <tcp_oos_insert_segment>
                }
                break;
 800c464:	e138      	b.n	800c6d8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d117      	bne.n	800c49c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c46c:	4b2e      	ldr	r3, [pc, #184]	@ (800c528 <tcp_receive+0xd00>)
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	2b00      	cmp	r3, #0
 800c47a:	da57      	bge.n	800c52c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c47c:	4829      	ldr	r0, [pc, #164]	@ (800c524 <tcp_receive+0xcfc>)
 800c47e:	f7fd fb61 	bl	8009b44 <tcp_seg_copy>
 800c482:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 8128 	beq.w	800c6dc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	69ba      	ldr	r2, [r7, #24]
 800c490:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c492:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c494:	69b8      	ldr	r0, [r7, #24]
 800c496:	f7ff f8c3 	bl	800b620 <tcp_oos_insert_segment>
                  }
                  break;
 800c49a:	e11f      	b.n	800c6dc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c49c:	4b22      	ldr	r3, [pc, #136]	@ (800c528 <tcp_receive+0xd00>)
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	db3e      	blt.n	800c52c <tcp_receive+0xd04>
 800c4ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c528 <tcp_receive+0xd00>)
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	dc35      	bgt.n	800c52c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c4c0:	4818      	ldr	r0, [pc, #96]	@ (800c524 <tcp_receive+0xcfc>)
 800c4c2:	f7fd fb3f 	bl	8009b44 <tcp_seg_copy>
 800c4c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 8108 	beq.w	800c6e0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4d8:	8912      	ldrh	r2, [r2, #8]
 800c4da:	441a      	add	r2, r3
 800c4dc:	4b12      	ldr	r3, [pc, #72]	@ (800c528 <tcp_receive+0xd00>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	dd12      	ble.n	800c50c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c4e6:	4b10      	ldr	r3, [pc, #64]	@ (800c528 <tcp_receive+0xd00>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c502:	891b      	ldrh	r3, [r3, #8]
 800c504:	4619      	mov	r1, r3
 800c506:	4610      	mov	r0, r2
 800c508:	f7fb fec2 	bl	8008290 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c50e:	69fa      	ldr	r2, [r7, #28]
 800c510:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c512:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c514:	69f8      	ldr	r0, [r7, #28]
 800c516:	f7ff f883 	bl	800b620 <tcp_oos_insert_segment>
                  }
                  break;
 800c51a:	e0e1      	b.n	800c6e0 <tcp_receive+0xeb8>
 800c51c:	2000b798 	.word	0x2000b798
 800c520:	2000b795 	.word	0x2000b795
 800c524:	2000b768 	.word	0x2000b768
 800c528:	2000b788 	.word	0x2000b788
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	f040 80c5 	bne.w	800c6c4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c53a:	4b7f      	ldr	r3, [pc, #508]	@ (800c738 <tcp_receive+0xf10>)
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c546:	2b00      	cmp	r3, #0
 800c548:	f340 80bc 	ble.w	800c6c4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	899b      	ldrh	r3, [r3, #12]
 800c552:	b29b      	uxth	r3, r3
 800c554:	4618      	mov	r0, r3
 800c556:	f7f8 fa1b 	bl	8004990 <lwip_htons>
 800c55a:	4603      	mov	r3, r0
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	f040 80be 	bne.w	800c6e4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c568:	4874      	ldr	r0, [pc, #464]	@ (800c73c <tcp_receive+0xf14>)
 800c56a:	f7fd faeb 	bl	8009b44 <tcp_seg_copy>
 800c56e:	4602      	mov	r2, r0
 800c570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c572:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 80b5 	beq.w	800c6e8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c586:	8912      	ldrh	r2, [r2, #8]
 800c588:	441a      	add	r2, r3
 800c58a:	4b6b      	ldr	r3, [pc, #428]	@ (800c738 <tcp_receive+0xf10>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	1ad3      	subs	r3, r2, r3
 800c590:	2b00      	cmp	r3, #0
 800c592:	dd12      	ble.n	800c5ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c594:	4b68      	ldr	r3, [pc, #416]	@ (800c738 <tcp_receive+0xf10>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	b29a      	uxth	r2, r3
 800c59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b0:	891b      	ldrh	r3, [r3, #8]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	f7fb fe6b 	bl	8008290 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c5ba:	4b61      	ldr	r3, [pc, #388]	@ (800c740 <tcp_receive+0xf18>)
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	4b5d      	ldr	r3, [pc, #372]	@ (800c738 <tcp_receive+0xf10>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	441a      	add	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ca:	6879      	ldr	r1, [r7, #4]
 800c5cc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c5ce:	440b      	add	r3, r1
 800c5d0:	1ad3      	subs	r3, r2, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f340 8088 	ble.w	800c6e8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	899b      	ldrh	r3, [r3, #12]
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7f8 f9d4 	bl	8004990 <lwip_htons>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d021      	beq.n	800c638 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	899b      	ldrh	r3, [r3, #12]
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	b21b      	sxth	r3, r3
 800c600:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c604:	b21c      	sxth	r4, r3
 800c606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	899b      	ldrh	r3, [r3, #12]
 800c60e:	b29b      	uxth	r3, r3
 800c610:	4618      	mov	r0, r3
 800c612:	f7f8 f9bd 	bl	8004990 <lwip_htons>
 800c616:	4603      	mov	r3, r0
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c61e:	b29b      	uxth	r3, r3
 800c620:	4618      	mov	r0, r3
 800c622:	f7f8 f9b5 	bl	8004990 <lwip_htons>
 800c626:	4603      	mov	r3, r0
 800c628:	b21b      	sxth	r3, r3
 800c62a:	4323      	orrs	r3, r4
 800c62c:	b21a      	sxth	r2, r3
 800c62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	b292      	uxth	r2, r2
 800c636:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c642:	4413      	add	r3, r2
 800c644:	b299      	uxth	r1, r3
 800c646:	4b3c      	ldr	r3, [pc, #240]	@ (800c738 <tcp_receive+0xf10>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	1a8a      	subs	r2, r1, r2
 800c652:	b292      	uxth	r2, r2
 800c654:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	891b      	ldrh	r3, [r3, #8]
 800c662:	4619      	mov	r1, r3
 800c664:	4610      	mov	r0, r2
 800c666:	f7fb fe13 	bl	8008290 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	891c      	ldrh	r4, [r3, #8]
 800c670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	899b      	ldrh	r3, [r3, #12]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7f8 f988 	bl	8004990 <lwip_htons>
 800c680:	4603      	mov	r3, r0
 800c682:	b2db      	uxtb	r3, r3
 800c684:	f003 0303 	and.w	r3, r3, #3
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d001      	beq.n	800c690 <tcp_receive+0xe68>
 800c68c:	2301      	movs	r3, #1
 800c68e:	e000      	b.n	800c692 <tcp_receive+0xe6a>
 800c690:	2300      	movs	r3, #0
 800c692:	4423      	add	r3, r4
 800c694:	b29a      	uxth	r2, r3
 800c696:	4b2a      	ldr	r3, [pc, #168]	@ (800c740 <tcp_receive+0xf18>)
 800c698:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c69a:	4b29      	ldr	r3, [pc, #164]	@ (800c740 <tcp_receive+0xf18>)
 800c69c:	881b      	ldrh	r3, [r3, #0]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	4b25      	ldr	r3, [pc, #148]	@ (800c738 <tcp_receive+0xf10>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	441a      	add	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c6ae:	440b      	add	r3, r1
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d019      	beq.n	800c6e8 <tcp_receive+0xec0>
 800c6b4:	4b23      	ldr	r3, [pc, #140]	@ (800c744 <tcp_receive+0xf1c>)
 800c6b6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800c6ba:	4923      	ldr	r1, [pc, #140]	@ (800c748 <tcp_receive+0xf20>)
 800c6bc:	4823      	ldr	r0, [pc, #140]	@ (800c74c <tcp_receive+0xf24>)
 800c6be:	f001 ff8f 	bl	800e5e0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c6c2:	e011      	b.n	800c6e8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f47f aea5 	bne.w	800c41c <tcp_receive+0xbf4>
 800c6d2:	e00a      	b.n	800c6ea <tcp_receive+0xec2>
                break;
 800c6d4:	bf00      	nop
 800c6d6:	e008      	b.n	800c6ea <tcp_receive+0xec2>
                break;
 800c6d8:	bf00      	nop
 800c6da:	e006      	b.n	800c6ea <tcp_receive+0xec2>
                  break;
 800c6dc:	bf00      	nop
 800c6de:	e004      	b.n	800c6ea <tcp_receive+0xec2>
                  break;
 800c6e0:	bf00      	nop
 800c6e2:	e002      	b.n	800c6ea <tcp_receive+0xec2>
                  break;
 800c6e4:	bf00      	nop
 800c6e6:	e000      	b.n	800c6ea <tcp_receive+0xec2>
                break;
 800c6e8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f001 fa32 	bl	800db54 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c6f0:	e003      	b.n	800c6fa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f001 fa2e 	bl	800db54 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c6f8:	e01a      	b.n	800c730 <tcp_receive+0xf08>
 800c6fa:	e019      	b.n	800c730 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c6fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c738 <tcp_receive+0xf10>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	db0a      	blt.n	800c720 <tcp_receive+0xef8>
 800c70a:	4b0b      	ldr	r3, [pc, #44]	@ (800c738 <tcp_receive+0xf10>)
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c712:	6879      	ldr	r1, [r7, #4]
 800c714:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c716:	440b      	add	r3, r1
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	3301      	adds	r3, #1
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	dd07      	ble.n	800c730 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	8b5b      	ldrh	r3, [r3, #26]
 800c724:	f043 0302 	orr.w	r3, r3, #2
 800c728:	b29a      	uxth	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c72e:	e7ff      	b.n	800c730 <tcp_receive+0xf08>
 800c730:	bf00      	nop
 800c732:	3750      	adds	r7, #80	@ 0x50
 800c734:	46bd      	mov	sp, r7
 800c736:	bdb0      	pop	{r4, r5, r7, pc}
 800c738:	2000b788 	.word	0x2000b788
 800c73c:	2000b768 	.word	0x2000b768
 800c740:	2000b792 	.word	0x2000b792
 800c744:	08010f84 	.word	0x08010f84
 800c748:	08011364 	.word	0x08011364
 800c74c:	08011008 	.word	0x08011008

0800c750 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c756:	4b15      	ldr	r3, [pc, #84]	@ (800c7ac <tcp_get_next_optbyte+0x5c>)
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	1c5a      	adds	r2, r3, #1
 800c75c:	b291      	uxth	r1, r2
 800c75e:	4a13      	ldr	r2, [pc, #76]	@ (800c7ac <tcp_get_next_optbyte+0x5c>)
 800c760:	8011      	strh	r1, [r2, #0]
 800c762:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c764:	4b12      	ldr	r3, [pc, #72]	@ (800c7b0 <tcp_get_next_optbyte+0x60>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d004      	beq.n	800c776 <tcp_get_next_optbyte+0x26>
 800c76c:	4b11      	ldr	r3, [pc, #68]	@ (800c7b4 <tcp_get_next_optbyte+0x64>)
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	88fa      	ldrh	r2, [r7, #6]
 800c772:	429a      	cmp	r2, r3
 800c774:	d208      	bcs.n	800c788 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c776:	4b10      	ldr	r3, [pc, #64]	@ (800c7b8 <tcp_get_next_optbyte+0x68>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3314      	adds	r3, #20
 800c77c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c77e:	88fb      	ldrh	r3, [r7, #6]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	4413      	add	r3, r2
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	e00b      	b.n	800c7a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c788:	88fb      	ldrh	r3, [r7, #6]
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	4b09      	ldr	r3, [pc, #36]	@ (800c7b4 <tcp_get_next_optbyte+0x64>)
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	b2db      	uxtb	r3, r3
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c796:	4b06      	ldr	r3, [pc, #24]	@ (800c7b0 <tcp_get_next_optbyte+0x60>)
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	797b      	ldrb	r3, [r7, #5]
 800c79c:	4413      	add	r3, r2
 800c79e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	2000b784 	.word	0x2000b784
 800c7b0:	2000b780 	.word	0x2000b780
 800c7b4:	2000b77e 	.word	0x2000b77e
 800c7b8:	2000b778 	.word	0x2000b778

0800c7bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d106      	bne.n	800c7d8 <tcp_parseopt+0x1c>
 800c7ca:	4b33      	ldr	r3, [pc, #204]	@ (800c898 <tcp_parseopt+0xdc>)
 800c7cc:	f240 727d 	movw	r2, #1917	@ 0x77d
 800c7d0:	4932      	ldr	r1, [pc, #200]	@ (800c89c <tcp_parseopt+0xe0>)
 800c7d2:	4833      	ldr	r0, [pc, #204]	@ (800c8a0 <tcp_parseopt+0xe4>)
 800c7d4:	f001 ff04 	bl	800e5e0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c7d8:	4b32      	ldr	r3, [pc, #200]	@ (800c8a4 <tcp_parseopt+0xe8>)
 800c7da:	881b      	ldrh	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d057      	beq.n	800c890 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c7e0:	4b31      	ldr	r3, [pc, #196]	@ (800c8a8 <tcp_parseopt+0xec>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	801a      	strh	r2, [r3, #0]
 800c7e6:	e047      	b.n	800c878 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 800c7e8:	f7ff ffb2 	bl	800c750 <tcp_get_next_optbyte>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c7f0:	7bfb      	ldrb	r3, [r7, #15]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d006      	beq.n	800c804 <tcp_parseopt+0x48>
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	dc2b      	bgt.n	800c852 <tcp_parseopt+0x96>
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d043      	beq.n	800c886 <tcp_parseopt+0xca>
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d039      	beq.n	800c876 <tcp_parseopt+0xba>
 800c802:	e026      	b.n	800c852 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c804:	f7ff ffa4 	bl	800c750 <tcp_get_next_optbyte>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b04      	cmp	r3, #4
 800c80c:	d13d      	bne.n	800c88a <tcp_parseopt+0xce>
 800c80e:	4b26      	ldr	r3, [pc, #152]	@ (800c8a8 <tcp_parseopt+0xec>)
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	3301      	adds	r3, #1
 800c814:	4a23      	ldr	r2, [pc, #140]	@ (800c8a4 <tcp_parseopt+0xe8>)
 800c816:	8812      	ldrh	r2, [r2, #0]
 800c818:	4293      	cmp	r3, r2
 800c81a:	da36      	bge.n	800c88a <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c81c:	f7ff ff98 	bl	800c750 <tcp_get_next_optbyte>
 800c820:	4603      	mov	r3, r0
 800c822:	021b      	lsls	r3, r3, #8
 800c824:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c826:	f7ff ff93 	bl	800c750 <tcp_get_next_optbyte>
 800c82a:	4603      	mov	r3, r0
 800c82c:	461a      	mov	r2, r3
 800c82e:	89bb      	ldrh	r3, [r7, #12]
 800c830:	4313      	orrs	r3, r2
 800c832:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c834:	89bb      	ldrh	r3, [r7, #12]
 800c836:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d804      	bhi.n	800c848 <tcp_parseopt+0x8c>
 800c83e:	89bb      	ldrh	r3, [r7, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <tcp_parseopt+0x8c>
 800c844:	89ba      	ldrh	r2, [r7, #12]
 800c846:	e001      	b.n	800c84c <tcp_parseopt+0x90>
 800c848:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800c850:	e012      	b.n	800c878 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c852:	f7ff ff7d 	bl	800c750 <tcp_get_next_optbyte>
 800c856:	4603      	mov	r3, r0
 800c858:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c85a:	7afb      	ldrb	r3, [r7, #11]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d916      	bls.n	800c88e <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c860:	7afb      	ldrb	r3, [r7, #11]
 800c862:	b29a      	uxth	r2, r3
 800c864:	4b10      	ldr	r3, [pc, #64]	@ (800c8a8 <tcp_parseopt+0xec>)
 800c866:	881b      	ldrh	r3, [r3, #0]
 800c868:	4413      	add	r3, r2
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	3b02      	subs	r3, #2
 800c86e:	b29a      	uxth	r2, r3
 800c870:	4b0d      	ldr	r3, [pc, #52]	@ (800c8a8 <tcp_parseopt+0xec>)
 800c872:	801a      	strh	r2, [r3, #0]
 800c874:	e000      	b.n	800c878 <tcp_parseopt+0xbc>
          break;
 800c876:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c878:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a8 <tcp_parseopt+0xec>)
 800c87a:	881a      	ldrh	r2, [r3, #0]
 800c87c:	4b09      	ldr	r3, [pc, #36]	@ (800c8a4 <tcp_parseopt+0xe8>)
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	429a      	cmp	r2, r3
 800c882:	d3b1      	bcc.n	800c7e8 <tcp_parseopt+0x2c>
 800c884:	e004      	b.n	800c890 <tcp_parseopt+0xd4>
          return;
 800c886:	bf00      	nop
 800c888:	e002      	b.n	800c890 <tcp_parseopt+0xd4>
            return;
 800c88a:	bf00      	nop
 800c88c:	e000      	b.n	800c890 <tcp_parseopt+0xd4>
            return;
 800c88e:	bf00      	nop
      }
    }
  }
}
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	08010f84 	.word	0x08010f84
 800c89c:	08011420 	.word	0x08011420
 800c8a0:	08011008 	.word	0x08011008
 800c8a4:	2000b77c 	.word	0x2000b77c
 800c8a8:	2000b784 	.word	0x2000b784

0800c8ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c8b0:	4b05      	ldr	r3, [pc, #20]	@ (800c8c8 <tcp_trigger_input_pcb_close+0x1c>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	f043 0310 	orr.w	r3, r3, #16
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	4b03      	ldr	r3, [pc, #12]	@ (800c8c8 <tcp_trigger_input_pcb_close+0x1c>)
 800c8bc:	701a      	strb	r2, [r3, #0]
}
 800c8be:	bf00      	nop
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	2000b795 	.word	0x2000b795

0800c8cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00a      	beq.n	800c8f4 <tcp_route+0x28>
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	7a1b      	ldrb	r3, [r3, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d006      	beq.n	800c8f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	7a1b      	ldrb	r3, [r3, #8]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fb fb12 	bl	8007f14 <netif_get_by_index>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	e003      	b.n	800c8fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7f9 fa41 	bl	8005d7c <ip4_route>
 800c8fa:	4603      	mov	r3, r0
  }
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c904:	b590      	push	{r4, r7, lr}
 800c906:	b087      	sub	sp, #28
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	603b      	str	r3, [r7, #0]
 800c910:	4613      	mov	r3, r2
 800c912:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d105      	bne.n	800c926 <tcp_create_segment+0x22>
 800c91a:	4b43      	ldr	r3, [pc, #268]	@ (800ca28 <tcp_create_segment+0x124>)
 800c91c:	22a3      	movs	r2, #163	@ 0xa3
 800c91e:	4943      	ldr	r1, [pc, #268]	@ (800ca2c <tcp_create_segment+0x128>)
 800c920:	4843      	ldr	r0, [pc, #268]	@ (800ca30 <tcp_create_segment+0x12c>)
 800c922:	f001 fe5d 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d105      	bne.n	800c938 <tcp_create_segment+0x34>
 800c92c:	4b3e      	ldr	r3, [pc, #248]	@ (800ca28 <tcp_create_segment+0x124>)
 800c92e:	22a4      	movs	r2, #164	@ 0xa4
 800c930:	4940      	ldr	r1, [pc, #256]	@ (800ca34 <tcp_create_segment+0x130>)
 800c932:	483f      	ldr	r0, [pc, #252]	@ (800ca30 <tcp_create_segment+0x12c>)
 800c934:	f001 fe54 	bl	800e5e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c938:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	f003 0304 	and.w	r3, r3, #4
 800c944:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c946:	2003      	movs	r0, #3
 800c948:	f7fa ff5e 	bl	8007808 <memp_malloc>
 800c94c:	6138      	str	r0, [r7, #16]
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d104      	bne.n	800c95e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c954:	68b8      	ldr	r0, [r7, #8]
 800c956:	f7fb fe21 	bl	800859c <pbuf_free>
    return NULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	e060      	b.n	800ca20 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c964:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	2200      	movs	r2, #0
 800c96a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	891a      	ldrh	r2, [r3, #8]
 800c976:	7dfb      	ldrb	r3, [r7, #23]
 800c978:	b29b      	uxth	r3, r3
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d205      	bcs.n	800c98a <tcp_create_segment+0x86>
 800c97e:	4b2a      	ldr	r3, [pc, #168]	@ (800ca28 <tcp_create_segment+0x124>)
 800c980:	22b0      	movs	r2, #176	@ 0xb0
 800c982:	492d      	ldr	r1, [pc, #180]	@ (800ca38 <tcp_create_segment+0x134>)
 800c984:	482a      	ldr	r0, [pc, #168]	@ (800ca30 <tcp_create_segment+0x12c>)
 800c986:	f001 fe2b 	bl	800e5e0 <iprintf>
  seg->len = p->tot_len - optlen;
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	891a      	ldrh	r2, [r3, #8]
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	b29b      	uxth	r3, r3
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	b29a      	uxth	r2, r3
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c99a:	2114      	movs	r1, #20
 800c99c:	68b8      	ldr	r0, [r7, #8]
 800c99e:	f7fb fd67 	bl	8008470 <pbuf_add_header>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d004      	beq.n	800c9b2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c9a8:	6938      	ldr	r0, [r7, #16]
 800c9aa:	f7fd f8b2 	bl	8009b12 <tcp_seg_free>
    return NULL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e036      	b.n	800ca20 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	8ada      	ldrh	r2, [r3, #22]
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	68dc      	ldr	r4, [r3, #12]
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	f7f7 ffe3 	bl	8004990 <lwip_htons>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	8b1a      	ldrh	r2, [r3, #24]
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	68dc      	ldr	r4, [r3, #12]
 800c9d6:	4610      	mov	r0, r2
 800c9d8:	f7f7 ffda 	bl	8004990 <lwip_htons>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	68dc      	ldr	r4, [r3, #12]
 800c9e4:	6838      	ldr	r0, [r7, #0]
 800c9e6:	f7f7 ffe9 	bl	80049bc <lwip_htonl>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	089b      	lsrs	r3, r3, #2
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	3305      	adds	r3, #5
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	031b      	lsls	r3, r3, #12
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	4313      	orrs	r3, r2
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	68dc      	ldr	r4, [r3, #12]
 800ca08:	4610      	mov	r0, r2
 800ca0a:	f7f7 ffc1 	bl	8004990 <lwip_htons>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	2200      	movs	r2, #0
 800ca18:	749a      	strb	r2, [r3, #18]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	74da      	strb	r2, [r3, #19]
  return seg;
 800ca1e:	693b      	ldr	r3, [r7, #16]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	371c      	adds	r7, #28
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd90      	pop	{r4, r7, pc}
 800ca28:	0801143c 	.word	0x0801143c
 800ca2c:	080114a8 	.word	0x080114a8
 800ca30:	080114c8 	.word	0x080114c8
 800ca34:	080114f0 	.word	0x080114f0
 800ca38:	08011514 	.word	0x08011514

0800ca3c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ca3c:	b590      	push	{r4, r7, lr}
 800ca3e:	b08b      	sub	sp, #44	@ 0x2c
 800ca40:	af02      	add	r7, sp, #8
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	460b      	mov	r3, r1
 800ca46:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	61fb      	str	r3, [r7, #28]
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ca50:	2300      	movs	r3, #0
 800ca52:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d106      	bne.n	800ca68 <tcp_split_unsent_seg+0x2c>
 800ca5a:	4b95      	ldr	r3, [pc, #596]	@ (800ccb0 <tcp_split_unsent_seg+0x274>)
 800ca5c:	f240 324b 	movw	r2, #843	@ 0x34b
 800ca60:	4994      	ldr	r1, [pc, #592]	@ (800ccb4 <tcp_split_unsent_seg+0x278>)
 800ca62:	4895      	ldr	r0, [pc, #596]	@ (800ccb8 <tcp_split_unsent_seg+0x27c>)
 800ca64:	f001 fdbc 	bl	800e5e0 <iprintf>

  useg = pcb->unsent;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca6c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d102      	bne.n	800ca7a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ca74:	f04f 33ff 	mov.w	r3, #4294967295
 800ca78:	e116      	b.n	800cca8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ca7a:	887b      	ldrh	r3, [r7, #2]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d109      	bne.n	800ca94 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ca80:	4b8b      	ldr	r3, [pc, #556]	@ (800ccb0 <tcp_split_unsent_seg+0x274>)
 800ca82:	f240 3253 	movw	r2, #851	@ 0x353
 800ca86:	498d      	ldr	r1, [pc, #564]	@ (800ccbc <tcp_split_unsent_seg+0x280>)
 800ca88:	488b      	ldr	r0, [pc, #556]	@ (800ccb8 <tcp_split_unsent_seg+0x27c>)
 800ca8a:	f001 fda9 	bl	800e5e0 <iprintf>
    return ERR_VAL;
 800ca8e:	f06f 0305 	mvn.w	r3, #5
 800ca92:	e109      	b.n	800cca8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	891b      	ldrh	r3, [r3, #8]
 800ca98:	887a      	ldrh	r2, [r7, #2]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d301      	bcc.n	800caa2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	e102      	b.n	800cca8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800caa6:	887a      	ldrh	r2, [r7, #2]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d906      	bls.n	800caba <tcp_split_unsent_seg+0x7e>
 800caac:	4b80      	ldr	r3, [pc, #512]	@ (800ccb0 <tcp_split_unsent_seg+0x274>)
 800caae:	f240 325b 	movw	r2, #859	@ 0x35b
 800cab2:	4983      	ldr	r1, [pc, #524]	@ (800ccc0 <tcp_split_unsent_seg+0x284>)
 800cab4:	4880      	ldr	r0, [pc, #512]	@ (800ccb8 <tcp_split_unsent_seg+0x27c>)
 800cab6:	f001 fd93 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	891b      	ldrh	r3, [r3, #8]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d106      	bne.n	800cad0 <tcp_split_unsent_seg+0x94>
 800cac2:	4b7b      	ldr	r3, [pc, #492]	@ (800ccb0 <tcp_split_unsent_seg+0x274>)
 800cac4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800cac8:	497e      	ldr	r1, [pc, #504]	@ (800ccc4 <tcp_split_unsent_seg+0x288>)
 800caca:	487b      	ldr	r0, [pc, #492]	@ (800ccb8 <tcp_split_unsent_seg+0x27c>)
 800cacc:	f001 fd88 	bl	800e5e0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	7a9b      	ldrb	r3, [r3, #10]
 800cad4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cad6:	7bfb      	ldrb	r3, [r7, #15]
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	f003 0304 	and.w	r3, r3, #4
 800cae0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	891a      	ldrh	r2, [r3, #8]
 800cae6:	887b      	ldrh	r3, [r7, #2]
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800caec:	7bbb      	ldrb	r3, [r7, #14]
 800caee:	b29a      	uxth	r2, r3
 800caf0:	89bb      	ldrh	r3, [r7, #12]
 800caf2:	4413      	add	r3, r2
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cafa:	4619      	mov	r1, r3
 800cafc:	2036      	movs	r0, #54	@ 0x36
 800cafe:	f7fb fa65 	bl	8007fcc <pbuf_alloc>
 800cb02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f000 80b7 	beq.w	800cc7a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	891a      	ldrh	r2, [r3, #8]
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	891b      	ldrh	r3, [r3, #8]
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	887b      	ldrh	r3, [r7, #2]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	6858      	ldr	r0, [r3, #4]
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	685a      	ldr	r2, [r3, #4]
 800cb28:	7bbb      	ldrb	r3, [r7, #14]
 800cb2a:	18d1      	adds	r1, r2, r3
 800cb2c:	897b      	ldrh	r3, [r7, #10]
 800cb2e:	89ba      	ldrh	r2, [r7, #12]
 800cb30:	f7fb ff1e 	bl	8008970 <pbuf_copy_partial>
 800cb34:	4603      	mov	r3, r0
 800cb36:	461a      	mov	r2, r3
 800cb38:	89bb      	ldrh	r3, [r7, #12]
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	f040 809f 	bne.w	800cc7e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	899b      	ldrh	r3, [r3, #12]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7f7 ff21 	bl	8004990 <lwip_htons>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb56:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cb58:	2300      	movs	r3, #0
 800cb5a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cb5c:	7efb      	ldrb	r3, [r7, #27]
 800cb5e:	f003 0308 	and.w	r3, r3, #8
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d007      	beq.n	800cb76 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cb66:	7efb      	ldrb	r3, [r7, #27]
 800cb68:	f023 0308 	bic.w	r3, r3, #8
 800cb6c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cb6e:	7ebb      	ldrb	r3, [r7, #26]
 800cb70:	f043 0308 	orr.w	r3, r3, #8
 800cb74:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cb76:	7efb      	ldrb	r3, [r7, #27]
 800cb78:	f003 0301 	and.w	r3, r3, #1
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d007      	beq.n	800cb90 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cb80:	7efb      	ldrb	r3, [r7, #27]
 800cb82:	f023 0301 	bic.w	r3, r3, #1
 800cb86:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cb88:	7ebb      	ldrb	r3, [r7, #26]
 800cb8a:	f043 0301 	orr.w	r3, r3, #1
 800cb8e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7f7 ff10 	bl	80049bc <lwip_htonl>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	887b      	ldrh	r3, [r7, #2]
 800cba0:	18d1      	adds	r1, r2, r3
 800cba2:	7eba      	ldrb	r2, [r7, #26]
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
 800cba6:	9300      	str	r3, [sp, #0]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	6939      	ldr	r1, [r7, #16]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7ff fea9 	bl	800c904 <tcp_create_segment>
 800cbb2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d063      	beq.n	800cc82 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fb fd74 	bl	80086ac <pbuf_clen>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cbce:	1a9b      	subs	r3, r3, r2
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	6858      	ldr	r0, [r3, #4]
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	891a      	ldrh	r2, [r3, #8]
 800cbe2:	89bb      	ldrh	r3, [r7, #12]
 800cbe4:	1ad3      	subs	r3, r2, r3
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	4619      	mov	r1, r3
 800cbea:	f7fb fb51 	bl	8008290 <pbuf_realloc>
  useg->len -= remainder;
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	891a      	ldrh	r2, [r3, #8]
 800cbf2:	89bb      	ldrh	r3, [r7, #12]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	899b      	ldrh	r3, [r3, #12]
 800cc02:	b29c      	uxth	r4, r3
 800cc04:	7efb      	ldrb	r3, [r7, #27]
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7f7 fec1 	bl	8004990 <lwip_htons>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	461a      	mov	r2, r3
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	4322      	orrs	r2, r4
 800cc18:	b292      	uxth	r2, r2
 800cc1a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fb fd43 	bl	80086ac <pbuf_clen>
 800cc26:	4603      	mov	r3, r0
 800cc28:	461a      	mov	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc30:	4413      	add	r3, r2
 800cc32:	b29a      	uxth	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fb fd34 	bl	80086ac <pbuf_clen>
 800cc44:	4603      	mov	r3, r0
 800cc46:	461a      	mov	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc4e:	4413      	add	r3, r2
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	69fa      	ldr	r2, [r7, #28]
 800cc64:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d103      	bne.n	800cc76 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	e016      	b.n	800cca8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cc7a:	bf00      	nop
 800cc7c:	e002      	b.n	800cc84 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cc7e:	bf00      	nop
 800cc80:	e000      	b.n	800cc84 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cc82:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d006      	beq.n	800cc98 <tcp_split_unsent_seg+0x25c>
 800cc8a:	4b09      	ldr	r3, [pc, #36]	@ (800ccb0 <tcp_split_unsent_seg+0x274>)
 800cc8c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800cc90:	490d      	ldr	r1, [pc, #52]	@ (800ccc8 <tcp_split_unsent_seg+0x28c>)
 800cc92:	4809      	ldr	r0, [pc, #36]	@ (800ccb8 <tcp_split_unsent_seg+0x27c>)
 800cc94:	f001 fca4 	bl	800e5e0 <iprintf>
  if (p != NULL) {
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d002      	beq.n	800cca4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cc9e:	6938      	ldr	r0, [r7, #16]
 800cca0:	f7fb fc7c 	bl	800859c <pbuf_free>
  }

  return ERR_MEM;
 800cca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3724      	adds	r7, #36	@ 0x24
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd90      	pop	{r4, r7, pc}
 800ccb0:	0801143c 	.word	0x0801143c
 800ccb4:	08011808 	.word	0x08011808
 800ccb8:	080114c8 	.word	0x080114c8
 800ccbc:	0801182c 	.word	0x0801182c
 800ccc0:	08011850 	.word	0x08011850
 800ccc4:	08011860 	.word	0x08011860
 800ccc8:	08011870 	.word	0x08011870

0800cccc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cccc:	b590      	push	{r4, r7, lr}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d106      	bne.n	800cce8 <tcp_send_fin+0x1c>
 800ccda:	4b21      	ldr	r3, [pc, #132]	@ (800cd60 <tcp_send_fin+0x94>)
 800ccdc:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800cce0:	4920      	ldr	r1, [pc, #128]	@ (800cd64 <tcp_send_fin+0x98>)
 800cce2:	4821      	ldr	r0, [pc, #132]	@ (800cd68 <tcp_send_fin+0x9c>)
 800cce4:	f001 fc7c 	bl	800e5e0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d02e      	beq.n	800cd4e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	e002      	b.n	800ccfe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1f8      	bne.n	800ccf8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	899b      	ldrh	r3, [r3, #12]
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7f7 fe3e 	bl	8004990 <lwip_htons>
 800cd14:	4603      	mov	r3, r0
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	f003 0307 	and.w	r3, r3, #7
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d116      	bne.n	800cd4e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	899b      	ldrh	r3, [r3, #12]
 800cd26:	b29c      	uxth	r4, r3
 800cd28:	2001      	movs	r0, #1
 800cd2a:	f7f7 fe31 	bl	8004990 <lwip_htons>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	461a      	mov	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	4322      	orrs	r2, r4
 800cd38:	b292      	uxth	r2, r2
 800cd3a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	8b5b      	ldrh	r3, [r3, #26]
 800cd40:	f043 0320 	orr.w	r3, r3, #32
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	e004      	b.n	800cd58 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cd4e:	2101      	movs	r1, #1
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f80b 	bl	800cd6c <tcp_enqueue_flags>
 800cd56:	4603      	mov	r3, r0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd90      	pop	{r4, r7, pc}
 800cd60:	0801143c 	.word	0x0801143c
 800cd64:	0801187c 	.word	0x0801187c
 800cd68:	080114c8 	.word	0x080114c8

0800cd6c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b08a      	sub	sp, #40	@ 0x28
 800cd70:	af02      	add	r7, sp, #8
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	460b      	mov	r3, r1
 800cd76:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cd80:	78fb      	ldrb	r3, [r7, #3]
 800cd82:	f003 0303 	and.w	r3, r3, #3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d106      	bne.n	800cd98 <tcp_enqueue_flags+0x2c>
 800cd8a:	4b67      	ldr	r3, [pc, #412]	@ (800cf28 <tcp_enqueue_flags+0x1bc>)
 800cd8c:	f240 4211 	movw	r2, #1041	@ 0x411
 800cd90:	4966      	ldr	r1, [pc, #408]	@ (800cf2c <tcp_enqueue_flags+0x1c0>)
 800cd92:	4867      	ldr	r0, [pc, #412]	@ (800cf30 <tcp_enqueue_flags+0x1c4>)
 800cd94:	f001 fc24 	bl	800e5e0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d106      	bne.n	800cdac <tcp_enqueue_flags+0x40>
 800cd9e:	4b62      	ldr	r3, [pc, #392]	@ (800cf28 <tcp_enqueue_flags+0x1bc>)
 800cda0:	f240 4213 	movw	r2, #1043	@ 0x413
 800cda4:	4963      	ldr	r1, [pc, #396]	@ (800cf34 <tcp_enqueue_flags+0x1c8>)
 800cda6:	4862      	ldr	r0, [pc, #392]	@ (800cf30 <tcp_enqueue_flags+0x1c4>)
 800cda8:	f001 fc1a 	bl	800e5e0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cdac:	78fb      	ldrb	r3, [r7, #3]
 800cdae:	f003 0302 	and.w	r3, r3, #2
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cdba:	7ffb      	ldrb	r3, [r7, #31]
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	f003 0304 	and.w	r3, r3, #4
 800cdc4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cdc6:	7dfb      	ldrb	r3, [r7, #23]
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cdce:	4619      	mov	r1, r3
 800cdd0:	2036      	movs	r0, #54	@ 0x36
 800cdd2:	f7fb f8fb 	bl	8007fcc <pbuf_alloc>
 800cdd6:	6138      	str	r0, [r7, #16]
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d109      	bne.n	800cdf2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	8b5b      	ldrh	r3, [r3, #26]
 800cde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cde6:	b29a      	uxth	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cdec:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf0:	e095      	b.n	800cf1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	895a      	ldrh	r2, [r3, #10]
 800cdf6:	7dfb      	ldrb	r3, [r7, #23]
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d206      	bcs.n	800ce0c <tcp_enqueue_flags+0xa0>
 800cdfe:	4b4a      	ldr	r3, [pc, #296]	@ (800cf28 <tcp_enqueue_flags+0x1bc>)
 800ce00:	f240 4239 	movw	r2, #1081	@ 0x439
 800ce04:	494c      	ldr	r1, [pc, #304]	@ (800cf38 <tcp_enqueue_flags+0x1cc>)
 800ce06:	484a      	ldr	r0, [pc, #296]	@ (800cf30 <tcp_enqueue_flags+0x1c4>)
 800ce08:	f001 fbea 	bl	800e5e0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ce10:	78fa      	ldrb	r2, [r7, #3]
 800ce12:	7ffb      	ldrb	r3, [r7, #31]
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	460b      	mov	r3, r1
 800ce18:	6939      	ldr	r1, [r7, #16]
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f7ff fd72 	bl	800c904 <tcp_create_segment>
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d109      	bne.n	800ce3c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	8b5b      	ldrh	r3, [r3, #26]
 800ce2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ce36:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3a:	e070      	b.n	800cf1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	f003 0303 	and.w	r3, r3, #3
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d006      	beq.n	800ce56 <tcp_enqueue_flags+0xea>
 800ce48:	4b37      	ldr	r3, [pc, #220]	@ (800cf28 <tcp_enqueue_flags+0x1bc>)
 800ce4a:	f240 4242 	movw	r2, #1090	@ 0x442
 800ce4e:	493b      	ldr	r1, [pc, #236]	@ (800cf3c <tcp_enqueue_flags+0x1d0>)
 800ce50:	4837      	ldr	r0, [pc, #220]	@ (800cf30 <tcp_enqueue_flags+0x1c4>)
 800ce52:	f001 fbc5 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	891b      	ldrh	r3, [r3, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d006      	beq.n	800ce6c <tcp_enqueue_flags+0x100>
 800ce5e:	4b32      	ldr	r3, [pc, #200]	@ (800cf28 <tcp_enqueue_flags+0x1bc>)
 800ce60:	f240 4243 	movw	r2, #1091	@ 0x443
 800ce64:	4936      	ldr	r1, [pc, #216]	@ (800cf40 <tcp_enqueue_flags+0x1d4>)
 800ce66:	4832      	ldr	r0, [pc, #200]	@ (800cf30 <tcp_enqueue_flags+0x1c4>)
 800ce68:	f001 fbba 	bl	800e5e0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d103      	bne.n	800ce7c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ce7a:	e00d      	b.n	800ce98 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce80:	61bb      	str	r3, [r7, #24]
 800ce82:	e002      	b.n	800ce8a <tcp_enqueue_flags+0x11e>
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	61bb      	str	r3, [r7, #24]
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1f8      	bne.n	800ce84 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cea0:	78fb      	ldrb	r3, [r7, #3]
 800cea2:	f003 0302 	and.w	r3, r3, #2
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d104      	bne.n	800ceb4 <tcp_enqueue_flags+0x148>
 800ceaa:	78fb      	ldrb	r3, [r7, #3]
 800ceac:	f003 0301 	and.w	r3, r3, #1
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d004      	beq.n	800cebe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ceb8:	1c5a      	adds	r2, r3, #1
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cebe:	78fb      	ldrb	r3, [r7, #3]
 800cec0:	f003 0301 	and.w	r3, r3, #1
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d006      	beq.n	800ced6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	8b5b      	ldrh	r3, [r3, #26]
 800cecc:	f043 0320 	orr.w	r3, r3, #32
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fb fbe6 	bl	80086ac <pbuf_clen>
 800cee0:	4603      	mov	r3, r0
 800cee2:	461a      	mov	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ceea:	4413      	add	r3, r2
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00e      	beq.n	800cf1c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10a      	bne.n	800cf1c <tcp_enqueue_flags+0x1b0>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d106      	bne.n	800cf1c <tcp_enqueue_flags+0x1b0>
 800cf0e:	4b06      	ldr	r3, [pc, #24]	@ (800cf28 <tcp_enqueue_flags+0x1bc>)
 800cf10:	f240 4265 	movw	r2, #1125	@ 0x465
 800cf14:	490b      	ldr	r1, [pc, #44]	@ (800cf44 <tcp_enqueue_flags+0x1d8>)
 800cf16:	4806      	ldr	r0, [pc, #24]	@ (800cf30 <tcp_enqueue_flags+0x1c4>)
 800cf18:	f001 fb62 	bl	800e5e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3720      	adds	r7, #32
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	0801143c 	.word	0x0801143c
 800cf2c:	08011898 	.word	0x08011898
 800cf30:	080114c8 	.word	0x080114c8
 800cf34:	080118f0 	.word	0x080118f0
 800cf38:	08011910 	.word	0x08011910
 800cf3c:	0801194c 	.word	0x0801194c
 800cf40:	08011964 	.word	0x08011964
 800cf44:	08011990 	.word	0x08011990

0800cf48 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cf48:	b5b0      	push	{r4, r5, r7, lr}
 800cf4a:	b08a      	sub	sp, #40	@ 0x28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d106      	bne.n	800cf64 <tcp_output+0x1c>
 800cf56:	4b8a      	ldr	r3, [pc, #552]	@ (800d180 <tcp_output+0x238>)
 800cf58:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800cf5c:	4989      	ldr	r1, [pc, #548]	@ (800d184 <tcp_output+0x23c>)
 800cf5e:	488a      	ldr	r0, [pc, #552]	@ (800d188 <tcp_output+0x240>)
 800cf60:	f001 fb3e 	bl	800e5e0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	7d1b      	ldrb	r3, [r3, #20]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d106      	bne.n	800cf7a <tcp_output+0x32>
 800cf6c:	4b84      	ldr	r3, [pc, #528]	@ (800d180 <tcp_output+0x238>)
 800cf6e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800cf72:	4986      	ldr	r1, [pc, #536]	@ (800d18c <tcp_output+0x244>)
 800cf74:	4884      	ldr	r0, [pc, #528]	@ (800d188 <tcp_output+0x240>)
 800cf76:	f001 fb33 	bl	800e5e0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cf7a:	4b85      	ldr	r3, [pc, #532]	@ (800d190 <tcp_output+0x248>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d101      	bne.n	800cf88 <tcp_output+0x40>
    return ERR_OK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	e1ce      	b.n	800d326 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf94:	4293      	cmp	r3, r2
 800cf96:	bf28      	it	cs
 800cf98:	4613      	movcs	r3, r2
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfa2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10b      	bne.n	800cfc2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	8b5b      	ldrh	r3, [r3, #26]
 800cfae:	f003 0302 	and.w	r3, r3, #2
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 81aa 	beq.w	800d30c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fdcb 	bl	800db54 <tcp_send_empty_ack>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	e1b1      	b.n	800d326 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cfc2:	6879      	ldr	r1, [r7, #4]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	461a      	mov	r2, r3
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff fc7e 	bl	800c8cc <tcp_route>
 800cfd0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d102      	bne.n	800cfde <tcp_output+0x96>
    return ERR_RTE;
 800cfd8:	f06f 0303 	mvn.w	r3, #3
 800cfdc:	e1a3      	b.n	800d326 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d003      	beq.n	800cfec <tcp_output+0xa4>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d111      	bne.n	800d010 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d002      	beq.n	800cff8 <tcp_output+0xb0>
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	3304      	adds	r3, #4
 800cff6:	e000      	b.n	800cffa <tcp_output+0xb2>
 800cff8:	2300      	movs	r3, #0
 800cffa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d102      	bne.n	800d008 <tcp_output+0xc0>
      return ERR_RTE;
 800d002:	f06f 0303 	mvn.w	r3, #3
 800d006:	e18e      	b.n	800d326 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	4618      	mov	r0, r3
 800d018:	f7f7 fcd0 	bl	80049bc <lwip_htonl>
 800d01c:	4602      	mov	r2, r0
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d022:	1ad3      	subs	r3, r2, r3
 800d024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d026:	8912      	ldrh	r2, [r2, #8]
 800d028:	4413      	add	r3, r2
 800d02a:	69ba      	ldr	r2, [r7, #24]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d227      	bcs.n	800d080 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d036:	461a      	mov	r2, r3
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d114      	bne.n	800d068 <tcp_output+0x120>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d042:	2b00      	cmp	r3, #0
 800d044:	d110      	bne.n	800d068 <tcp_output+0x120>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10b      	bne.n	800d068 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	8b5b      	ldrh	r3, [r3, #26]
 800d06c:	f003 0302 	and.w	r3, r3, #2
 800d070:	2b00      	cmp	r3, #0
 800d072:	f000 814d 	beq.w	800d310 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fd6c 	bl	800db54 <tcp_send_empty_ack>
 800d07c:	4603      	mov	r3, r0
 800d07e:	e152      	b.n	800d326 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d08c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	2b00      	cmp	r3, #0
 800d092:	f000 811c 	beq.w	800d2ce <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d096:	e002      	b.n	800d09e <tcp_output+0x156>
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	623b      	str	r3, [r7, #32]
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1f8      	bne.n	800d098 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d0a6:	e112      	b.n	800d2ce <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	899b      	ldrh	r3, [r3, #12]
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7f7 fc6d 	bl	8004990 <lwip_htons>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	f003 0304 	and.w	r3, r3, #4
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d006      	beq.n	800d0d0 <tcp_output+0x188>
 800d0c2:	4b2f      	ldr	r3, [pc, #188]	@ (800d180 <tcp_output+0x238>)
 800d0c4:	f240 5236 	movw	r2, #1334	@ 0x536
 800d0c8:	4932      	ldr	r1, [pc, #200]	@ (800d194 <tcp_output+0x24c>)
 800d0ca:	482f      	ldr	r0, [pc, #188]	@ (800d188 <tcp_output+0x240>)
 800d0cc:	f001 fa88 	bl	800e5e0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d01f      	beq.n	800d118 <tcp_output+0x1d0>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	8b5b      	ldrh	r3, [r3, #26]
 800d0dc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d119      	bne.n	800d118 <tcp_output+0x1d0>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00b      	beq.n	800d104 <tcp_output+0x1bc>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d110      	bne.n	800d118 <tcp_output+0x1d0>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0fa:	891a      	ldrh	r2, [r3, #8]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d100:	429a      	cmp	r2, r3
 800d102:	d209      	bcs.n	800d118 <tcp_output+0x1d0>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d004      	beq.n	800d118 <tcp_output+0x1d0>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d114:	2b08      	cmp	r3, #8
 800d116:	d901      	bls.n	800d11c <tcp_output+0x1d4>
 800d118:	2301      	movs	r3, #1
 800d11a:	e000      	b.n	800d11e <tcp_output+0x1d6>
 800d11c:	2300      	movs	r3, #0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d106      	bne.n	800d130 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	8b5b      	ldrh	r3, [r3, #26]
 800d126:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f000 80e4 	beq.w	800d2f8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	7d1b      	ldrb	r3, [r3, #20]
 800d134:	2b02      	cmp	r3, #2
 800d136:	d00d      	beq.n	800d154 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	899b      	ldrh	r3, [r3, #12]
 800d13e:	b29c      	uxth	r4, r3
 800d140:	2010      	movs	r0, #16
 800d142:	f7f7 fc25 	bl	8004990 <lwip_htons>
 800d146:	4603      	mov	r3, r0
 800d148:	461a      	mov	r2, r3
 800d14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	4322      	orrs	r2, r4
 800d150:	b292      	uxth	r2, r2
 800d152:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d154:	697a      	ldr	r2, [r7, #20]
 800d156:	6879      	ldr	r1, [r7, #4]
 800d158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d15a:	f000 f909 	bl	800d370 <tcp_output_segment>
 800d15e:	4603      	mov	r3, r0
 800d160:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d016      	beq.n	800d198 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	8b5b      	ldrh	r3, [r3, #26]
 800d16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d172:	b29a      	uxth	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	835a      	strh	r2, [r3, #26]
      return err;
 800d178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d17c:	e0d3      	b.n	800d326 <tcp_output+0x3de>
 800d17e:	bf00      	nop
 800d180:	0801143c 	.word	0x0801143c
 800d184:	080119b8 	.word	0x080119b8
 800d188:	080114c8 	.word	0x080114c8
 800d18c:	080119d0 	.word	0x080119d0
 800d190:	2000b79c 	.word	0x2000b79c
 800d194:	080119f8 	.word	0x080119f8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	7d1b      	ldrb	r3, [r3, #20]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d006      	beq.n	800d1b6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	8b5b      	ldrh	r3, [r3, #26]
 800d1ac:	f023 0303 	bic.w	r3, r3, #3
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7f7 fbfd 	bl	80049bc <lwip_htonl>
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c6:	891b      	ldrh	r3, [r3, #8]
 800d1c8:	461d      	mov	r5, r3
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	899b      	ldrh	r3, [r3, #12]
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7f7 fbdc 	bl	8004990 <lwip_htons>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	f003 0303 	and.w	r3, r3, #3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d001      	beq.n	800d1e8 <tcp_output+0x2a0>
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	e000      	b.n	800d1ea <tcp_output+0x2a2>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	442b      	add	r3, r5
 800d1ec:	4423      	add	r3, r4
 800d1ee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	da02      	bge.n	800d202 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d204:	891b      	ldrh	r3, [r3, #8]
 800d206:	461c      	mov	r4, r3
 800d208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	899b      	ldrh	r3, [r3, #12]
 800d20e:	b29b      	uxth	r3, r3
 800d210:	4618      	mov	r0, r3
 800d212:	f7f7 fbbd 	bl	8004990 <lwip_htons>
 800d216:	4603      	mov	r3, r0
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	f003 0303 	and.w	r3, r3, #3
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <tcp_output+0x2de>
 800d222:	2301      	movs	r3, #1
 800d224:	e000      	b.n	800d228 <tcp_output+0x2e0>
 800d226:	2300      	movs	r3, #0
 800d228:	4423      	add	r3, r4
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d049      	beq.n	800d2c2 <tcp_output+0x37a>
      seg->next = NULL;
 800d22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d230:	2200      	movs	r2, #0
 800d232:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d105      	bne.n	800d248 <tcp_output+0x300>
        pcb->unacked = seg;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d240:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d244:	623b      	str	r3, [r7, #32]
 800d246:	e03f      	b.n	800d2c8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	4618      	mov	r0, r3
 800d250:	f7f7 fbb4 	bl	80049bc <lwip_htonl>
 800d254:	4604      	mov	r4, r0
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7f7 fbad 	bl	80049bc <lwip_htonl>
 800d262:	4603      	mov	r3, r0
 800d264:	1ae3      	subs	r3, r4, r3
 800d266:	2b00      	cmp	r3, #0
 800d268:	da24      	bge.n	800d2b4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3370      	adds	r3, #112	@ 0x70
 800d26e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d270:	e002      	b.n	800d278 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d011      	beq.n	800d2a4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	4618      	mov	r0, r3
 800d28a:	f7f7 fb97 	bl	80049bc <lwip_htonl>
 800d28e:	4604      	mov	r4, r0
 800d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	4618      	mov	r0, r3
 800d298:	f7f7 fb90 	bl	80049bc <lwip_htonl>
 800d29c:	4603      	mov	r3, r0
 800d29e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dbe6      	blt.n	800d272 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2aa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	e009      	b.n	800d2c8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d2b4:	6a3b      	ldr	r3, [r7, #32]
 800d2b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2b8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d2ba:	6a3b      	ldr	r3, [r7, #32]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	623b      	str	r3, [r7, #32]
 800d2c0:	e002      	b.n	800d2c8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d2c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d2c4:	f7fc fc25 	bl	8009b12 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d012      	beq.n	800d2fa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7f7 fb6e 	bl	80049bc <lwip_htonl>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2ea:	8912      	ldrh	r2, [r2, #8]
 800d2ec:	4413      	add	r3, r2
  while (seg != NULL &&
 800d2ee:	69ba      	ldr	r2, [r7, #24]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	f4bf aed9 	bcs.w	800d0a8 <tcp_output+0x160>
 800d2f6:	e000      	b.n	800d2fa <tcp_output+0x3b2>
      break;
 800d2f8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d108      	bne.n	800d314 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d30a:	e004      	b.n	800d316 <tcp_output+0x3ce>
    goto output_done;
 800d30c:	bf00      	nop
 800d30e:	e002      	b.n	800d316 <tcp_output+0x3ce>
    goto output_done;
 800d310:	bf00      	nop
 800d312:	e000      	b.n	800d316 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d314:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	8b5b      	ldrh	r3, [r3, #26]
 800d31a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d31e:	b29a      	uxth	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d324:	2300      	movs	r3, #0
}
 800d326:	4618      	mov	r0, r3
 800d328:	3728      	adds	r7, #40	@ 0x28
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bdb0      	pop	{r4, r5, r7, pc}
 800d32e:	bf00      	nop

0800d330 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d106      	bne.n	800d34c <tcp_output_segment_busy+0x1c>
 800d33e:	4b09      	ldr	r3, [pc, #36]	@ (800d364 <tcp_output_segment_busy+0x34>)
 800d340:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d344:	4908      	ldr	r1, [pc, #32]	@ (800d368 <tcp_output_segment_busy+0x38>)
 800d346:	4809      	ldr	r0, [pc, #36]	@ (800d36c <tcp_output_segment_busy+0x3c>)
 800d348:	f001 f94a 	bl	800e5e0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	7b9b      	ldrb	r3, [r3, #14]
 800d352:	2b01      	cmp	r3, #1
 800d354:	d001      	beq.n	800d35a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d356:	2301      	movs	r3, #1
 800d358:	e000      	b.n	800d35c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	0801143c 	.word	0x0801143c
 800d368:	08011a10 	.word	0x08011a10
 800d36c:	080114c8 	.word	0x080114c8

0800d370 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d370:	b5b0      	push	{r4, r5, r7, lr}
 800d372:	b08c      	sub	sp, #48	@ 0x30
 800d374:	af04      	add	r7, sp, #16
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d106      	bne.n	800d390 <tcp_output_segment+0x20>
 800d382:	4b64      	ldr	r3, [pc, #400]	@ (800d514 <tcp_output_segment+0x1a4>)
 800d384:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d388:	4963      	ldr	r1, [pc, #396]	@ (800d518 <tcp_output_segment+0x1a8>)
 800d38a:	4864      	ldr	r0, [pc, #400]	@ (800d51c <tcp_output_segment+0x1ac>)
 800d38c:	f001 f928 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d106      	bne.n	800d3a4 <tcp_output_segment+0x34>
 800d396:	4b5f      	ldr	r3, [pc, #380]	@ (800d514 <tcp_output_segment+0x1a4>)
 800d398:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d39c:	4960      	ldr	r1, [pc, #384]	@ (800d520 <tcp_output_segment+0x1b0>)
 800d39e:	485f      	ldr	r0, [pc, #380]	@ (800d51c <tcp_output_segment+0x1ac>)
 800d3a0:	f001 f91e 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <tcp_output_segment+0x48>
 800d3aa:	4b5a      	ldr	r3, [pc, #360]	@ (800d514 <tcp_output_segment+0x1a4>)
 800d3ac:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d3b0:	495c      	ldr	r1, [pc, #368]	@ (800d524 <tcp_output_segment+0x1b4>)
 800d3b2:	485a      	ldr	r0, [pc, #360]	@ (800d51c <tcp_output_segment+0x1ac>)
 800d3b4:	f001 f914 	bl	800e5e0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f7ff ffb9 	bl	800d330 <tcp_output_segment_busy>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	e0a1      	b.n	800d50c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	68dc      	ldr	r4, [r3, #12]
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	f7f7 faf3 	bl	80049bc <lwip_htonl>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	68dc      	ldr	r4, [r3, #12]
 800d3e2:	4610      	mov	r0, r2
 800d3e4:	f7f7 fad4 	bl	8004990 <lwip_htons>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d3f4:	441a      	add	r2, r3
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	3314      	adds	r3, #20
 800d400:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	7a9b      	ldrb	r3, [r3, #10]
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d015      	beq.n	800d43a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	3304      	adds	r3, #4
 800d412:	461a      	mov	r2, r3
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 800d41a:	f7fc fe75 	bl	800a108 <tcp_eff_send_mss_netif>
 800d41e:	4603      	mov	r3, r0
 800d420:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d422:	8b7b      	ldrh	r3, [r7, #26]
 800d424:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d428:	4618      	mov	r0, r3
 800d42a:	f7f7 fac7 	bl	80049bc <lwip_htonl>
 800d42e:	4602      	mov	r2, r0
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	3304      	adds	r3, #4
 800d438:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d440:	2b00      	cmp	r3, #0
 800d442:	da02      	bge.n	800d44a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2200      	movs	r2, #0
 800d448:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10c      	bne.n	800d46c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d452:	4b35      	ldr	r3, [pc, #212]	@ (800d528 <tcp_output_segment+0x1b8>)
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	4618      	mov	r0, r3
 800d462:	f7f7 faab 	bl	80049bc <lwip_htonl>
 800d466:	4602      	mov	r2, r0
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	68da      	ldr	r2, [r3, #12]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	8959      	ldrh	r1, [r3, #10]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	8b3a      	ldrh	r2, [r7, #24]
 800d486:	1a8a      	subs	r2, r1, r2
 800d488:	b292      	uxth	r2, r2
 800d48a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	8919      	ldrh	r1, [r3, #8]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	8b3a      	ldrh	r2, [r7, #24]
 800d498:	1a8a      	subs	r2, r1, r2
 800d49a:	b292      	uxth	r2, r2
 800d49c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	68d2      	ldr	r2, [r2, #12]
 800d4a6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	741a      	strb	r2, [r3, #16]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	68da      	ldr	r2, [r3, #12]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	7a9b      	ldrb	r3, [r3, #10]
 800d4bc:	f003 0301 	and.w	r3, r3, #1
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <tcp_output_segment+0x158>
 800d4c4:	2318      	movs	r3, #24
 800d4c6:	e000      	b.n	800d4ca <tcp_output_segment+0x15a>
 800d4c8:	2314      	movs	r3, #20
 800d4ca:	4413      	add	r3, r2
 800d4cc:	69fa      	ldr	r2, [r7, #28]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d006      	beq.n	800d4e0 <tcp_output_segment+0x170>
 800d4d2:	4b10      	ldr	r3, [pc, #64]	@ (800d514 <tcp_output_segment+0x1a4>)
 800d4d4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d4d8:	4914      	ldr	r1, [pc, #80]	@ (800d52c <tcp_output_segment+0x1bc>)
 800d4da:	4810      	ldr	r0, [pc, #64]	@ (800d51c <tcp_output_segment+0x1ac>)
 800d4dc:	f001 f880 	bl	800e5e0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6858      	ldr	r0, [r3, #4]
 800d4e4:	68b9      	ldr	r1, [r7, #8]
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	1d1c      	adds	r4, r3, #4
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	7add      	ldrb	r5, [r3, #11]
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	7a9b      	ldrb	r3, [r3, #10]
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	9202      	str	r2, [sp, #8]
 800d4f6:	2206      	movs	r2, #6
 800d4f8:	9201      	str	r2, [sp, #4]
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	462b      	mov	r3, r5
 800d4fe:	4622      	mov	r2, r4
 800d500:	f7f8 fdfa 	bl	80060f8 <ip4_output_if>
 800d504:	4603      	mov	r3, r0
 800d506:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d508:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3720      	adds	r7, #32
 800d510:	46bd      	mov	sp, r7
 800d512:	bdb0      	pop	{r4, r5, r7, pc}
 800d514:	0801143c 	.word	0x0801143c
 800d518:	08011a38 	.word	0x08011a38
 800d51c:	080114c8 	.word	0x080114c8
 800d520:	08011a58 	.word	0x08011a58
 800d524:	08011a78 	.word	0x08011a78
 800d528:	2000b750 	.word	0x2000b750
 800d52c:	08011a9c 	.word	0x08011a9c

0800d530 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d530:	b5b0      	push	{r4, r5, r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d106      	bne.n	800d54c <tcp_rexmit_rto_prepare+0x1c>
 800d53e:	4b31      	ldr	r3, [pc, #196]	@ (800d604 <tcp_rexmit_rto_prepare+0xd4>)
 800d540:	f240 6263 	movw	r2, #1635	@ 0x663
 800d544:	4930      	ldr	r1, [pc, #192]	@ (800d608 <tcp_rexmit_rto_prepare+0xd8>)
 800d546:	4831      	ldr	r0, [pc, #196]	@ (800d60c <tcp_rexmit_rto_prepare+0xdc>)
 800d548:	f001 f84a 	bl	800e5e0 <iprintf>

  if (pcb->unacked == NULL) {
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d550:	2b00      	cmp	r3, #0
 800d552:	d102      	bne.n	800d55a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d554:	f06f 0305 	mvn.w	r3, #5
 800d558:	e050      	b.n	800d5fc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d55e:	60fb      	str	r3, [r7, #12]
 800d560:	e00b      	b.n	800d57a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	f7ff fee4 	bl	800d330 <tcp_output_segment_busy>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d002      	beq.n	800d574 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d56e:	f06f 0305 	mvn.w	r3, #5
 800d572:	e043      	b.n	800d5fc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	60fb      	str	r3, [r7, #12]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1ef      	bne.n	800d562 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d582:	68f8      	ldr	r0, [r7, #12]
 800d584:	f7ff fed4 	bl	800d330 <tcp_output_segment_busy>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d002      	beq.n	800d594 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d58e:	f06f 0305 	mvn.w	r3, #5
 800d592:	e033      	b.n	800d5fc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	8b5b      	ldrh	r3, [r3, #26]
 800d5ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7f7 f9fc 	bl	80049bc <lwip_htonl>
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	891b      	ldrh	r3, [r3, #8]
 800d5ca:	461d      	mov	r5, r3
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	899b      	ldrh	r3, [r3, #12]
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7f7 f9db 	bl	8004990 <lwip_htons>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	f003 0303 	and.w	r3, r3, #3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d001      	beq.n	800d5ea <tcp_rexmit_rto_prepare+0xba>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e000      	b.n	800d5ec <tcp_rexmit_rto_prepare+0xbc>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	442b      	add	r3, r5
 800d5ee:	18e2      	adds	r2, r4, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bdb0      	pop	{r4, r5, r7, pc}
 800d604:	0801143c 	.word	0x0801143c
 800d608:	08011ab0 	.word	0x08011ab0
 800d60c:	080114c8 	.word	0x080114c8

0800d610 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d106      	bne.n	800d62c <tcp_rexmit_rto_commit+0x1c>
 800d61e:	4b0d      	ldr	r3, [pc, #52]	@ (800d654 <tcp_rexmit_rto_commit+0x44>)
 800d620:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d624:	490c      	ldr	r1, [pc, #48]	@ (800d658 <tcp_rexmit_rto_commit+0x48>)
 800d626:	480d      	ldr	r0, [pc, #52]	@ (800d65c <tcp_rexmit_rto_commit+0x4c>)
 800d628:	f000 ffda 	bl	800e5e0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d632:	2bff      	cmp	r3, #255	@ 0xff
 800d634:	d007      	beq.n	800d646 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d63c:	3301      	adds	r3, #1
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7ff fc7e 	bl	800cf48 <tcp_output>
}
 800d64c:	bf00      	nop
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	0801143c 	.word	0x0801143c
 800d658:	08011ad4 	.word	0x08011ad4
 800d65c:	080114c8 	.word	0x080114c8

0800d660 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d106      	bne.n	800d67c <tcp_rexmit_rto+0x1c>
 800d66e:	4b0a      	ldr	r3, [pc, #40]	@ (800d698 <tcp_rexmit_rto+0x38>)
 800d670:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d674:	4909      	ldr	r1, [pc, #36]	@ (800d69c <tcp_rexmit_rto+0x3c>)
 800d676:	480a      	ldr	r0, [pc, #40]	@ (800d6a0 <tcp_rexmit_rto+0x40>)
 800d678:	f000 ffb2 	bl	800e5e0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7ff ff57 	bl	800d530 <tcp_rexmit_rto_prepare>
 800d682:	4603      	mov	r3, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d102      	bne.n	800d68e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f7ff ffc1 	bl	800d610 <tcp_rexmit_rto_commit>
  }
}
 800d68e:	bf00      	nop
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	0801143c 	.word	0x0801143c
 800d69c:	08011af8 	.word	0x08011af8
 800d6a0:	080114c8 	.word	0x080114c8

0800d6a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d6a4:	b590      	push	{r4, r7, lr}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d106      	bne.n	800d6c0 <tcp_rexmit+0x1c>
 800d6b2:	4b2f      	ldr	r3, [pc, #188]	@ (800d770 <tcp_rexmit+0xcc>)
 800d6b4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d6b8:	492e      	ldr	r1, [pc, #184]	@ (800d774 <tcp_rexmit+0xd0>)
 800d6ba:	482f      	ldr	r0, [pc, #188]	@ (800d778 <tcp_rexmit+0xd4>)
 800d6bc:	f000 ff90 	bl	800e5e0 <iprintf>

  if (pcb->unacked == NULL) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d102      	bne.n	800d6ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d6c8:	f06f 0305 	mvn.w	r3, #5
 800d6cc:	e04c      	b.n	800d768 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d6d4:	68b8      	ldr	r0, [r7, #8]
 800d6d6:	f7ff fe2b 	bl	800d330 <tcp_output_segment_busy>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d002      	beq.n	800d6e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d6e0:	f06f 0305 	mvn.w	r3, #5
 800d6e4:	e040      	b.n	800d768 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	336c      	adds	r3, #108	@ 0x6c
 800d6f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d6f4:	e002      	b.n	800d6fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d011      	beq.n	800d728 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7f7 f955 	bl	80049bc <lwip_htonl>
 800d712:	4604      	mov	r4, r0
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7f7 f94e 	bl	80049bc <lwip_htonl>
 800d720:	4603      	mov	r3, r0
 800d722:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d724:	2b00      	cmp	r3, #0
 800d726:	dbe6      	blt.n	800d6f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d103      	bne.n	800d746 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d74c:	2bff      	cmp	r3, #255	@ 0xff
 800d74e:	d007      	beq.n	800d760 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d756:	3301      	adds	r3, #1
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3714      	adds	r7, #20
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd90      	pop	{r4, r7, pc}
 800d770:	0801143c 	.word	0x0801143c
 800d774:	08011b14 	.word	0x08011b14
 800d778:	080114c8 	.word	0x080114c8

0800d77c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d106      	bne.n	800d798 <tcp_rexmit_fast+0x1c>
 800d78a:	4b2a      	ldr	r3, [pc, #168]	@ (800d834 <tcp_rexmit_fast+0xb8>)
 800d78c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d790:	4929      	ldr	r1, [pc, #164]	@ (800d838 <tcp_rexmit_fast+0xbc>)
 800d792:	482a      	ldr	r0, [pc, #168]	@ (800d83c <tcp_rexmit_fast+0xc0>)
 800d794:	f000 ff24 	bl	800e5e0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d045      	beq.n	800d82c <tcp_rexmit_fast+0xb0>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	8b5b      	ldrh	r3, [r3, #26]
 800d7a4:	f003 0304 	and.w	r3, r3, #4
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d13f      	bne.n	800d82c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7ff ff79 	bl	800d6a4 <tcp_rexmit>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d139      	bne.n	800d82c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	bf28      	it	cs
 800d7c8:	4613      	movcs	r3, r2
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	da00      	bge.n	800d7d2 <tcp_rexmit_fast+0x56>
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	105b      	asrs	r3, r3, #1
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7e8:	005b      	lsls	r3, r3, #1
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d206      	bcs.n	800d7fc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7f2:	005b      	lsls	r3, r3, #1
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d806:	4619      	mov	r1, r3
 800d808:	0049      	lsls	r1, r1, #1
 800d80a:	440b      	add	r3, r1
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	4413      	add	r3, r2
 800d810:	b29a      	uxth	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	8b5b      	ldrh	r3, [r3, #26]
 800d81c:	f043 0304 	orr.w	r3, r3, #4
 800d820:	b29a      	uxth	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d82c:	bf00      	nop
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	0801143c 	.word	0x0801143c
 800d838:	08011b2c 	.word	0x08011b2c
 800d83c:	080114c8 	.word	0x080114c8

0800d840 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	607b      	str	r3, [r7, #4]
 800d84a:	460b      	mov	r3, r1
 800d84c:	817b      	strh	r3, [r7, #10]
 800d84e:	4613      	mov	r3, r2
 800d850:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d852:	897a      	ldrh	r2, [r7, #10]
 800d854:	893b      	ldrh	r3, [r7, #8]
 800d856:	4413      	add	r3, r2
 800d858:	b29b      	uxth	r3, r3
 800d85a:	3314      	adds	r3, #20
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d862:	4619      	mov	r1, r3
 800d864:	2022      	movs	r0, #34	@ 0x22
 800d866:	f7fa fbb1 	bl	8007fcc <pbuf_alloc>
 800d86a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d04d      	beq.n	800d90e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d872:	897b      	ldrh	r3, [r7, #10]
 800d874:	3313      	adds	r3, #19
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	8952      	ldrh	r2, [r2, #10]
 800d87a:	4293      	cmp	r3, r2
 800d87c:	db06      	blt.n	800d88c <tcp_output_alloc_header_common+0x4c>
 800d87e:	4b26      	ldr	r3, [pc, #152]	@ (800d918 <tcp_output_alloc_header_common+0xd8>)
 800d880:	f240 7223 	movw	r2, #1827	@ 0x723
 800d884:	4925      	ldr	r1, [pc, #148]	@ (800d91c <tcp_output_alloc_header_common+0xdc>)
 800d886:	4826      	ldr	r0, [pc, #152]	@ (800d920 <tcp_output_alloc_header_common+0xe0>)
 800d888:	f000 feaa 	bl	800e5e0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d892:	8c3b      	ldrh	r3, [r7, #32]
 800d894:	4618      	mov	r0, r3
 800d896:	f7f7 f87b 	bl	8004990 <lwip_htons>
 800d89a:	4603      	mov	r3, r0
 800d89c:	461a      	mov	r2, r3
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d8a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7f7 f873 	bl	8004990 <lwip_htons>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f7f7 f87f 	bl	80049bc <lwip_htonl>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d8c4:	897b      	ldrh	r3, [r7, #10]
 800d8c6:	089b      	lsrs	r3, r3, #2
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	3305      	adds	r3, #5
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	031b      	lsls	r3, r3, #12
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7f7 f857 	bl	8004990 <lwip_htons>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d8ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7f7 f84f 	bl	8004990 <lwip_htons>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	741a      	strb	r2, [r3, #16]
 800d900:	2200      	movs	r2, #0
 800d902:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	2200      	movs	r2, #0
 800d908:	749a      	strb	r2, [r3, #18]
 800d90a:	2200      	movs	r2, #0
 800d90c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d90e:	697b      	ldr	r3, [r7, #20]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	0801143c 	.word	0x0801143c
 800d91c:	08011b4c 	.word	0x08011b4c
 800d920:	080114c8 	.word	0x080114c8

0800d924 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d924:	b5b0      	push	{r4, r5, r7, lr}
 800d926:	b08a      	sub	sp, #40	@ 0x28
 800d928:	af04      	add	r7, sp, #16
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	607b      	str	r3, [r7, #4]
 800d92e:	460b      	mov	r3, r1
 800d930:	817b      	strh	r3, [r7, #10]
 800d932:	4613      	mov	r3, r2
 800d934:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d106      	bne.n	800d94a <tcp_output_alloc_header+0x26>
 800d93c:	4b15      	ldr	r3, [pc, #84]	@ (800d994 <tcp_output_alloc_header+0x70>)
 800d93e:	f240 7242 	movw	r2, #1858	@ 0x742
 800d942:	4915      	ldr	r1, [pc, #84]	@ (800d998 <tcp_output_alloc_header+0x74>)
 800d944:	4815      	ldr	r0, [pc, #84]	@ (800d99c <tcp_output_alloc_header+0x78>)
 800d946:	f000 fe4b 	bl	800e5e0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	8adb      	ldrh	r3, [r3, #22]
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	8b12      	ldrh	r2, [r2, #24]
 800d956:	68f9      	ldr	r1, [r7, #12]
 800d958:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d95a:	893d      	ldrh	r5, [r7, #8]
 800d95c:	897c      	ldrh	r4, [r7, #10]
 800d95e:	9103      	str	r1, [sp, #12]
 800d960:	2110      	movs	r1, #16
 800d962:	9102      	str	r1, [sp, #8]
 800d964:	9201      	str	r2, [sp, #4]
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	462a      	mov	r2, r5
 800d96c:	4621      	mov	r1, r4
 800d96e:	f7ff ff67 	bl	800d840 <tcp_output_alloc_header_common>
 800d972:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d006      	beq.n	800d988 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d982:	441a      	add	r2, r3
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d988:	697b      	ldr	r3, [r7, #20]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3718      	adds	r7, #24
 800d98e:	46bd      	mov	sp, r7
 800d990:	bdb0      	pop	{r4, r5, r7, pc}
 800d992:	bf00      	nop
 800d994:	0801143c 	.word	0x0801143c
 800d998:	08011b7c 	.word	0x08011b7c
 800d99c:	080114c8 	.word	0x080114c8

0800d9a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b088      	sub	sp, #32
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	71fb      	strb	r3, [r7, #7]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d106      	bne.n	800d9ce <tcp_output_fill_options+0x2e>
 800d9c0:	4b12      	ldr	r3, [pc, #72]	@ (800da0c <tcp_output_fill_options+0x6c>)
 800d9c2:	f240 7256 	movw	r2, #1878	@ 0x756
 800d9c6:	4912      	ldr	r1, [pc, #72]	@ (800da10 <tcp_output_fill_options+0x70>)
 800d9c8:	4812      	ldr	r0, [pc, #72]	@ (800da14 <tcp_output_fill_options+0x74>)
 800d9ca:	f000 fe09 	bl	800e5e0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	3314      	adds	r3, #20
 800d9d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d9da:	8bfb      	ldrh	r3, [r7, #30]
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	461a      	mov	r2, r3
 800d9e0:	79fb      	ldrb	r3, [r7, #7]
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	f003 0304 	and.w	r3, r3, #4
 800d9e8:	4413      	add	r3, r2
 800d9ea:	3314      	adds	r3, #20
 800d9ec:	69ba      	ldr	r2, [r7, #24]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	697a      	ldr	r2, [r7, #20]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d006      	beq.n	800da04 <tcp_output_fill_options+0x64>
 800d9f6:	4b05      	ldr	r3, [pc, #20]	@ (800da0c <tcp_output_fill_options+0x6c>)
 800d9f8:	f240 7275 	movw	r2, #1909	@ 0x775
 800d9fc:	4906      	ldr	r1, [pc, #24]	@ (800da18 <tcp_output_fill_options+0x78>)
 800d9fe:	4805      	ldr	r0, [pc, #20]	@ (800da14 <tcp_output_fill_options+0x74>)
 800da00:	f000 fdee 	bl	800e5e0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800da04:	bf00      	nop
 800da06:	3720      	adds	r7, #32
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	0801143c 	.word	0x0801143c
 800da10:	08011ba4 	.word	0x08011ba4
 800da14:	080114c8 	.word	0x080114c8
 800da18:	08011a9c 	.word	0x08011a9c

0800da1c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08a      	sub	sp, #40	@ 0x28
 800da20:	af04      	add	r7, sp, #16
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d106      	bne.n	800da3e <tcp_output_control_segment+0x22>
 800da30:	4b1c      	ldr	r3, [pc, #112]	@ (800daa4 <tcp_output_control_segment+0x88>)
 800da32:	f240 7287 	movw	r2, #1927	@ 0x787
 800da36:	491c      	ldr	r1, [pc, #112]	@ (800daa8 <tcp_output_control_segment+0x8c>)
 800da38:	481c      	ldr	r0, [pc, #112]	@ (800daac <tcp_output_control_segment+0x90>)
 800da3a:	f000 fdd1 	bl	800e5e0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	6879      	ldr	r1, [r7, #4]
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f7fe ff42 	bl	800c8cc <tcp_route>
 800da48:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d102      	bne.n	800da56 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800da50:	23fc      	movs	r3, #252	@ 0xfc
 800da52:	75fb      	strb	r3, [r7, #23]
 800da54:	e01c      	b.n	800da90 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d006      	beq.n	800da6a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	7adb      	ldrb	r3, [r3, #11]
 800da60:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	7a9b      	ldrb	r3, [r3, #10]
 800da66:	757b      	strb	r3, [r7, #21]
 800da68:	e003      	b.n	800da72 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800da6a:	23ff      	movs	r3, #255	@ 0xff
 800da6c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800da72:	7dba      	ldrb	r2, [r7, #22]
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	9302      	str	r3, [sp, #8]
 800da78:	2306      	movs	r3, #6
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	7d7b      	ldrb	r3, [r7, #21]
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	4613      	mov	r3, r2
 800da82:	683a      	ldr	r2, [r7, #0]
 800da84:	6879      	ldr	r1, [r7, #4]
 800da86:	68b8      	ldr	r0, [r7, #8]
 800da88:	f7f8 fb36 	bl	80060f8 <ip4_output_if>
 800da8c:	4603      	mov	r3, r0
 800da8e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800da90:	68b8      	ldr	r0, [r7, #8]
 800da92:	f7fa fd83 	bl	800859c <pbuf_free>
  return err;
 800da96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3718      	adds	r7, #24
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	0801143c 	.word	0x0801143c
 800daa8:	08011bcc 	.word	0x08011bcc
 800daac:	080114c8 	.word	0x080114c8

0800dab0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dab0:	b590      	push	{r4, r7, lr}
 800dab2:	b08b      	sub	sp, #44	@ 0x2c
 800dab4:	af04      	add	r7, sp, #16
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
 800dabc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d106      	bne.n	800dad2 <tcp_rst+0x22>
 800dac4:	4b1f      	ldr	r3, [pc, #124]	@ (800db44 <tcp_rst+0x94>)
 800dac6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800daca:	491f      	ldr	r1, [pc, #124]	@ (800db48 <tcp_rst+0x98>)
 800dacc:	481f      	ldr	r0, [pc, #124]	@ (800db4c <tcp_rst+0x9c>)
 800dace:	f000 fd87 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d106      	bne.n	800dae6 <tcp_rst+0x36>
 800dad8:	4b1a      	ldr	r3, [pc, #104]	@ (800db44 <tcp_rst+0x94>)
 800dada:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800dade:	491c      	ldr	r1, [pc, #112]	@ (800db50 <tcp_rst+0xa0>)
 800dae0:	481a      	ldr	r0, [pc, #104]	@ (800db4c <tcp_rst+0x9c>)
 800dae2:	f000 fd7d 	bl	800e5e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dae6:	2300      	movs	r3, #0
 800dae8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800daea:	f646 030b 	movw	r3, #26635	@ 0x680b
 800daee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800daf0:	7dfb      	ldrb	r3, [r7, #23]
 800daf2:	b29c      	uxth	r4, r3
 800daf4:	68b8      	ldr	r0, [r7, #8]
 800daf6:	f7f6 ff61 	bl	80049bc <lwip_htonl>
 800dafa:	4602      	mov	r2, r0
 800dafc:	8abb      	ldrh	r3, [r7, #20]
 800dafe:	9303      	str	r3, [sp, #12]
 800db00:	2314      	movs	r3, #20
 800db02:	9302      	str	r3, [sp, #8]
 800db04:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800db06:	9301      	str	r3, [sp, #4]
 800db08:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	4613      	mov	r3, r2
 800db0e:	2200      	movs	r2, #0
 800db10:	4621      	mov	r1, r4
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7ff fe94 	bl	800d840 <tcp_output_alloc_header_common>
 800db18:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00c      	beq.n	800db3a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800db20:	7dfb      	ldrb	r3, [r7, #23]
 800db22:	2200      	movs	r2, #0
 800db24:	6939      	ldr	r1, [r7, #16]
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f7ff ff3a 	bl	800d9a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800db2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	6939      	ldr	r1, [r7, #16]
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f7ff ff72 	bl	800da1c <tcp_output_control_segment>
 800db38:	e000      	b.n	800db3c <tcp_rst+0x8c>
    return;
 800db3a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800db3c:	371c      	adds	r7, #28
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd90      	pop	{r4, r7, pc}
 800db42:	bf00      	nop
 800db44:	0801143c 	.word	0x0801143c
 800db48:	08011bf8 	.word	0x08011bf8
 800db4c:	080114c8 	.word	0x080114c8
 800db50:	08011c14 	.word	0x08011c14

0800db54 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800db54:	b590      	push	{r4, r7, lr}
 800db56:	b087      	sub	sp, #28
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800db5c:	2300      	movs	r3, #0
 800db5e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800db60:	2300      	movs	r3, #0
 800db62:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d106      	bne.n	800db78 <tcp_send_empty_ack+0x24>
 800db6a:	4b28      	ldr	r3, [pc, #160]	@ (800dc0c <tcp_send_empty_ack+0xb8>)
 800db6c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800db70:	4927      	ldr	r1, [pc, #156]	@ (800dc10 <tcp_send_empty_ack+0xbc>)
 800db72:	4828      	ldr	r0, [pc, #160]	@ (800dc14 <tcp_send_empty_ack+0xc0>)
 800db74:	f000 fd34 	bl	800e5e0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db78:	7dfb      	ldrb	r3, [r7, #23]
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	f003 0304 	and.w	r3, r3, #4
 800db82:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800db84:	7d7b      	ldrb	r3, [r7, #21]
 800db86:	b29c      	uxth	r4, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7f6 ff15 	bl	80049bc <lwip_htonl>
 800db92:	4603      	mov	r3, r0
 800db94:	2200      	movs	r2, #0
 800db96:	4621      	mov	r1, r4
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f7ff fec3 	bl	800d924 <tcp_output_alloc_header>
 800db9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d109      	bne.n	800dbba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	8b5b      	ldrh	r3, [r3, #26]
 800dbaa:	f043 0303 	orr.w	r3, r3, #3
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dbb4:	f06f 0301 	mvn.w	r3, #1
 800dbb8:	e023      	b.n	800dc02 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800dbba:	7dbb      	ldrb	r3, [r7, #22]
 800dbbc:	7dfa      	ldrb	r2, [r7, #23]
 800dbbe:	6939      	ldr	r1, [r7, #16]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7ff feed 	bl	800d9a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	3304      	adds	r3, #4
 800dbcc:	6939      	ldr	r1, [r7, #16]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff ff24 	bl	800da1c <tcp_output_control_segment>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dbd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d007      	beq.n	800dbf0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	8b5b      	ldrh	r3, [r3, #26]
 800dbe4:	f043 0303 	orr.w	r3, r3, #3
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	835a      	strh	r2, [r3, #26]
 800dbee:	e006      	b.n	800dbfe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	8b5b      	ldrh	r3, [r3, #26]
 800dbf4:	f023 0303 	bic.w	r3, r3, #3
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	371c      	adds	r7, #28
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd90      	pop	{r4, r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	0801143c 	.word	0x0801143c
 800dc10:	08011c30 	.word	0x08011c30
 800dc14:	080114c8 	.word	0x080114c8

0800dc18 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dc18:	b590      	push	{r4, r7, lr}
 800dc1a:	b087      	sub	sp, #28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc20:	2300      	movs	r3, #0
 800dc22:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d106      	bne.n	800dc38 <tcp_keepalive+0x20>
 800dc2a:	4b18      	ldr	r3, [pc, #96]	@ (800dc8c <tcp_keepalive+0x74>)
 800dc2c:	f640 0224 	movw	r2, #2084	@ 0x824
 800dc30:	4917      	ldr	r1, [pc, #92]	@ (800dc90 <tcp_keepalive+0x78>)
 800dc32:	4818      	ldr	r0, [pc, #96]	@ (800dc94 <tcp_keepalive+0x7c>)
 800dc34:	f000 fcd4 	bl	800e5e0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dc38:	7dfb      	ldrb	r3, [r7, #23]
 800dc3a:	b29c      	uxth	r4, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc40:	3b01      	subs	r3, #1
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7f6 feba 	bl	80049bc <lwip_htonl>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7ff fe68 	bl	800d924 <tcp_output_alloc_header>
 800dc54:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d102      	bne.n	800dc62 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc60:	e010      	b.n	800dc84 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc62:	7dfb      	ldrb	r3, [r7, #23]
 800dc64:	2200      	movs	r2, #0
 800dc66:	6939      	ldr	r1, [r7, #16]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff fe99 	bl	800d9a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	3304      	adds	r3, #4
 800dc74:	6939      	ldr	r1, [r7, #16]
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7ff fed0 	bl	800da1c <tcp_output_control_segment>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dc80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	371c      	adds	r7, #28
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd90      	pop	{r4, r7, pc}
 800dc8c:	0801143c 	.word	0x0801143c
 800dc90:	08011c50 	.word	0x08011c50
 800dc94:	080114c8 	.word	0x080114c8

0800dc98 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dc98:	b590      	push	{r4, r7, lr}
 800dc9a:	b08b      	sub	sp, #44	@ 0x2c
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dca0:	2300      	movs	r3, #0
 800dca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d106      	bne.n	800dcba <tcp_zero_window_probe+0x22>
 800dcac:	4b4c      	ldr	r3, [pc, #304]	@ (800dde0 <tcp_zero_window_probe+0x148>)
 800dcae:	f640 024f 	movw	r2, #2127	@ 0x84f
 800dcb2:	494c      	ldr	r1, [pc, #304]	@ (800dde4 <tcp_zero_window_probe+0x14c>)
 800dcb4:	484c      	ldr	r0, [pc, #304]	@ (800dde8 <tcp_zero_window_probe+0x150>)
 800dcb6:	f000 fc93 	bl	800e5e0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcbe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dcc0:	6a3b      	ldr	r3, [r7, #32]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e086      	b.n	800ddd8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dcd0:	2bff      	cmp	r3, #255	@ 0xff
 800dcd2:	d007      	beq.n	800dce4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dcda:	3301      	adds	r3, #1
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dce4:	6a3b      	ldr	r3, [r7, #32]
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	899b      	ldrh	r3, [r3, #12]
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7f6 fe4f 	bl	8004990 <lwip_htons>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d005      	beq.n	800dd0a <tcp_zero_window_probe+0x72>
 800dcfe:	6a3b      	ldr	r3, [r7, #32]
 800dd00:	891b      	ldrh	r3, [r3, #8]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d101      	bne.n	800dd0a <tcp_zero_window_probe+0x72>
 800dd06:	2301      	movs	r3, #1
 800dd08:	e000      	b.n	800dd0c <tcp_zero_window_probe+0x74>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dd0e:	7ffb      	ldrb	r3, [r7, #31]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	bf0c      	ite	eq
 800dd14:	2301      	moveq	r3, #1
 800dd16:	2300      	movne	r3, #0
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd20:	b299      	uxth	r1, r3
 800dd22:	6a3b      	ldr	r3, [r7, #32]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	8bba      	ldrh	r2, [r7, #28]
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7ff fdfa 	bl	800d924 <tcp_output_alloc_header>
 800dd30:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d102      	bne.n	800dd3e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dd38:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3c:	e04c      	b.n	800ddd8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dd44:	7ffb      	ldrb	r3, [r7, #31]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d011      	beq.n	800dd6e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	899b      	ldrh	r3, [r3, #12]
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	b21b      	sxth	r3, r3
 800dd52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dd56:	b21c      	sxth	r4, r3
 800dd58:	2011      	movs	r0, #17
 800dd5a:	f7f6 fe19 	bl	8004990 <lwip_htons>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	b21b      	sxth	r3, r3
 800dd62:	4323      	orrs	r3, r4
 800dd64:	b21b      	sxth	r3, r3
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	819a      	strh	r2, [r3, #12]
 800dd6c:	e010      	b.n	800dd90 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	3314      	adds	r3, #20
 800dd74:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dd76:	6a3b      	ldr	r3, [r7, #32]
 800dd78:	6858      	ldr	r0, [r3, #4]
 800dd7a:	6a3b      	ldr	r3, [r7, #32]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	891a      	ldrh	r2, [r3, #8]
 800dd80:	6a3b      	ldr	r3, [r7, #32]
 800dd82:	891b      	ldrh	r3, [r3, #8]
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	2201      	movs	r2, #1
 800dd8a:	6939      	ldr	r1, [r7, #16]
 800dd8c:	f7fa fdf0 	bl	8008970 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dd90:	6a3b      	ldr	r3, [r7, #32]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7f6 fe10 	bl	80049bc <lwip_htonl>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	3301      	adds	r3, #1
 800dda0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	da02      	bge.n	800ddb4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ddb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddb8:	2200      	movs	r2, #0
 800ddba:	69b9      	ldr	r1, [r7, #24]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fdef 	bl	800d9a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	69b9      	ldr	r1, [r7, #24]
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7ff fe26 	bl	800da1c <tcp_output_control_segment>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ddd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	372c      	adds	r7, #44	@ 0x2c
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd90      	pop	{r4, r7, pc}
 800dde0:	0801143c 	.word	0x0801143c
 800dde4:	08011c6c 	.word	0x08011c6c
 800dde8:	080114c8 	.word	0x080114c8

0800ddec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ddf4:	f7fa feaa 	bl	8008b4c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ddf8:	4b0a      	ldr	r3, [pc, #40]	@ (800de24 <tcpip_tcp_timer+0x38>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d103      	bne.n	800de08 <tcpip_tcp_timer+0x1c>
 800de00:	4b09      	ldr	r3, [pc, #36]	@ (800de28 <tcpip_tcp_timer+0x3c>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d005      	beq.n	800de14 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de08:	2200      	movs	r2, #0
 800de0a:	4908      	ldr	r1, [pc, #32]	@ (800de2c <tcpip_tcp_timer+0x40>)
 800de0c:	20fa      	movs	r0, #250	@ 0xfa
 800de0e:	f000 f8f3 	bl	800dff8 <sys_timeout>
 800de12:	e003      	b.n	800de1c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800de14:	4b06      	ldr	r3, [pc, #24]	@ (800de30 <tcpip_tcp_timer+0x44>)
 800de16:	2200      	movs	r2, #0
 800de18:	601a      	str	r2, [r3, #0]
  }
}
 800de1a:	bf00      	nop
 800de1c:	bf00      	nop
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	2000b75c 	.word	0x2000b75c
 800de28:	2000b760 	.word	0x2000b760
 800de2c:	0800dded 	.word	0x0800dded
 800de30:	2000b7a8 	.word	0x2000b7a8

0800de34 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800de38:	4b0a      	ldr	r3, [pc, #40]	@ (800de64 <tcp_timer_needed+0x30>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d10f      	bne.n	800de60 <tcp_timer_needed+0x2c>
 800de40:	4b09      	ldr	r3, [pc, #36]	@ (800de68 <tcp_timer_needed+0x34>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d103      	bne.n	800de50 <tcp_timer_needed+0x1c>
 800de48:	4b08      	ldr	r3, [pc, #32]	@ (800de6c <tcp_timer_needed+0x38>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d007      	beq.n	800de60 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800de50:	4b04      	ldr	r3, [pc, #16]	@ (800de64 <tcp_timer_needed+0x30>)
 800de52:	2201      	movs	r2, #1
 800de54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de56:	2200      	movs	r2, #0
 800de58:	4905      	ldr	r1, [pc, #20]	@ (800de70 <tcp_timer_needed+0x3c>)
 800de5a:	20fa      	movs	r0, #250	@ 0xfa
 800de5c:	f000 f8cc 	bl	800dff8 <sys_timeout>
  }
}
 800de60:	bf00      	nop
 800de62:	bd80      	pop	{r7, pc}
 800de64:	2000b7a8 	.word	0x2000b7a8
 800de68:	2000b75c 	.word	0x2000b75c
 800de6c:	2000b760 	.word	0x2000b760
 800de70:	0800dded 	.word	0x0800dded

0800de74 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800de80:	2006      	movs	r0, #6
 800de82:	f7f9 fcc1 	bl	8007808 <memp_malloc>
 800de86:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d109      	bne.n	800dea2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d151      	bne.n	800df38 <sys_timeout_abs+0xc4>
 800de94:	4b2a      	ldr	r3, [pc, #168]	@ (800df40 <sys_timeout_abs+0xcc>)
 800de96:	22be      	movs	r2, #190	@ 0xbe
 800de98:	492a      	ldr	r1, [pc, #168]	@ (800df44 <sys_timeout_abs+0xd0>)
 800de9a:	482b      	ldr	r0, [pc, #172]	@ (800df48 <sys_timeout_abs+0xd4>)
 800de9c:	f000 fba0 	bl	800e5e0 <iprintf>
    return;
 800dea0:	e04a      	b.n	800df38 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	2200      	movs	r2, #0
 800dea6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800deba:	4b24      	ldr	r3, [pc, #144]	@ (800df4c <sys_timeout_abs+0xd8>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d103      	bne.n	800deca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dec2:	4a22      	ldr	r2, [pc, #136]	@ (800df4c <sys_timeout_abs+0xd8>)
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	6013      	str	r3, [r2, #0]
    return;
 800dec8:	e037      	b.n	800df3a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	4b1f      	ldr	r3, [pc, #124]	@ (800df4c <sys_timeout_abs+0xd8>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	1ad3      	subs	r3, r2, r3
 800ded6:	0fdb      	lsrs	r3, r3, #31
 800ded8:	f003 0301 	and.w	r3, r3, #1
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d007      	beq.n	800def2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dee2:	4b1a      	ldr	r3, [pc, #104]	@ (800df4c <sys_timeout_abs+0xd8>)
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800deea:	4a18      	ldr	r2, [pc, #96]	@ (800df4c <sys_timeout_abs+0xd8>)
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	e023      	b.n	800df3a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800def2:	4b16      	ldr	r3, [pc, #88]	@ (800df4c <sys_timeout_abs+0xd8>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	e01a      	b.n	800df30 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00b      	beq.n	800df1a <sys_timeout_abs+0xa6>
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	0fdb      	lsrs	r3, r3, #31
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b00      	cmp	r3, #0
 800df18:	d007      	beq.n	800df2a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	693a      	ldr	r2, [r7, #16]
 800df26:	601a      	str	r2, [r3, #0]
        break;
 800df28:	e007      	b.n	800df3a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	617b      	str	r3, [r7, #20]
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1e1      	bne.n	800defa <sys_timeout_abs+0x86>
 800df36:	e000      	b.n	800df3a <sys_timeout_abs+0xc6>
    return;
 800df38:	bf00      	nop
      }
    }
  }
}
 800df3a:	3718      	adds	r7, #24
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	08011c90 	.word	0x08011c90
 800df44:	08011d00 	.word	0x08011d00
 800df48:	08011d40 	.word	0x08011d40
 800df4c:	2000b7a0 	.word	0x2000b7a0

0800df50 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	4798      	blx	r3

  now = sys_now();
 800df62:	f7f6 fb6b 	bl	800463c <sys_now>
 800df66:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	4b0f      	ldr	r3, [pc, #60]	@ (800dfac <lwip_cyclic_timer+0x5c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4413      	add	r3, r2
 800df72:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800df74:	68fa      	ldr	r2, [r7, #12]
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	0fdb      	lsrs	r3, r3, #31
 800df7c:	f003 0301 	and.w	r3, r3, #1
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	d009      	beq.n	800df9a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	4413      	add	r3, r2
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	4907      	ldr	r1, [pc, #28]	@ (800dfb0 <lwip_cyclic_timer+0x60>)
 800df92:	4618      	mov	r0, r3
 800df94:	f7ff ff6e 	bl	800de74 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800df98:	e004      	b.n	800dfa4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	4904      	ldr	r1, [pc, #16]	@ (800dfb0 <lwip_cyclic_timer+0x60>)
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	f7ff ff68 	bl	800de74 <sys_timeout_abs>
}
 800dfa4:	bf00      	nop
 800dfa6:	3718      	adds	r7, #24
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	2000b7a4 	.word	0x2000b7a4
 800dfb0:	0800df51 	.word	0x0800df51

0800dfb4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dfba:	2301      	movs	r3, #1
 800dfbc:	607b      	str	r3, [r7, #4]
 800dfbe:	e00e      	b.n	800dfde <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dfc0:	4a0b      	ldr	r2, [pc, #44]	@ (800dff0 <sys_timeouts_init+0x3c>)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	00db      	lsls	r3, r3, #3
 800dfcc:	4a08      	ldr	r2, [pc, #32]	@ (800dff0 <sys_timeouts_init+0x3c>)
 800dfce:	4413      	add	r3, r2
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	4908      	ldr	r1, [pc, #32]	@ (800dff4 <sys_timeouts_init+0x40>)
 800dfd4:	f000 f810 	bl	800dff8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	607b      	str	r3, [r7, #4]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d9ed      	bls.n	800dfc0 <sys_timeouts_init+0xc>
  }
}
 800dfe4:	bf00      	nop
 800dfe6:	bf00      	nop
 800dfe8:	3708      	adds	r7, #8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	08012240 	.word	0x08012240
 800dff4:	0800df51 	.word	0x0800df51

0800dff8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e00a:	d306      	bcc.n	800e01a <sys_timeout+0x22>
 800e00c:	4b0a      	ldr	r3, [pc, #40]	@ (800e038 <sys_timeout+0x40>)
 800e00e:	f240 1229 	movw	r2, #297	@ 0x129
 800e012:	490a      	ldr	r1, [pc, #40]	@ (800e03c <sys_timeout+0x44>)
 800e014:	480a      	ldr	r0, [pc, #40]	@ (800e040 <sys_timeout+0x48>)
 800e016:	f000 fae3 	bl	800e5e0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e01a:	f7f6 fb0f 	bl	800463c <sys_now>
 800e01e:	4602      	mov	r2, r0
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	4413      	add	r3, r2
 800e024:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	68b9      	ldr	r1, [r7, #8]
 800e02a:	6978      	ldr	r0, [r7, #20]
 800e02c:	f7ff ff22 	bl	800de74 <sys_timeout_abs>
#endif
}
 800e030:	bf00      	nop
 800e032:	3718      	adds	r7, #24
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	08011c90 	.word	0x08011c90
 800e03c:	08011d68 	.word	0x08011d68
 800e040:	08011d40 	.word	0x08011d40

0800e044 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e048:	f000 f9ca 	bl	800e3e0 <rand>
 800e04c:	4603      	mov	r3, r0
 800e04e:	b29b      	uxth	r3, r3
 800e050:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e054:	b29b      	uxth	r3, r3
 800e056:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	4b01      	ldr	r3, [pc, #4]	@ (800e064 <udp_init+0x20>)
 800e05e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e060:	bf00      	nop
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20000028 	.word	0x20000028

0800e068 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	4613      	mov	r3, r2
 800e074:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d105      	bne.n	800e088 <udp_input_local_match+0x20>
 800e07c:	4b27      	ldr	r3, [pc, #156]	@ (800e11c <udp_input_local_match+0xb4>)
 800e07e:	2287      	movs	r2, #135	@ 0x87
 800e080:	4927      	ldr	r1, [pc, #156]	@ (800e120 <udp_input_local_match+0xb8>)
 800e082:	4828      	ldr	r0, [pc, #160]	@ (800e124 <udp_input_local_match+0xbc>)
 800e084:	f000 faac 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d105      	bne.n	800e09a <udp_input_local_match+0x32>
 800e08e:	4b23      	ldr	r3, [pc, #140]	@ (800e11c <udp_input_local_match+0xb4>)
 800e090:	2288      	movs	r2, #136	@ 0x88
 800e092:	4925      	ldr	r1, [pc, #148]	@ (800e128 <udp_input_local_match+0xc0>)
 800e094:	4823      	ldr	r0, [pc, #140]	@ (800e124 <udp_input_local_match+0xbc>)
 800e096:	f000 faa3 	bl	800e5e0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	7a1b      	ldrb	r3, [r3, #8]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d00b      	beq.n	800e0ba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	7a1a      	ldrb	r2, [r3, #8]
 800e0a6:	4b21      	ldr	r3, [pc, #132]	@ (800e12c <udp_input_local_match+0xc4>)
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d001      	beq.n	800e0ba <udp_input_local_match+0x52>
    return 0;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e02b      	b.n	800e112 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e0ba:	79fb      	ldrb	r3, [r7, #7]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d018      	beq.n	800e0f2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d013      	beq.n	800e0ee <udp_input_local_match+0x86>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00f      	beq.n	800e0ee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e0ce:	4b17      	ldr	r3, [pc, #92]	@ (800e12c <udp_input_local_match+0xc4>)
 800e0d0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d6:	d00a      	beq.n	800e0ee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	4b13      	ldr	r3, [pc, #76]	@ (800e12c <udp_input_local_match+0xc4>)
 800e0de:	695b      	ldr	r3, [r3, #20]
 800e0e0:	405a      	eors	r2, r3
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	3308      	adds	r3, #8
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d110      	bne.n	800e110 <udp_input_local_match+0xa8>
          return 1;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e00f      	b.n	800e112 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d009      	beq.n	800e10c <udp_input_local_match+0xa4>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d005      	beq.n	800e10c <udp_input_local_match+0xa4>
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	4b09      	ldr	r3, [pc, #36]	@ (800e12c <udp_input_local_match+0xc4>)
 800e106:	695b      	ldr	r3, [r3, #20]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d101      	bne.n	800e110 <udp_input_local_match+0xa8>
        return 1;
 800e10c:	2301      	movs	r3, #1
 800e10e:	e000      	b.n	800e112 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	08011db4 	.word	0x08011db4
 800e120:	08011e1c 	.word	0x08011e1c
 800e124:	08011e40 	.word	0x08011e40
 800e128:	08011e68 	.word	0x08011e68
 800e12c:	20004e48 	.word	0x20004e48

0800e130 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e130:	b590      	push	{r4, r7, lr}
 800e132:	b08d      	sub	sp, #52	@ 0x34
 800e134:	af02      	add	r7, sp, #8
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e13a:	2300      	movs	r3, #0
 800e13c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d105      	bne.n	800e150 <udp_input+0x20>
 800e144:	4b7c      	ldr	r3, [pc, #496]	@ (800e338 <udp_input+0x208>)
 800e146:	22cf      	movs	r2, #207	@ 0xcf
 800e148:	497c      	ldr	r1, [pc, #496]	@ (800e33c <udp_input+0x20c>)
 800e14a:	487d      	ldr	r0, [pc, #500]	@ (800e340 <udp_input+0x210>)
 800e14c:	f000 fa48 	bl	800e5e0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d105      	bne.n	800e162 <udp_input+0x32>
 800e156:	4b78      	ldr	r3, [pc, #480]	@ (800e338 <udp_input+0x208>)
 800e158:	22d0      	movs	r2, #208	@ 0xd0
 800e15a:	497a      	ldr	r1, [pc, #488]	@ (800e344 <udp_input+0x214>)
 800e15c:	4878      	ldr	r0, [pc, #480]	@ (800e340 <udp_input+0x210>)
 800e15e:	f000 fa3f 	bl	800e5e0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	895b      	ldrh	r3, [r3, #10]
 800e166:	2b07      	cmp	r3, #7
 800e168:	d803      	bhi.n	800e172 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f7fa fa16 	bl	800859c <pbuf_free>
    goto end;
 800e170:	e0de      	b.n	800e330 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e178:	4b73      	ldr	r3, [pc, #460]	@ (800e348 <udp_input+0x218>)
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	4a72      	ldr	r2, [pc, #456]	@ (800e348 <udp_input+0x218>)
 800e17e:	6812      	ldr	r2, [r2, #0]
 800e180:	4611      	mov	r1, r2
 800e182:	4618      	mov	r0, r3
 800e184:	f7f8 f890 	bl	80062a8 <ip4_addr_isbroadcast_u32>
 800e188:	4603      	mov	r3, r0
 800e18a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	881b      	ldrh	r3, [r3, #0]
 800e190:	b29b      	uxth	r3, r3
 800e192:	4618      	mov	r0, r3
 800e194:	f7f6 fbfc 	bl	8004990 <lwip_htons>
 800e198:	4603      	mov	r3, r0
 800e19a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	885b      	ldrh	r3, [r3, #2]
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7f6 fbf4 	bl	8004990 <lwip_htons>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1b8:	4b64      	ldr	r3, [pc, #400]	@ (800e34c <udp_input+0x21c>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1be:	e054      	b.n	800e26a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c2:	8a5b      	ldrh	r3, [r3, #18]
 800e1c4:	89fa      	ldrh	r2, [r7, #14]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d14a      	bne.n	800e260 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e1ca:	7cfb      	ldrb	r3, [r7, #19]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	6839      	ldr	r1, [r7, #0]
 800e1d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e1d2:	f7ff ff49 	bl	800e068 <udp_input_local_match>
 800e1d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d041      	beq.n	800e260 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1de:	7c1b      	ldrb	r3, [r3, #16]
 800e1e0:	f003 0304 	and.w	r3, r3, #4
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d11d      	bne.n	800e224 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d102      	bne.n	800e1f4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f0:	61fb      	str	r3, [r7, #28]
 800e1f2:	e017      	b.n	800e224 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e1f4:	7cfb      	ldrb	r3, [r7, #19]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d014      	beq.n	800e224 <udp_input+0xf4>
 800e1fa:	4b53      	ldr	r3, [pc, #332]	@ (800e348 <udp_input+0x218>)
 800e1fc:	695b      	ldr	r3, [r3, #20]
 800e1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e202:	d10f      	bne.n	800e224 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	3304      	adds	r3, #4
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d008      	beq.n	800e224 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	3304      	adds	r3, #4
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d101      	bne.n	800e224 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e222:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e226:	8a9b      	ldrh	r3, [r3, #20]
 800e228:	8a3a      	ldrh	r2, [r7, #16]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d118      	bne.n	800e260 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e230:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e232:	2b00      	cmp	r3, #0
 800e234:	d005      	beq.n	800e242 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e238:	685a      	ldr	r2, [r3, #4]
 800e23a:	4b43      	ldr	r3, [pc, #268]	@ (800e348 <udp_input+0x218>)
 800e23c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e23e:	429a      	cmp	r2, r3
 800e240:	d10e      	bne.n	800e260 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e242:	6a3b      	ldr	r3, [r7, #32]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d014      	beq.n	800e272 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24a:	68da      	ldr	r2, [r3, #12]
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e250:	4b3e      	ldr	r3, [pc, #248]	@ (800e34c <udp_input+0x21c>)
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e256:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e258:	4a3c      	ldr	r2, [pc, #240]	@ (800e34c <udp_input+0x21c>)
 800e25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e25e:	e008      	b.n	800e272 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e262:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	627b      	str	r3, [r7, #36]	@ 0x24
 800e26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1a7      	bne.n	800e1c0 <udp_input+0x90>
 800e270:	e000      	b.n	800e274 <udp_input+0x144>
        break;
 800e272:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e276:	2b00      	cmp	r3, #0
 800e278:	d101      	bne.n	800e27e <udp_input+0x14e>
    pcb = uncon_pcb;
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <udp_input+0x15a>
    for_us = 1;
 800e284:	2301      	movs	r3, #1
 800e286:	76fb      	strb	r3, [r7, #27]
 800e288:	e00a      	b.n	800e2a0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	3304      	adds	r3, #4
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	4b2d      	ldr	r3, [pc, #180]	@ (800e348 <udp_input+0x218>)
 800e292:	695b      	ldr	r3, [r3, #20]
 800e294:	429a      	cmp	r2, r3
 800e296:	bf0c      	ite	eq
 800e298:	2301      	moveq	r3, #1
 800e29a:	2300      	movne	r3, #0
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e2a0:	7efb      	ldrb	r3, [r7, #27]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d041      	beq.n	800e32a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e2a6:	2108      	movs	r1, #8
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7fa f8f1 	bl	8008490 <pbuf_remove_header>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00a      	beq.n	800e2ca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e2b4:	4b20      	ldr	r3, [pc, #128]	@ (800e338 <udp_input+0x208>)
 800e2b6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e2ba:	4925      	ldr	r1, [pc, #148]	@ (800e350 <udp_input+0x220>)
 800e2bc:	4820      	ldr	r0, [pc, #128]	@ (800e340 <udp_input+0x210>)
 800e2be:	f000 f98f 	bl	800e5e0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7fa f96a 	bl	800859c <pbuf_free>
      goto end;
 800e2c8:	e032      	b.n	800e330 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d012      	beq.n	800e2f6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d2:	699b      	ldr	r3, [r3, #24]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00a      	beq.n	800e2ee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2da:	699c      	ldr	r4, [r3, #24]
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2de:	69d8      	ldr	r0, [r3, #28]
 800e2e0:	8a3b      	ldrh	r3, [r7, #16]
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	4b1b      	ldr	r3, [pc, #108]	@ (800e354 <udp_input+0x224>)
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e2ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e2ec:	e021      	b.n	800e332 <udp_input+0x202>
        pbuf_free(p);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7fa f954 	bl	800859c <pbuf_free>
        goto end;
 800e2f4:	e01c      	b.n	800e330 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e2f6:	7cfb      	ldrb	r3, [r7, #19]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d112      	bne.n	800e322 <udp_input+0x1f2>
 800e2fc:	4b12      	ldr	r3, [pc, #72]	@ (800e348 <udp_input+0x218>)
 800e2fe:	695b      	ldr	r3, [r3, #20]
 800e300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e304:	2be0      	cmp	r3, #224	@ 0xe0
 800e306:	d00c      	beq.n	800e322 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e308:	4b0f      	ldr	r3, [pc, #60]	@ (800e348 <udp_input+0x218>)
 800e30a:	899b      	ldrh	r3, [r3, #12]
 800e30c:	3308      	adds	r3, #8
 800e30e:	b29b      	uxth	r3, r3
 800e310:	b21b      	sxth	r3, r3
 800e312:	4619      	mov	r1, r3
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7fa f92e 	bl	8008576 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e31a:	2103      	movs	r1, #3
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f7f7 fc8d 	bl	8005c3c <icmp_dest_unreach>
      pbuf_free(p);
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7fa f93a 	bl	800859c <pbuf_free>
  return;
 800e328:	e003      	b.n	800e332 <udp_input+0x202>
    pbuf_free(p);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7fa f936 	bl	800859c <pbuf_free>
  return;
 800e330:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e332:	372c      	adds	r7, #44	@ 0x2c
 800e334:	46bd      	mov	sp, r7
 800e336:	bd90      	pop	{r4, r7, pc}
 800e338:	08011db4 	.word	0x08011db4
 800e33c:	08011e90 	.word	0x08011e90
 800e340:	08011e40 	.word	0x08011e40
 800e344:	08011ea8 	.word	0x08011ea8
 800e348:	20004e48 	.word	0x20004e48
 800e34c:	2000b7ac 	.word	0x2000b7ac
 800e350:	08011ec4 	.word	0x08011ec4
 800e354:	20004e58 	.word	0x20004e58

0800e358 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d01e      	beq.n	800e3a6 <udp_netif_ip_addr_changed+0x4e>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d01a      	beq.n	800e3a6 <udp_netif_ip_addr_changed+0x4e>
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d017      	beq.n	800e3a6 <udp_netif_ip_addr_changed+0x4e>
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d013      	beq.n	800e3a6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e37e:	4b0d      	ldr	r3, [pc, #52]	@ (800e3b4 <udp_netif_ip_addr_changed+0x5c>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	e00c      	b.n	800e3a0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d103      	bne.n	800e39a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	60fb      	str	r3, [r7, #12]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1ef      	bne.n	800e386 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e3a6:	bf00      	nop
 800e3a8:	3714      	adds	r7, #20
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	2000b7ac 	.word	0x2000b7ac

0800e3b8 <_write>:
    /* Send to UART */
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
}

/* Printf redirect to UART */
int _write(int file, char *ptr, int len){
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	b29a      	uxth	r2, r3
 800e3c8:	2364      	movs	r3, #100	@ 0x64
 800e3ca:	68b9      	ldr	r1, [r7, #8]
 800e3cc:	4803      	ldr	r0, [pc, #12]	@ (800e3dc <_write+0x24>)
 800e3ce:	f7f5 f9e3 	bl	8003798 <HAL_UART_Transmit>
    return len;
 800e3d2:	687b      	ldr	r3, [r7, #4]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	200001e8 	.word	0x200001e8

0800e3e0 <rand>:
 800e3e0:	4b16      	ldr	r3, [pc, #88]	@ (800e43c <rand+0x5c>)
 800e3e2:	b510      	push	{r4, lr}
 800e3e4:	681c      	ldr	r4, [r3, #0]
 800e3e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e3e8:	b9b3      	cbnz	r3, 800e418 <rand+0x38>
 800e3ea:	2018      	movs	r0, #24
 800e3ec:	f000 fa4a 	bl	800e884 <malloc>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	6320      	str	r0, [r4, #48]	@ 0x30
 800e3f4:	b920      	cbnz	r0, 800e400 <rand+0x20>
 800e3f6:	4b12      	ldr	r3, [pc, #72]	@ (800e440 <rand+0x60>)
 800e3f8:	4812      	ldr	r0, [pc, #72]	@ (800e444 <rand+0x64>)
 800e3fa:	2152      	movs	r1, #82	@ 0x52
 800e3fc:	f000 f9da 	bl	800e7b4 <__assert_func>
 800e400:	4911      	ldr	r1, [pc, #68]	@ (800e448 <rand+0x68>)
 800e402:	4b12      	ldr	r3, [pc, #72]	@ (800e44c <rand+0x6c>)
 800e404:	e9c0 1300 	strd	r1, r3, [r0]
 800e408:	4b11      	ldr	r3, [pc, #68]	@ (800e450 <rand+0x70>)
 800e40a:	6083      	str	r3, [r0, #8]
 800e40c:	230b      	movs	r3, #11
 800e40e:	8183      	strh	r3, [r0, #12]
 800e410:	2100      	movs	r1, #0
 800e412:	2001      	movs	r0, #1
 800e414:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e418:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e41a:	480e      	ldr	r0, [pc, #56]	@ (800e454 <rand+0x74>)
 800e41c:	690b      	ldr	r3, [r1, #16]
 800e41e:	694c      	ldr	r4, [r1, #20]
 800e420:	4a0d      	ldr	r2, [pc, #52]	@ (800e458 <rand+0x78>)
 800e422:	4358      	muls	r0, r3
 800e424:	fb02 0004 	mla	r0, r2, r4, r0
 800e428:	fba3 3202 	umull	r3, r2, r3, r2
 800e42c:	3301      	adds	r3, #1
 800e42e:	eb40 0002 	adc.w	r0, r0, r2
 800e432:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e436:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e43a:	bd10      	pop	{r4, pc}
 800e43c:	20000038 	.word	0x20000038
 800e440:	08012258 	.word	0x08012258
 800e444:	0801226f 	.word	0x0801226f
 800e448:	abcd330e 	.word	0xabcd330e
 800e44c:	e66d1234 	.word	0xe66d1234
 800e450:	0005deec 	.word	0x0005deec
 800e454:	5851f42d 	.word	0x5851f42d
 800e458:	4c957f2d 	.word	0x4c957f2d

0800e45c <std>:
 800e45c:	2300      	movs	r3, #0
 800e45e:	b510      	push	{r4, lr}
 800e460:	4604      	mov	r4, r0
 800e462:	e9c0 3300 	strd	r3, r3, [r0]
 800e466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e46a:	6083      	str	r3, [r0, #8]
 800e46c:	8181      	strh	r1, [r0, #12]
 800e46e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e470:	81c2      	strh	r2, [r0, #14]
 800e472:	6183      	str	r3, [r0, #24]
 800e474:	4619      	mov	r1, r3
 800e476:	2208      	movs	r2, #8
 800e478:	305c      	adds	r0, #92	@ 0x5c
 800e47a:	f000 f916 	bl	800e6aa <memset>
 800e47e:	4b0d      	ldr	r3, [pc, #52]	@ (800e4b4 <std+0x58>)
 800e480:	6263      	str	r3, [r4, #36]	@ 0x24
 800e482:	4b0d      	ldr	r3, [pc, #52]	@ (800e4b8 <std+0x5c>)
 800e484:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e486:	4b0d      	ldr	r3, [pc, #52]	@ (800e4bc <std+0x60>)
 800e488:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e48a:	4b0d      	ldr	r3, [pc, #52]	@ (800e4c0 <std+0x64>)
 800e48c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e48e:	4b0d      	ldr	r3, [pc, #52]	@ (800e4c4 <std+0x68>)
 800e490:	6224      	str	r4, [r4, #32]
 800e492:	429c      	cmp	r4, r3
 800e494:	d006      	beq.n	800e4a4 <std+0x48>
 800e496:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e49a:	4294      	cmp	r4, r2
 800e49c:	d002      	beq.n	800e4a4 <std+0x48>
 800e49e:	33d0      	adds	r3, #208	@ 0xd0
 800e4a0:	429c      	cmp	r4, r3
 800e4a2:	d105      	bne.n	800e4b0 <std+0x54>
 800e4a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4ac:	f000 b970 	b.w	800e790 <__retarget_lock_init_recursive>
 800e4b0:	bd10      	pop	{r4, pc}
 800e4b2:	bf00      	nop
 800e4b4:	0800e605 	.word	0x0800e605
 800e4b8:	0800e627 	.word	0x0800e627
 800e4bc:	0800e65f 	.word	0x0800e65f
 800e4c0:	0800e683 	.word	0x0800e683
 800e4c4:	2000b7b0 	.word	0x2000b7b0

0800e4c8 <stdio_exit_handler>:
 800e4c8:	4a02      	ldr	r2, [pc, #8]	@ (800e4d4 <stdio_exit_handler+0xc>)
 800e4ca:	4903      	ldr	r1, [pc, #12]	@ (800e4d8 <stdio_exit_handler+0x10>)
 800e4cc:	4803      	ldr	r0, [pc, #12]	@ (800e4dc <stdio_exit_handler+0x14>)
 800e4ce:	f000 b869 	b.w	800e5a4 <_fwalk_sglue>
 800e4d2:	bf00      	nop
 800e4d4:	2000002c 	.word	0x2000002c
 800e4d8:	0800f095 	.word	0x0800f095
 800e4dc:	2000003c 	.word	0x2000003c

0800e4e0 <cleanup_stdio>:
 800e4e0:	6841      	ldr	r1, [r0, #4]
 800e4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e514 <cleanup_stdio+0x34>)
 800e4e4:	4299      	cmp	r1, r3
 800e4e6:	b510      	push	{r4, lr}
 800e4e8:	4604      	mov	r4, r0
 800e4ea:	d001      	beq.n	800e4f0 <cleanup_stdio+0x10>
 800e4ec:	f000 fdd2 	bl	800f094 <_fflush_r>
 800e4f0:	68a1      	ldr	r1, [r4, #8]
 800e4f2:	4b09      	ldr	r3, [pc, #36]	@ (800e518 <cleanup_stdio+0x38>)
 800e4f4:	4299      	cmp	r1, r3
 800e4f6:	d002      	beq.n	800e4fe <cleanup_stdio+0x1e>
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f000 fdcb 	bl	800f094 <_fflush_r>
 800e4fe:	68e1      	ldr	r1, [r4, #12]
 800e500:	4b06      	ldr	r3, [pc, #24]	@ (800e51c <cleanup_stdio+0x3c>)
 800e502:	4299      	cmp	r1, r3
 800e504:	d004      	beq.n	800e510 <cleanup_stdio+0x30>
 800e506:	4620      	mov	r0, r4
 800e508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e50c:	f000 bdc2 	b.w	800f094 <_fflush_r>
 800e510:	bd10      	pop	{r4, pc}
 800e512:	bf00      	nop
 800e514:	2000b7b0 	.word	0x2000b7b0
 800e518:	2000b818 	.word	0x2000b818
 800e51c:	2000b880 	.word	0x2000b880

0800e520 <global_stdio_init.part.0>:
 800e520:	b510      	push	{r4, lr}
 800e522:	4b0b      	ldr	r3, [pc, #44]	@ (800e550 <global_stdio_init.part.0+0x30>)
 800e524:	4c0b      	ldr	r4, [pc, #44]	@ (800e554 <global_stdio_init.part.0+0x34>)
 800e526:	4a0c      	ldr	r2, [pc, #48]	@ (800e558 <global_stdio_init.part.0+0x38>)
 800e528:	601a      	str	r2, [r3, #0]
 800e52a:	4620      	mov	r0, r4
 800e52c:	2200      	movs	r2, #0
 800e52e:	2104      	movs	r1, #4
 800e530:	f7ff ff94 	bl	800e45c <std>
 800e534:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e538:	2201      	movs	r2, #1
 800e53a:	2109      	movs	r1, #9
 800e53c:	f7ff ff8e 	bl	800e45c <std>
 800e540:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e544:	2202      	movs	r2, #2
 800e546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e54a:	2112      	movs	r1, #18
 800e54c:	f7ff bf86 	b.w	800e45c <std>
 800e550:	2000b8e8 	.word	0x2000b8e8
 800e554:	2000b7b0 	.word	0x2000b7b0
 800e558:	0800e4c9 	.word	0x0800e4c9

0800e55c <__sfp_lock_acquire>:
 800e55c:	4801      	ldr	r0, [pc, #4]	@ (800e564 <__sfp_lock_acquire+0x8>)
 800e55e:	f000 b918 	b.w	800e792 <__retarget_lock_acquire_recursive>
 800e562:	bf00      	nop
 800e564:	2000b8f1 	.word	0x2000b8f1

0800e568 <__sfp_lock_release>:
 800e568:	4801      	ldr	r0, [pc, #4]	@ (800e570 <__sfp_lock_release+0x8>)
 800e56a:	f000 b913 	b.w	800e794 <__retarget_lock_release_recursive>
 800e56e:	bf00      	nop
 800e570:	2000b8f1 	.word	0x2000b8f1

0800e574 <__sinit>:
 800e574:	b510      	push	{r4, lr}
 800e576:	4604      	mov	r4, r0
 800e578:	f7ff fff0 	bl	800e55c <__sfp_lock_acquire>
 800e57c:	6a23      	ldr	r3, [r4, #32]
 800e57e:	b11b      	cbz	r3, 800e588 <__sinit+0x14>
 800e580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e584:	f7ff bff0 	b.w	800e568 <__sfp_lock_release>
 800e588:	4b04      	ldr	r3, [pc, #16]	@ (800e59c <__sinit+0x28>)
 800e58a:	6223      	str	r3, [r4, #32]
 800e58c:	4b04      	ldr	r3, [pc, #16]	@ (800e5a0 <__sinit+0x2c>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d1f5      	bne.n	800e580 <__sinit+0xc>
 800e594:	f7ff ffc4 	bl	800e520 <global_stdio_init.part.0>
 800e598:	e7f2      	b.n	800e580 <__sinit+0xc>
 800e59a:	bf00      	nop
 800e59c:	0800e4e1 	.word	0x0800e4e1
 800e5a0:	2000b8e8 	.word	0x2000b8e8

0800e5a4 <_fwalk_sglue>:
 800e5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5a8:	4607      	mov	r7, r0
 800e5aa:	4688      	mov	r8, r1
 800e5ac:	4614      	mov	r4, r2
 800e5ae:	2600      	movs	r6, #0
 800e5b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5b4:	f1b9 0901 	subs.w	r9, r9, #1
 800e5b8:	d505      	bpl.n	800e5c6 <_fwalk_sglue+0x22>
 800e5ba:	6824      	ldr	r4, [r4, #0]
 800e5bc:	2c00      	cmp	r4, #0
 800e5be:	d1f7      	bne.n	800e5b0 <_fwalk_sglue+0xc>
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5c6:	89ab      	ldrh	r3, [r5, #12]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d907      	bls.n	800e5dc <_fwalk_sglue+0x38>
 800e5cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	d003      	beq.n	800e5dc <_fwalk_sglue+0x38>
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	4638      	mov	r0, r7
 800e5d8:	47c0      	blx	r8
 800e5da:	4306      	orrs	r6, r0
 800e5dc:	3568      	adds	r5, #104	@ 0x68
 800e5de:	e7e9      	b.n	800e5b4 <_fwalk_sglue+0x10>

0800e5e0 <iprintf>:
 800e5e0:	b40f      	push	{r0, r1, r2, r3}
 800e5e2:	b507      	push	{r0, r1, r2, lr}
 800e5e4:	4906      	ldr	r1, [pc, #24]	@ (800e600 <iprintf+0x20>)
 800e5e6:	ab04      	add	r3, sp, #16
 800e5e8:	6808      	ldr	r0, [r1, #0]
 800e5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5ee:	6881      	ldr	r1, [r0, #8]
 800e5f0:	9301      	str	r3, [sp, #4]
 800e5f2:	f000 fa27 	bl	800ea44 <_vfiprintf_r>
 800e5f6:	b003      	add	sp, #12
 800e5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5fc:	b004      	add	sp, #16
 800e5fe:	4770      	bx	lr
 800e600:	20000038 	.word	0x20000038

0800e604 <__sread>:
 800e604:	b510      	push	{r4, lr}
 800e606:	460c      	mov	r4, r1
 800e608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e60c:	f000 f878 	bl	800e700 <_read_r>
 800e610:	2800      	cmp	r0, #0
 800e612:	bfab      	itete	ge
 800e614:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e616:	89a3      	ldrhlt	r3, [r4, #12]
 800e618:	181b      	addge	r3, r3, r0
 800e61a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e61e:	bfac      	ite	ge
 800e620:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e622:	81a3      	strhlt	r3, [r4, #12]
 800e624:	bd10      	pop	{r4, pc}

0800e626 <__swrite>:
 800e626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e62a:	461f      	mov	r7, r3
 800e62c:	898b      	ldrh	r3, [r1, #12]
 800e62e:	05db      	lsls	r3, r3, #23
 800e630:	4605      	mov	r5, r0
 800e632:	460c      	mov	r4, r1
 800e634:	4616      	mov	r6, r2
 800e636:	d505      	bpl.n	800e644 <__swrite+0x1e>
 800e638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e63c:	2302      	movs	r3, #2
 800e63e:	2200      	movs	r2, #0
 800e640:	f000 f84c 	bl	800e6dc <_lseek_r>
 800e644:	89a3      	ldrh	r3, [r4, #12]
 800e646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e64a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e64e:	81a3      	strh	r3, [r4, #12]
 800e650:	4632      	mov	r2, r6
 800e652:	463b      	mov	r3, r7
 800e654:	4628      	mov	r0, r5
 800e656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e65a:	f000 b863 	b.w	800e724 <_write_r>

0800e65e <__sseek>:
 800e65e:	b510      	push	{r4, lr}
 800e660:	460c      	mov	r4, r1
 800e662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e666:	f000 f839 	bl	800e6dc <_lseek_r>
 800e66a:	1c43      	adds	r3, r0, #1
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	bf15      	itete	ne
 800e670:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e672:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e676:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e67a:	81a3      	strheq	r3, [r4, #12]
 800e67c:	bf18      	it	ne
 800e67e:	81a3      	strhne	r3, [r4, #12]
 800e680:	bd10      	pop	{r4, pc}

0800e682 <__sclose>:
 800e682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e686:	f000 b819 	b.w	800e6bc <_close_r>

0800e68a <memcmp>:
 800e68a:	b510      	push	{r4, lr}
 800e68c:	3901      	subs	r1, #1
 800e68e:	4402      	add	r2, r0
 800e690:	4290      	cmp	r0, r2
 800e692:	d101      	bne.n	800e698 <memcmp+0xe>
 800e694:	2000      	movs	r0, #0
 800e696:	e005      	b.n	800e6a4 <memcmp+0x1a>
 800e698:	7803      	ldrb	r3, [r0, #0]
 800e69a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e69e:	42a3      	cmp	r3, r4
 800e6a0:	d001      	beq.n	800e6a6 <memcmp+0x1c>
 800e6a2:	1b18      	subs	r0, r3, r4
 800e6a4:	bd10      	pop	{r4, pc}
 800e6a6:	3001      	adds	r0, #1
 800e6a8:	e7f2      	b.n	800e690 <memcmp+0x6>

0800e6aa <memset>:
 800e6aa:	4402      	add	r2, r0
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d100      	bne.n	800e6b4 <memset+0xa>
 800e6b2:	4770      	bx	lr
 800e6b4:	f803 1b01 	strb.w	r1, [r3], #1
 800e6b8:	e7f9      	b.n	800e6ae <memset+0x4>
	...

0800e6bc <_close_r>:
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4d06      	ldr	r5, [pc, #24]	@ (800e6d8 <_close_r+0x1c>)
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	4608      	mov	r0, r1
 800e6c6:	602b      	str	r3, [r5, #0]
 800e6c8:	f7f2 f916 	bl	80008f8 <_close>
 800e6cc:	1c43      	adds	r3, r0, #1
 800e6ce:	d102      	bne.n	800e6d6 <_close_r+0x1a>
 800e6d0:	682b      	ldr	r3, [r5, #0]
 800e6d2:	b103      	cbz	r3, 800e6d6 <_close_r+0x1a>
 800e6d4:	6023      	str	r3, [r4, #0]
 800e6d6:	bd38      	pop	{r3, r4, r5, pc}
 800e6d8:	2000b8ec 	.word	0x2000b8ec

0800e6dc <_lseek_r>:
 800e6dc:	b538      	push	{r3, r4, r5, lr}
 800e6de:	4d07      	ldr	r5, [pc, #28]	@ (800e6fc <_lseek_r+0x20>)
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	4608      	mov	r0, r1
 800e6e4:	4611      	mov	r1, r2
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	602a      	str	r2, [r5, #0]
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	f7f2 f92b 	bl	8000946 <_lseek>
 800e6f0:	1c43      	adds	r3, r0, #1
 800e6f2:	d102      	bne.n	800e6fa <_lseek_r+0x1e>
 800e6f4:	682b      	ldr	r3, [r5, #0]
 800e6f6:	b103      	cbz	r3, 800e6fa <_lseek_r+0x1e>
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	bd38      	pop	{r3, r4, r5, pc}
 800e6fc:	2000b8ec 	.word	0x2000b8ec

0800e700 <_read_r>:
 800e700:	b538      	push	{r3, r4, r5, lr}
 800e702:	4d07      	ldr	r5, [pc, #28]	@ (800e720 <_read_r+0x20>)
 800e704:	4604      	mov	r4, r0
 800e706:	4608      	mov	r0, r1
 800e708:	4611      	mov	r1, r2
 800e70a:	2200      	movs	r2, #0
 800e70c:	602a      	str	r2, [r5, #0]
 800e70e:	461a      	mov	r2, r3
 800e710:	f7f2 f8d5 	bl	80008be <_read>
 800e714:	1c43      	adds	r3, r0, #1
 800e716:	d102      	bne.n	800e71e <_read_r+0x1e>
 800e718:	682b      	ldr	r3, [r5, #0]
 800e71a:	b103      	cbz	r3, 800e71e <_read_r+0x1e>
 800e71c:	6023      	str	r3, [r4, #0]
 800e71e:	bd38      	pop	{r3, r4, r5, pc}
 800e720:	2000b8ec 	.word	0x2000b8ec

0800e724 <_write_r>:
 800e724:	b538      	push	{r3, r4, r5, lr}
 800e726:	4d07      	ldr	r5, [pc, #28]	@ (800e744 <_write_r+0x20>)
 800e728:	4604      	mov	r4, r0
 800e72a:	4608      	mov	r0, r1
 800e72c:	4611      	mov	r1, r2
 800e72e:	2200      	movs	r2, #0
 800e730:	602a      	str	r2, [r5, #0]
 800e732:	461a      	mov	r2, r3
 800e734:	f7ff fe40 	bl	800e3b8 <_write>
 800e738:	1c43      	adds	r3, r0, #1
 800e73a:	d102      	bne.n	800e742 <_write_r+0x1e>
 800e73c:	682b      	ldr	r3, [r5, #0]
 800e73e:	b103      	cbz	r3, 800e742 <_write_r+0x1e>
 800e740:	6023      	str	r3, [r4, #0]
 800e742:	bd38      	pop	{r3, r4, r5, pc}
 800e744:	2000b8ec 	.word	0x2000b8ec

0800e748 <__libc_init_array>:
 800e748:	b570      	push	{r4, r5, r6, lr}
 800e74a:	4d0d      	ldr	r5, [pc, #52]	@ (800e780 <__libc_init_array+0x38>)
 800e74c:	4c0d      	ldr	r4, [pc, #52]	@ (800e784 <__libc_init_array+0x3c>)
 800e74e:	1b64      	subs	r4, r4, r5
 800e750:	10a4      	asrs	r4, r4, #2
 800e752:	2600      	movs	r6, #0
 800e754:	42a6      	cmp	r6, r4
 800e756:	d109      	bne.n	800e76c <__libc_init_array+0x24>
 800e758:	4d0b      	ldr	r5, [pc, #44]	@ (800e788 <__libc_init_array+0x40>)
 800e75a:	4c0c      	ldr	r4, [pc, #48]	@ (800e78c <__libc_init_array+0x44>)
 800e75c:	f000 fe48 	bl	800f3f0 <_init>
 800e760:	1b64      	subs	r4, r4, r5
 800e762:	10a4      	asrs	r4, r4, #2
 800e764:	2600      	movs	r6, #0
 800e766:	42a6      	cmp	r6, r4
 800e768:	d105      	bne.n	800e776 <__libc_init_array+0x2e>
 800e76a:	bd70      	pop	{r4, r5, r6, pc}
 800e76c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e770:	4798      	blx	r3
 800e772:	3601      	adds	r6, #1
 800e774:	e7ee      	b.n	800e754 <__libc_init_array+0xc>
 800e776:	f855 3b04 	ldr.w	r3, [r5], #4
 800e77a:	4798      	blx	r3
 800e77c:	3601      	adds	r6, #1
 800e77e:	e7f2      	b.n	800e766 <__libc_init_array+0x1e>
 800e780:	08012340 	.word	0x08012340
 800e784:	08012340 	.word	0x08012340
 800e788:	08012340 	.word	0x08012340
 800e78c:	08012344 	.word	0x08012344

0800e790 <__retarget_lock_init_recursive>:
 800e790:	4770      	bx	lr

0800e792 <__retarget_lock_acquire_recursive>:
 800e792:	4770      	bx	lr

0800e794 <__retarget_lock_release_recursive>:
 800e794:	4770      	bx	lr

0800e796 <memcpy>:
 800e796:	440a      	add	r2, r1
 800e798:	4291      	cmp	r1, r2
 800e79a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e79e:	d100      	bne.n	800e7a2 <memcpy+0xc>
 800e7a0:	4770      	bx	lr
 800e7a2:	b510      	push	{r4, lr}
 800e7a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7ac:	4291      	cmp	r1, r2
 800e7ae:	d1f9      	bne.n	800e7a4 <memcpy+0xe>
 800e7b0:	bd10      	pop	{r4, pc}
	...

0800e7b4 <__assert_func>:
 800e7b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7b6:	4614      	mov	r4, r2
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	4b09      	ldr	r3, [pc, #36]	@ (800e7e0 <__assert_func+0x2c>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4605      	mov	r5, r0
 800e7c0:	68d8      	ldr	r0, [r3, #12]
 800e7c2:	b14c      	cbz	r4, 800e7d8 <__assert_func+0x24>
 800e7c4:	4b07      	ldr	r3, [pc, #28]	@ (800e7e4 <__assert_func+0x30>)
 800e7c6:	9100      	str	r1, [sp, #0]
 800e7c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7cc:	4906      	ldr	r1, [pc, #24]	@ (800e7e8 <__assert_func+0x34>)
 800e7ce:	462b      	mov	r3, r5
 800e7d0:	f000 fc88 	bl	800f0e4 <fiprintf>
 800e7d4:	f000 fd3c 	bl	800f250 <abort>
 800e7d8:	4b04      	ldr	r3, [pc, #16]	@ (800e7ec <__assert_func+0x38>)
 800e7da:	461c      	mov	r4, r3
 800e7dc:	e7f3      	b.n	800e7c6 <__assert_func+0x12>
 800e7de:	bf00      	nop
 800e7e0:	20000038 	.word	0x20000038
 800e7e4:	080122c7 	.word	0x080122c7
 800e7e8:	080122d4 	.word	0x080122d4
 800e7ec:	08012302 	.word	0x08012302

0800e7f0 <_free_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	4605      	mov	r5, r0
 800e7f4:	2900      	cmp	r1, #0
 800e7f6:	d041      	beq.n	800e87c <_free_r+0x8c>
 800e7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7fc:	1f0c      	subs	r4, r1, #4
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	bfb8      	it	lt
 800e802:	18e4      	addlt	r4, r4, r3
 800e804:	f000 f8e8 	bl	800e9d8 <__malloc_lock>
 800e808:	4a1d      	ldr	r2, [pc, #116]	@ (800e880 <_free_r+0x90>)
 800e80a:	6813      	ldr	r3, [r2, #0]
 800e80c:	b933      	cbnz	r3, 800e81c <_free_r+0x2c>
 800e80e:	6063      	str	r3, [r4, #4]
 800e810:	6014      	str	r4, [r2, #0]
 800e812:	4628      	mov	r0, r5
 800e814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e818:	f000 b8e4 	b.w	800e9e4 <__malloc_unlock>
 800e81c:	42a3      	cmp	r3, r4
 800e81e:	d908      	bls.n	800e832 <_free_r+0x42>
 800e820:	6820      	ldr	r0, [r4, #0]
 800e822:	1821      	adds	r1, r4, r0
 800e824:	428b      	cmp	r3, r1
 800e826:	bf01      	itttt	eq
 800e828:	6819      	ldreq	r1, [r3, #0]
 800e82a:	685b      	ldreq	r3, [r3, #4]
 800e82c:	1809      	addeq	r1, r1, r0
 800e82e:	6021      	streq	r1, [r4, #0]
 800e830:	e7ed      	b.n	800e80e <_free_r+0x1e>
 800e832:	461a      	mov	r2, r3
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	b10b      	cbz	r3, 800e83c <_free_r+0x4c>
 800e838:	42a3      	cmp	r3, r4
 800e83a:	d9fa      	bls.n	800e832 <_free_r+0x42>
 800e83c:	6811      	ldr	r1, [r2, #0]
 800e83e:	1850      	adds	r0, r2, r1
 800e840:	42a0      	cmp	r0, r4
 800e842:	d10b      	bne.n	800e85c <_free_r+0x6c>
 800e844:	6820      	ldr	r0, [r4, #0]
 800e846:	4401      	add	r1, r0
 800e848:	1850      	adds	r0, r2, r1
 800e84a:	4283      	cmp	r3, r0
 800e84c:	6011      	str	r1, [r2, #0]
 800e84e:	d1e0      	bne.n	800e812 <_free_r+0x22>
 800e850:	6818      	ldr	r0, [r3, #0]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	6053      	str	r3, [r2, #4]
 800e856:	4408      	add	r0, r1
 800e858:	6010      	str	r0, [r2, #0]
 800e85a:	e7da      	b.n	800e812 <_free_r+0x22>
 800e85c:	d902      	bls.n	800e864 <_free_r+0x74>
 800e85e:	230c      	movs	r3, #12
 800e860:	602b      	str	r3, [r5, #0]
 800e862:	e7d6      	b.n	800e812 <_free_r+0x22>
 800e864:	6820      	ldr	r0, [r4, #0]
 800e866:	1821      	adds	r1, r4, r0
 800e868:	428b      	cmp	r3, r1
 800e86a:	bf04      	itt	eq
 800e86c:	6819      	ldreq	r1, [r3, #0]
 800e86e:	685b      	ldreq	r3, [r3, #4]
 800e870:	6063      	str	r3, [r4, #4]
 800e872:	bf04      	itt	eq
 800e874:	1809      	addeq	r1, r1, r0
 800e876:	6021      	streq	r1, [r4, #0]
 800e878:	6054      	str	r4, [r2, #4]
 800e87a:	e7ca      	b.n	800e812 <_free_r+0x22>
 800e87c:	bd38      	pop	{r3, r4, r5, pc}
 800e87e:	bf00      	nop
 800e880:	2000b8f8 	.word	0x2000b8f8

0800e884 <malloc>:
 800e884:	4b02      	ldr	r3, [pc, #8]	@ (800e890 <malloc+0xc>)
 800e886:	4601      	mov	r1, r0
 800e888:	6818      	ldr	r0, [r3, #0]
 800e88a:	f000 b825 	b.w	800e8d8 <_malloc_r>
 800e88e:	bf00      	nop
 800e890:	20000038 	.word	0x20000038

0800e894 <sbrk_aligned>:
 800e894:	b570      	push	{r4, r5, r6, lr}
 800e896:	4e0f      	ldr	r6, [pc, #60]	@ (800e8d4 <sbrk_aligned+0x40>)
 800e898:	460c      	mov	r4, r1
 800e89a:	6831      	ldr	r1, [r6, #0]
 800e89c:	4605      	mov	r5, r0
 800e89e:	b911      	cbnz	r1, 800e8a6 <sbrk_aligned+0x12>
 800e8a0:	f000 fcc6 	bl	800f230 <_sbrk_r>
 800e8a4:	6030      	str	r0, [r6, #0]
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	f000 fcc1 	bl	800f230 <_sbrk_r>
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	d103      	bne.n	800e8ba <sbrk_aligned+0x26>
 800e8b2:	f04f 34ff 	mov.w	r4, #4294967295
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ba:	1cc4      	adds	r4, r0, #3
 800e8bc:	f024 0403 	bic.w	r4, r4, #3
 800e8c0:	42a0      	cmp	r0, r4
 800e8c2:	d0f8      	beq.n	800e8b6 <sbrk_aligned+0x22>
 800e8c4:	1a21      	subs	r1, r4, r0
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f000 fcb2 	bl	800f230 <_sbrk_r>
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	d1f2      	bne.n	800e8b6 <sbrk_aligned+0x22>
 800e8d0:	e7ef      	b.n	800e8b2 <sbrk_aligned+0x1e>
 800e8d2:	bf00      	nop
 800e8d4:	2000b8f4 	.word	0x2000b8f4

0800e8d8 <_malloc_r>:
 800e8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8dc:	1ccd      	adds	r5, r1, #3
 800e8de:	f025 0503 	bic.w	r5, r5, #3
 800e8e2:	3508      	adds	r5, #8
 800e8e4:	2d0c      	cmp	r5, #12
 800e8e6:	bf38      	it	cc
 800e8e8:	250c      	movcc	r5, #12
 800e8ea:	2d00      	cmp	r5, #0
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	db01      	blt.n	800e8f4 <_malloc_r+0x1c>
 800e8f0:	42a9      	cmp	r1, r5
 800e8f2:	d904      	bls.n	800e8fe <_malloc_r+0x26>
 800e8f4:	230c      	movs	r3, #12
 800e8f6:	6033      	str	r3, [r6, #0]
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e9d4 <_malloc_r+0xfc>
 800e902:	f000 f869 	bl	800e9d8 <__malloc_lock>
 800e906:	f8d8 3000 	ldr.w	r3, [r8]
 800e90a:	461c      	mov	r4, r3
 800e90c:	bb44      	cbnz	r4, 800e960 <_malloc_r+0x88>
 800e90e:	4629      	mov	r1, r5
 800e910:	4630      	mov	r0, r6
 800e912:	f7ff ffbf 	bl	800e894 <sbrk_aligned>
 800e916:	1c43      	adds	r3, r0, #1
 800e918:	4604      	mov	r4, r0
 800e91a:	d158      	bne.n	800e9ce <_malloc_r+0xf6>
 800e91c:	f8d8 4000 	ldr.w	r4, [r8]
 800e920:	4627      	mov	r7, r4
 800e922:	2f00      	cmp	r7, #0
 800e924:	d143      	bne.n	800e9ae <_malloc_r+0xd6>
 800e926:	2c00      	cmp	r4, #0
 800e928:	d04b      	beq.n	800e9c2 <_malloc_r+0xea>
 800e92a:	6823      	ldr	r3, [r4, #0]
 800e92c:	4639      	mov	r1, r7
 800e92e:	4630      	mov	r0, r6
 800e930:	eb04 0903 	add.w	r9, r4, r3
 800e934:	f000 fc7c 	bl	800f230 <_sbrk_r>
 800e938:	4581      	cmp	r9, r0
 800e93a:	d142      	bne.n	800e9c2 <_malloc_r+0xea>
 800e93c:	6821      	ldr	r1, [r4, #0]
 800e93e:	1a6d      	subs	r5, r5, r1
 800e940:	4629      	mov	r1, r5
 800e942:	4630      	mov	r0, r6
 800e944:	f7ff ffa6 	bl	800e894 <sbrk_aligned>
 800e948:	3001      	adds	r0, #1
 800e94a:	d03a      	beq.n	800e9c2 <_malloc_r+0xea>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	442b      	add	r3, r5
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	f8d8 3000 	ldr.w	r3, [r8]
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	bb62      	cbnz	r2, 800e9b4 <_malloc_r+0xdc>
 800e95a:	f8c8 7000 	str.w	r7, [r8]
 800e95e:	e00f      	b.n	800e980 <_malloc_r+0xa8>
 800e960:	6822      	ldr	r2, [r4, #0]
 800e962:	1b52      	subs	r2, r2, r5
 800e964:	d420      	bmi.n	800e9a8 <_malloc_r+0xd0>
 800e966:	2a0b      	cmp	r2, #11
 800e968:	d917      	bls.n	800e99a <_malloc_r+0xc2>
 800e96a:	1961      	adds	r1, r4, r5
 800e96c:	42a3      	cmp	r3, r4
 800e96e:	6025      	str	r5, [r4, #0]
 800e970:	bf18      	it	ne
 800e972:	6059      	strne	r1, [r3, #4]
 800e974:	6863      	ldr	r3, [r4, #4]
 800e976:	bf08      	it	eq
 800e978:	f8c8 1000 	streq.w	r1, [r8]
 800e97c:	5162      	str	r2, [r4, r5]
 800e97e:	604b      	str	r3, [r1, #4]
 800e980:	4630      	mov	r0, r6
 800e982:	f000 f82f 	bl	800e9e4 <__malloc_unlock>
 800e986:	f104 000b 	add.w	r0, r4, #11
 800e98a:	1d23      	adds	r3, r4, #4
 800e98c:	f020 0007 	bic.w	r0, r0, #7
 800e990:	1ac2      	subs	r2, r0, r3
 800e992:	bf1c      	itt	ne
 800e994:	1a1b      	subne	r3, r3, r0
 800e996:	50a3      	strne	r3, [r4, r2]
 800e998:	e7af      	b.n	800e8fa <_malloc_r+0x22>
 800e99a:	6862      	ldr	r2, [r4, #4]
 800e99c:	42a3      	cmp	r3, r4
 800e99e:	bf0c      	ite	eq
 800e9a0:	f8c8 2000 	streq.w	r2, [r8]
 800e9a4:	605a      	strne	r2, [r3, #4]
 800e9a6:	e7eb      	b.n	800e980 <_malloc_r+0xa8>
 800e9a8:	4623      	mov	r3, r4
 800e9aa:	6864      	ldr	r4, [r4, #4]
 800e9ac:	e7ae      	b.n	800e90c <_malloc_r+0x34>
 800e9ae:	463c      	mov	r4, r7
 800e9b0:	687f      	ldr	r7, [r7, #4]
 800e9b2:	e7b6      	b.n	800e922 <_malloc_r+0x4a>
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	42a3      	cmp	r3, r4
 800e9ba:	d1fb      	bne.n	800e9b4 <_malloc_r+0xdc>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	6053      	str	r3, [r2, #4]
 800e9c0:	e7de      	b.n	800e980 <_malloc_r+0xa8>
 800e9c2:	230c      	movs	r3, #12
 800e9c4:	6033      	str	r3, [r6, #0]
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	f000 f80c 	bl	800e9e4 <__malloc_unlock>
 800e9cc:	e794      	b.n	800e8f8 <_malloc_r+0x20>
 800e9ce:	6005      	str	r5, [r0, #0]
 800e9d0:	e7d6      	b.n	800e980 <_malloc_r+0xa8>
 800e9d2:	bf00      	nop
 800e9d4:	2000b8f8 	.word	0x2000b8f8

0800e9d8 <__malloc_lock>:
 800e9d8:	4801      	ldr	r0, [pc, #4]	@ (800e9e0 <__malloc_lock+0x8>)
 800e9da:	f7ff beda 	b.w	800e792 <__retarget_lock_acquire_recursive>
 800e9de:	bf00      	nop
 800e9e0:	2000b8f0 	.word	0x2000b8f0

0800e9e4 <__malloc_unlock>:
 800e9e4:	4801      	ldr	r0, [pc, #4]	@ (800e9ec <__malloc_unlock+0x8>)
 800e9e6:	f7ff bed5 	b.w	800e794 <__retarget_lock_release_recursive>
 800e9ea:	bf00      	nop
 800e9ec:	2000b8f0 	.word	0x2000b8f0

0800e9f0 <__sfputc_r>:
 800e9f0:	6893      	ldr	r3, [r2, #8]
 800e9f2:	3b01      	subs	r3, #1
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	b410      	push	{r4}
 800e9f8:	6093      	str	r3, [r2, #8]
 800e9fa:	da08      	bge.n	800ea0e <__sfputc_r+0x1e>
 800e9fc:	6994      	ldr	r4, [r2, #24]
 800e9fe:	42a3      	cmp	r3, r4
 800ea00:	db01      	blt.n	800ea06 <__sfputc_r+0x16>
 800ea02:	290a      	cmp	r1, #10
 800ea04:	d103      	bne.n	800ea0e <__sfputc_r+0x1e>
 800ea06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea0a:	f000 bb7d 	b.w	800f108 <__swbuf_r>
 800ea0e:	6813      	ldr	r3, [r2, #0]
 800ea10:	1c58      	adds	r0, r3, #1
 800ea12:	6010      	str	r0, [r2, #0]
 800ea14:	7019      	strb	r1, [r3, #0]
 800ea16:	4608      	mov	r0, r1
 800ea18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <__sfputs_r>:
 800ea1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea20:	4606      	mov	r6, r0
 800ea22:	460f      	mov	r7, r1
 800ea24:	4614      	mov	r4, r2
 800ea26:	18d5      	adds	r5, r2, r3
 800ea28:	42ac      	cmp	r4, r5
 800ea2a:	d101      	bne.n	800ea30 <__sfputs_r+0x12>
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	e007      	b.n	800ea40 <__sfputs_r+0x22>
 800ea30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea34:	463a      	mov	r2, r7
 800ea36:	4630      	mov	r0, r6
 800ea38:	f7ff ffda 	bl	800e9f0 <__sfputc_r>
 800ea3c:	1c43      	adds	r3, r0, #1
 800ea3e:	d1f3      	bne.n	800ea28 <__sfputs_r+0xa>
 800ea40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea44 <_vfiprintf_r>:
 800ea44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea48:	460d      	mov	r5, r1
 800ea4a:	b09d      	sub	sp, #116	@ 0x74
 800ea4c:	4614      	mov	r4, r2
 800ea4e:	4698      	mov	r8, r3
 800ea50:	4606      	mov	r6, r0
 800ea52:	b118      	cbz	r0, 800ea5c <_vfiprintf_r+0x18>
 800ea54:	6a03      	ldr	r3, [r0, #32]
 800ea56:	b90b      	cbnz	r3, 800ea5c <_vfiprintf_r+0x18>
 800ea58:	f7ff fd8c 	bl	800e574 <__sinit>
 800ea5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea5e:	07d9      	lsls	r1, r3, #31
 800ea60:	d405      	bmi.n	800ea6e <_vfiprintf_r+0x2a>
 800ea62:	89ab      	ldrh	r3, [r5, #12]
 800ea64:	059a      	lsls	r2, r3, #22
 800ea66:	d402      	bmi.n	800ea6e <_vfiprintf_r+0x2a>
 800ea68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea6a:	f7ff fe92 	bl	800e792 <__retarget_lock_acquire_recursive>
 800ea6e:	89ab      	ldrh	r3, [r5, #12]
 800ea70:	071b      	lsls	r3, r3, #28
 800ea72:	d501      	bpl.n	800ea78 <_vfiprintf_r+0x34>
 800ea74:	692b      	ldr	r3, [r5, #16]
 800ea76:	b99b      	cbnz	r3, 800eaa0 <_vfiprintf_r+0x5c>
 800ea78:	4629      	mov	r1, r5
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	f000 fb82 	bl	800f184 <__swsetup_r>
 800ea80:	b170      	cbz	r0, 800eaa0 <_vfiprintf_r+0x5c>
 800ea82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea84:	07dc      	lsls	r4, r3, #31
 800ea86:	d504      	bpl.n	800ea92 <_vfiprintf_r+0x4e>
 800ea88:	f04f 30ff 	mov.w	r0, #4294967295
 800ea8c:	b01d      	add	sp, #116	@ 0x74
 800ea8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea92:	89ab      	ldrh	r3, [r5, #12]
 800ea94:	0598      	lsls	r0, r3, #22
 800ea96:	d4f7      	bmi.n	800ea88 <_vfiprintf_r+0x44>
 800ea98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea9a:	f7ff fe7b 	bl	800e794 <__retarget_lock_release_recursive>
 800ea9e:	e7f3      	b.n	800ea88 <_vfiprintf_r+0x44>
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaa4:	2320      	movs	r3, #32
 800eaa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eaaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800eaae:	2330      	movs	r3, #48	@ 0x30
 800eab0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ec60 <_vfiprintf_r+0x21c>
 800eab4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eab8:	f04f 0901 	mov.w	r9, #1
 800eabc:	4623      	mov	r3, r4
 800eabe:	469a      	mov	sl, r3
 800eac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eac4:	b10a      	cbz	r2, 800eaca <_vfiprintf_r+0x86>
 800eac6:	2a25      	cmp	r2, #37	@ 0x25
 800eac8:	d1f9      	bne.n	800eabe <_vfiprintf_r+0x7a>
 800eaca:	ebba 0b04 	subs.w	fp, sl, r4
 800eace:	d00b      	beq.n	800eae8 <_vfiprintf_r+0xa4>
 800ead0:	465b      	mov	r3, fp
 800ead2:	4622      	mov	r2, r4
 800ead4:	4629      	mov	r1, r5
 800ead6:	4630      	mov	r0, r6
 800ead8:	f7ff ffa1 	bl	800ea1e <__sfputs_r>
 800eadc:	3001      	adds	r0, #1
 800eade:	f000 80a7 	beq.w	800ec30 <_vfiprintf_r+0x1ec>
 800eae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eae4:	445a      	add	r2, fp
 800eae6:	9209      	str	r2, [sp, #36]	@ 0x24
 800eae8:	f89a 3000 	ldrb.w	r3, [sl]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f000 809f 	beq.w	800ec30 <_vfiprintf_r+0x1ec>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eafc:	f10a 0a01 	add.w	sl, sl, #1
 800eb00:	9304      	str	r3, [sp, #16]
 800eb02:	9307      	str	r3, [sp, #28]
 800eb04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb08:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb0a:	4654      	mov	r4, sl
 800eb0c:	2205      	movs	r2, #5
 800eb0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb12:	4853      	ldr	r0, [pc, #332]	@ (800ec60 <_vfiprintf_r+0x21c>)
 800eb14:	f7f1 fb7c 	bl	8000210 <memchr>
 800eb18:	9a04      	ldr	r2, [sp, #16]
 800eb1a:	b9d8      	cbnz	r0, 800eb54 <_vfiprintf_r+0x110>
 800eb1c:	06d1      	lsls	r1, r2, #27
 800eb1e:	bf44      	itt	mi
 800eb20:	2320      	movmi	r3, #32
 800eb22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb26:	0713      	lsls	r3, r2, #28
 800eb28:	bf44      	itt	mi
 800eb2a:	232b      	movmi	r3, #43	@ 0x2b
 800eb2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb30:	f89a 3000 	ldrb.w	r3, [sl]
 800eb34:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb36:	d015      	beq.n	800eb64 <_vfiprintf_r+0x120>
 800eb38:	9a07      	ldr	r2, [sp, #28]
 800eb3a:	4654      	mov	r4, sl
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	f04f 0c0a 	mov.w	ip, #10
 800eb42:	4621      	mov	r1, r4
 800eb44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb48:	3b30      	subs	r3, #48	@ 0x30
 800eb4a:	2b09      	cmp	r3, #9
 800eb4c:	d94b      	bls.n	800ebe6 <_vfiprintf_r+0x1a2>
 800eb4e:	b1b0      	cbz	r0, 800eb7e <_vfiprintf_r+0x13a>
 800eb50:	9207      	str	r2, [sp, #28]
 800eb52:	e014      	b.n	800eb7e <_vfiprintf_r+0x13a>
 800eb54:	eba0 0308 	sub.w	r3, r0, r8
 800eb58:	fa09 f303 	lsl.w	r3, r9, r3
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	9304      	str	r3, [sp, #16]
 800eb60:	46a2      	mov	sl, r4
 800eb62:	e7d2      	b.n	800eb0a <_vfiprintf_r+0xc6>
 800eb64:	9b03      	ldr	r3, [sp, #12]
 800eb66:	1d19      	adds	r1, r3, #4
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	9103      	str	r1, [sp, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	bfbb      	ittet	lt
 800eb70:	425b      	neglt	r3, r3
 800eb72:	f042 0202 	orrlt.w	r2, r2, #2
 800eb76:	9307      	strge	r3, [sp, #28]
 800eb78:	9307      	strlt	r3, [sp, #28]
 800eb7a:	bfb8      	it	lt
 800eb7c:	9204      	strlt	r2, [sp, #16]
 800eb7e:	7823      	ldrb	r3, [r4, #0]
 800eb80:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb82:	d10a      	bne.n	800eb9a <_vfiprintf_r+0x156>
 800eb84:	7863      	ldrb	r3, [r4, #1]
 800eb86:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb88:	d132      	bne.n	800ebf0 <_vfiprintf_r+0x1ac>
 800eb8a:	9b03      	ldr	r3, [sp, #12]
 800eb8c:	1d1a      	adds	r2, r3, #4
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	9203      	str	r2, [sp, #12]
 800eb92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb96:	3402      	adds	r4, #2
 800eb98:	9305      	str	r3, [sp, #20]
 800eb9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ec70 <_vfiprintf_r+0x22c>
 800eb9e:	7821      	ldrb	r1, [r4, #0]
 800eba0:	2203      	movs	r2, #3
 800eba2:	4650      	mov	r0, sl
 800eba4:	f7f1 fb34 	bl	8000210 <memchr>
 800eba8:	b138      	cbz	r0, 800ebba <_vfiprintf_r+0x176>
 800ebaa:	9b04      	ldr	r3, [sp, #16]
 800ebac:	eba0 000a 	sub.w	r0, r0, sl
 800ebb0:	2240      	movs	r2, #64	@ 0x40
 800ebb2:	4082      	lsls	r2, r0
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	3401      	adds	r4, #1
 800ebb8:	9304      	str	r3, [sp, #16]
 800ebba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebbe:	4829      	ldr	r0, [pc, #164]	@ (800ec64 <_vfiprintf_r+0x220>)
 800ebc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebc4:	2206      	movs	r2, #6
 800ebc6:	f7f1 fb23 	bl	8000210 <memchr>
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d03f      	beq.n	800ec4e <_vfiprintf_r+0x20a>
 800ebce:	4b26      	ldr	r3, [pc, #152]	@ (800ec68 <_vfiprintf_r+0x224>)
 800ebd0:	bb1b      	cbnz	r3, 800ec1a <_vfiprintf_r+0x1d6>
 800ebd2:	9b03      	ldr	r3, [sp, #12]
 800ebd4:	3307      	adds	r3, #7
 800ebd6:	f023 0307 	bic.w	r3, r3, #7
 800ebda:	3308      	adds	r3, #8
 800ebdc:	9303      	str	r3, [sp, #12]
 800ebde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebe0:	443b      	add	r3, r7
 800ebe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebe4:	e76a      	b.n	800eabc <_vfiprintf_r+0x78>
 800ebe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebea:	460c      	mov	r4, r1
 800ebec:	2001      	movs	r0, #1
 800ebee:	e7a8      	b.n	800eb42 <_vfiprintf_r+0xfe>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	3401      	adds	r4, #1
 800ebf4:	9305      	str	r3, [sp, #20]
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	f04f 0c0a 	mov.w	ip, #10
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec02:	3a30      	subs	r2, #48	@ 0x30
 800ec04:	2a09      	cmp	r2, #9
 800ec06:	d903      	bls.n	800ec10 <_vfiprintf_r+0x1cc>
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d0c6      	beq.n	800eb9a <_vfiprintf_r+0x156>
 800ec0c:	9105      	str	r1, [sp, #20]
 800ec0e:	e7c4      	b.n	800eb9a <_vfiprintf_r+0x156>
 800ec10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec14:	4604      	mov	r4, r0
 800ec16:	2301      	movs	r3, #1
 800ec18:	e7f0      	b.n	800ebfc <_vfiprintf_r+0x1b8>
 800ec1a:	ab03      	add	r3, sp, #12
 800ec1c:	9300      	str	r3, [sp, #0]
 800ec1e:	462a      	mov	r2, r5
 800ec20:	4b12      	ldr	r3, [pc, #72]	@ (800ec6c <_vfiprintf_r+0x228>)
 800ec22:	a904      	add	r1, sp, #16
 800ec24:	4630      	mov	r0, r6
 800ec26:	f3af 8000 	nop.w
 800ec2a:	4607      	mov	r7, r0
 800ec2c:	1c78      	adds	r0, r7, #1
 800ec2e:	d1d6      	bne.n	800ebde <_vfiprintf_r+0x19a>
 800ec30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec32:	07d9      	lsls	r1, r3, #31
 800ec34:	d405      	bmi.n	800ec42 <_vfiprintf_r+0x1fe>
 800ec36:	89ab      	ldrh	r3, [r5, #12]
 800ec38:	059a      	lsls	r2, r3, #22
 800ec3a:	d402      	bmi.n	800ec42 <_vfiprintf_r+0x1fe>
 800ec3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec3e:	f7ff fda9 	bl	800e794 <__retarget_lock_release_recursive>
 800ec42:	89ab      	ldrh	r3, [r5, #12]
 800ec44:	065b      	lsls	r3, r3, #25
 800ec46:	f53f af1f 	bmi.w	800ea88 <_vfiprintf_r+0x44>
 800ec4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec4c:	e71e      	b.n	800ea8c <_vfiprintf_r+0x48>
 800ec4e:	ab03      	add	r3, sp, #12
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	462a      	mov	r2, r5
 800ec54:	4b05      	ldr	r3, [pc, #20]	@ (800ec6c <_vfiprintf_r+0x228>)
 800ec56:	a904      	add	r1, sp, #16
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f000 f879 	bl	800ed50 <_printf_i>
 800ec5e:	e7e4      	b.n	800ec2a <_vfiprintf_r+0x1e6>
 800ec60:	08012303 	.word	0x08012303
 800ec64:	0801230d 	.word	0x0801230d
 800ec68:	00000000 	.word	0x00000000
 800ec6c:	0800ea1f 	.word	0x0800ea1f
 800ec70:	08012309 	.word	0x08012309

0800ec74 <_printf_common>:
 800ec74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec78:	4616      	mov	r6, r2
 800ec7a:	4698      	mov	r8, r3
 800ec7c:	688a      	ldr	r2, [r1, #8]
 800ec7e:	690b      	ldr	r3, [r1, #16]
 800ec80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec84:	4293      	cmp	r3, r2
 800ec86:	bfb8      	it	lt
 800ec88:	4613      	movlt	r3, r2
 800ec8a:	6033      	str	r3, [r6, #0]
 800ec8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec90:	4607      	mov	r7, r0
 800ec92:	460c      	mov	r4, r1
 800ec94:	b10a      	cbz	r2, 800ec9a <_printf_common+0x26>
 800ec96:	3301      	adds	r3, #1
 800ec98:	6033      	str	r3, [r6, #0]
 800ec9a:	6823      	ldr	r3, [r4, #0]
 800ec9c:	0699      	lsls	r1, r3, #26
 800ec9e:	bf42      	ittt	mi
 800eca0:	6833      	ldrmi	r3, [r6, #0]
 800eca2:	3302      	addmi	r3, #2
 800eca4:	6033      	strmi	r3, [r6, #0]
 800eca6:	6825      	ldr	r5, [r4, #0]
 800eca8:	f015 0506 	ands.w	r5, r5, #6
 800ecac:	d106      	bne.n	800ecbc <_printf_common+0x48>
 800ecae:	f104 0a19 	add.w	sl, r4, #25
 800ecb2:	68e3      	ldr	r3, [r4, #12]
 800ecb4:	6832      	ldr	r2, [r6, #0]
 800ecb6:	1a9b      	subs	r3, r3, r2
 800ecb8:	42ab      	cmp	r3, r5
 800ecba:	dc26      	bgt.n	800ed0a <_printf_common+0x96>
 800ecbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ecc0:	6822      	ldr	r2, [r4, #0]
 800ecc2:	3b00      	subs	r3, #0
 800ecc4:	bf18      	it	ne
 800ecc6:	2301      	movne	r3, #1
 800ecc8:	0692      	lsls	r2, r2, #26
 800ecca:	d42b      	bmi.n	800ed24 <_printf_common+0xb0>
 800eccc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ecd0:	4641      	mov	r1, r8
 800ecd2:	4638      	mov	r0, r7
 800ecd4:	47c8      	blx	r9
 800ecd6:	3001      	adds	r0, #1
 800ecd8:	d01e      	beq.n	800ed18 <_printf_common+0xa4>
 800ecda:	6823      	ldr	r3, [r4, #0]
 800ecdc:	6922      	ldr	r2, [r4, #16]
 800ecde:	f003 0306 	and.w	r3, r3, #6
 800ece2:	2b04      	cmp	r3, #4
 800ece4:	bf02      	ittt	eq
 800ece6:	68e5      	ldreq	r5, [r4, #12]
 800ece8:	6833      	ldreq	r3, [r6, #0]
 800ecea:	1aed      	subeq	r5, r5, r3
 800ecec:	68a3      	ldr	r3, [r4, #8]
 800ecee:	bf0c      	ite	eq
 800ecf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecf4:	2500      	movne	r5, #0
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	bfc4      	itt	gt
 800ecfa:	1a9b      	subgt	r3, r3, r2
 800ecfc:	18ed      	addgt	r5, r5, r3
 800ecfe:	2600      	movs	r6, #0
 800ed00:	341a      	adds	r4, #26
 800ed02:	42b5      	cmp	r5, r6
 800ed04:	d11a      	bne.n	800ed3c <_printf_common+0xc8>
 800ed06:	2000      	movs	r0, #0
 800ed08:	e008      	b.n	800ed1c <_printf_common+0xa8>
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	4652      	mov	r2, sl
 800ed0e:	4641      	mov	r1, r8
 800ed10:	4638      	mov	r0, r7
 800ed12:	47c8      	blx	r9
 800ed14:	3001      	adds	r0, #1
 800ed16:	d103      	bne.n	800ed20 <_printf_common+0xac>
 800ed18:	f04f 30ff 	mov.w	r0, #4294967295
 800ed1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed20:	3501      	adds	r5, #1
 800ed22:	e7c6      	b.n	800ecb2 <_printf_common+0x3e>
 800ed24:	18e1      	adds	r1, r4, r3
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	2030      	movs	r0, #48	@ 0x30
 800ed2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed2e:	4422      	add	r2, r4
 800ed30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed38:	3302      	adds	r3, #2
 800ed3a:	e7c7      	b.n	800eccc <_printf_common+0x58>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	4622      	mov	r2, r4
 800ed40:	4641      	mov	r1, r8
 800ed42:	4638      	mov	r0, r7
 800ed44:	47c8      	blx	r9
 800ed46:	3001      	adds	r0, #1
 800ed48:	d0e6      	beq.n	800ed18 <_printf_common+0xa4>
 800ed4a:	3601      	adds	r6, #1
 800ed4c:	e7d9      	b.n	800ed02 <_printf_common+0x8e>
	...

0800ed50 <_printf_i>:
 800ed50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed54:	7e0f      	ldrb	r7, [r1, #24]
 800ed56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed58:	2f78      	cmp	r7, #120	@ 0x78
 800ed5a:	4691      	mov	r9, r2
 800ed5c:	4680      	mov	r8, r0
 800ed5e:	460c      	mov	r4, r1
 800ed60:	469a      	mov	sl, r3
 800ed62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed66:	d807      	bhi.n	800ed78 <_printf_i+0x28>
 800ed68:	2f62      	cmp	r7, #98	@ 0x62
 800ed6a:	d80a      	bhi.n	800ed82 <_printf_i+0x32>
 800ed6c:	2f00      	cmp	r7, #0
 800ed6e:	f000 80d1 	beq.w	800ef14 <_printf_i+0x1c4>
 800ed72:	2f58      	cmp	r7, #88	@ 0x58
 800ed74:	f000 80b8 	beq.w	800eee8 <_printf_i+0x198>
 800ed78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed80:	e03a      	b.n	800edf8 <_printf_i+0xa8>
 800ed82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed86:	2b15      	cmp	r3, #21
 800ed88:	d8f6      	bhi.n	800ed78 <_printf_i+0x28>
 800ed8a:	a101      	add	r1, pc, #4	@ (adr r1, 800ed90 <_printf_i+0x40>)
 800ed8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed90:	0800ede9 	.word	0x0800ede9
 800ed94:	0800edfd 	.word	0x0800edfd
 800ed98:	0800ed79 	.word	0x0800ed79
 800ed9c:	0800ed79 	.word	0x0800ed79
 800eda0:	0800ed79 	.word	0x0800ed79
 800eda4:	0800ed79 	.word	0x0800ed79
 800eda8:	0800edfd 	.word	0x0800edfd
 800edac:	0800ed79 	.word	0x0800ed79
 800edb0:	0800ed79 	.word	0x0800ed79
 800edb4:	0800ed79 	.word	0x0800ed79
 800edb8:	0800ed79 	.word	0x0800ed79
 800edbc:	0800eefb 	.word	0x0800eefb
 800edc0:	0800ee27 	.word	0x0800ee27
 800edc4:	0800eeb5 	.word	0x0800eeb5
 800edc8:	0800ed79 	.word	0x0800ed79
 800edcc:	0800ed79 	.word	0x0800ed79
 800edd0:	0800ef1d 	.word	0x0800ef1d
 800edd4:	0800ed79 	.word	0x0800ed79
 800edd8:	0800ee27 	.word	0x0800ee27
 800eddc:	0800ed79 	.word	0x0800ed79
 800ede0:	0800ed79 	.word	0x0800ed79
 800ede4:	0800eebd 	.word	0x0800eebd
 800ede8:	6833      	ldr	r3, [r6, #0]
 800edea:	1d1a      	adds	r2, r3, #4
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	6032      	str	r2, [r6, #0]
 800edf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800edf8:	2301      	movs	r3, #1
 800edfa:	e09c      	b.n	800ef36 <_printf_i+0x1e6>
 800edfc:	6833      	ldr	r3, [r6, #0]
 800edfe:	6820      	ldr	r0, [r4, #0]
 800ee00:	1d19      	adds	r1, r3, #4
 800ee02:	6031      	str	r1, [r6, #0]
 800ee04:	0606      	lsls	r6, r0, #24
 800ee06:	d501      	bpl.n	800ee0c <_printf_i+0xbc>
 800ee08:	681d      	ldr	r5, [r3, #0]
 800ee0a:	e003      	b.n	800ee14 <_printf_i+0xc4>
 800ee0c:	0645      	lsls	r5, r0, #25
 800ee0e:	d5fb      	bpl.n	800ee08 <_printf_i+0xb8>
 800ee10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee14:	2d00      	cmp	r5, #0
 800ee16:	da03      	bge.n	800ee20 <_printf_i+0xd0>
 800ee18:	232d      	movs	r3, #45	@ 0x2d
 800ee1a:	426d      	negs	r5, r5
 800ee1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee20:	4858      	ldr	r0, [pc, #352]	@ (800ef84 <_printf_i+0x234>)
 800ee22:	230a      	movs	r3, #10
 800ee24:	e011      	b.n	800ee4a <_printf_i+0xfa>
 800ee26:	6821      	ldr	r1, [r4, #0]
 800ee28:	6833      	ldr	r3, [r6, #0]
 800ee2a:	0608      	lsls	r0, r1, #24
 800ee2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee30:	d402      	bmi.n	800ee38 <_printf_i+0xe8>
 800ee32:	0649      	lsls	r1, r1, #25
 800ee34:	bf48      	it	mi
 800ee36:	b2ad      	uxthmi	r5, r5
 800ee38:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee3a:	4852      	ldr	r0, [pc, #328]	@ (800ef84 <_printf_i+0x234>)
 800ee3c:	6033      	str	r3, [r6, #0]
 800ee3e:	bf14      	ite	ne
 800ee40:	230a      	movne	r3, #10
 800ee42:	2308      	moveq	r3, #8
 800ee44:	2100      	movs	r1, #0
 800ee46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee4a:	6866      	ldr	r6, [r4, #4]
 800ee4c:	60a6      	str	r6, [r4, #8]
 800ee4e:	2e00      	cmp	r6, #0
 800ee50:	db05      	blt.n	800ee5e <_printf_i+0x10e>
 800ee52:	6821      	ldr	r1, [r4, #0]
 800ee54:	432e      	orrs	r6, r5
 800ee56:	f021 0104 	bic.w	r1, r1, #4
 800ee5a:	6021      	str	r1, [r4, #0]
 800ee5c:	d04b      	beq.n	800eef6 <_printf_i+0x1a6>
 800ee5e:	4616      	mov	r6, r2
 800ee60:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee64:	fb03 5711 	mls	r7, r3, r1, r5
 800ee68:	5dc7      	ldrb	r7, [r0, r7]
 800ee6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee6e:	462f      	mov	r7, r5
 800ee70:	42bb      	cmp	r3, r7
 800ee72:	460d      	mov	r5, r1
 800ee74:	d9f4      	bls.n	800ee60 <_printf_i+0x110>
 800ee76:	2b08      	cmp	r3, #8
 800ee78:	d10b      	bne.n	800ee92 <_printf_i+0x142>
 800ee7a:	6823      	ldr	r3, [r4, #0]
 800ee7c:	07df      	lsls	r7, r3, #31
 800ee7e:	d508      	bpl.n	800ee92 <_printf_i+0x142>
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	6861      	ldr	r1, [r4, #4]
 800ee84:	4299      	cmp	r1, r3
 800ee86:	bfde      	ittt	le
 800ee88:	2330      	movle	r3, #48	@ 0x30
 800ee8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee92:	1b92      	subs	r2, r2, r6
 800ee94:	6122      	str	r2, [r4, #16]
 800ee96:	f8cd a000 	str.w	sl, [sp]
 800ee9a:	464b      	mov	r3, r9
 800ee9c:	aa03      	add	r2, sp, #12
 800ee9e:	4621      	mov	r1, r4
 800eea0:	4640      	mov	r0, r8
 800eea2:	f7ff fee7 	bl	800ec74 <_printf_common>
 800eea6:	3001      	adds	r0, #1
 800eea8:	d14a      	bne.n	800ef40 <_printf_i+0x1f0>
 800eeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800eeae:	b004      	add	sp, #16
 800eeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	f043 0320 	orr.w	r3, r3, #32
 800eeba:	6023      	str	r3, [r4, #0]
 800eebc:	4832      	ldr	r0, [pc, #200]	@ (800ef88 <_printf_i+0x238>)
 800eebe:	2778      	movs	r7, #120	@ 0x78
 800eec0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eec4:	6823      	ldr	r3, [r4, #0]
 800eec6:	6831      	ldr	r1, [r6, #0]
 800eec8:	061f      	lsls	r7, r3, #24
 800eeca:	f851 5b04 	ldr.w	r5, [r1], #4
 800eece:	d402      	bmi.n	800eed6 <_printf_i+0x186>
 800eed0:	065f      	lsls	r7, r3, #25
 800eed2:	bf48      	it	mi
 800eed4:	b2ad      	uxthmi	r5, r5
 800eed6:	6031      	str	r1, [r6, #0]
 800eed8:	07d9      	lsls	r1, r3, #31
 800eeda:	bf44      	itt	mi
 800eedc:	f043 0320 	orrmi.w	r3, r3, #32
 800eee0:	6023      	strmi	r3, [r4, #0]
 800eee2:	b11d      	cbz	r5, 800eeec <_printf_i+0x19c>
 800eee4:	2310      	movs	r3, #16
 800eee6:	e7ad      	b.n	800ee44 <_printf_i+0xf4>
 800eee8:	4826      	ldr	r0, [pc, #152]	@ (800ef84 <_printf_i+0x234>)
 800eeea:	e7e9      	b.n	800eec0 <_printf_i+0x170>
 800eeec:	6823      	ldr	r3, [r4, #0]
 800eeee:	f023 0320 	bic.w	r3, r3, #32
 800eef2:	6023      	str	r3, [r4, #0]
 800eef4:	e7f6      	b.n	800eee4 <_printf_i+0x194>
 800eef6:	4616      	mov	r6, r2
 800eef8:	e7bd      	b.n	800ee76 <_printf_i+0x126>
 800eefa:	6833      	ldr	r3, [r6, #0]
 800eefc:	6825      	ldr	r5, [r4, #0]
 800eefe:	6961      	ldr	r1, [r4, #20]
 800ef00:	1d18      	adds	r0, r3, #4
 800ef02:	6030      	str	r0, [r6, #0]
 800ef04:	062e      	lsls	r6, r5, #24
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	d501      	bpl.n	800ef0e <_printf_i+0x1be>
 800ef0a:	6019      	str	r1, [r3, #0]
 800ef0c:	e002      	b.n	800ef14 <_printf_i+0x1c4>
 800ef0e:	0668      	lsls	r0, r5, #25
 800ef10:	d5fb      	bpl.n	800ef0a <_printf_i+0x1ba>
 800ef12:	8019      	strh	r1, [r3, #0]
 800ef14:	2300      	movs	r3, #0
 800ef16:	6123      	str	r3, [r4, #16]
 800ef18:	4616      	mov	r6, r2
 800ef1a:	e7bc      	b.n	800ee96 <_printf_i+0x146>
 800ef1c:	6833      	ldr	r3, [r6, #0]
 800ef1e:	1d1a      	adds	r2, r3, #4
 800ef20:	6032      	str	r2, [r6, #0]
 800ef22:	681e      	ldr	r6, [r3, #0]
 800ef24:	6862      	ldr	r2, [r4, #4]
 800ef26:	2100      	movs	r1, #0
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f7f1 f971 	bl	8000210 <memchr>
 800ef2e:	b108      	cbz	r0, 800ef34 <_printf_i+0x1e4>
 800ef30:	1b80      	subs	r0, r0, r6
 800ef32:	6060      	str	r0, [r4, #4]
 800ef34:	6863      	ldr	r3, [r4, #4]
 800ef36:	6123      	str	r3, [r4, #16]
 800ef38:	2300      	movs	r3, #0
 800ef3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef3e:	e7aa      	b.n	800ee96 <_printf_i+0x146>
 800ef40:	6923      	ldr	r3, [r4, #16]
 800ef42:	4632      	mov	r2, r6
 800ef44:	4649      	mov	r1, r9
 800ef46:	4640      	mov	r0, r8
 800ef48:	47d0      	blx	sl
 800ef4a:	3001      	adds	r0, #1
 800ef4c:	d0ad      	beq.n	800eeaa <_printf_i+0x15a>
 800ef4e:	6823      	ldr	r3, [r4, #0]
 800ef50:	079b      	lsls	r3, r3, #30
 800ef52:	d413      	bmi.n	800ef7c <_printf_i+0x22c>
 800ef54:	68e0      	ldr	r0, [r4, #12]
 800ef56:	9b03      	ldr	r3, [sp, #12]
 800ef58:	4298      	cmp	r0, r3
 800ef5a:	bfb8      	it	lt
 800ef5c:	4618      	movlt	r0, r3
 800ef5e:	e7a6      	b.n	800eeae <_printf_i+0x15e>
 800ef60:	2301      	movs	r3, #1
 800ef62:	4632      	mov	r2, r6
 800ef64:	4649      	mov	r1, r9
 800ef66:	4640      	mov	r0, r8
 800ef68:	47d0      	blx	sl
 800ef6a:	3001      	adds	r0, #1
 800ef6c:	d09d      	beq.n	800eeaa <_printf_i+0x15a>
 800ef6e:	3501      	adds	r5, #1
 800ef70:	68e3      	ldr	r3, [r4, #12]
 800ef72:	9903      	ldr	r1, [sp, #12]
 800ef74:	1a5b      	subs	r3, r3, r1
 800ef76:	42ab      	cmp	r3, r5
 800ef78:	dcf2      	bgt.n	800ef60 <_printf_i+0x210>
 800ef7a:	e7eb      	b.n	800ef54 <_printf_i+0x204>
 800ef7c:	2500      	movs	r5, #0
 800ef7e:	f104 0619 	add.w	r6, r4, #25
 800ef82:	e7f5      	b.n	800ef70 <_printf_i+0x220>
 800ef84:	08012314 	.word	0x08012314
 800ef88:	08012325 	.word	0x08012325

0800ef8c <__sflush_r>:
 800ef8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef94:	0716      	lsls	r6, r2, #28
 800ef96:	4605      	mov	r5, r0
 800ef98:	460c      	mov	r4, r1
 800ef9a:	d454      	bmi.n	800f046 <__sflush_r+0xba>
 800ef9c:	684b      	ldr	r3, [r1, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	dc02      	bgt.n	800efa8 <__sflush_r+0x1c>
 800efa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	dd48      	ble.n	800f03a <__sflush_r+0xae>
 800efa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800efaa:	2e00      	cmp	r6, #0
 800efac:	d045      	beq.n	800f03a <__sflush_r+0xae>
 800efae:	2300      	movs	r3, #0
 800efb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800efb4:	682f      	ldr	r7, [r5, #0]
 800efb6:	6a21      	ldr	r1, [r4, #32]
 800efb8:	602b      	str	r3, [r5, #0]
 800efba:	d030      	beq.n	800f01e <__sflush_r+0x92>
 800efbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800efbe:	89a3      	ldrh	r3, [r4, #12]
 800efc0:	0759      	lsls	r1, r3, #29
 800efc2:	d505      	bpl.n	800efd0 <__sflush_r+0x44>
 800efc4:	6863      	ldr	r3, [r4, #4]
 800efc6:	1ad2      	subs	r2, r2, r3
 800efc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800efca:	b10b      	cbz	r3, 800efd0 <__sflush_r+0x44>
 800efcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800efce:	1ad2      	subs	r2, r2, r3
 800efd0:	2300      	movs	r3, #0
 800efd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800efd4:	6a21      	ldr	r1, [r4, #32]
 800efd6:	4628      	mov	r0, r5
 800efd8:	47b0      	blx	r6
 800efda:	1c43      	adds	r3, r0, #1
 800efdc:	89a3      	ldrh	r3, [r4, #12]
 800efde:	d106      	bne.n	800efee <__sflush_r+0x62>
 800efe0:	6829      	ldr	r1, [r5, #0]
 800efe2:	291d      	cmp	r1, #29
 800efe4:	d82b      	bhi.n	800f03e <__sflush_r+0xb2>
 800efe6:	4a2a      	ldr	r2, [pc, #168]	@ (800f090 <__sflush_r+0x104>)
 800efe8:	40ca      	lsrs	r2, r1
 800efea:	07d6      	lsls	r6, r2, #31
 800efec:	d527      	bpl.n	800f03e <__sflush_r+0xb2>
 800efee:	2200      	movs	r2, #0
 800eff0:	6062      	str	r2, [r4, #4]
 800eff2:	04d9      	lsls	r1, r3, #19
 800eff4:	6922      	ldr	r2, [r4, #16]
 800eff6:	6022      	str	r2, [r4, #0]
 800eff8:	d504      	bpl.n	800f004 <__sflush_r+0x78>
 800effa:	1c42      	adds	r2, r0, #1
 800effc:	d101      	bne.n	800f002 <__sflush_r+0x76>
 800effe:	682b      	ldr	r3, [r5, #0]
 800f000:	b903      	cbnz	r3, 800f004 <__sflush_r+0x78>
 800f002:	6560      	str	r0, [r4, #84]	@ 0x54
 800f004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f006:	602f      	str	r7, [r5, #0]
 800f008:	b1b9      	cbz	r1, 800f03a <__sflush_r+0xae>
 800f00a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f00e:	4299      	cmp	r1, r3
 800f010:	d002      	beq.n	800f018 <__sflush_r+0x8c>
 800f012:	4628      	mov	r0, r5
 800f014:	f7ff fbec 	bl	800e7f0 <_free_r>
 800f018:	2300      	movs	r3, #0
 800f01a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f01c:	e00d      	b.n	800f03a <__sflush_r+0xae>
 800f01e:	2301      	movs	r3, #1
 800f020:	4628      	mov	r0, r5
 800f022:	47b0      	blx	r6
 800f024:	4602      	mov	r2, r0
 800f026:	1c50      	adds	r0, r2, #1
 800f028:	d1c9      	bne.n	800efbe <__sflush_r+0x32>
 800f02a:	682b      	ldr	r3, [r5, #0]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d0c6      	beq.n	800efbe <__sflush_r+0x32>
 800f030:	2b1d      	cmp	r3, #29
 800f032:	d001      	beq.n	800f038 <__sflush_r+0xac>
 800f034:	2b16      	cmp	r3, #22
 800f036:	d11e      	bne.n	800f076 <__sflush_r+0xea>
 800f038:	602f      	str	r7, [r5, #0]
 800f03a:	2000      	movs	r0, #0
 800f03c:	e022      	b.n	800f084 <__sflush_r+0xf8>
 800f03e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f042:	b21b      	sxth	r3, r3
 800f044:	e01b      	b.n	800f07e <__sflush_r+0xf2>
 800f046:	690f      	ldr	r7, [r1, #16]
 800f048:	2f00      	cmp	r7, #0
 800f04a:	d0f6      	beq.n	800f03a <__sflush_r+0xae>
 800f04c:	0793      	lsls	r3, r2, #30
 800f04e:	680e      	ldr	r6, [r1, #0]
 800f050:	bf08      	it	eq
 800f052:	694b      	ldreq	r3, [r1, #20]
 800f054:	600f      	str	r7, [r1, #0]
 800f056:	bf18      	it	ne
 800f058:	2300      	movne	r3, #0
 800f05a:	eba6 0807 	sub.w	r8, r6, r7
 800f05e:	608b      	str	r3, [r1, #8]
 800f060:	f1b8 0f00 	cmp.w	r8, #0
 800f064:	dde9      	ble.n	800f03a <__sflush_r+0xae>
 800f066:	6a21      	ldr	r1, [r4, #32]
 800f068:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f06a:	4643      	mov	r3, r8
 800f06c:	463a      	mov	r2, r7
 800f06e:	4628      	mov	r0, r5
 800f070:	47b0      	blx	r6
 800f072:	2800      	cmp	r0, #0
 800f074:	dc08      	bgt.n	800f088 <__sflush_r+0xfc>
 800f076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f07a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f07e:	81a3      	strh	r3, [r4, #12]
 800f080:	f04f 30ff 	mov.w	r0, #4294967295
 800f084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f088:	4407      	add	r7, r0
 800f08a:	eba8 0800 	sub.w	r8, r8, r0
 800f08e:	e7e7      	b.n	800f060 <__sflush_r+0xd4>
 800f090:	20400001 	.word	0x20400001

0800f094 <_fflush_r>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	690b      	ldr	r3, [r1, #16]
 800f098:	4605      	mov	r5, r0
 800f09a:	460c      	mov	r4, r1
 800f09c:	b913      	cbnz	r3, 800f0a4 <_fflush_r+0x10>
 800f09e:	2500      	movs	r5, #0
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
 800f0a4:	b118      	cbz	r0, 800f0ae <_fflush_r+0x1a>
 800f0a6:	6a03      	ldr	r3, [r0, #32]
 800f0a8:	b90b      	cbnz	r3, 800f0ae <_fflush_r+0x1a>
 800f0aa:	f7ff fa63 	bl	800e574 <__sinit>
 800f0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d0f3      	beq.n	800f09e <_fflush_r+0xa>
 800f0b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f0b8:	07d0      	lsls	r0, r2, #31
 800f0ba:	d404      	bmi.n	800f0c6 <_fflush_r+0x32>
 800f0bc:	0599      	lsls	r1, r3, #22
 800f0be:	d402      	bmi.n	800f0c6 <_fflush_r+0x32>
 800f0c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0c2:	f7ff fb66 	bl	800e792 <__retarget_lock_acquire_recursive>
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	f7ff ff5f 	bl	800ef8c <__sflush_r>
 800f0ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f0d0:	07da      	lsls	r2, r3, #31
 800f0d2:	4605      	mov	r5, r0
 800f0d4:	d4e4      	bmi.n	800f0a0 <_fflush_r+0xc>
 800f0d6:	89a3      	ldrh	r3, [r4, #12]
 800f0d8:	059b      	lsls	r3, r3, #22
 800f0da:	d4e1      	bmi.n	800f0a0 <_fflush_r+0xc>
 800f0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0de:	f7ff fb59 	bl	800e794 <__retarget_lock_release_recursive>
 800f0e2:	e7dd      	b.n	800f0a0 <_fflush_r+0xc>

0800f0e4 <fiprintf>:
 800f0e4:	b40e      	push	{r1, r2, r3}
 800f0e6:	b503      	push	{r0, r1, lr}
 800f0e8:	4601      	mov	r1, r0
 800f0ea:	ab03      	add	r3, sp, #12
 800f0ec:	4805      	ldr	r0, [pc, #20]	@ (800f104 <fiprintf+0x20>)
 800f0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0f2:	6800      	ldr	r0, [r0, #0]
 800f0f4:	9301      	str	r3, [sp, #4]
 800f0f6:	f7ff fca5 	bl	800ea44 <_vfiprintf_r>
 800f0fa:	b002      	add	sp, #8
 800f0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f100:	b003      	add	sp, #12
 800f102:	4770      	bx	lr
 800f104:	20000038 	.word	0x20000038

0800f108 <__swbuf_r>:
 800f108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10a:	460e      	mov	r6, r1
 800f10c:	4614      	mov	r4, r2
 800f10e:	4605      	mov	r5, r0
 800f110:	b118      	cbz	r0, 800f11a <__swbuf_r+0x12>
 800f112:	6a03      	ldr	r3, [r0, #32]
 800f114:	b90b      	cbnz	r3, 800f11a <__swbuf_r+0x12>
 800f116:	f7ff fa2d 	bl	800e574 <__sinit>
 800f11a:	69a3      	ldr	r3, [r4, #24]
 800f11c:	60a3      	str	r3, [r4, #8]
 800f11e:	89a3      	ldrh	r3, [r4, #12]
 800f120:	071a      	lsls	r2, r3, #28
 800f122:	d501      	bpl.n	800f128 <__swbuf_r+0x20>
 800f124:	6923      	ldr	r3, [r4, #16]
 800f126:	b943      	cbnz	r3, 800f13a <__swbuf_r+0x32>
 800f128:	4621      	mov	r1, r4
 800f12a:	4628      	mov	r0, r5
 800f12c:	f000 f82a 	bl	800f184 <__swsetup_r>
 800f130:	b118      	cbz	r0, 800f13a <__swbuf_r+0x32>
 800f132:	f04f 37ff 	mov.w	r7, #4294967295
 800f136:	4638      	mov	r0, r7
 800f138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f13a:	6823      	ldr	r3, [r4, #0]
 800f13c:	6922      	ldr	r2, [r4, #16]
 800f13e:	1a98      	subs	r0, r3, r2
 800f140:	6963      	ldr	r3, [r4, #20]
 800f142:	b2f6      	uxtb	r6, r6
 800f144:	4283      	cmp	r3, r0
 800f146:	4637      	mov	r7, r6
 800f148:	dc05      	bgt.n	800f156 <__swbuf_r+0x4e>
 800f14a:	4621      	mov	r1, r4
 800f14c:	4628      	mov	r0, r5
 800f14e:	f7ff ffa1 	bl	800f094 <_fflush_r>
 800f152:	2800      	cmp	r0, #0
 800f154:	d1ed      	bne.n	800f132 <__swbuf_r+0x2a>
 800f156:	68a3      	ldr	r3, [r4, #8]
 800f158:	3b01      	subs	r3, #1
 800f15a:	60a3      	str	r3, [r4, #8]
 800f15c:	6823      	ldr	r3, [r4, #0]
 800f15e:	1c5a      	adds	r2, r3, #1
 800f160:	6022      	str	r2, [r4, #0]
 800f162:	701e      	strb	r6, [r3, #0]
 800f164:	6962      	ldr	r2, [r4, #20]
 800f166:	1c43      	adds	r3, r0, #1
 800f168:	429a      	cmp	r2, r3
 800f16a:	d004      	beq.n	800f176 <__swbuf_r+0x6e>
 800f16c:	89a3      	ldrh	r3, [r4, #12]
 800f16e:	07db      	lsls	r3, r3, #31
 800f170:	d5e1      	bpl.n	800f136 <__swbuf_r+0x2e>
 800f172:	2e0a      	cmp	r6, #10
 800f174:	d1df      	bne.n	800f136 <__swbuf_r+0x2e>
 800f176:	4621      	mov	r1, r4
 800f178:	4628      	mov	r0, r5
 800f17a:	f7ff ff8b 	bl	800f094 <_fflush_r>
 800f17e:	2800      	cmp	r0, #0
 800f180:	d0d9      	beq.n	800f136 <__swbuf_r+0x2e>
 800f182:	e7d6      	b.n	800f132 <__swbuf_r+0x2a>

0800f184 <__swsetup_r>:
 800f184:	b538      	push	{r3, r4, r5, lr}
 800f186:	4b29      	ldr	r3, [pc, #164]	@ (800f22c <__swsetup_r+0xa8>)
 800f188:	4605      	mov	r5, r0
 800f18a:	6818      	ldr	r0, [r3, #0]
 800f18c:	460c      	mov	r4, r1
 800f18e:	b118      	cbz	r0, 800f198 <__swsetup_r+0x14>
 800f190:	6a03      	ldr	r3, [r0, #32]
 800f192:	b90b      	cbnz	r3, 800f198 <__swsetup_r+0x14>
 800f194:	f7ff f9ee 	bl	800e574 <__sinit>
 800f198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f19c:	0719      	lsls	r1, r3, #28
 800f19e:	d422      	bmi.n	800f1e6 <__swsetup_r+0x62>
 800f1a0:	06da      	lsls	r2, r3, #27
 800f1a2:	d407      	bmi.n	800f1b4 <__swsetup_r+0x30>
 800f1a4:	2209      	movs	r2, #9
 800f1a6:	602a      	str	r2, [r5, #0]
 800f1a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1ac:	81a3      	strh	r3, [r4, #12]
 800f1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b2:	e033      	b.n	800f21c <__swsetup_r+0x98>
 800f1b4:	0758      	lsls	r0, r3, #29
 800f1b6:	d512      	bpl.n	800f1de <__swsetup_r+0x5a>
 800f1b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1ba:	b141      	cbz	r1, 800f1ce <__swsetup_r+0x4a>
 800f1bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1c0:	4299      	cmp	r1, r3
 800f1c2:	d002      	beq.n	800f1ca <__swsetup_r+0x46>
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	f7ff fb13 	bl	800e7f0 <_free_r>
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1ce:	89a3      	ldrh	r3, [r4, #12]
 800f1d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1d4:	81a3      	strh	r3, [r4, #12]
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	6063      	str	r3, [r4, #4]
 800f1da:	6923      	ldr	r3, [r4, #16]
 800f1dc:	6023      	str	r3, [r4, #0]
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	f043 0308 	orr.w	r3, r3, #8
 800f1e4:	81a3      	strh	r3, [r4, #12]
 800f1e6:	6923      	ldr	r3, [r4, #16]
 800f1e8:	b94b      	cbnz	r3, 800f1fe <__swsetup_r+0x7a>
 800f1ea:	89a3      	ldrh	r3, [r4, #12]
 800f1ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1f4:	d003      	beq.n	800f1fe <__swsetup_r+0x7a>
 800f1f6:	4621      	mov	r1, r4
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	f000 f856 	bl	800f2aa <__smakebuf_r>
 800f1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f202:	f013 0201 	ands.w	r2, r3, #1
 800f206:	d00a      	beq.n	800f21e <__swsetup_r+0x9a>
 800f208:	2200      	movs	r2, #0
 800f20a:	60a2      	str	r2, [r4, #8]
 800f20c:	6962      	ldr	r2, [r4, #20]
 800f20e:	4252      	negs	r2, r2
 800f210:	61a2      	str	r2, [r4, #24]
 800f212:	6922      	ldr	r2, [r4, #16]
 800f214:	b942      	cbnz	r2, 800f228 <__swsetup_r+0xa4>
 800f216:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f21a:	d1c5      	bne.n	800f1a8 <__swsetup_r+0x24>
 800f21c:	bd38      	pop	{r3, r4, r5, pc}
 800f21e:	0799      	lsls	r1, r3, #30
 800f220:	bf58      	it	pl
 800f222:	6962      	ldrpl	r2, [r4, #20]
 800f224:	60a2      	str	r2, [r4, #8]
 800f226:	e7f4      	b.n	800f212 <__swsetup_r+0x8e>
 800f228:	2000      	movs	r0, #0
 800f22a:	e7f7      	b.n	800f21c <__swsetup_r+0x98>
 800f22c:	20000038 	.word	0x20000038

0800f230 <_sbrk_r>:
 800f230:	b538      	push	{r3, r4, r5, lr}
 800f232:	4d06      	ldr	r5, [pc, #24]	@ (800f24c <_sbrk_r+0x1c>)
 800f234:	2300      	movs	r3, #0
 800f236:	4604      	mov	r4, r0
 800f238:	4608      	mov	r0, r1
 800f23a:	602b      	str	r3, [r5, #0]
 800f23c:	f7f1 fb90 	bl	8000960 <_sbrk>
 800f240:	1c43      	adds	r3, r0, #1
 800f242:	d102      	bne.n	800f24a <_sbrk_r+0x1a>
 800f244:	682b      	ldr	r3, [r5, #0]
 800f246:	b103      	cbz	r3, 800f24a <_sbrk_r+0x1a>
 800f248:	6023      	str	r3, [r4, #0]
 800f24a:	bd38      	pop	{r3, r4, r5, pc}
 800f24c:	2000b8ec 	.word	0x2000b8ec

0800f250 <abort>:
 800f250:	b508      	push	{r3, lr}
 800f252:	2006      	movs	r0, #6
 800f254:	f000 f88e 	bl	800f374 <raise>
 800f258:	2001      	movs	r0, #1
 800f25a:	f7f1 fb25 	bl	80008a8 <_exit>

0800f25e <__swhatbuf_r>:
 800f25e:	b570      	push	{r4, r5, r6, lr}
 800f260:	460c      	mov	r4, r1
 800f262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f266:	2900      	cmp	r1, #0
 800f268:	b096      	sub	sp, #88	@ 0x58
 800f26a:	4615      	mov	r5, r2
 800f26c:	461e      	mov	r6, r3
 800f26e:	da0d      	bge.n	800f28c <__swhatbuf_r+0x2e>
 800f270:	89a3      	ldrh	r3, [r4, #12]
 800f272:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f276:	f04f 0100 	mov.w	r1, #0
 800f27a:	bf14      	ite	ne
 800f27c:	2340      	movne	r3, #64	@ 0x40
 800f27e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f282:	2000      	movs	r0, #0
 800f284:	6031      	str	r1, [r6, #0]
 800f286:	602b      	str	r3, [r5, #0]
 800f288:	b016      	add	sp, #88	@ 0x58
 800f28a:	bd70      	pop	{r4, r5, r6, pc}
 800f28c:	466a      	mov	r2, sp
 800f28e:	f000 f879 	bl	800f384 <_fstat_r>
 800f292:	2800      	cmp	r0, #0
 800f294:	dbec      	blt.n	800f270 <__swhatbuf_r+0x12>
 800f296:	9901      	ldr	r1, [sp, #4]
 800f298:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f29c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f2a0:	4259      	negs	r1, r3
 800f2a2:	4159      	adcs	r1, r3
 800f2a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f2a8:	e7eb      	b.n	800f282 <__swhatbuf_r+0x24>

0800f2aa <__smakebuf_r>:
 800f2aa:	898b      	ldrh	r3, [r1, #12]
 800f2ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2ae:	079d      	lsls	r5, r3, #30
 800f2b0:	4606      	mov	r6, r0
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	d507      	bpl.n	800f2c6 <__smakebuf_r+0x1c>
 800f2b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f2ba:	6023      	str	r3, [r4, #0]
 800f2bc:	6123      	str	r3, [r4, #16]
 800f2be:	2301      	movs	r3, #1
 800f2c0:	6163      	str	r3, [r4, #20]
 800f2c2:	b003      	add	sp, #12
 800f2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2c6:	ab01      	add	r3, sp, #4
 800f2c8:	466a      	mov	r2, sp
 800f2ca:	f7ff ffc8 	bl	800f25e <__swhatbuf_r>
 800f2ce:	9f00      	ldr	r7, [sp, #0]
 800f2d0:	4605      	mov	r5, r0
 800f2d2:	4639      	mov	r1, r7
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	f7ff faff 	bl	800e8d8 <_malloc_r>
 800f2da:	b948      	cbnz	r0, 800f2f0 <__smakebuf_r+0x46>
 800f2dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2e0:	059a      	lsls	r2, r3, #22
 800f2e2:	d4ee      	bmi.n	800f2c2 <__smakebuf_r+0x18>
 800f2e4:	f023 0303 	bic.w	r3, r3, #3
 800f2e8:	f043 0302 	orr.w	r3, r3, #2
 800f2ec:	81a3      	strh	r3, [r4, #12]
 800f2ee:	e7e2      	b.n	800f2b6 <__smakebuf_r+0xc>
 800f2f0:	89a3      	ldrh	r3, [r4, #12]
 800f2f2:	6020      	str	r0, [r4, #0]
 800f2f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2f8:	81a3      	strh	r3, [r4, #12]
 800f2fa:	9b01      	ldr	r3, [sp, #4]
 800f2fc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f300:	b15b      	cbz	r3, 800f31a <__smakebuf_r+0x70>
 800f302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f306:	4630      	mov	r0, r6
 800f308:	f000 f84e 	bl	800f3a8 <_isatty_r>
 800f30c:	b128      	cbz	r0, 800f31a <__smakebuf_r+0x70>
 800f30e:	89a3      	ldrh	r3, [r4, #12]
 800f310:	f023 0303 	bic.w	r3, r3, #3
 800f314:	f043 0301 	orr.w	r3, r3, #1
 800f318:	81a3      	strh	r3, [r4, #12]
 800f31a:	89a3      	ldrh	r3, [r4, #12]
 800f31c:	431d      	orrs	r5, r3
 800f31e:	81a5      	strh	r5, [r4, #12]
 800f320:	e7cf      	b.n	800f2c2 <__smakebuf_r+0x18>

0800f322 <_raise_r>:
 800f322:	291f      	cmp	r1, #31
 800f324:	b538      	push	{r3, r4, r5, lr}
 800f326:	4605      	mov	r5, r0
 800f328:	460c      	mov	r4, r1
 800f32a:	d904      	bls.n	800f336 <_raise_r+0x14>
 800f32c:	2316      	movs	r3, #22
 800f32e:	6003      	str	r3, [r0, #0]
 800f330:	f04f 30ff 	mov.w	r0, #4294967295
 800f334:	bd38      	pop	{r3, r4, r5, pc}
 800f336:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f338:	b112      	cbz	r2, 800f340 <_raise_r+0x1e>
 800f33a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f33e:	b94b      	cbnz	r3, 800f354 <_raise_r+0x32>
 800f340:	4628      	mov	r0, r5
 800f342:	f000 f853 	bl	800f3ec <_getpid_r>
 800f346:	4622      	mov	r2, r4
 800f348:	4601      	mov	r1, r0
 800f34a:	4628      	mov	r0, r5
 800f34c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f350:	f000 b83a 	b.w	800f3c8 <_kill_r>
 800f354:	2b01      	cmp	r3, #1
 800f356:	d00a      	beq.n	800f36e <_raise_r+0x4c>
 800f358:	1c59      	adds	r1, r3, #1
 800f35a:	d103      	bne.n	800f364 <_raise_r+0x42>
 800f35c:	2316      	movs	r3, #22
 800f35e:	6003      	str	r3, [r0, #0]
 800f360:	2001      	movs	r0, #1
 800f362:	e7e7      	b.n	800f334 <_raise_r+0x12>
 800f364:	2100      	movs	r1, #0
 800f366:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f36a:	4620      	mov	r0, r4
 800f36c:	4798      	blx	r3
 800f36e:	2000      	movs	r0, #0
 800f370:	e7e0      	b.n	800f334 <_raise_r+0x12>
	...

0800f374 <raise>:
 800f374:	4b02      	ldr	r3, [pc, #8]	@ (800f380 <raise+0xc>)
 800f376:	4601      	mov	r1, r0
 800f378:	6818      	ldr	r0, [r3, #0]
 800f37a:	f7ff bfd2 	b.w	800f322 <_raise_r>
 800f37e:	bf00      	nop
 800f380:	20000038 	.word	0x20000038

0800f384 <_fstat_r>:
 800f384:	b538      	push	{r3, r4, r5, lr}
 800f386:	4d07      	ldr	r5, [pc, #28]	@ (800f3a4 <_fstat_r+0x20>)
 800f388:	2300      	movs	r3, #0
 800f38a:	4604      	mov	r4, r0
 800f38c:	4608      	mov	r0, r1
 800f38e:	4611      	mov	r1, r2
 800f390:	602b      	str	r3, [r5, #0]
 800f392:	f7f1 fabd 	bl	8000910 <_fstat>
 800f396:	1c43      	adds	r3, r0, #1
 800f398:	d102      	bne.n	800f3a0 <_fstat_r+0x1c>
 800f39a:	682b      	ldr	r3, [r5, #0]
 800f39c:	b103      	cbz	r3, 800f3a0 <_fstat_r+0x1c>
 800f39e:	6023      	str	r3, [r4, #0]
 800f3a0:	bd38      	pop	{r3, r4, r5, pc}
 800f3a2:	bf00      	nop
 800f3a4:	2000b8ec 	.word	0x2000b8ec

0800f3a8 <_isatty_r>:
 800f3a8:	b538      	push	{r3, r4, r5, lr}
 800f3aa:	4d06      	ldr	r5, [pc, #24]	@ (800f3c4 <_isatty_r+0x1c>)
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	4608      	mov	r0, r1
 800f3b2:	602b      	str	r3, [r5, #0]
 800f3b4:	f7f1 fabc 	bl	8000930 <_isatty>
 800f3b8:	1c43      	adds	r3, r0, #1
 800f3ba:	d102      	bne.n	800f3c2 <_isatty_r+0x1a>
 800f3bc:	682b      	ldr	r3, [r5, #0]
 800f3be:	b103      	cbz	r3, 800f3c2 <_isatty_r+0x1a>
 800f3c0:	6023      	str	r3, [r4, #0]
 800f3c2:	bd38      	pop	{r3, r4, r5, pc}
 800f3c4:	2000b8ec 	.word	0x2000b8ec

0800f3c8 <_kill_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	4d07      	ldr	r5, [pc, #28]	@ (800f3e8 <_kill_r+0x20>)
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4608      	mov	r0, r1
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	602b      	str	r3, [r5, #0]
 800f3d6:	f7f1 fa55 	bl	8000884 <_kill>
 800f3da:	1c43      	adds	r3, r0, #1
 800f3dc:	d102      	bne.n	800f3e4 <_kill_r+0x1c>
 800f3de:	682b      	ldr	r3, [r5, #0]
 800f3e0:	b103      	cbz	r3, 800f3e4 <_kill_r+0x1c>
 800f3e2:	6023      	str	r3, [r4, #0]
 800f3e4:	bd38      	pop	{r3, r4, r5, pc}
 800f3e6:	bf00      	nop
 800f3e8:	2000b8ec 	.word	0x2000b8ec

0800f3ec <_getpid_r>:
 800f3ec:	f7f1 ba41 	b.w	8000872 <_getpid>

0800f3f0 <_init>:
 800f3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3f2:	bf00      	nop
 800f3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3f6:	bc08      	pop	{r3}
 800f3f8:	469e      	mov	lr, r3
 800f3fa:	4770      	bx	lr

0800f3fc <_fini>:
 800f3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3fe:	bf00      	nop
 800f400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f402:	bc08      	pop	{r3}
 800f404:	469e      	mov	lr, r3
 800f406:	4770      	bx	lr
