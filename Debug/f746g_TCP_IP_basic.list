
f746g_TCP_IP_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d90  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003224  08010f60  08010f60  00011f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014184  08014184  000161d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014184  08014184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801418c  0801418c  000161d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801418c  0801418c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014190  08014190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08014194  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  0801422c  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  080142cc  00016138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000bb54  200001d8  0801436c  000161d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000bd2c  0801436c  00016d2c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000161d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001edda  00000000  00000000  00016208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005964  00000000  00000000  00034fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015a8  00000000  00000000  0003a948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000113f  00000000  00000000  0003bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032ebc  00000000  00000000  0003d02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b3aa  00000000  00000000  0006feeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ffb76  00000000  00000000  0009b295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0019ae0b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006044  00000000  00000000  0019ae50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  001a0e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010f48 	.word	0x08010f48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08010f48 	.word	0x08010f48

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b087      	sub	sp, #28
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_GPIO_Init+0x8c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <MX_GPIO_Init+0x8c>)
 80005f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_GPIO_Init+0x8c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a1a      	ldr	r2, [pc, #104]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_GPIO_Init+0x8c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

}
 800066a:	bf00      	nop
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	b0c2      	sub	sp, #264	@ 0x108
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000682:	f000 f8c5 	bl	8000810 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fbc6 	bl	8000e16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f853 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f7ff ffad 	bl	80005ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000692:	f000 fa03 	bl	8000a9c <MX_USART1_UART_Init>
  MX_LWIP_Init();
 8000696:	f003 fe4b 	bl	8004330 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  /* Process until connected */
  while (tcp_client_get_state() != TCP_STATE_CONNECTED) {
 800069a:	e008      	b.n	80006ae <main+0x32>
      MX_LWIP_Process();
 800069c:	f003 ff88 	bl	80045b0 <MX_LWIP_Process>
      app_ethernet_process();
 80006a0:	f00f f954 	bl	800f94c <app_ethernet_process>
      tcp_client_process();
 80006a4:	f00e ffdc 	bl	800f660 <tcp_client_process>
      HAL_Delay(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f000 fc11 	bl	8000ed0 <HAL_Delay>
  while (tcp_client_get_state() != TCP_STATE_CONNECTED) {
 80006ae:	f00e fff9 	bl	800f6a4 <tcp_client_get_state>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d1f1      	bne.n	800069c <main+0x20>
  }

  /* Now we're connected - send your message */
  const char *welcome_msg = "STM32F746G Discovery Board Connected!\r\n"
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <main+0xac>)
 80006ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                           "System initialized and ready.\r\n"
                           "Enter your message: \r\n";
  tcp_client_send(welcome_msg, strlen(welcome_msg));
 80006be:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80006c2:	f7ff fda5 	bl	8000210 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80006d0:	f00e ff7e 	bl	800f5d0 <tcp_client_send>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  MX_LWIP_Process();
 80006d4:	f003 ff6c 	bl	80045b0 <MX_LWIP_Process>
	  app_ethernet_process();
 80006d8:	f00f f938 	bl	800f94c <app_ethernet_process>
	  tcp_client_process();
 80006dc:	f00e ffc0 	bl	800f660 <tcp_client_process>

	  /* Check for received data */
	  if (tcp_client_data_available() > 0) {
 80006e0:	f00f f848 	bl	800f774 <tcp_client_data_available>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f4      	beq.n	80006d4 <main+0x58>
		  char buffer[256];
		  int len = tcp_client_read_string(buffer, sizeof(buffer));
 80006ea:	463b      	mov	r3, r7
 80006ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00e ffe3 	bl	800f6bc <tcp_client_read_string>
 80006f6:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100

		  if (len > 0) {
 80006fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80006fe:	2b00      	cmp	r3, #0
 8000700:	dde8      	ble.n	80006d4 <main+0x58>
			  DEBUG_INFO("Received: %s", buffer);
 8000702:	463b      	mov	r3, r7
 8000704:	461a      	mov	r2, r3
 8000706:	4909      	ldr	r1, [pc, #36]	@ (800072c <main+0xb0>)
 8000708:	2002      	movs	r0, #2
 800070a:	f00f f971 	bl	800f9f0 <uart_debug_print>

			  /* Echo back or send custom response */
			  tcp_client_send("ACK: ", 5);
 800070e:	2105      	movs	r1, #5
 8000710:	4807      	ldr	r0, [pc, #28]	@ (8000730 <main+0xb4>)
 8000712:	f00e ff5d 	bl	800f5d0 <tcp_client_send>
			  tcp_client_send(buffer, len);
 8000716:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800071a:	b29a      	uxth	r2, r3
 800071c:	463b      	mov	r3, r7
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f00e ff55 	bl	800f5d0 <tcp_client_send>
	  MX_LWIP_Process();
 8000726:	e7d5      	b.n	80006d4 <main+0x58>
 8000728:	08010f60 	.word	0x08010f60
 800072c:	08010fc0 	.word	0x08010fc0
 8000730:	08010fd0 	.word	0x08010fd0

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	@ 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f00f fbd0 	bl	800fee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	4b2b      	ldr	r3, [pc, #172]	@ (8000808 <SystemClock_Config+0xd4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a2a      	ldr	r2, [pc, #168]	@ (8000808 <SystemClock_Config+0xd4>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <SystemClock_Config+0xd4>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	4b26      	ldr	r3, [pc, #152]	@ (800080c <SystemClock_Config+0xd8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a25      	ldr	r2, [pc, #148]	@ (800080c <SystemClock_Config+0xd8>)
 8000776:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b23      	ldr	r3, [pc, #140]	@ (800080c <SystemClock_Config+0xd8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000788:	2301      	movs	r3, #1
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800079c:	2319      	movs	r3, #25
 800079e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80007a0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80007a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 f83c 	bl	8002830 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007be:	f000 f853 	bl	8000868 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c2:	f001 ffe5 	bl	8002790 <HAL_PWREx_EnableOverDrive>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007cc:	f000 f84c 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2107      	movs	r1, #7
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fac2 	bl	8002d78 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007fa:	f000 f835 	bl	8000868 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	@ 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000822:	f000 fc5f 	bl	80010e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000826:	2301      	movs	r3, #1
 8000828:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800082a:	2300      	movs	r3, #0
 800082c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000832:	231f      	movs	r3, #31
 8000834:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000836:	2387      	movs	r3, #135	@ 0x87
 8000838:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800083a:	2300      	movs	r3, #0
 800083c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800083e:	2300      	movs	r3, #0
 8000840:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000842:	2301      	movs	r3, #1
 8000844:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000846:	2301      	movs	r3, #1
 8000848:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	463b      	mov	r3, r7
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fc7d 	bl	8001154 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800085a:	2004      	movs	r0, #4
 800085c:	f000 fc5a 	bl	8001114 <HAL_MPU_Enable>

}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <HAL_MspInit+0x44>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a0e      	ldr	r2, [pc, #56]	@ (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <HAL_MspInit+0x44>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_MspInit+0x44>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <HAL_MspInit+0x44>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800089c:	6453      	str	r3, [r2, #68]	@ 0x44
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_MspInit+0x44>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000912:	f000 fabd 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  return 1;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <_kill>:

int _kill(int pid, int sig)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000936:	4b05      	ldr	r3, [pc, #20]	@ (800094c <_kill+0x20>)
 8000938:	2216      	movs	r2, #22
 800093a:	601a      	str	r2, [r3, #0]
  return -1;
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	2000bd1c 	.word	0x2000bd1c

08000950 <_exit>:

void _exit (int status)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000958:	f04f 31ff 	mov.w	r1, #4294967295
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ffe5 	bl	800092c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000962:	bf00      	nop
 8000964:	e7fd      	b.n	8000962 <_exit+0x12>

08000966 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	e00a      	b.n	800098e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000978:	f3af 8000 	nop.w
 800097c:	4601      	mov	r1, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1c5a      	adds	r2, r3, #1
 8000982:	60ba      	str	r2, [r7, #8]
 8000984:	b2ca      	uxtb	r2, r1
 8000986:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	3301      	adds	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	429a      	cmp	r2, r3
 8000994:	dbf0      	blt.n	8000978 <_read+0x12>
  }

  return len;
 8000996:	687b      	ldr	r3, [r7, #4]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009c8:	605a      	str	r2, [r3, #4]
  return 0;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_isatty>:

int _isatty(int file)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e0:	2301      	movs	r3, #1
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a10:	4a14      	ldr	r2, [pc, #80]	@ (8000a64 <_sbrk+0x5c>)
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <_sbrk+0x60>)
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a1c:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <_sbrk+0x64>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <_sbrk+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d205      	bcs.n	8000a44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <_sbrk+0x6c>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e009      	b.n	8000a58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <_sbrk+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	371c      	adds	r7, #28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	20050000 	.word	0x20050000
 8000a68:	00000400 	.word	0x00000400
 8000a6c:	200001f4 	.word	0x200001f4
 8000a70:	2000bd30 	.word	0x2000bd30
 8000a74:	2000bd1c 	.word	0x2000bd1c

08000a78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	@ (8000af8 <MX_USART1_UART_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ae0:	f002 ff20 	bl	8003924 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aea:	f7ff febd 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200001f8 	.word	0x200001f8
 8000af8:	40011000 	.word	0x40011000

08000afc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0aa      	sub	sp, #168	@ 0xa8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	2284      	movs	r2, #132	@ 0x84
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00f f9e3 	bl	800fee8 <memset>
  if(uartHandle->Instance==USART1)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a21      	ldr	r2, [pc, #132]	@ (8000bac <HAL_UART_MspInit+0xb0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d13a      	bne.n	8000ba2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b2c:	2340      	movs	r3, #64	@ 0x40
 8000b2e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b30:	2300      	movs	r3, #0
 8000b32:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 fb03 	bl	8003144 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b44:	f7ff fe90 	bl	8000868 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b48:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4c:	4a18      	ldr	r2, [pc, #96]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b54:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6c:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000b78:	23c0      	movs	r3, #192	@ 0xc0
 8000b7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b90:	2307      	movs	r3, #7
 8000b92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_UART_MspInit+0xb8>)
 8000b9e:	f001 fc4b 	bl	8002438 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	37a8      	adds	r7, #168	@ 0xa8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40011000 	.word	0x40011000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bbc:	f7ff ff5c 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	@ (8000bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	@ (8000bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f00f f9cd 	bl	800ff84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fd47 	bl	800067c <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000bfc:	08014194 	.word	0x08014194
  ldr r2, =_sbss
 8000c00:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000c04:	2000bd2c 	.word	0x2000bd2c

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>

08000c0a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <LAN8742_RegisterBusIO+0x28>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <LAN8742_RegisterBusIO+0x28>
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <LAN8742_RegisterBusIO+0x28>
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e014      	b.n	8000c62 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	691a      	ldr	r2, [r3, #16]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d139      	bne.n	8000cfe <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e01c      	b.n	8000cde <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	f107 020c 	add.w	r2, r7, #12
 8000cac:	2112      	movs	r1, #18
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	4798      	blx	r3
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	da03      	bge.n	8000cc0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000cb8:	f06f 0304 	mvn.w	r3, #4
 8000cbc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000cbe:	e00b      	b.n	8000cd8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 031f 	and.w	r3, r3, #31
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d105      	bne.n	8000cd8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
         break;
 8000cd6:	e005      	b.n	8000ce4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2b1f      	cmp	r3, #31
 8000ce2:	d9df      	bls.n	8000ca4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b1f      	cmp	r3, #31
 8000cea:	d902      	bls.n	8000cf2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000cec:	f06f 0302 	mvn.w	r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 }
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	6810      	ldr	r0, [r2, #0]
 8000d1c:	f107 020c 	add.w	r2, r7, #12
 8000d20:	2101      	movs	r1, #1
 8000d22:	4798      	blx	r3
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	da02      	bge.n	8000d30 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d2a:	f06f 0304 	mvn.w	r3, #4
 8000d2e:	e06e      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	6810      	ldr	r0, [r2, #0]
 8000d38:	f107 020c 	add.w	r2, r7, #12
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4798      	blx	r3
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	da02      	bge.n	8000d4c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d46:	f06f 0304 	mvn.w	r3, #4
 8000d4a:	e060      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e059      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	6810      	ldr	r0, [r2, #0]
 8000d62:	f107 020c 	add.w	r2, r7, #12
 8000d66:	2100      	movs	r1, #0
 8000d68:	4798      	blx	r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	da02      	bge.n	8000d76 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d70:	f06f 0304 	mvn.w	r3, #4
 8000d74:	e04b      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d11b      	bne.n	8000db8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <LAN8742_GetLinkState+0x90>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d94:	2302      	movs	r3, #2
 8000d96:	e03a      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e033      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000db0:	2304      	movs	r3, #4
 8000db2:	e02c      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000db4:	2305      	movs	r3, #5
 8000db6:	e02a      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6810      	ldr	r0, [r2, #0]
 8000dc0:	f107 020c 	add.w	r2, r7, #12
 8000dc4:	211f      	movs	r1, #31
 8000dc6:	4798      	blx	r3
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da02      	bge.n	8000dd4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000dce:	f06f 0304 	mvn.w	r3, #4
 8000dd2:	e01c      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000dde:	2306      	movs	r3, #6
 8000de0:	e015      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f003 031c 	and.w	r3, r3, #28
 8000de8:	2b18      	cmp	r3, #24
 8000dea:	d101      	bne.n	8000df0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000dec:	2302      	movs	r3, #2
 8000dee:	e00e      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 031c 	and.w	r3, r3, #28
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d101      	bne.n	8000dfe <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e007      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f003 031c 	and.w	r3, r3, #28
 8000e04:	2b14      	cmp	r3, #20
 8000e06:	d101      	bne.n	8000e0c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e000      	b.n	8000e0e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e0c:	2305      	movs	r3, #5
    }
  }
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f000 f92e 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e20:	200f      	movs	r0, #15
 8000e22:	f000 f805 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e26:	f7ff fd25 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f93b 	bl	80010ca <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f911 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	@ (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000280 	.word	0x20000280

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000280 	.word	0x20000280

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x40>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x40>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	05fa0000 	.word	0x05fa0000

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	@ (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	@ (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	@ 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	@ 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff47 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff5c 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffb0 	bl	8001038 <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010e8:	f3bf 8f5f 	dmb	sy
}
 80010ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <HAL_MPU_Disable+0x28>)
 80010f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f2:	4a06      	ldr	r2, [pc, #24]	@ (800110c <HAL_MPU_Disable+0x28>)
 80010f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_MPU_Disable+0x2c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	e000ed90 	.word	0xe000ed90

08001114 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800111c:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <HAL_MPU_Enable+0x38>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_MPU_Enable+0x3c>)
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <HAL_MPU_Enable+0x3c>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001132:	f3bf 8f4f 	dsb	sy
}
 8001136:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001138:	f3bf 8f6f 	isb	sy
}
 800113c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed90 	.word	0xe000ed90
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	785a      	ldrb	r2, [r3, #1]
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001162:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001164:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	4a19      	ldr	r2, [pc, #100]	@ (80011d0 <HAL_MPU_ConfigRegion+0x7c>)
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001170:	4a17      	ldr	r2, [pc, #92]	@ (80011d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7b1b      	ldrb	r3, [r3, #12]
 800117c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7adb      	ldrb	r3, [r3, #11]
 8001182:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001184:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a9b      	ldrb	r3, [r3, #10]
 800118a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800118c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b5b      	ldrb	r3, [r3, #13]
 8001192:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001194:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7b9b      	ldrb	r3, [r3, #14]
 800119a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800119c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7bdb      	ldrb	r3, [r3, #15]
 80011a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7a5b      	ldrb	r3, [r3, #9]
 80011aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7a1b      	ldrb	r3, [r3, #8]
 80011b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011c0:	6113      	str	r3, [r2, #16]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed90 	.word	0xe000ed90

080011d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e086      	b.n	80012f4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2220      	movs	r2, #32
 80011f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f003 fbc9 	bl	8004990 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4b3f      	ldr	r3, [pc, #252]	@ (80012fc <HAL_ETH_Init+0x128>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	4a3e      	ldr	r2, [pc, #248]	@ (80012fc <HAL_ETH_Init+0x128>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001208:	6453      	str	r3, [r2, #68]	@ 0x44
 800120a:	4b3c      	ldr	r3, [pc, #240]	@ (80012fc <HAL_ETH_Init+0x128>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001216:	4b3a      	ldr	r3, [pc, #232]	@ (8001300 <HAL_ETH_Init+0x12c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a39      	ldr	r2, [pc, #228]	@ (8001300 <HAL_ETH_Init+0x12c>)
 800121c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001220:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001222:	4b37      	ldr	r3, [pc, #220]	@ (8001300 <HAL_ETH_Init+0x12c>)
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	4935      	ldr	r1, [pc, #212]	@ (8001300 <HAL_ETH_Init+0x12c>)
 800122c:	4313      	orrs	r3, r2
 800122e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001230:	4b33      	ldr	r3, [pc, #204]	@ (8001300 <HAL_ETH_Init+0x12c>)
 8001232:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800124a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800124c:	f7ff fe34 	bl	8000eb8 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001252:	e011      	b.n	8001278 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001254:	f7ff fe30 	bl	8000eb8 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001262:	d909      	bls.n	8001278 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2204      	movs	r2, #4
 8001268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	22e0      	movs	r2, #224	@ 0xe0
 8001270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e03d      	b.n	80012f4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1e4      	bne.n	8001254 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fe18 	bl	8001ec0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fec3 	bl	800201c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 ff19 	bl	80020ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	461a      	mov	r2, r3
 80012a2:	2100      	movs	r1, #0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 fe81 	bl	8001fac <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80012b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_ETH_Init+0x130>)
 80012c8:	430b      	orrs	r3, r1
 80012ca:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80012de:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2210      	movs	r2, #16
 80012ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40013800 	.word	0x40013800
 8001304:	00020060 	.word	0x00020060

08001308 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001316:	2b10      	cmp	r3, #16
 8001318:	d150      	bne.n	80013bc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2220      	movs	r2, #32
 800131e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2204      	movs	r2, #4
 8001326:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f9f9 	bl	8001720 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0208 	orr.w	r2, r2, #8
 800133c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff fdc2 	bl	8000ed0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0204 	orr.w	r2, r2, #4
 8001362:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff fdaf 	bl	8000ed0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fc3c 	bl	8001bf8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001392:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001396:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ae:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2240      	movs	r2, #64	@ 0x40
 80013b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e000      	b.n	80013be <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
  }
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013d4:	2b40      	cmp	r3, #64	@ 0x40
 80013d6:	d14a      	bne.n	800146e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2220      	movs	r2, #32
 80013dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80013f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013f6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	f023 0302 	bic.w	r3, r3, #2
 800140a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800140e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0204 	bic.w	r2, r2, #4
 800141e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fd51 	bl	8000ed0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fbde 	bl	8001bf8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0208 	bic.w	r2, r2, #8
 800144a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001454:	2001      	movs	r0, #1
 8001456:	f7ff fd3b 	bl	8000ed0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2210      	movs	r2, #16
 8001466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
  }
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001490:	f043 0201 	orr.w	r2, r3, #1
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e07c      	b.n	8001598 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014a4:	2b40      	cmp	r3, #64	@ 0x40
 80014a6:	d176      	bne.n	8001596 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80014a8:	2200      	movs	r2, #0
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fe7d 	bl	80021ac <ETH_Prepare_Tx_Descriptors>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d009      	beq.n	80014cc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014be:	f043 0202 	orr.w	r2, r3, #2
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e065      	b.n	8001598 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80014cc:	f3bf 8f4f 	dsb	sy
}
 80014d0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3206      	adds	r2, #6
 80014da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014de:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d904      	bls.n	80014fc <HAL_ETH_Transmit+0x84>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f6:	1f1a      	subs	r2, r3, #4
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3106      	adds	r1, #6
 8001508:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800150c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001510:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001512:	f7ff fcd1 	bl	8000eb8 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001518:	e037      	b.n	800158a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d011      	beq.n	8001550 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001532:	f043 0208 	orr.w	r2, r3, #8
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e023      	b.n	8001598 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001556:	d018      	beq.n	800158a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001558:	f7ff fcae 	bl	8000eb8 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	d302      	bcc.n	800156e <HAL_ETH_Transmit+0xf6>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10d      	bne.n	800158a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001574:	f043 0204 	orr.w	r2, r3, #4
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001584:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e006      	b.n	8001598 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dbc3      	blt.n	800151a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
  }
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0a4      	b.n	8001716 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015d2:	2b40      	cmp	r3, #64	@ 0x40
 80015d4:	d001      	beq.n	80015da <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e09d      	b.n	8001716 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015de:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	3212      	adds	r2, #18
 80015e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ea:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015f0:	f1c3 0304 	rsb	r3, r3, #4
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015f6:	e066      	b.n	80016c6 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d007      	beq.n	8001614 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	69da      	ldr	r2, [r3, #28]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	699a      	ldr	r2, [r3, #24]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <HAL_ETH_ReadData+0x88>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001624:	2b00      	cmp	r3, #0
 8001626:	d03c      	beq.n	80016a2 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800164a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001660:	2301      	movs	r3, #1
 8001662:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800167c:	461a      	mov	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	b29b      	uxth	r3, r3
 8001682:	f003 fb27 	bl	8004cd4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	441a      	add	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d902      	bls.n	80016b4 <HAL_ETH_ReadData+0x114>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b04      	subs	r3, #4
 80016b2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	3212      	adds	r2, #18
 80016ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db06      	blt.n	80016dc <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d202      	bcs.n	80016dc <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80016d6:	7cfb      	ldrb	r3, [r7, #19]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d08d      	beq.n	80015f8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	441a      	add	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f815 	bl	8001720 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80016fc:	7cfb      	ldrb	r3, [r7, #19]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d108      	bne.n	8001714 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
}
 8001716:	4618      	mov	r0, r3
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800172c:	2301      	movs	r3, #1
 800172e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001734:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	3212      	adds	r2, #18
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001746:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001748:	e042      	b.n	80017d0 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d112      	bne.n	8001778 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4618      	mov	r0, r3
 8001758:	f003 fa8c 	bl	8004c74 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	74fb      	strb	r3, [r7, #19]
 8001766:	e007      	b.n	8001778 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	461a      	mov	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	461a      	mov	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001778:	7cfb      	ldrb	r3, [r7, #19]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d028      	beq.n	80017d0 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <ETH_UpdateDescriptor+0x104>)
 800178c:	4313      	orrs	r3, r2
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	6053      	str	r3, [r2, #4]
 8001792:	e005      	b.n	80017a0 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	3301      	adds	r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d902      	bls.n	80017be <ETH_UpdateDescriptor+0x9e>
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	3b04      	subs	r3, #4
 80017bc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	3212      	adds	r2, #18
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	617b      	str	r3, [r7, #20]
      desccount--;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <ETH_UpdateDescriptor+0xbc>
 80017d6:	7cfb      	ldrb	r3, [r7, #19]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1b6      	bne.n	800174a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d01a      	beq.n	800181c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3303      	adds	r3, #3
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80017f0:	f3bf 8f5f 	dmb	sy
}
 80017f4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6919      	ldr	r1, [r3, #16]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	18ca      	adds	r2, r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800180e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	80004000 	.word	0x80004000

08001828 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 031c 	and.w	r3, r3, #28
 8001844:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	02db      	lsls	r3, r3, #11
 800184a:	b29b      	uxth	r3, r3
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4313      	orrs	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f023 0302 	bic.w	r3, r3, #2
 8001866:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001878:	f7ff fb1e 	bl	8000eb8 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800187e:	e00d      	b.n	800189c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001880:	f7ff fb1a 	bl	8000eb8 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188e:	d301      	bcc.n	8001894 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e010      	b.n	80018b6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ec      	bne.n	8001880 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 031c 	and.w	r3, r3, #28
 80018da:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	02db      	lsls	r3, r3, #11
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	019b      	lsls	r3, r3, #6
 80018ec:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001918:	f7ff face 	bl	8000eb8 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800191e:	e00d      	b.n	800193c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001920:	f7ff faca 	bl	8000eb8 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800192e:	d301      	bcc.n	8001934 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e009      	b.n	8001948 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ec      	bne.n	8001920 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0e6      	b.n	8001b32 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	bf0c      	ite	eq
 80019d2:	2301      	moveq	r3, #1
 80019d4:	2300      	movne	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf14      	ite	ne
 80019ec:	2301      	movne	r3, #1
 80019ee:	2300      	moveq	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf14      	ite	ne
 8001a7e:	2301      	movne	r3, #1
 8001a80:	2300      	moveq	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bf14      	ite	ne
 8001ab2:	2301      	movne	r3, #1
 8001ab4:	2300      	moveq	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf0c      	ite	eq
 8001ace:	2301      	moveq	r3, #1
 8001ad0:	2300      	movne	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bf14      	ite	ne
 8001b06:	2301      	movne	r3, #1
 8001b08:	2300      	moveq	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00b      	b.n	8001b6a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b58:	2b10      	cmp	r3, #16
 8001b5a:	d105      	bne.n	8001b68 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f870 	bl	8001c44 <ETH_SetMACConfig>

    return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e000      	b.n	8001b6a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
  }
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 031c 	bic.w	r3, r3, #28
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b8c:	f001 faa6 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 8001b90:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	4a14      	ldr	r2, [pc, #80]	@ (8001be8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d804      	bhi.n	8001ba4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e019      	b.n	8001bd8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4a11      	ldr	r2, [pc, #68]	@ (8001bec <HAL_ETH_SetMDIOClockRange+0x78>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d204      	bcs.n	8001bb6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f043 030c 	orr.w	r3, r3, #12
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e010      	b.n	8001bd8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d90c      	bls.n	8001bd8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d804      	bhi.n	8001bd0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	e003      	b.n	8001bd8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f043 0310 	orr.w	r3, r3, #16
 8001bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	611a      	str	r2, [r3, #16]
}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	02160ebf 	.word	0x02160ebf
 8001bec:	03938700 	.word	0x03938700
 8001bf0:	05f5e0ff 	.word	0x05f5e0ff
 8001bf4:	08f0d17f 	.word	0x08f0d17f

08001bf8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c1a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f7ff f951 	bl	8000ed0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c38:	6193      	str	r3, [r2, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4b53      	ldr	r3, [pc, #332]	@ (8001da8 <ETH_SetMACConfig+0x164>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	7b9b      	ldrb	r3, [r3, #14]
 8001c62:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	7c12      	ldrb	r2, [r2, #16]
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d102      	bne.n	8001c72 <ETH_SetMACConfig+0x2e>
 8001c6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c70:	e000      	b.n	8001c74 <ETH_SetMACConfig+0x30>
 8001c72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	7c52      	ldrb	r2, [r2, #17]
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	d102      	bne.n	8001c84 <ETH_SetMACConfig+0x40>
 8001c7e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c82:	e000      	b.n	8001c86 <ETH_SetMACConfig+0x42>
 8001c84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	7fdb      	ldrb	r3, [r3, #31]
 8001c92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	7f92      	ldrb	r2, [r2, #30]
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	d102      	bne.n	8001caa <ETH_SetMACConfig+0x66>
 8001ca4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca8:	e000      	b.n	8001cac <ETH_SetMACConfig+0x68>
 8001caa:	2200      	movs	r2, #0
                        macconf->Speed |
 8001cac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	7f1b      	ldrb	r3, [r3, #28]
 8001cb2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cb4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	791b      	ldrb	r3, [r3, #4]
 8001cc0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001cc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cca:	2a00      	cmp	r2, #0
 8001ccc:	d102      	bne.n	8001cd4 <ETH_SetMACConfig+0x90>
 8001cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cd2:	e000      	b.n	8001cd6 <ETH_SetMACConfig+0x92>
 8001cd4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cd6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	7bdb      	ldrb	r3, [r3, #15]
 8001cdc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cde:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ce4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001cec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff f8e2 	bl	8000ed0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d22:	4013      	ands	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d32:	2a00      	cmp	r2, #0
 8001d34:	d101      	bne.n	8001d3a <ETH_SetMACConfig+0xf6>
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	e000      	b.n	8001d3c <ETH_SetMACConfig+0xf8>
 8001d3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d3c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001d4a:	2a01      	cmp	r2, #1
 8001d4c:	d101      	bne.n	8001d52 <ETH_SetMACConfig+0x10e>
 8001d4e:	2208      	movs	r2, #8
 8001d50:	e000      	b.n	8001d54 <ETH_SetMACConfig+0x110>
 8001d52:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001d5c:	2a01      	cmp	r2, #1
 8001d5e:	d101      	bne.n	8001d64 <ETH_SetMACConfig+0x120>
 8001d60:	2204      	movs	r2, #4
 8001d62:	e000      	b.n	8001d66 <ETH_SetMACConfig+0x122>
 8001d64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001d6e:	2a01      	cmp	r2, #1
 8001d70:	d101      	bne.n	8001d76 <ETH_SetMACConfig+0x132>
 8001d72:	2202      	movs	r2, #2
 8001d74:	e000      	b.n	8001d78 <ETH_SetMACConfig+0x134>
 8001d76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f7ff f89d 	bl	8000ed0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	fd20810f 	.word	0xfd20810f

08001dac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ebc <ETH_SetDMAConfig+0x110>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	7b1b      	ldrb	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <ETH_SetDMAConfig+0x2c>
 8001dd2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001dd6:	e000      	b.n	8001dda <ETH_SetDMAConfig+0x2e>
 8001dd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	7b5b      	ldrb	r3, [r3, #13]
 8001dde:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001de0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	7f52      	ldrb	r2, [r2, #29]
 8001de6:	2a00      	cmp	r2, #0
 8001de8:	d102      	bne.n	8001df0 <ETH_SetDMAConfig+0x44>
 8001dea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001dee:	e000      	b.n	8001df2 <ETH_SetDMAConfig+0x46>
 8001df0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001df2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	7b9b      	ldrb	r3, [r3, #14]
 8001df8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dfa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	7f1b      	ldrb	r3, [r3, #28]
 8001e06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	7f9b      	ldrb	r3, [r3, #30]
 8001e0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e20:	4313      	orrs	r3, r2
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e30:	461a      	mov	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7ff f844 	bl	8000ed0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e50:	461a      	mov	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	791b      	ldrb	r3, [r3, #4]
 8001e5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff f815 	bl	8000ed0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	f8de3f23 	.word	0xf8de3f23

08001ec0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0a6      	sub	sp, #152	@ 0x98
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f02:	2300      	movs	r3, #0
 8001f04:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fe7f 	bl	8001c44 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f46:	2301      	movs	r3, #1
 8001f48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f72:	2301      	movs	r3, #1
 8001f74:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f7a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f7c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f80:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f86:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff05 	bl	8001dac <ETH_SetDMAConfig>
}
 8001fa2:	bf00      	nop
 8001fa4:	3798      	adds	r7, #152	@ 0x98
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3305      	adds	r3, #5
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	3204      	adds	r2, #4
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <ETH_MACAddressConfig+0x68>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3303      	adds	r3, #3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	061a      	lsls	r2, r3, #24
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <ETH_MACAddressConfig+0x6c>)
 8001ffe:	4413      	add	r3, r2
 8002000:	461a      	mov	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6013      	str	r3, [r2, #0]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40028040 	.word	0x40028040
 8002018:	40028044 	.word	0x40028044

0800201c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e03e      	b.n	80020a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68d9      	ldr	r1, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	3206      	adds	r2, #6
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d80c      	bhi.n	800208c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	461a      	mov	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	e004      	b.n	8002096 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3301      	adds	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d9bd      	bls.n	800202a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c0:	611a      	str	r2, [r3, #16]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e048      	b.n	800216e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6919      	ldr	r1, [r3, #16]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2200      	movs	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2200      	movs	r2, #0
 8002104:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002118:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	3212      	adds	r2, #18
 800213a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d80c      	bhi.n	800215e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6919      	ldr	r1, [r3, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	e004      	b.n	8002168 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	461a      	mov	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d9b3      	bls.n	80020dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219e:	60da      	str	r2, [r3, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b091      	sub	sp, #68	@ 0x44
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3318      	adds	r3, #24
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80021e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80021ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021ee:	d007      	beq.n	8002200 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80021f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021f4:	3304      	adds	r3, #4
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	e111      	b.n	8002428 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002206:	3301      	adds	r3, #1
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800220a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002212:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4b86      	ldr	r3, [pc, #536]	@ (8002434 <ETH_Prepare_Tx_Descriptors+0x288>)
 800221a:	4013      	ands	r3, r2
 800221c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800221e:	6852      	ldr	r2, [r2, #4]
 8002220:	431a      	orrs	r2, r3
 8002222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002224:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	431a      	orrs	r2, r3
 8002240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002242:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	431a      	orrs	r2, r3
 800225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002260:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800226e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002284:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002286:	e082      	b.n	800238e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002292:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800229a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80022a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e005      	b.n	80022b4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80022b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b6:	3301      	adds	r3, #1
 80022b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d902      	bls.n	80022c6 <ETH_Prepare_Tx_Descriptors+0x11a>
 80022c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022c2:	3b04      	subs	r3, #4
 80022c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022dc:	d007      	beq.n	80022ee <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e2:	3304      	adds	r3, #4
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d029      	beq.n	8002342 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002300:	e019      	b.n	8002336 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002302:	f3bf 8f5f 	dmb	sy
}
 8002306:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002312:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002316:	3301      	adds	r3, #1
 8002318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800231a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231c:	2b03      	cmp	r3, #3
 800231e:	d902      	bls.n	8002326 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002322:	3b04      	subs	r3, #4
 8002324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800232a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002332:	3301      	adds	r3, #1
 8002334:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002336:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800233a:	429a      	cmp	r2, r3
 800233c:	d3e1      	bcc.n	8002302 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	e072      	b.n	8002428 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800234e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002350:	3301      	adds	r3, #1
 8002352:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800235a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002362:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	4b32      	ldr	r3, [pc, #200]	@ (8002434 <ETH_Prepare_Tx_Descriptors+0x288>)
 800236a:	4013      	ands	r3, r2
 800236c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800236e:	6852      	ldr	r2, [r2, #4]
 8002370:	431a      	orrs	r2, r3
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002378:	3301      	adds	r3, #1
 800237a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800237c:	f3bf 8f5f 	dmb	sy
}
 8002380:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800238e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f47f af78 	bne.w	8002288 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800239e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80023a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e005      	b.n	80023b8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80023b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80023c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	6a3a      	ldr	r2, [r7, #32]
 80023c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023cc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80023ce:	f3bf 8f5f 	dmb	sy
}
 80023d2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023de:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023e8:	3304      	adds	r3, #4
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023f4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023f6:	f3ef 8310 	mrs	r3, PRIMASK
 80023fa:	613b      	str	r3, [r7, #16]
  return(result);
 80023fc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	2301      	movs	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f383 8810 	msr	PRIMASK, r3
}
 800240a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002412:	4413      	add	r3, r2
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	629a      	str	r2, [r3, #40]	@ 0x28
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f383 8810 	msr	PRIMASK, r3
}
 8002424:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3744      	adds	r7, #68	@ 0x44
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	ffffe000 	.word	0xffffe000

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e175      	b.n	8002744 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	f040 8164 	bne.w	800273e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d005      	beq.n	800248e <HAL_GPIO_Init+0x56>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d130      	bne.n	80024f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 0201 	and.w	r2, r3, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d017      	beq.n	800252c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d123      	bne.n	8002580 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	08da      	lsrs	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3208      	adds	r2, #8
 8002540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80be 	beq.w	800273e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	4b66      	ldr	r3, [pc, #408]	@ (800275c <HAL_GPIO_Init+0x324>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	4a65      	ldr	r2, [pc, #404]	@ (800275c <HAL_GPIO_Init+0x324>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ce:	4b63      	ldr	r3, [pc, #396]	@ (800275c <HAL_GPIO_Init+0x324>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025da:	4a61      	ldr	r2, [pc, #388]	@ (8002760 <HAL_GPIO_Init+0x328>)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	220f      	movs	r2, #15
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a58      	ldr	r2, [pc, #352]	@ (8002764 <HAL_GPIO_Init+0x32c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d037      	beq.n	8002676 <HAL_GPIO_Init+0x23e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a57      	ldr	r2, [pc, #348]	@ (8002768 <HAL_GPIO_Init+0x330>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d031      	beq.n	8002672 <HAL_GPIO_Init+0x23a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a56      	ldr	r2, [pc, #344]	@ (800276c <HAL_GPIO_Init+0x334>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d02b      	beq.n	800266e <HAL_GPIO_Init+0x236>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a55      	ldr	r2, [pc, #340]	@ (8002770 <HAL_GPIO_Init+0x338>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d025      	beq.n	800266a <HAL_GPIO_Init+0x232>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a54      	ldr	r2, [pc, #336]	@ (8002774 <HAL_GPIO_Init+0x33c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01f      	beq.n	8002666 <HAL_GPIO_Init+0x22e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a53      	ldr	r2, [pc, #332]	@ (8002778 <HAL_GPIO_Init+0x340>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d019      	beq.n	8002662 <HAL_GPIO_Init+0x22a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a52      	ldr	r2, [pc, #328]	@ (800277c <HAL_GPIO_Init+0x344>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d013      	beq.n	800265e <HAL_GPIO_Init+0x226>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a51      	ldr	r2, [pc, #324]	@ (8002780 <HAL_GPIO_Init+0x348>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00d      	beq.n	800265a <HAL_GPIO_Init+0x222>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a50      	ldr	r2, [pc, #320]	@ (8002784 <HAL_GPIO_Init+0x34c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <HAL_GPIO_Init+0x21e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4f      	ldr	r2, [pc, #316]	@ (8002788 <HAL_GPIO_Init+0x350>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d101      	bne.n	8002652 <HAL_GPIO_Init+0x21a>
 800264e:	2309      	movs	r3, #9
 8002650:	e012      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002652:	230a      	movs	r3, #10
 8002654:	e010      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002656:	2308      	movs	r3, #8
 8002658:	e00e      	b.n	8002678 <HAL_GPIO_Init+0x240>
 800265a:	2307      	movs	r3, #7
 800265c:	e00c      	b.n	8002678 <HAL_GPIO_Init+0x240>
 800265e:	2306      	movs	r3, #6
 8002660:	e00a      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002662:	2305      	movs	r3, #5
 8002664:	e008      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002666:	2304      	movs	r3, #4
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x240>
 800266a:	2303      	movs	r3, #3
 800266c:	e004      	b.n	8002678 <HAL_GPIO_Init+0x240>
 800266e:	2302      	movs	r3, #2
 8002670:	e002      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002676:	2300      	movs	r3, #0
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f002 0203 	and.w	r2, r2, #3
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	4093      	lsls	r3, r2
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002688:	4935      	ldr	r1, [pc, #212]	@ (8002760 <HAL_GPIO_Init+0x328>)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	3302      	adds	r3, #2
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002696:	4b3d      	ldr	r3, [pc, #244]	@ (800278c <HAL_GPIO_Init+0x354>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ba:	4a34      	ldr	r2, [pc, #208]	@ (800278c <HAL_GPIO_Init+0x354>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c0:	4b32      	ldr	r3, [pc, #200]	@ (800278c <HAL_GPIO_Init+0x354>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e4:	4a29      	ldr	r2, [pc, #164]	@ (800278c <HAL_GPIO_Init+0x354>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ea:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_GPIO_Init+0x354>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800270e:	4a1f      	ldr	r2, [pc, #124]	@ (800278c <HAL_GPIO_Init+0x354>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <HAL_GPIO_Init+0x354>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002738:	4a14      	ldr	r2, [pc, #80]	@ (800278c <HAL_GPIO_Init+0x354>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3301      	adds	r3, #1
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b0f      	cmp	r3, #15
 8002748:	f67f ae86 	bls.w	8002458 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3724      	adds	r7, #36	@ 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40013800 	.word	0x40013800
 8002764:	40020000 	.word	0x40020000
 8002768:	40020400 	.word	0x40020400
 800276c:	40020800 	.word	0x40020800
 8002770:	40020c00 	.word	0x40020c00
 8002774:	40021000 	.word	0x40021000
 8002778:	40021400 	.word	0x40021400
 800277c:	40021800 	.word	0x40021800
 8002780:	40021c00 	.word	0x40021c00
 8002784:	40022000 	.word	0x40022000
 8002788:	40022400 	.word	0x40022400
 800278c:	40013c00 	.word	0x40013c00

08002790 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4b23      	ldr	r3, [pc, #140]	@ (8002828 <HAL_PWREx_EnableOverDrive+0x98>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	4a22      	ldr	r2, [pc, #136]	@ (8002828 <HAL_PWREx_EnableOverDrive+0x98>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a6:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <HAL_PWREx_EnableOverDrive+0x98>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027b2:	4b1e      	ldr	r3, [pc, #120]	@ (800282c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027be:	f7fe fb7b 	bl	8000eb8 <HAL_GetTick>
 80027c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027c4:	e009      	b.n	80027da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027c6:	f7fe fb77 	bl	8000eb8 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027d4:	d901      	bls.n	80027da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e022      	b.n	8002820 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027da:	4b14      	ldr	r3, [pc, #80]	@ (800282c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e6:	d1ee      	bne.n	80027c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027e8:	4b10      	ldr	r3, [pc, #64]	@ (800282c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0f      	ldr	r2, [pc, #60]	@ (800282c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027f4:	f7fe fb60 	bl	8000eb8 <HAL_GetTick>
 80027f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027fa:	e009      	b.n	8002810 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027fc:	f7fe fb5c 	bl	8000eb8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800280a:	d901      	bls.n	8002810 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e007      	b.n	8002820 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002810:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800281c:	d1ee      	bne.n	80027fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	40007000 	.word	0x40007000

08002830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e291      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8087 	beq.w	8002962 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002854:	4b96      	ldr	r3, [pc, #600]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b04      	cmp	r3, #4
 800285e:	d00c      	beq.n	800287a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002860:	4b93      	ldr	r3, [pc, #588]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d112      	bne.n	8002892 <HAL_RCC_OscConfig+0x62>
 800286c:	4b90      	ldr	r3, [pc, #576]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002874:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002878:	d10b      	bne.n	8002892 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d06c      	beq.n	8002960 <HAL_RCC_OscConfig+0x130>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d168      	bne.n	8002960 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e26b      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x7a>
 800289c:	4b84      	ldr	r3, [pc, #528]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a83      	ldr	r2, [pc, #524]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	e02e      	b.n	8002908 <HAL_RCC_OscConfig+0xd8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0x9c>
 80028b2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e01d      	b.n	8002908 <HAL_RCC_OscConfig+0xd8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0xc0>
 80028d6:	4b76      	ldr	r3, [pc, #472]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a75      	ldr	r2, [pc, #468]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b73      	ldr	r3, [pc, #460]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a72      	ldr	r2, [pc, #456]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0xd8>
 80028f0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6e      	ldr	r2, [pc, #440]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fad2 	bl	8000eb8 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7fe face 	bl	8000eb8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	@ 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e21f      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b61      	ldr	r3, [pc, #388]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0xe8>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fabe 	bl	8000eb8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7fe faba 	bl	8000eb8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	@ 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e20b      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	4b57      	ldr	r3, [pc, #348]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x110>
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d069      	beq.n	8002a42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296e:	4b50      	ldr	r3, [pc, #320]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d11c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x190>
 8002986:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d116      	bne.n	80029c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x17a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e1df      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b41      	ldr	r3, [pc, #260]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	493d      	ldr	r1, [pc, #244]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	e040      	b.n	8002a42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d023      	beq.n	8002a10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c8:	4b39      	ldr	r3, [pc, #228]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a38      	ldr	r2, [pc, #224]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fa70 	bl	8000eb8 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029dc:	f7fe fa6c 	bl	8000eb8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1bd      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	4b30      	ldr	r3, [pc, #192]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4929      	ldr	r1, [pc, #164]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
 8002a0e:	e018      	b.n	8002a42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a10:	4b27      	ldr	r3, [pc, #156]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a26      	ldr	r2, [pc, #152]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fa4c 	bl	8000eb8 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a24:	f7fe fa48 	bl	8000eb8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e199      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d038      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d019      	beq.n	8002a8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a56:	4b16      	ldr	r3, [pc, #88]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5a:	4a15      	ldr	r2, [pc, #84]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fe fa29 	bl	8000eb8 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fa25 	bl	8000eb8 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e176      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x23a>
 8002a88:	e01a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a8e:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7fe fa0f 	bl	8000eb8 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fa0b 	bl	8000eb8 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d903      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e15c      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
 8002ab0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b91      	ldr	r3, [pc, #580]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ee      	bne.n	8002a9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a4 	beq.w	8002c16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ace:	4b8b      	ldr	r3, [pc, #556]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	4b88      	ldr	r3, [pc, #544]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	4a87      	ldr	r2, [pc, #540]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae6:	4b85      	ldr	r3, [pc, #532]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af6:	4b82      	ldr	r3, [pc, #520]	@ (8002d00 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d118      	bne.n	8002b34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b02:	4b7f      	ldr	r3, [pc, #508]	@ (8002d00 <HAL_RCC_OscConfig+0x4d0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7e      	ldr	r2, [pc, #504]	@ (8002d00 <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe f9d3 	bl	8000eb8 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b16:	f7fe f9cf 	bl	8000eb8 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b64      	cmp	r3, #100	@ 0x64
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e120      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b28:	4b75      	ldr	r3, [pc, #468]	@ (8002d00 <HAL_RCC_OscConfig+0x4d0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x31a>
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b40:	4a6e      	ldr	r2, [pc, #440]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b48:	e02d      	b.n	8002ba6 <HAL_RCC_OscConfig+0x376>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x33c>
 8002b52:	4b6a      	ldr	r3, [pc, #424]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b56:	4a69      	ldr	r2, [pc, #420]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5e:	4b67      	ldr	r3, [pc, #412]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b62:	4a66      	ldr	r2, [pc, #408]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6a:	e01c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x376>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d10c      	bne.n	8002b8e <HAL_RCC_OscConfig+0x35e>
 8002b74:	4b61      	ldr	r3, [pc, #388]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	4a60      	ldr	r2, [pc, #384]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b80:	4b5e      	ldr	r3, [pc, #376]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	4a5d      	ldr	r2, [pc, #372]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8c:	e00b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x376>
 8002b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b92:	4a5a      	ldr	r2, [pc, #360]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b9a:	4b58      	ldr	r3, [pc, #352]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	4a57      	ldr	r2, [pc, #348]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d015      	beq.n	8002bda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7fe f983 	bl	8000eb8 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe f97f 	bl	8000eb8 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e0ce      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x386>
 8002bd8:	e014      	b.n	8002c04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fe f96d 	bl	8000eb8 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe f969 	bl	8000eb8 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	4b40      	ldr	r3, [pc, #256]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ee      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	4a3b      	ldr	r2, [pc, #236]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80a4 	beq.w	8002d68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c20:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d06b      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d149      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b31      	ldr	r3, [pc, #196]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a30      	ldr	r2, [pc, #192]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe f93a 	bl	8000eb8 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe f936 	bl	8000eb8 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e087      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c8e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a18      	ldr	r2, [pc, #96]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe f90a 	bl	8000eb8 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe f906 	bl	8000eb8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e057      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cba:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x478>
 8002cc6:	e04f      	b.n	8002d68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f8f0 	bl	8000eb8 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe f8ec 	bl	8000eb8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e03d      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	4b03      	ldr	r3, [pc, #12]	@ (8002cfc <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4ac>
 8002cfa:	e035      	b.n	8002d68 <HAL_RCC_OscConfig+0x538>
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <HAL_RCC_OscConfig+0x544>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d028      	beq.n	8002d64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d121      	bne.n	8002d64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d11a      	bne.n	8002d64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d111      	bne.n	8002d64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800

08002d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0d0      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b6a      	ldr	r3, [pc, #424]	@ (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d910      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b67      	ldr	r3, [pc, #412]	@ (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 020f 	bic.w	r2, r3, #15
 8002da6:	4965      	ldr	r1, [pc, #404]	@ (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b63      	ldr	r3, [pc, #396]	@ (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b8      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002dde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002de2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df0:	4b53      	ldr	r3, [pc, #332]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a52      	ldr	r2, [pc, #328]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002df6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfc:	4b50      	ldr	r3, [pc, #320]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	494d      	ldr	r1, [pc, #308]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d040      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b47      	ldr	r3, [pc, #284]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d115      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3a:	4b41      	ldr	r3, [pc, #260]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e073      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e06b      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5a:	4b39      	ldr	r3, [pc, #228]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4936      	ldr	r1, [pc, #216]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6c:	f7fe f824 	bl	8000eb8 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe f820 	bl	8000eb8 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e053      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 020c 	and.w	r2, r3, #12
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1eb      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d210      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b24      	ldr	r3, [pc, #144]	@ (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 020f 	bic.w	r2, r3, #15
 8002eb2:	4922      	ldr	r1, [pc, #136]	@ (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b20      	ldr	r3, [pc, #128]	@ (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e032      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4916      	ldr	r1, [pc, #88]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ef6:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	490e      	ldr	r1, [pc, #56]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f0a:	f000 f821 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	490a      	ldr	r1, [pc, #40]	@ (8002f44 <HAL_RCC_ClockConfig+0x1cc>)
 8002f1c:	5ccb      	ldrb	r3, [r1, r3]
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	4a09      	ldr	r2, [pc, #36]	@ (8002f48 <HAL_RCC_ClockConfig+0x1d0>)
 8002f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f26:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_RCC_ClockConfig+0x1d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd ff80 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023c00 	.word	0x40023c00
 8002f40:	40023800 	.word	0x40023800
 8002f44:	08013f9c 	.word	0x08013f9c
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000004 	.word	0x20000004

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f54:	b090      	sub	sp, #64	@ 0x40
 8002f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f60:	2300      	movs	r3, #0
 8002f62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f68:	4b59      	ldr	r3, [pc, #356]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d00d      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x40>
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	f200 80a1 	bhi.w	80030bc <HAL_RCC_GetSysClockFreq+0x16c>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x34>
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f82:	e09b      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f84:	4b53      	ldr	r3, [pc, #332]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f88:	e09b      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8a:	4b53      	ldr	r3, [pc, #332]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f8e:	e098      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f90:	4b4f      	ldr	r3, [pc, #316]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d028      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	2200      	movs	r2, #0
 8002fae:	623b      	str	r3, [r7, #32]
 8002fb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4b47      	ldr	r3, [pc, #284]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fbc:	fb03 f201 	mul.w	r2, r3, r1
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	fb00 f303 	mul.w	r3, r0, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a43      	ldr	r2, [pc, #268]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fca:	fba0 1202 	umull	r1, r2, r0, r2
 8002fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd0:	460a      	mov	r2, r1
 8002fd2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fd6:	4413      	add	r3, r2
 8002fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fdc:	2200      	movs	r2, #0
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	61fa      	str	r2, [r7, #28]
 8002fe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002fea:	f7fd f969 	bl	80002c0 <__aeabi_uldivmod>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ff6:	e053      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff8:	4b35      	ldr	r3, [pc, #212]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	2200      	movs	r2, #0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	617a      	str	r2, [r7, #20]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800300a:	f04f 0b00 	mov.w	fp, #0
 800300e:	4652      	mov	r2, sl
 8003010:	465b      	mov	r3, fp
 8003012:	f04f 0000 	mov.w	r0, #0
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	0159      	lsls	r1, r3, #5
 800301c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003020:	0150      	lsls	r0, r2, #5
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	ebb2 080a 	subs.w	r8, r2, sl
 800302a:	eb63 090b 	sbc.w	r9, r3, fp
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800303a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800303e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003042:	ebb2 0408 	subs.w	r4, r2, r8
 8003046:	eb63 0509 	sbc.w	r5, r3, r9
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	00eb      	lsls	r3, r5, #3
 8003054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003058:	00e2      	lsls	r2, r4, #3
 800305a:	4614      	mov	r4, r2
 800305c:	461d      	mov	r5, r3
 800305e:	eb14 030a 	adds.w	r3, r4, sl
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	eb45 030b 	adc.w	r3, r5, fp
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003076:	4629      	mov	r1, r5
 8003078:	028b      	lsls	r3, r1, #10
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003080:	4621      	mov	r1, r4
 8003082:	028a      	lsls	r2, r1, #10
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308a:	2200      	movs	r2, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	60fa      	str	r2, [r7, #12]
 8003090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003094:	f7fd f914 	bl	80002c0 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4613      	mov	r3, r2
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	3301      	adds	r3, #1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80030b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030ba:	e002      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80030be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3740      	adds	r7, #64	@ 0x40
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	017d7840 	.word	0x017d7840

080030dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e0:	4b03      	ldr	r3, [pc, #12]	@ (80030f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000000 	.word	0x20000000

080030f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f8:	f7ff fff0 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	0a9b      	lsrs	r3, r3, #10
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	@ (8003118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40023800 	.word	0x40023800
 8003118:	08013fac 	.word	0x08013fac

0800311c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003120:	f7ff ffdc 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	0b5b      	lsrs	r3, r3, #13
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	4903      	ldr	r1, [pc, #12]	@ (8003140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800
 8003140:	08013fac 	.word	0x08013fac

08003144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d012      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800316c:	4b69      	ldr	r3, [pc, #420]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a68      	ldr	r2, [pc, #416]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003176:	6093      	str	r3, [r2, #8]
 8003178:	4b66      	ldr	r3, [pc, #408]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003180:	4964      	ldr	r1, [pc, #400]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800318e:	2301      	movs	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d017      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800319e:	4b5d      	ldr	r3, [pc, #372]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	4959      	ldr	r1, [pc, #356]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031bc:	d101      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031be:	2301      	movs	r3, #1
 80031c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d017      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031da:	4b4e      	ldr	r3, [pc, #312]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	494a      	ldr	r1, [pc, #296]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031f8:	d101      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031fa:	2301      	movs	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003216:	2301      	movs	r3, #1
 8003218:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 808b 	beq.w	800333e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	4b3a      	ldr	r3, [pc, #232]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	4a39      	ldr	r2, [pc, #228]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003232:	6413      	str	r3, [r2, #64]	@ 0x40
 8003234:	4b37      	ldr	r3, [pc, #220]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003240:	4b35      	ldr	r3, [pc, #212]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a34      	ldr	r2, [pc, #208]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800324a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800324c:	f7fd fe34 	bl	8000eb8 <HAL_GetTick>
 8003250:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7fd fe30 	bl	8000eb8 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	@ 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e357      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003266:	4b2c      	ldr	r3, [pc, #176]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003272:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800327a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d035      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	429a      	cmp	r2, r3
 800328e:	d02e      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003290:	4b20      	ldr	r3, [pc, #128]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003298:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800329a:	4b1e      	ldr	r3, [pc, #120]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329e:	4a1d      	ldr	r2, [pc, #116]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032b2:	4a18      	ldr	r2, [pc, #96]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032b8:	4b16      	ldr	r3, [pc, #88]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d114      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fd fdf8 	bl	8000eb8 <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fd fdf4 	bl	8000eb8 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e319      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ee      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032fa:	d111      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032fc:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003308:	4b04      	ldr	r3, [pc, #16]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800330a:	400b      	ands	r3, r1
 800330c:	4901      	ldr	r1, [pc, #4]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
 8003312:	e00b      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003314:	40023800 	.word	0x40023800
 8003318:	40007000 	.word	0x40007000
 800331c:	0ffffcff 	.word	0x0ffffcff
 8003320:	4baa      	ldr	r3, [pc, #680]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4aa9      	ldr	r2, [pc, #676]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003326:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800332a:	6093      	str	r3, [r2, #8]
 800332c:	4ba7      	ldr	r3, [pc, #668]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	49a4      	ldr	r1, [pc, #656]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800333a:	4313      	orrs	r3, r2
 800333c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800334a:	4ba0      	ldr	r3, [pc, #640]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003350:	4a9e      	ldr	r2, [pc, #632]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003352:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003356:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800335a:	4b9c      	ldr	r3, [pc, #624]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800335c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	4999      	ldr	r1, [pc, #612]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003378:	4b94      	ldr	r3, [pc, #592]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003386:	4991      	ldr	r1, [pc, #580]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800339a:	4b8c      	ldr	r3, [pc, #560]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033a8:	4988      	ldr	r1, [pc, #544]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033bc:	4b83      	ldr	r3, [pc, #524]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ca:	4980      	ldr	r1, [pc, #512]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033de:	4b7b      	ldr	r3, [pc, #492]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ec:	4977      	ldr	r1, [pc, #476]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003400:	4b72      	ldr	r3, [pc, #456]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340e:	496f      	ldr	r1, [pc, #444]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003422:	4b6a      	ldr	r3, [pc, #424]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003428:	f023 020c 	bic.w	r2, r3, #12
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003430:	4966      	ldr	r1, [pc, #408]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003444:	4b61      	ldr	r3, [pc, #388]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	495e      	ldr	r1, [pc, #376]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003466:	4b59      	ldr	r3, [pc, #356]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003474:	4955      	ldr	r1, [pc, #340]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003488:	4b50      	ldr	r3, [pc, #320]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003496:	494d      	ldr	r1, [pc, #308]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034aa:	4b48      	ldr	r3, [pc, #288]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	4944      	ldr	r1, [pc, #272]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034cc:	4b3f      	ldr	r3, [pc, #252]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034da:	493c      	ldr	r1, [pc, #240]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034ee:	4b37      	ldr	r3, [pc, #220]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fc:	4933      	ldr	r1, [pc, #204]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003510:	4b2e      	ldr	r3, [pc, #184]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003516:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800351e:	492b      	ldr	r1, [pc, #172]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d011      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003532:	4b26      	ldr	r3, [pc, #152]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003538:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003540:	4922      	ldr	r1, [pc, #136]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800354c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003550:	d101      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003572:	4b16      	ldr	r3, [pc, #88]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003578:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003580:	4912      	ldr	r1, [pc, #72]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003594:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035a4:	4909      	ldr	r1, [pc, #36]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d006      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80d9 	beq.w	8003772 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035c0:	4b02      	ldr	r3, [pc, #8]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a01      	ldr	r2, [pc, #4]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035ca:	e001      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d2:	f7fd fc71 	bl	8000eb8 <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035da:	f7fd fc6d 	bl	8000eb8 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b64      	cmp	r3, #100	@ 0x64
 80035e6:	d901      	bls.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e194      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035ec:	4b6c      	ldr	r3, [pc, #432]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d021      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11d      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800360c:	4b64      	ldr	r3, [pc, #400]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800360e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800361a:	4b61      	ldr	r3, [pc, #388]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003620:	0e1b      	lsrs	r3, r3, #24
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	019a      	lsls	r2, r3, #6
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	431a      	orrs	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	061b      	lsls	r3, r3, #24
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	071b      	lsls	r3, r3, #28
 8003640:	4957      	ldr	r1, [pc, #348]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02e      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003672:	d129      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003674:	4b4a      	ldr	r3, [pc, #296]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003676:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003682:	4b47      	ldr	r3, [pc, #284]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003688:	0f1b      	lsrs	r3, r3, #28
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	019a      	lsls	r2, r3, #6
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	431a      	orrs	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	071b      	lsls	r3, r3, #28
 80036a8:	493d      	ldr	r1, [pc, #244]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036b0:	4b3b      	ldr	r3, [pc, #236]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036b6:	f023 021f 	bic.w	r2, r3, #31
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	3b01      	subs	r3, #1
 80036c0:	4937      	ldr	r1, [pc, #220]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036d4:	4b32      	ldr	r3, [pc, #200]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036da:	0e1b      	lsrs	r3, r3, #24
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036e2:	4b2f      	ldr	r3, [pc, #188]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e8:	0f1b      	lsrs	r3, r3, #28
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	019a      	lsls	r2, r3, #6
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	041b      	lsls	r3, r3, #16
 80036fc:	431a      	orrs	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	431a      	orrs	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	071b      	lsls	r3, r3, #28
 8003708:	4925      	ldr	r1, [pc, #148]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d011      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	019a      	lsls	r2, r3, #6
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	071b      	lsls	r3, r3, #28
 8003738:	4919      	ldr	r1, [pc, #100]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003740:	4b17      	ldr	r3, [pc, #92]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a16      	ldr	r2, [pc, #88]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003746:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800374a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374c:	f7fd fbb4 	bl	8000eb8 <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003754:	f7fd fbb0 	bl	8000eb8 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	@ 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0d7      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b01      	cmp	r3, #1
 8003776:	f040 80cd 	bne.w	8003914 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800377a:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a08      	ldr	r2, [pc, #32]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003780:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003786:	f7fd fb97 	bl	8000eb8 <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800378c:	e00a      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800378e:	f7fd fb93 	bl	8000eb8 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b64      	cmp	r3, #100	@ 0x64
 800379a:	d903      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0ba      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80037a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037b0:	d0ed      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d02e      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d12a      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037da:	4b51      	ldr	r3, [pc, #324]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ee:	0f1b      	lsrs	r3, r3, #28
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	019a      	lsls	r2, r3, #6
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	431a      	orrs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	071b      	lsls	r3, r3, #28
 800380e:	4944      	ldr	r1, [pc, #272]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003816:	4b42      	ldr	r3, [pc, #264]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800381c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	3b01      	subs	r3, #1
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	493d      	ldr	r1, [pc, #244]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d022      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003844:	d11d      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003846:	4b36      	ldr	r3, [pc, #216]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384c:	0e1b      	lsrs	r3, r3, #24
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003854:	4b32      	ldr	r3, [pc, #200]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	0f1b      	lsrs	r3, r3, #28
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	019a      	lsls	r2, r3, #6
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	431a      	orrs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	071b      	lsls	r3, r3, #28
 800387a:	4929      	ldr	r1, [pc, #164]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d028      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800388e:	4b24      	ldr	r3, [pc, #144]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	0e1b      	lsrs	r3, r3, #24
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800389c:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	019a      	lsls	r2, r3, #6
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	431a      	orrs	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	071b      	lsls	r3, r3, #28
 80038c2:	4917      	ldr	r1, [pc, #92]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038ca:	4b15      	ldr	r3, [pc, #84]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	4911      	ldr	r1, [pc, #68]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ec:	f7fd fae4 	bl	8000eb8 <HAL_GetTick>
 80038f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038f4:	f7fd fae0 	bl	8000eb8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	@ 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e007      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003906:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003912:	d1ef      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800

08003924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e040      	b.n	80039b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd f8d8 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	@ 0x24
 8003950:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fb16 	bl	8003f9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8af 	bl	8003ad4 <UART_SetConfig>
 8003976:	4603      	mov	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e01b      	b.n	80039b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800398e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800399e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fb95 	bl	80040e0 <UART_CheckIdleState>
 80039b6:	4603      	mov	r3, r0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d177      	bne.n	8003ac8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_UART_Transmit+0x24>
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e070      	b.n	8003aca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2221      	movs	r2, #33	@ 0x21
 80039f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039f6:	f7fd fa5f 	bl	8000eb8 <HAL_GetTick>
 80039fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a14:	d108      	bne.n	8003a28 <HAL_UART_Transmit+0x68>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	e003      	b.n	8003a30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a30:	e02f      	b.n	8003a92 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2180      	movs	r1, #128	@ 0x80
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fba6 	bl	800418e <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e03b      	b.n	8003aca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e007      	b.n	8003a80 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1c9      	bne.n	8003a32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2140      	movs	r1, #64	@ 0x40
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fb70 	bl	800418e <UART_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e005      	b.n	8003aca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4ba6      	ldr	r3, [pc, #664]	@ (8003d98 <UART_SetConfig+0x2c4>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	6979      	ldr	r1, [r7, #20]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a94      	ldr	r2, [pc, #592]	@ (8003d9c <UART_SetConfig+0x2c8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d120      	bne.n	8003b92 <UART_SetConfig+0xbe>
 8003b50:	4b93      	ldr	r3, [pc, #588]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d816      	bhi.n	8003b8c <UART_SetConfig+0xb8>
 8003b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b64 <UART_SetConfig+0x90>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b81 	.word	0x08003b81
 8003b6c:	08003b7b 	.word	0x08003b7b
 8003b70:	08003b87 	.word	0x08003b87
 8003b74:	2301      	movs	r3, #1
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e150      	b.n	8003e1c <UART_SetConfig+0x348>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e14d      	b.n	8003e1c <UART_SetConfig+0x348>
 8003b80:	2304      	movs	r3, #4
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e14a      	b.n	8003e1c <UART_SetConfig+0x348>
 8003b86:	2308      	movs	r3, #8
 8003b88:	77fb      	strb	r3, [r7, #31]
 8003b8a:	e147      	b.n	8003e1c <UART_SetConfig+0x348>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e144      	b.n	8003e1c <UART_SetConfig+0x348>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a83      	ldr	r2, [pc, #524]	@ (8003da4 <UART_SetConfig+0x2d0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d132      	bne.n	8003c02 <UART_SetConfig+0x12e>
 8003b9c:	4b80      	ldr	r3, [pc, #512]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d828      	bhi.n	8003bfc <UART_SetConfig+0x128>
 8003baa:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb0 <UART_SetConfig+0xdc>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003be5 	.word	0x08003be5
 8003bb4:	08003bfd 	.word	0x08003bfd
 8003bb8:	08003bfd 	.word	0x08003bfd
 8003bbc:	08003bfd 	.word	0x08003bfd
 8003bc0:	08003bf1 	.word	0x08003bf1
 8003bc4:	08003bfd 	.word	0x08003bfd
 8003bc8:	08003bfd 	.word	0x08003bfd
 8003bcc:	08003bfd 	.word	0x08003bfd
 8003bd0:	08003beb 	.word	0x08003beb
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003bfd 	.word	0x08003bfd
 8003be0:	08003bf7 	.word	0x08003bf7
 8003be4:	2300      	movs	r3, #0
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e118      	b.n	8003e1c <UART_SetConfig+0x348>
 8003bea:	2302      	movs	r3, #2
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e115      	b.n	8003e1c <UART_SetConfig+0x348>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e112      	b.n	8003e1c <UART_SetConfig+0x348>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e10f      	b.n	8003e1c <UART_SetConfig+0x348>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e10c      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a68      	ldr	r2, [pc, #416]	@ (8003da8 <UART_SetConfig+0x2d4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d120      	bne.n	8003c4e <UART_SetConfig+0x17a>
 8003c0c:	4b64      	ldr	r3, [pc, #400]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c12:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c16:	2b30      	cmp	r3, #48	@ 0x30
 8003c18:	d013      	beq.n	8003c42 <UART_SetConfig+0x16e>
 8003c1a:	2b30      	cmp	r3, #48	@ 0x30
 8003c1c:	d814      	bhi.n	8003c48 <UART_SetConfig+0x174>
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d009      	beq.n	8003c36 <UART_SetConfig+0x162>
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d810      	bhi.n	8003c48 <UART_SetConfig+0x174>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <UART_SetConfig+0x15c>
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d006      	beq.n	8003c3c <UART_SetConfig+0x168>
 8003c2e:	e00b      	b.n	8003c48 <UART_SetConfig+0x174>
 8003c30:	2300      	movs	r3, #0
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e0f2      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c36:	2302      	movs	r3, #2
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e0ef      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e0ec      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c42:	2308      	movs	r3, #8
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e0e9      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e0e6      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a56      	ldr	r2, [pc, #344]	@ (8003dac <UART_SetConfig+0x2d8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d120      	bne.n	8003c9a <UART_SetConfig+0x1c6>
 8003c58:	4b51      	ldr	r3, [pc, #324]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c62:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c64:	d013      	beq.n	8003c8e <UART_SetConfig+0x1ba>
 8003c66:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c68:	d814      	bhi.n	8003c94 <UART_SetConfig+0x1c0>
 8003c6a:	2b80      	cmp	r3, #128	@ 0x80
 8003c6c:	d009      	beq.n	8003c82 <UART_SetConfig+0x1ae>
 8003c6e:	2b80      	cmp	r3, #128	@ 0x80
 8003c70:	d810      	bhi.n	8003c94 <UART_SetConfig+0x1c0>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <UART_SetConfig+0x1a8>
 8003c76:	2b40      	cmp	r3, #64	@ 0x40
 8003c78:	d006      	beq.n	8003c88 <UART_SetConfig+0x1b4>
 8003c7a:	e00b      	b.n	8003c94 <UART_SetConfig+0x1c0>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e0cc      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c82:	2302      	movs	r3, #2
 8003c84:	77fb      	strb	r3, [r7, #31]
 8003c86:	e0c9      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e0c6      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c8e:	2308      	movs	r3, #8
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e0c3      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c94:	2310      	movs	r3, #16
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e0c0      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a44      	ldr	r2, [pc, #272]	@ (8003db0 <UART_SetConfig+0x2dc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d125      	bne.n	8003cf0 <UART_SetConfig+0x21c>
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb2:	d017      	beq.n	8003ce4 <UART_SetConfig+0x210>
 8003cb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb8:	d817      	bhi.n	8003cea <UART_SetConfig+0x216>
 8003cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cbe:	d00b      	beq.n	8003cd8 <UART_SetConfig+0x204>
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc4:	d811      	bhi.n	8003cea <UART_SetConfig+0x216>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <UART_SetConfig+0x1fe>
 8003cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cce:	d006      	beq.n	8003cde <UART_SetConfig+0x20a>
 8003cd0:	e00b      	b.n	8003cea <UART_SetConfig+0x216>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e0a1      	b.n	8003e1c <UART_SetConfig+0x348>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e09e      	b.n	8003e1c <UART_SetConfig+0x348>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e09b      	b.n	8003e1c <UART_SetConfig+0x348>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e098      	b.n	8003e1c <UART_SetConfig+0x348>
 8003cea:	2310      	movs	r3, #16
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e095      	b.n	8003e1c <UART_SetConfig+0x348>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8003db4 <UART_SetConfig+0x2e0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d125      	bne.n	8003d46 <UART_SetConfig+0x272>
 8003cfa:	4b29      	ldr	r3, [pc, #164]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d08:	d017      	beq.n	8003d3a <UART_SetConfig+0x266>
 8003d0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d0e:	d817      	bhi.n	8003d40 <UART_SetConfig+0x26c>
 8003d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d14:	d00b      	beq.n	8003d2e <UART_SetConfig+0x25a>
 8003d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d1a:	d811      	bhi.n	8003d40 <UART_SetConfig+0x26c>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <UART_SetConfig+0x254>
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d24:	d006      	beq.n	8003d34 <UART_SetConfig+0x260>
 8003d26:	e00b      	b.n	8003d40 <UART_SetConfig+0x26c>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e076      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e073      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d34:	2304      	movs	r3, #4
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e070      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e06d      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d40:	2310      	movs	r3, #16
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e06a      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003db8 <UART_SetConfig+0x2e4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d138      	bne.n	8003dc2 <UART_SetConfig+0x2ee>
 8003d50:	4b13      	ldr	r3, [pc, #76]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d56:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d5e:	d017      	beq.n	8003d90 <UART_SetConfig+0x2bc>
 8003d60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d64:	d82a      	bhi.n	8003dbc <UART_SetConfig+0x2e8>
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6a:	d00b      	beq.n	8003d84 <UART_SetConfig+0x2b0>
 8003d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d70:	d824      	bhi.n	8003dbc <UART_SetConfig+0x2e8>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <UART_SetConfig+0x2aa>
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d7a:	d006      	beq.n	8003d8a <UART_SetConfig+0x2b6>
 8003d7c:	e01e      	b.n	8003dbc <UART_SetConfig+0x2e8>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e04b      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d84:	2302      	movs	r3, #2
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e048      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e045      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d90:	2308      	movs	r3, #8
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e042      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d96:	bf00      	nop
 8003d98:	efff69f3 	.word	0xefff69f3
 8003d9c:	40011000 	.word	0x40011000
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40004400 	.word	0x40004400
 8003da8:	40004800 	.word	0x40004800
 8003dac:	40004c00 	.word	0x40004c00
 8003db0:	40005000 	.word	0x40005000
 8003db4:	40011400 	.word	0x40011400
 8003db8:	40007800 	.word	0x40007800
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e02c      	b.n	8003e1c <UART_SetConfig+0x348>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a72      	ldr	r2, [pc, #456]	@ (8003f90 <UART_SetConfig+0x4bc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d125      	bne.n	8003e18 <UART_SetConfig+0x344>
 8003dcc:	4b71      	ldr	r3, [pc, #452]	@ (8003f94 <UART_SetConfig+0x4c0>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003dd6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003dda:	d017      	beq.n	8003e0c <UART_SetConfig+0x338>
 8003ddc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003de0:	d817      	bhi.n	8003e12 <UART_SetConfig+0x33e>
 8003de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de6:	d00b      	beq.n	8003e00 <UART_SetConfig+0x32c>
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dec:	d811      	bhi.n	8003e12 <UART_SetConfig+0x33e>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <UART_SetConfig+0x326>
 8003df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003df6:	d006      	beq.n	8003e06 <UART_SetConfig+0x332>
 8003df8:	e00b      	b.n	8003e12 <UART_SetConfig+0x33e>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e00d      	b.n	8003e1c <UART_SetConfig+0x348>
 8003e00:	2302      	movs	r3, #2
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e00a      	b.n	8003e1c <UART_SetConfig+0x348>
 8003e06:	2304      	movs	r3, #4
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e007      	b.n	8003e1c <UART_SetConfig+0x348>
 8003e0c:	2308      	movs	r3, #8
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e004      	b.n	8003e1c <UART_SetConfig+0x348>
 8003e12:	2310      	movs	r3, #16
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e001      	b.n	8003e1c <UART_SetConfig+0x348>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e24:	d15b      	bne.n	8003ede <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e26:	7ffb      	ldrb	r3, [r7, #31]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d828      	bhi.n	8003e7e <UART_SetConfig+0x3aa>
 8003e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <UART_SetConfig+0x360>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e69 	.word	0x08003e69
 8003e40:	08003e7f 	.word	0x08003e7f
 8003e44:	08003e6f 	.word	0x08003e6f
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003e7f 	.word	0x08003e7f
 8003e50:	08003e7f 	.word	0x08003e7f
 8003e54:	08003e77 	.word	0x08003e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e58:	f7ff f94c 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8003e5c:	61b8      	str	r0, [r7, #24]
        break;
 8003e5e:	e013      	b.n	8003e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e60:	f7ff f95c 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8003e64:	61b8      	str	r0, [r7, #24]
        break;
 8003e66:	e00f      	b.n	8003e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b4b      	ldr	r3, [pc, #300]	@ (8003f98 <UART_SetConfig+0x4c4>)
 8003e6a:	61bb      	str	r3, [r7, #24]
        break;
 8003e6c:	e00c      	b.n	8003e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7ff f86f 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8003e72:	61b8      	str	r0, [r7, #24]
        break;
 8003e74:	e008      	b.n	8003e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7a:	61bb      	str	r3, [r7, #24]
        break;
 8003e7c:	e004      	b.n	8003e88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	77bb      	strb	r3, [r7, #30]
        break;
 8003e86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d074      	beq.n	8003f78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	005a      	lsls	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	441a      	add	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d916      	bls.n	8003ed8 <UART_SetConfig+0x404>
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d212      	bcs.n	8003ed8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f023 030f 	bic.w	r3, r3, #15
 8003eba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	89fb      	ldrh	r3, [r7, #14]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	89fa      	ldrh	r2, [r7, #14]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	e04f      	b.n	8003f78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	77bb      	strb	r3, [r7, #30]
 8003edc:	e04c      	b.n	8003f78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d828      	bhi.n	8003f36 <UART_SetConfig+0x462>
 8003ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eec <UART_SetConfig+0x418>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	08003f37 	.word	0x08003f37
 8003efc:	08003f27 	.word	0x08003f27
 8003f00:	08003f37 	.word	0x08003f37
 8003f04:	08003f37 	.word	0x08003f37
 8003f08:	08003f37 	.word	0x08003f37
 8003f0c:	08003f2f 	.word	0x08003f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f10:	f7ff f8f0 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8003f14:	61b8      	str	r0, [r7, #24]
        break;
 8003f16:	e013      	b.n	8003f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7ff f900 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8003f1c:	61b8      	str	r0, [r7, #24]
        break;
 8003f1e:	e00f      	b.n	8003f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <UART_SetConfig+0x4c4>)
 8003f22:	61bb      	str	r3, [r7, #24]
        break;
 8003f24:	e00c      	b.n	8003f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7ff f813 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8003f2a:	61b8      	str	r0, [r7, #24]
        break;
 8003f2c:	e008      	b.n	8003f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f32:	61bb      	str	r3, [r7, #24]
        break;
 8003f34:	e004      	b.n	8003f40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f3e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d018      	beq.n	8003f78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	085a      	lsrs	r2, r3, #1
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	441a      	add	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	d909      	bls.n	8003f74 <UART_SetConfig+0x4a0>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f66:	d205      	bcs.n	8003f74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	e001      	b.n	8003f78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f84:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40007c00 	.word	0x40007c00
 8003f94:	40023800 	.word	0x40023800
 8003f98:	00f42400 	.word	0x00f42400

08003f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800409a:	d10a      	bne.n	80040b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	@ 0x30
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f0:	f7fc fee2 	bl	8000eb8 <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b08      	cmp	r3, #8
 8004102:	d12e      	bne.n	8004162 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004104:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f83b 	bl	800418e <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d021      	beq.n	8004162 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	60fb      	str	r3, [r7, #12]
   return(result);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004132:	623b      	str	r3, [r7, #32]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	69b9      	ldr	r1, [r7, #24]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	617b      	str	r3, [r7, #20]
   return(result);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e6      	bne.n	800411e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e011      	b.n	8004186 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3728      	adds	r7, #40	@ 0x28
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419e:	e04f      	b.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	d04b      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fc fe86 	bl	8000eb8 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <UART_WaitOnFlagUntilTimeout+0x30>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e04e      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d037      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b80      	cmp	r3, #128	@ 0x80
 80041d4:	d034      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b40      	cmp	r3, #64	@ 0x40
 80041da:	d031      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d110      	bne.n	800420c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2208      	movs	r2, #8
 80041f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f838 	bl	8004268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2208      	movs	r2, #8
 80041fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e029      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800421a:	d111      	bne.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004224:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f81e 	bl	8004268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e00f      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	429a      	cmp	r2, r3
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	429a      	cmp	r2, r3
 800425c:	d0a0      	beq.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b095      	sub	sp, #84	@ 0x54
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004284:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800428e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004290:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004294:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800429c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e6      	bne.n	8004270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3308      	adds	r3, #8
 80042c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e5      	bne.n	80042a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d118      	bne.n	8004310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6979      	ldr	r1, [r7, #20]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	613b      	str	r3, [r7, #16]
   return(result);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e6      	bne.n	80042de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004324:	bf00      	nop
 8004326:	3754      	adds	r7, #84	@ 0x54
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004336:	4b87      	ldr	r3, [pc, #540]	@ (8004554 <MX_LWIP_Init+0x224>)
 8004338:	22c0      	movs	r2, #192	@ 0xc0
 800433a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800433c:	4b85      	ldr	r3, [pc, #532]	@ (8004554 <MX_LWIP_Init+0x224>)
 800433e:	22a8      	movs	r2, #168	@ 0xa8
 8004340:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004342:	4b84      	ldr	r3, [pc, #528]	@ (8004554 <MX_LWIP_Init+0x224>)
 8004344:	2201      	movs	r2, #1
 8004346:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8004348:	4b82      	ldr	r3, [pc, #520]	@ (8004554 <MX_LWIP_Init+0x224>)
 800434a:	2264      	movs	r2, #100	@ 0x64
 800434c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800434e:	4b82      	ldr	r3, [pc, #520]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004350:	22ff      	movs	r2, #255	@ 0xff
 8004352:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004354:	4b80      	ldr	r3, [pc, #512]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004356:	22ff      	movs	r2, #255	@ 0xff
 8004358:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800435a:	4b7f      	ldr	r3, [pc, #508]	@ (8004558 <MX_LWIP_Init+0x228>)
 800435c:	22ff      	movs	r2, #255	@ 0xff
 800435e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004360:	4b7d      	ldr	r3, [pc, #500]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004362:	2200      	movs	r2, #0
 8004364:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004366:	4b7d      	ldr	r3, [pc, #500]	@ (800455c <MX_LWIP_Init+0x22c>)
 8004368:	22c0      	movs	r2, #192	@ 0xc0
 800436a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800436c:	4b7b      	ldr	r3, [pc, #492]	@ (800455c <MX_LWIP_Init+0x22c>)
 800436e:	22a8      	movs	r2, #168	@ 0xa8
 8004370:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004372:	4b7a      	ldr	r3, [pc, #488]	@ (800455c <MX_LWIP_Init+0x22c>)
 8004374:	2201      	movs	r2, #1
 8004376:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004378:	4b78      	ldr	r3, [pc, #480]	@ (800455c <MX_LWIP_Init+0x22c>)
 800437a:	2201      	movs	r2, #1
 800437c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800437e:	f001 fecb 	bl	8006118 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004382:	4b74      	ldr	r3, [pc, #464]	@ (8004554 <MX_LWIP_Init+0x224>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	061a      	lsls	r2, r3, #24
 8004388:	4b72      	ldr	r3, [pc, #456]	@ (8004554 <MX_LWIP_Init+0x224>)
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	431a      	orrs	r2, r3
 8004390:	4b70      	ldr	r3, [pc, #448]	@ (8004554 <MX_LWIP_Init+0x224>)
 8004392:	789b      	ldrb	r3, [r3, #2]
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	4313      	orrs	r3, r2
 8004398:	4a6e      	ldr	r2, [pc, #440]	@ (8004554 <MX_LWIP_Init+0x224>)
 800439a:	78d2      	ldrb	r2, [r2, #3]
 800439c:	4313      	orrs	r3, r2
 800439e:	061a      	lsls	r2, r3, #24
 80043a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	0619      	lsls	r1, r3, #24
 80043a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	041b      	lsls	r3, r3, #16
 80043ac:	4319      	orrs	r1, r3
 80043ae:	4b69      	ldr	r3, [pc, #420]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043b0:	789b      	ldrb	r3, [r3, #2]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	430b      	orrs	r3, r1
 80043b6:	4967      	ldr	r1, [pc, #412]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043b8:	78c9      	ldrb	r1, [r1, #3]
 80043ba:	430b      	orrs	r3, r1
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80043c2:	431a      	orrs	r2, r3
 80043c4:	4b63      	ldr	r3, [pc, #396]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	0619      	lsls	r1, r3, #24
 80043ca:	4b62      	ldr	r3, [pc, #392]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	041b      	lsls	r3, r3, #16
 80043d0:	4319      	orrs	r1, r3
 80043d2:	4b60      	ldr	r3, [pc, #384]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043d4:	789b      	ldrb	r3, [r3, #2]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	430b      	orrs	r3, r1
 80043da:	495e      	ldr	r1, [pc, #376]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043dc:	78c9      	ldrb	r1, [r1, #3]
 80043de:	430b      	orrs	r3, r1
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80043e6:	431a      	orrs	r2, r3
 80043e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	0619      	lsls	r1, r3, #24
 80043ee:	4b59      	ldr	r3, [pc, #356]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043f0:	785b      	ldrb	r3, [r3, #1]
 80043f2:	041b      	lsls	r3, r3, #16
 80043f4:	4319      	orrs	r1, r3
 80043f6:	4b57      	ldr	r3, [pc, #348]	@ (8004554 <MX_LWIP_Init+0x224>)
 80043f8:	789b      	ldrb	r3, [r3, #2]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	430b      	orrs	r3, r1
 80043fe:	4955      	ldr	r1, [pc, #340]	@ (8004554 <MX_LWIP_Init+0x224>)
 8004400:	78c9      	ldrb	r1, [r1, #3]
 8004402:	430b      	orrs	r3, r1
 8004404:	0e1b      	lsrs	r3, r3, #24
 8004406:	4313      	orrs	r3, r2
 8004408:	4a55      	ldr	r2, [pc, #340]	@ (8004560 <MX_LWIP_Init+0x230>)
 800440a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800440c:	4b52      	ldr	r3, [pc, #328]	@ (8004558 <MX_LWIP_Init+0x228>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	061a      	lsls	r2, r3, #24
 8004412:	4b51      	ldr	r3, [pc, #324]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	431a      	orrs	r2, r3
 800441a:	4b4f      	ldr	r3, [pc, #316]	@ (8004558 <MX_LWIP_Init+0x228>)
 800441c:	789b      	ldrb	r3, [r3, #2]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	4313      	orrs	r3, r2
 8004422:	4a4d      	ldr	r2, [pc, #308]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004424:	78d2      	ldrb	r2, [r2, #3]
 8004426:	4313      	orrs	r3, r2
 8004428:	061a      	lsls	r2, r3, #24
 800442a:	4b4b      	ldr	r3, [pc, #300]	@ (8004558 <MX_LWIP_Init+0x228>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	0619      	lsls	r1, r3, #24
 8004430:	4b49      	ldr	r3, [pc, #292]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	4319      	orrs	r1, r3
 8004438:	4b47      	ldr	r3, [pc, #284]	@ (8004558 <MX_LWIP_Init+0x228>)
 800443a:	789b      	ldrb	r3, [r3, #2]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	430b      	orrs	r3, r1
 8004440:	4945      	ldr	r1, [pc, #276]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004442:	78c9      	ldrb	r1, [r1, #3]
 8004444:	430b      	orrs	r3, r1
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800444c:	431a      	orrs	r2, r3
 800444e:	4b42      	ldr	r3, [pc, #264]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	0619      	lsls	r1, r3, #24
 8004454:	4b40      	ldr	r3, [pc, #256]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	4319      	orrs	r1, r3
 800445c:	4b3e      	ldr	r3, [pc, #248]	@ (8004558 <MX_LWIP_Init+0x228>)
 800445e:	789b      	ldrb	r3, [r3, #2]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	430b      	orrs	r3, r1
 8004464:	493c      	ldr	r1, [pc, #240]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004466:	78c9      	ldrb	r1, [r1, #3]
 8004468:	430b      	orrs	r3, r1
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004470:	431a      	orrs	r2, r3
 8004472:	4b39      	ldr	r3, [pc, #228]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	0619      	lsls	r1, r3, #24
 8004478:	4b37      	ldr	r3, [pc, #220]	@ (8004558 <MX_LWIP_Init+0x228>)
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	4319      	orrs	r1, r3
 8004480:	4b35      	ldr	r3, [pc, #212]	@ (8004558 <MX_LWIP_Init+0x228>)
 8004482:	789b      	ldrb	r3, [r3, #2]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	430b      	orrs	r3, r1
 8004488:	4933      	ldr	r1, [pc, #204]	@ (8004558 <MX_LWIP_Init+0x228>)
 800448a:	78c9      	ldrb	r1, [r1, #3]
 800448c:	430b      	orrs	r3, r1
 800448e:	0e1b      	lsrs	r3, r3, #24
 8004490:	4313      	orrs	r3, r2
 8004492:	4a34      	ldr	r2, [pc, #208]	@ (8004564 <MX_LWIP_Init+0x234>)
 8004494:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004496:	4b31      	ldr	r3, [pc, #196]	@ (800455c <MX_LWIP_Init+0x22c>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	061a      	lsls	r2, r3, #24
 800449c:	4b2f      	ldr	r3, [pc, #188]	@ (800455c <MX_LWIP_Init+0x22c>)
 800449e:	785b      	ldrb	r3, [r3, #1]
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	431a      	orrs	r2, r3
 80044a4:	4b2d      	ldr	r3, [pc, #180]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044a6:	789b      	ldrb	r3, [r3, #2]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	4313      	orrs	r3, r2
 80044ac:	4a2b      	ldr	r2, [pc, #172]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044ae:	78d2      	ldrb	r2, [r2, #3]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	061a      	lsls	r2, r3, #24
 80044b4:	4b29      	ldr	r3, [pc, #164]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	0619      	lsls	r1, r3, #24
 80044ba:	4b28      	ldr	r3, [pc, #160]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	4319      	orrs	r1, r3
 80044c2:	4b26      	ldr	r3, [pc, #152]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044c4:	789b      	ldrb	r3, [r3, #2]
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	430b      	orrs	r3, r1
 80044ca:	4924      	ldr	r1, [pc, #144]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044cc:	78c9      	ldrb	r1, [r1, #3]
 80044ce:	430b      	orrs	r3, r1
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80044d6:	431a      	orrs	r2, r3
 80044d8:	4b20      	ldr	r3, [pc, #128]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	0619      	lsls	r1, r3, #24
 80044de:	4b1f      	ldr	r3, [pc, #124]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044e0:	785b      	ldrb	r3, [r3, #1]
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	4319      	orrs	r1, r3
 80044e6:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044e8:	789b      	ldrb	r3, [r3, #2]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	430b      	orrs	r3, r1
 80044ee:	491b      	ldr	r1, [pc, #108]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044f0:	78c9      	ldrb	r1, [r1, #3]
 80044f2:	430b      	orrs	r3, r1
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80044fa:	431a      	orrs	r2, r3
 80044fc:	4b17      	ldr	r3, [pc, #92]	@ (800455c <MX_LWIP_Init+0x22c>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	0619      	lsls	r1, r3, #24
 8004502:	4b16      	ldr	r3, [pc, #88]	@ (800455c <MX_LWIP_Init+0x22c>)
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	4319      	orrs	r1, r3
 800450a:	4b14      	ldr	r3, [pc, #80]	@ (800455c <MX_LWIP_Init+0x22c>)
 800450c:	789b      	ldrb	r3, [r3, #2]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	430b      	orrs	r3, r1
 8004512:	4912      	ldr	r1, [pc, #72]	@ (800455c <MX_LWIP_Init+0x22c>)
 8004514:	78c9      	ldrb	r1, [r1, #3]
 8004516:	430b      	orrs	r3, r1
 8004518:	0e1b      	lsrs	r3, r3, #24
 800451a:	4313      	orrs	r3, r2
 800451c:	4a12      	ldr	r2, [pc, #72]	@ (8004568 <MX_LWIP_Init+0x238>)
 800451e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004520:	4b12      	ldr	r3, [pc, #72]	@ (800456c <MX_LWIP_Init+0x23c>)
 8004522:	9302      	str	r3, [sp, #8]
 8004524:	4b12      	ldr	r3, [pc, #72]	@ (8004570 <MX_LWIP_Init+0x240>)
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	2300      	movs	r3, #0
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <MX_LWIP_Init+0x238>)
 800452e:	4a0d      	ldr	r2, [pc, #52]	@ (8004564 <MX_LWIP_Init+0x234>)
 8004530:	490b      	ldr	r1, [pc, #44]	@ (8004560 <MX_LWIP_Init+0x230>)
 8004532:	4810      	ldr	r0, [pc, #64]	@ (8004574 <MX_LWIP_Init+0x244>)
 8004534:	f003 fbee 	bl	8007d14 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004538:	480e      	ldr	r0, [pc, #56]	@ (8004574 <MX_LWIP_Init+0x244>)
 800453a:	f003 fd9d 	bl	8008078 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800453e:	480d      	ldr	r0, [pc, #52]	@ (8004574 <MX_LWIP_Init+0x244>)
 8004540:	f003 fdaa 	bl	8008098 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004544:	490c      	ldr	r1, [pc, #48]	@ (8004578 <MX_LWIP_Init+0x248>)
 8004546:	480b      	ldr	r0, [pc, #44]	@ (8004574 <MX_LWIP_Init+0x244>)
 8004548:	f003 fea8 	bl	800829c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200002c8 	.word	0x200002c8
 8004558:	200002cc 	.word	0x200002cc
 800455c:	200002d0 	.word	0x200002d0
 8004560:	200002bc 	.word	0x200002bc
 8004564:	200002c0 	.word	0x200002c0
 8004568:	200002c4 	.word	0x200002c4
 800456c:	08005c51 	.word	0x08005c51
 8004570:	080048f1 	.word	0x080048f1
 8004574:	20000288 	.word	0x20000288
 8004578:	080045cd 	.word	0x080045cd

0800457c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004584:	f7fc fc98 	bl	8000eb8 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <Ethernet_Link_Periodic_Handle+0x30>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b63      	cmp	r3, #99	@ 0x63
 8004592:	d907      	bls.n	80045a4 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004594:	f7fc fc90 	bl	8000eb8 <HAL_GetTick>
 8004598:	4603      	mov	r3, r0
 800459a:	4a04      	ldr	r2, [pc, #16]	@ (80045ac <Ethernet_Link_Periodic_Handle+0x30>)
 800459c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fadc 	bl	8004b5c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000284 	.word	0x20000284

080045b0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80045b4:	4804      	ldr	r0, [pc, #16]	@ (80045c8 <MX_LWIP_Process+0x18>)
 80045b6:	f000 f97b 	bl	80048b0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80045ba:	f00a fd7d 	bl	800f0b8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80045be:	4802      	ldr	r0, [pc, #8]	@ (80045c8 <MX_LWIP_Process+0x18>)
 80045c0:	f7ff ffdc 	bl	800457c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80045c4:	bf00      	nop
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000288 	.word	0x20000288

080045cc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <SCB_InvalidateDCache_by_Addr>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80045f2:	2320      	movs	r3, #32
 80045f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80045f6:	f3bf 8f4f 	dsb	sy
}
 80045fa:	bf00      	nop
    while (op_size > 0) {
 80045fc:	e00b      	b.n	8004616 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80045fe:	4a0d      	ldr	r2, [pc, #52]	@ (8004634 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	dcf0      	bgt.n	80045fe <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800461c:	f3bf 8f4f 	dsb	sy
}
 8004620:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004622:	f3bf 8f6f 	isb	sy
}
 8004626:	bf00      	nop
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004644:	4b44      	ldr	r3, [pc, #272]	@ (8004758 <low_level_init+0x120>)
 8004646:	4a45      	ldr	r2, [pc, #276]	@ (800475c <low_level_init+0x124>)
 8004648:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800464a:	2300      	movs	r3, #0
 800464c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800464e:	2380      	movs	r3, #128	@ 0x80
 8004650:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004652:	23e1      	movs	r3, #225	@ 0xe1
 8004654:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004656:	2300      	movs	r3, #0
 8004658:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800465a:	2300      	movs	r3, #0
 800465c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800465e:	2300      	movs	r3, #0
 8004660:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004662:	4a3d      	ldr	r2, [pc, #244]	@ (8004758 <low_level_init+0x120>)
 8004664:	f107 0308 	add.w	r3, r7, #8
 8004668:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800466a:	4b3b      	ldr	r3, [pc, #236]	@ (8004758 <low_level_init+0x120>)
 800466c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004670:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004672:	4b39      	ldr	r3, [pc, #228]	@ (8004758 <low_level_init+0x120>)
 8004674:	4a3a      	ldr	r2, [pc, #232]	@ (8004760 <low_level_init+0x128>)
 8004676:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004678:	4b37      	ldr	r3, [pc, #220]	@ (8004758 <low_level_init+0x120>)
 800467a:	4a3a      	ldr	r2, [pc, #232]	@ (8004764 <low_level_init+0x12c>)
 800467c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800467e:	4b36      	ldr	r3, [pc, #216]	@ (8004758 <low_level_init+0x120>)
 8004680:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004684:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004686:	4834      	ldr	r0, [pc, #208]	@ (8004758 <low_level_init+0x120>)
 8004688:	f7fc fda4 	bl	80011d4 <HAL_ETH_Init>
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004690:	2238      	movs	r2, #56	@ 0x38
 8004692:	2100      	movs	r1, #0
 8004694:	4834      	ldr	r0, [pc, #208]	@ (8004768 <low_level_init+0x130>)
 8004696:	f00b fc27 	bl	800fee8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800469a:	4b33      	ldr	r3, [pc, #204]	@ (8004768 <low_level_init+0x130>)
 800469c:	2221      	movs	r2, #33	@ 0x21
 800469e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80046a0:	4b31      	ldr	r3, [pc, #196]	@ (8004768 <low_level_init+0x130>)
 80046a2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80046a6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80046a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004768 <low_level_init+0x130>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80046ae:	482f      	ldr	r0, [pc, #188]	@ (800476c <low_level_init+0x134>)
 80046b0:	f003 f9f8 	bl	8007aa4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2206      	movs	r2, #6
 80046b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80046bc:	4b26      	ldr	r3, [pc, #152]	@ (8004758 <low_level_init+0x120>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80046c8:	4b23      	ldr	r3, [pc, #140]	@ (8004758 <low_level_init+0x120>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	785a      	ldrb	r2, [r3, #1]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80046d4:	4b20      	ldr	r3, [pc, #128]	@ (8004758 <low_level_init+0x120>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	789a      	ldrb	r2, [r3, #2]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80046e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004758 <low_level_init+0x120>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	78da      	ldrb	r2, [r3, #3]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80046ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004758 <low_level_init+0x120>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	791a      	ldrb	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80046f8:	4b17      	ldr	r3, [pc, #92]	@ (8004758 <low_level_init+0x120>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	795a      	ldrb	r2, [r3, #5]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800470a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004712:	f043 030a 	orr.w	r3, r3, #10
 8004716:	b2da      	uxtb	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800471e:	4914      	ldr	r1, [pc, #80]	@ (8004770 <low_level_init+0x138>)
 8004720:	4814      	ldr	r0, [pc, #80]	@ (8004774 <low_level_init+0x13c>)
 8004722:	f7fc fa72 	bl	8000c0a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004726:	4813      	ldr	r0, [pc, #76]	@ (8004774 <low_level_init+0x13c>)
 8004728:	f7fc faa1 	bl	8000c6e <LAN8742_Init>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d006      	beq.n	8004740 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f003 fd82 	bl	800823c <netif_set_link_down>
    netif_set_down(netif);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f003 fd19 	bl	8008170 <netif_set_down>
 800473e:	e008      	b.n	8004752 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa08 	bl	8004b5c <ethernet_link_check_state>
 800474c:	e001      	b.n	8004752 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800474e:	f7fc f88b 	bl	8000868 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20004c60 	.word	0x20004c60
 800475c:	40028000 	.word	0x40028000
 8004760:	20000138 	.word	0x20000138
 8004764:	20000098 	.word	0x20000098
 8004768:	20004d10 	.word	0x20004d10
 800476c:	08013fb4 	.word	0x08013fb4
 8004770:	2000000c 	.word	0x2000000c
 8004774:	20004d48 	.word	0x20004d48

08004778 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b092      	sub	sp, #72	@ 0x48
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004790:	f107 030c 	add.w	r3, r7, #12
 8004794:	2230      	movs	r2, #48	@ 0x30
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f00b fba5 	bl	800fee8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800479e:	f107 030c 	add.w	r3, r7, #12
 80047a2:	2230      	movs	r2, #48	@ 0x30
 80047a4:	2100      	movs	r1, #0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f00b fb9e 	bl	800fee8 <memset>

  for(q = p; q != NULL; q = q->next)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80047b0:	e045      	b.n	800483e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80047b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d902      	bls.n	80047be <low_level_output+0x46>
      return ERR_IF;
 80047b8:	f06f 030b 	mvn.w	r3, #11
 80047bc:	e055      	b.n	800486a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80047be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c0:	6859      	ldr	r1, [r3, #4]
 80047c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047c4:	4613      	mov	r3, r2
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	3348      	adds	r3, #72	@ 0x48
 80047ce:	443b      	add	r3, r7
 80047d0:	3b3c      	subs	r3, #60	@ 0x3c
 80047d2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80047d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d6:	895b      	ldrh	r3, [r3, #10]
 80047d8:	4619      	mov	r1, r3
 80047da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047dc:	4613      	mov	r3, r2
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	3348      	adds	r3, #72	@ 0x48
 80047e6:	443b      	add	r3, r7
 80047e8:	3b38      	subs	r3, #56	@ 0x38
 80047ea:	6019      	str	r1, [r3, #0]

    if(i>0)
 80047ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d011      	beq.n	8004816 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80047f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f4:	1e5a      	subs	r2, r3, #1
 80047f6:	f107 000c 	add.w	r0, r7, #12
 80047fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047fc:	460b      	mov	r3, r1
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	440b      	add	r3, r1
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	18c1      	adds	r1, r0, r3
 8004806:	4613      	mov	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	3348      	adds	r3, #72	@ 0x48
 8004810:	443b      	add	r3, r7
 8004812:	3b34      	subs	r3, #52	@ 0x34
 8004814:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800481e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004820:	4613      	mov	r3, r2
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	3348      	adds	r3, #72	@ 0x48
 800482a:	443b      	add	r3, r7
 800482c:	3b34      	subs	r3, #52	@ 0x34
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004834:	3301      	adds	r3, #1
 8004836:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	643b      	str	r3, [r7, #64]	@ 0x40
 800483e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1b6      	bne.n	80047b2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	891b      	ldrh	r3, [r3, #8]
 8004848:	461a      	mov	r2, r3
 800484a:	4b0a      	ldr	r3, [pc, #40]	@ (8004874 <low_level_output+0xfc>)
 800484c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800484e:	4a09      	ldr	r2, [pc, #36]	@ (8004874 <low_level_output+0xfc>)
 8004850:	f107 030c 	add.w	r3, r7, #12
 8004854:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004856:	4a07      	ldr	r2, [pc, #28]	@ (8004874 <low_level_output+0xfc>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800485c:	2214      	movs	r2, #20
 800485e:	4905      	ldr	r1, [pc, #20]	@ (8004874 <low_level_output+0xfc>)
 8004860:	4805      	ldr	r0, [pc, #20]	@ (8004878 <low_level_output+0x100>)
 8004862:	f7fc fe09 	bl	8001478 <HAL_ETH_Transmit>

  return errval;
 8004866:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800486a:	4618      	mov	r0, r3
 800486c:	3748      	adds	r7, #72	@ 0x48
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20004d10 	.word	0x20004d10
 8004878:	20004c60 	.word	0x20004c60

0800487c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004888:	4b07      	ldr	r3, [pc, #28]	@ (80048a8 <low_level_input+0x2c>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004890:	f107 030c 	add.w	r3, r7, #12
 8004894:	4619      	mov	r1, r3
 8004896:	4805      	ldr	r0, [pc, #20]	@ (80048ac <low_level_input+0x30>)
 8004898:	f7fc fe82 	bl	80015a0 <HAL_ETH_ReadData>
  }

  return p;
 800489c:	68fb      	ldr	r3, [r7, #12]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20004c5c 	.word	0x20004c5c
 80048ac:	20004c60 	.word	0x20004c60

080048b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff ffdd 	bl	800487c <low_level_input>
 80048c2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	4798      	blx	r3
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f004 f862 	bl	80089a4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ea      	bne.n	80048bc <ethernetif_input+0xc>
}
 80048e6:	bf00      	nop
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <ethernetif_init+0x1c>
 80048fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004938 <ethernetif_init+0x48>)
 8004900:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004904:	490d      	ldr	r1, [pc, #52]	@ (800493c <ethernetif_init+0x4c>)
 8004906:	480e      	ldr	r0, [pc, #56]	@ (8004940 <ethernetif_init+0x50>)
 8004908:	f00b f9fc 	bl	800fd04 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2273      	movs	r2, #115	@ 0x73
 8004910:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2274      	movs	r2, #116	@ 0x74
 8004918:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a09      	ldr	r2, [pc, #36]	@ (8004944 <ethernetif_init+0x54>)
 8004920:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a08      	ldr	r2, [pc, #32]	@ (8004948 <ethernetif_init+0x58>)
 8004926:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fe85 	bl	8004638 <low_level_init>

  return ERR_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	08010fd8 	.word	0x08010fd8
 800493c:	08010ff4 	.word	0x08010ff4
 8004940:	08011004 	.word	0x08011004
 8004944:	08005651 	.word	0x08005651
 8004948:	08004779 	.word	0x08004779

0800494c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	4807      	ldr	r0, [pc, #28]	@ (8004978 <pbuf_free_custom+0x2c>)
 800495c:	f003 f984 	bl	8007c68 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004960:	4b06      	ldr	r3, [pc, #24]	@ (800497c <pbuf_free_custom+0x30>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d102      	bne.n	800496e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004968:	4b04      	ldr	r3, [pc, #16]	@ (800497c <pbuf_free_custom+0x30>)
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
  }
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	08013fb4 	.word	0x08013fb4
 800497c:	20004c5c 	.word	0x20004c5c

08004980 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004984:	f7fc fa98 	bl	8000eb8 <HAL_GetTick>
 8004988:	4603      	mov	r3, r0
}
 800498a:	4618      	mov	r0, r3
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08e      	sub	sp, #56	@ 0x38
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a3f      	ldr	r2, [pc, #252]	@ (8004aac <HAL_ETH_MspInit+0x11c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d178      	bne.n	8004aa4 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80049b2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 80049b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80049be:	4b3c      	ldr	r3, [pc, #240]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c6:	623b      	str	r3, [r7, #32]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	4b39      	ldr	r3, [pc, #228]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ce:	4a38      	ldr	r2, [pc, #224]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 80049d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049d6:	4b36      	ldr	r3, [pc, #216]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4b33      	ldr	r3, [pc, #204]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e6:	4a32      	ldr	r2, [pc, #200]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 80049e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ee:	4b30      	ldr	r3, [pc, #192]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80049fa:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 8004a00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a06:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a12:	4b27      	ldr	r3, [pc, #156]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a16:	4a26      	ldr	r2, [pc, #152]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 8004a18:	f043 0304 	orr.w	r3, r3, #4
 8004a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a1e:	4b24      	ldr	r3, [pc, #144]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a2a:	4b21      	ldr	r3, [pc, #132]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	4a20      	ldr	r2, [pc, #128]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a36:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab0 <HAL_ETH_MspInit+0x120>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8004a42:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a50:	2303      	movs	r3, #3
 8004a52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a54:	230b      	movs	r3, #11
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4815      	ldr	r0, [pc, #84]	@ (8004ab4 <HAL_ETH_MspInit+0x124>)
 8004a60:	f7fd fcea 	bl	8002438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004a64:	2332      	movs	r3, #50	@ 0x32
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a70:	2303      	movs	r3, #3
 8004a72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a74:	230b      	movs	r3, #11
 8004a76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	480e      	ldr	r0, [pc, #56]	@ (8004ab8 <HAL_ETH_MspInit+0x128>)
 8004a80:	f7fd fcda 	bl	8002438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004a84:	2386      	movs	r3, #134	@ 0x86
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a90:	2303      	movs	r3, #3
 8004a92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a94:	230b      	movs	r3, #11
 8004a96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4807      	ldr	r0, [pc, #28]	@ (8004abc <HAL_ETH_MspInit+0x12c>)
 8004aa0:	f7fd fcca 	bl	8002438 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	3738      	adds	r7, #56	@ 0x38
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40028000 	.word	0x40028000
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40021800 	.word	0x40021800
 8004ab8:	40020800 	.word	0x40020800
 8004abc:	40020000 	.word	0x40020000

08004ac0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004ac4:	4802      	ldr	r0, [pc, #8]	@ (8004ad0 <ETH_PHY_IO_Init+0x10>)
 8004ac6:	f7fd f855 	bl	8001b74 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20004c60 	.word	0x20004c60

08004ad4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return 0;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	68f9      	ldr	r1, [r7, #12]
 8004af6:	4807      	ldr	r0, [pc, #28]	@ (8004b14 <ETH_PHY_IO_ReadReg+0x30>)
 8004af8:	f7fc fe96 	bl	8001828 <HAL_ETH_ReadPHYRegister>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004b02:	f04f 33ff 	mov.w	r3, #4294967295
 8004b06:	e000      	b.n	8004b0a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20004c60 	.word	0x20004c60

08004b18 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	68f9      	ldr	r1, [r7, #12]
 8004b2a:	4807      	ldr	r0, [pc, #28]	@ (8004b48 <ETH_PHY_IO_WriteReg+0x30>)
 8004b2c:	f7fc fec7 	bl	80018be <HAL_ETH_WritePHYRegister>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	e000      	b.n	8004b3e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20004c60 	.word	0x20004c60

08004b4c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004b50:	f7fc f9b2 	bl	8000eb8 <HAL_GetTick>
 8004b54:	4603      	mov	r3, r0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b0a0      	sub	sp, #128	@ 0x80
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004b64:	f107 030c 	add.w	r3, r7, #12
 8004b68:	2264      	movs	r2, #100	@ 0x64
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f00b f9bb 	bl	800fee8 <memset>
  int32_t PHYLinkState = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b7e:	2300      	movs	r3, #0
 8004b80:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004b82:	483a      	ldr	r0, [pc, #232]	@ (8004c6c <ethernet_link_check_state+0x110>)
 8004b84:	f7fc f8c0 	bl	8000d08 <LAN8742_GetLinkState>
 8004b88:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b90:	089b      	lsrs	r3, r3, #2
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00c      	beq.n	8004bb6 <ethernet_link_check_state+0x5a>
 8004b9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	dc09      	bgt.n	8004bb6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004ba2:	4833      	ldr	r0, [pc, #204]	@ (8004c70 <ethernet_link_check_state+0x114>)
 8004ba4:	f7fc fc0f 	bl	80013c6 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f003 fae1 	bl	8008170 <netif_set_down>
    netif_set_link_down(netif);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f003 fb44 	bl	800823c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004bb4:	e055      	b.n	8004c62 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d14e      	bne.n	8004c62 <ethernet_link_check_state+0x106>
 8004bc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	dd4b      	ble.n	8004c62 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bcc:	3b02      	subs	r3, #2
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d82a      	bhi.n	8004c28 <ethernet_link_check_state+0xcc>
 8004bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd8 <ethernet_link_check_state+0x7c>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bfb 	.word	0x08004bfb
 8004be0:	08004c0b 	.word	0x08004c0b
 8004be4:	08004c1b 	.word	0x08004c1b
      duplex = ETH_FULLDUPLEX_MODE;
 8004be8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004bec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004bee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004bf2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004bf8:	e017      	b.n	8004c2a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004bfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c02:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c04:	2301      	movs	r3, #1
 8004c06:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c08:	e00f      	b.n	8004c2a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004c0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c0e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004c10:	2300      	movs	r3, #0
 8004c12:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c14:	2301      	movs	r3, #1
 8004c16:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c18:	e007      	b.n	8004c2a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004c26:	e000      	b.n	8004c2a <ethernet_link_check_state+0xce>
      break;
 8004c28:	bf00      	nop
    if(linkchanged)
 8004c2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d018      	beq.n	8004c62 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004c30:	f107 030c 	add.w	r3, r7, #12
 8004c34:	4619      	mov	r1, r3
 8004c36:	480e      	ldr	r0, [pc, #56]	@ (8004c70 <ethernet_link_check_state+0x114>)
 8004c38:	f7fc fe8a 	bl	8001950 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004c3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8004c40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c42:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004c44:	f107 030c 	add.w	r3, r7, #12
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4809      	ldr	r0, [pc, #36]	@ (8004c70 <ethernet_link_check_state+0x114>)
 8004c4c:	f7fc ff77 	bl	8001b3e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004c50:	4807      	ldr	r0, [pc, #28]	@ (8004c70 <ethernet_link_check_state+0x114>)
 8004c52:	f7fc fb59 	bl	8001308 <HAL_ETH_Start>
      netif_set_up(netif);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f003 fa1e 	bl	8008098 <netif_set_up>
      netif_set_link_up(netif);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f003 fab9 	bl	80081d4 <netif_set_link_up>
}
 8004c62:	bf00      	nop
 8004c64:	3780      	adds	r7, #128	@ 0x80
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20004d48 	.word	0x20004d48
 8004c70:	20004c60 	.word	0x20004c60

08004c74 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004c7c:	4812      	ldr	r0, [pc, #72]	@ (8004cc8 <HAL_ETH_RxAllocateCallback+0x54>)
 8004c7e:	f002 ff85 	bl	8007b8c <memp_malloc_pool>
 8004c82:	60f8      	str	r0, [r7, #12]
  if (p)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d014      	beq.n	8004cb4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f103 0220 	add.w	r2, r3, #32
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a0d      	ldr	r2, [pc, #52]	@ (8004ccc <HAL_ETH_RxAllocateCallback+0x58>)
 8004c98:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004ca2:	9201      	str	r2, [sp, #4]
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2241      	movs	r2, #65	@ 0x41
 8004caa:	2100      	movs	r1, #0
 8004cac:	2000      	movs	r0, #0
 8004cae:	f003 fcbf 	bl	8008630 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004cb2:	e005      	b.n	8004cc0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	08013fb4 	.word	0x08013fb4
 8004ccc:	0800494d 	.word	0x0800494d
 8004cd0:	20004c5c 	.word	0x20004c5c

08004cd4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3b20      	subs	r3, #32
 8004cf2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	887a      	ldrh	r2, [r7, #2]
 8004d04:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d103      	bne.n	8004d16 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e003      	b.n	8004d1e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	e009      	b.n	8004d40 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	891a      	ldrh	r2, [r3, #8]
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	4413      	add	r3, r2
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f2      	bne.n	8004d2c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004d46:	887b      	ldrh	r3, [r7, #2]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff fc48 	bl	80045e0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004d50:	bf00      	nop
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	b21a      	sxth	r2, r3
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	b21b      	sxth	r3, r3
 8004d72:	4313      	orrs	r3, r2
 8004d74:	b21b      	sxth	r3, r3
 8004d76:	b29b      	uxth	r3, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	061a      	lsls	r2, r3, #24
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	0a1b      	lsrs	r3, r3, #8
 8004d9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	0e1b      	lsrs	r3, r3, #24
 8004da8:	4313      	orrs	r3, r2
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
	...

08004db8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8004dc0:	4915      	ldr	r1, [pc, #84]	@ (8004e18 <etharp_free_entry+0x60>)
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	440b      	add	r3, r1
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d013      	beq.n	8004dfc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8004dd4:	4910      	ldr	r1, [pc, #64]	@ (8004e18 <etharp_free_entry+0x60>)
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	4413      	add	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	440b      	add	r3, r1
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f003 fddd 	bl	80089a4 <pbuf_free>
    arp_table[i].q = NULL;
 8004dea:	490b      	ldr	r1, [pc, #44]	@ (8004e18 <etharp_free_entry+0x60>)
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4413      	add	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	440b      	add	r3, r1
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004dfc:	4906      	ldr	r1, [pc, #24]	@ (8004e18 <etharp_free_entry+0x60>)
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	440b      	add	r3, r1
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20004d68 	.word	0x20004d68

08004e1c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004e22:	2300      	movs	r3, #0
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	e096      	b.n	8004f56 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8004e28:	494f      	ldr	r1, [pc, #316]	@ (8004f68 <etharp_tmr+0x14c>)
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	440b      	add	r3, r1
 8004e36:	3314      	adds	r3, #20
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8086 	beq.w	8004f50 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8004e44:	4948      	ldr	r1, [pc, #288]	@ (8004f68 <etharp_tmr+0x14c>)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	4413      	add	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	440b      	add	r3, r1
 8004e52:	3312      	adds	r3, #18
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	3301      	adds	r3, #1
 8004e58:	b298      	uxth	r0, r3
 8004e5a:	4943      	ldr	r1, [pc, #268]	@ (8004f68 <etharp_tmr+0x14c>)
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	440b      	add	r3, r1
 8004e68:	3312      	adds	r3, #18
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004e6e:	493e      	ldr	r1, [pc, #248]	@ (8004f68 <etharp_tmr+0x14c>)
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	4413      	add	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3312      	adds	r3, #18
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8004e84:	d215      	bcs.n	8004eb2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004e86:	4938      	ldr	r1, [pc, #224]	@ (8004f68 <etharp_tmr+0x14c>)
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	440b      	add	r3, r1
 8004e94:	3314      	adds	r3, #20
 8004e96:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d10e      	bne.n	8004eba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8004e9c:	4932      	ldr	r1, [pc, #200]	@ (8004f68 <etharp_tmr+0x14c>)
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	4413      	add	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3312      	adds	r3, #18
 8004eac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d903      	bls.n	8004eba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff ff80 	bl	8004db8 <etharp_free_entry>
 8004eb8:	e04a      	b.n	8004f50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8004eba:	492b      	ldr	r1, [pc, #172]	@ (8004f68 <etharp_tmr+0x14c>)
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4413      	add	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3314      	adds	r3, #20
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d10a      	bne.n	8004ee6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004ed0:	4925      	ldr	r1, [pc, #148]	@ (8004f68 <etharp_tmr+0x14c>)
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4413      	add	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	440b      	add	r3, r1
 8004ede:	3314      	adds	r3, #20
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	e034      	b.n	8004f50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8004ee6:	4920      	ldr	r1, [pc, #128]	@ (8004f68 <etharp_tmr+0x14c>)
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4413      	add	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3314      	adds	r3, #20
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d10a      	bne.n	8004f12 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004efc:	491a      	ldr	r1, [pc, #104]	@ (8004f68 <etharp_tmr+0x14c>)
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	440b      	add	r3, r1
 8004f0a:	3314      	adds	r3, #20
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	e01e      	b.n	8004f50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8004f12:	4915      	ldr	r1, [pc, #84]	@ (8004f68 <etharp_tmr+0x14c>)
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	440b      	add	r3, r1
 8004f20:	3314      	adds	r3, #20
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d113      	bne.n	8004f50 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8004f28:	490f      	ldr	r1, [pc, #60]	@ (8004f68 <etharp_tmr+0x14c>)
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	440b      	add	r3, r1
 8004f36:	3308      	adds	r3, #8
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4a08      	ldr	r2, [pc, #32]	@ (8004f68 <etharp_tmr+0x14c>)
 8004f46:	4413      	add	r3, r2
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f000 fe6e 	bl	8005c2c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3301      	adds	r3, #1
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b09      	cmp	r3, #9
 8004f5a:	f77f af65 	ble.w	8004e28 <etharp_tmr+0xc>
      }
    }
  }
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20004d68 	.word	0x20004d68

08004f6c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08a      	sub	sp, #40	@ 0x28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	460b      	mov	r3, r1
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004f7e:	230a      	movs	r3, #10
 8004f80:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8004f82:	230a      	movs	r3, #10
 8004f84:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8004f8a:	230a      	movs	r3, #10
 8004f8c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	83bb      	strh	r3, [r7, #28]
 8004f92:	2300      	movs	r3, #0
 8004f94:	837b      	strh	r3, [r7, #26]
 8004f96:	2300      	movs	r3, #0
 8004f98:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	843b      	strh	r3, [r7, #32]
 8004f9e:	e0ae      	b.n	80050fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8004fa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004fa4:	49a6      	ldr	r1, [pc, #664]	@ (8005240 <etharp_find_entry+0x2d4>)
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	4413      	add	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	440b      	add	r3, r1
 8004fb0:	3314      	adds	r3, #20
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004fb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004fba:	2b0a      	cmp	r3, #10
 8004fbc:	d105      	bne.n	8004fca <etharp_find_entry+0x5e>
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d102      	bne.n	8004fca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8004fc4:	8c3b      	ldrh	r3, [r7, #32]
 8004fc6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004fc8:	e095      	b.n	80050f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8092 	beq.w	80050f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d009      	beq.n	8004fec <etharp_find_entry+0x80>
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d806      	bhi.n	8004fec <etharp_find_entry+0x80>
 8004fde:	4b99      	ldr	r3, [pc, #612]	@ (8005244 <etharp_find_entry+0x2d8>)
 8004fe0:	f240 1223 	movw	r2, #291	@ 0x123
 8004fe4:	4998      	ldr	r1, [pc, #608]	@ (8005248 <etharp_find_entry+0x2dc>)
 8004fe6:	4899      	ldr	r0, [pc, #612]	@ (800524c <etharp_find_entry+0x2e0>)
 8004fe8:	f00a fe8c 	bl	800fd04 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d020      	beq.n	8005034 <etharp_find_entry+0xc8>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6819      	ldr	r1, [r3, #0]
 8004ff6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004ffa:	4891      	ldr	r0, [pc, #580]	@ (8005240 <etharp_find_entry+0x2d4>)
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	4413      	add	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4403      	add	r3, r0
 8005006:	3304      	adds	r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4299      	cmp	r1, r3
 800500c:	d112      	bne.n	8005034 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00c      	beq.n	800502e <etharp_find_entry+0xc2>
 8005014:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005018:	4989      	ldr	r1, [pc, #548]	@ (8005240 <etharp_find_entry+0x2d4>)
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	440b      	add	r3, r1
 8005024:	3308      	adds	r3, #8
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d102      	bne.n	8005034 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800502e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005032:	e100      	b.n	8005236 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d140      	bne.n	80050bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800503a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800503e:	4980      	ldr	r1, [pc, #512]	@ (8005240 <etharp_find_entry+0x2d4>)
 8005040:	4613      	mov	r3, r2
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	4413      	add	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	440b      	add	r3, r1
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01a      	beq.n	8005086 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8005050:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005054:	497a      	ldr	r1, [pc, #488]	@ (8005240 <etharp_find_entry+0x2d4>)
 8005056:	4613      	mov	r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4413      	add	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	440b      	add	r3, r1
 8005060:	3312      	adds	r3, #18
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	8bba      	ldrh	r2, [r7, #28]
 8005066:	429a      	cmp	r2, r3
 8005068:	d845      	bhi.n	80050f6 <etharp_find_entry+0x18a>
            old_queue = i;
 800506a:	8c3b      	ldrh	r3, [r7, #32]
 800506c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800506e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005072:	4973      	ldr	r1, [pc, #460]	@ (8005240 <etharp_find_entry+0x2d4>)
 8005074:	4613      	mov	r3, r2
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	4413      	add	r3, r2
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	440b      	add	r3, r1
 800507e:	3312      	adds	r3, #18
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	83bb      	strh	r3, [r7, #28]
 8005084:	e037      	b.n	80050f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8005086:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800508a:	496d      	ldr	r1, [pc, #436]	@ (8005240 <etharp_find_entry+0x2d4>)
 800508c:	4613      	mov	r3, r2
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	440b      	add	r3, r1
 8005096:	3312      	adds	r3, #18
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	8b7a      	ldrh	r2, [r7, #26]
 800509c:	429a      	cmp	r2, r3
 800509e:	d82a      	bhi.n	80050f6 <etharp_find_entry+0x18a>
            old_pending = i;
 80050a0:	8c3b      	ldrh	r3, [r7, #32]
 80050a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80050a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80050a8:	4965      	ldr	r1, [pc, #404]	@ (8005240 <etharp_find_entry+0x2d4>)
 80050aa:	4613      	mov	r3, r2
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	4413      	add	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	440b      	add	r3, r1
 80050b4:	3312      	adds	r3, #18
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	837b      	strh	r3, [r7, #26]
 80050ba:	e01c      	b.n	80050f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d919      	bls.n	80050f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80050c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80050c6:	495e      	ldr	r1, [pc, #376]	@ (8005240 <etharp_find_entry+0x2d4>)
 80050c8:	4613      	mov	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	440b      	add	r3, r1
 80050d2:	3312      	adds	r3, #18
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	8b3a      	ldrh	r2, [r7, #24]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d80c      	bhi.n	80050f6 <etharp_find_entry+0x18a>
            old_stable = i;
 80050dc:	8c3b      	ldrh	r3, [r7, #32]
 80050de:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80050e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80050e4:	4956      	ldr	r1, [pc, #344]	@ (8005240 <etharp_find_entry+0x2d4>)
 80050e6:	4613      	mov	r3, r2
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	4413      	add	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	440b      	add	r3, r1
 80050f0:	3312      	adds	r3, #18
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80050f6:	8c3b      	ldrh	r3, [r7, #32]
 80050f8:	3301      	adds	r3, #1
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	843b      	strh	r3, [r7, #32]
 80050fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005102:	2b09      	cmp	r3, #9
 8005104:	f77f af4c 	ble.w	8004fa0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8005108:	7afb      	ldrb	r3, [r7, #11]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d108      	bne.n	8005124 <etharp_find_entry+0x1b8>
 8005112:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005116:	2b0a      	cmp	r3, #10
 8005118:	d107      	bne.n	800512a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800511a:	7afb      	ldrb	r3, [r7, #11]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8005124:	f04f 33ff 	mov.w	r3, #4294967295
 8005128:	e085      	b.n	8005236 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800512a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800512e:	2b09      	cmp	r3, #9
 8005130:	dc02      	bgt.n	8005138 <etharp_find_entry+0x1cc>
    i = empty;
 8005132:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005134:	843b      	strh	r3, [r7, #32]
 8005136:	e039      	b.n	80051ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8005138:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800513c:	2b09      	cmp	r3, #9
 800513e:	dc14      	bgt.n	800516a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8005140:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005142:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005144:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005148:	493d      	ldr	r1, [pc, #244]	@ (8005240 <etharp_find_entry+0x2d4>)
 800514a:	4613      	mov	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	4413      	add	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	440b      	add	r3, r1
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d018      	beq.n	800518c <etharp_find_entry+0x220>
 800515a:	4b3a      	ldr	r3, [pc, #232]	@ (8005244 <etharp_find_entry+0x2d8>)
 800515c:	f240 126d 	movw	r2, #365	@ 0x16d
 8005160:	493b      	ldr	r1, [pc, #236]	@ (8005250 <etharp_find_entry+0x2e4>)
 8005162:	483a      	ldr	r0, [pc, #232]	@ (800524c <etharp_find_entry+0x2e0>)
 8005164:	f00a fdce 	bl	800fd04 <iprintf>
 8005168:	e010      	b.n	800518c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800516a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800516e:	2b09      	cmp	r3, #9
 8005170:	dc02      	bgt.n	8005178 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8005172:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005174:	843b      	strh	r3, [r7, #32]
 8005176:	e009      	b.n	800518c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005178:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800517c:	2b09      	cmp	r3, #9
 800517e:	dc02      	bgt.n	8005186 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8005180:	8bfb      	ldrh	r3, [r7, #30]
 8005182:	843b      	strh	r3, [r7, #32]
 8005184:	e002      	b.n	800518c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8005186:	f04f 33ff 	mov.w	r3, #4294967295
 800518a:	e054      	b.n	8005236 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800518c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005190:	2b09      	cmp	r3, #9
 8005192:	dd06      	ble.n	80051a2 <etharp_find_entry+0x236>
 8005194:	4b2b      	ldr	r3, [pc, #172]	@ (8005244 <etharp_find_entry+0x2d8>)
 8005196:	f240 127f 	movw	r2, #383	@ 0x17f
 800519a:	492e      	ldr	r1, [pc, #184]	@ (8005254 <etharp_find_entry+0x2e8>)
 800519c:	482b      	ldr	r0, [pc, #172]	@ (800524c <etharp_find_entry+0x2e0>)
 800519e:	f00a fdb1 	bl	800fd04 <iprintf>
    etharp_free_entry(i);
 80051a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fe06 	bl	8004db8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80051ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80051b0:	2b09      	cmp	r3, #9
 80051b2:	dd06      	ble.n	80051c2 <etharp_find_entry+0x256>
 80051b4:	4b23      	ldr	r3, [pc, #140]	@ (8005244 <etharp_find_entry+0x2d8>)
 80051b6:	f240 1283 	movw	r2, #387	@ 0x183
 80051ba:	4926      	ldr	r1, [pc, #152]	@ (8005254 <etharp_find_entry+0x2e8>)
 80051bc:	4823      	ldr	r0, [pc, #140]	@ (800524c <etharp_find_entry+0x2e0>)
 80051be:	f00a fda1 	bl	800fd04 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80051c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80051c6:	491e      	ldr	r1, [pc, #120]	@ (8005240 <etharp_find_entry+0x2d4>)
 80051c8:	4613      	mov	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	440b      	add	r3, r1
 80051d2:	3314      	adds	r3, #20
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d006      	beq.n	80051e8 <etharp_find_entry+0x27c>
 80051da:	4b1a      	ldr	r3, [pc, #104]	@ (8005244 <etharp_find_entry+0x2d8>)
 80051dc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80051e0:	491d      	ldr	r1, [pc, #116]	@ (8005258 <etharp_find_entry+0x2ec>)
 80051e2:	481a      	ldr	r0, [pc, #104]	@ (800524c <etharp_find_entry+0x2e0>)
 80051e4:	f00a fd8e 	bl	800fd04 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80051ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	4812      	ldr	r0, [pc, #72]	@ (8005240 <etharp_find_entry+0x2d4>)
 80051f8:	4613      	mov	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4403      	add	r3, r0
 8005202:	3304      	adds	r3, #4
 8005204:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8005206:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800520a:	490d      	ldr	r1, [pc, #52]	@ (8005240 <etharp_find_entry+0x2d4>)
 800520c:	4613      	mov	r3, r2
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4413      	add	r3, r2
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	440b      	add	r3, r1
 8005216:	3312      	adds	r3, #18
 8005218:	2200      	movs	r2, #0
 800521a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800521c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005220:	4907      	ldr	r1, [pc, #28]	@ (8005240 <etharp_find_entry+0x2d4>)
 8005222:	4613      	mov	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4413      	add	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	440b      	add	r3, r1
 800522c:	3308      	adds	r3, #8
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8005232:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3728      	adds	r7, #40	@ 0x28
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20004d68 	.word	0x20004d68
 8005244:	0801102c 	.word	0x0801102c
 8005248:	0801109c 	.word	0x0801109c
 800524c:	080110dc 	.word	0x080110dc
 8005250:	08011104 	.word	0x08011104
 8005254:	0801111c 	.word	0x0801111c
 8005258:	08011130 	.word	0x08011130

0800525c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005270:	2b06      	cmp	r3, #6
 8005272:	d006      	beq.n	8005282 <etharp_update_arp_entry+0x26>
 8005274:	4b48      	ldr	r3, [pc, #288]	@ (8005398 <etharp_update_arp_entry+0x13c>)
 8005276:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800527a:	4948      	ldr	r1, [pc, #288]	@ (800539c <etharp_update_arp_entry+0x140>)
 800527c:	4848      	ldr	r0, [pc, #288]	@ (80053a0 <etharp_update_arp_entry+0x144>)
 800527e:	f00a fd41 	bl	800fd04 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d012      	beq.n	80052ae <etharp_update_arp_entry+0x52>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00e      	beq.n	80052ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68f9      	ldr	r1, [r7, #12]
 8005296:	4618      	mov	r0, r3
 8005298:	f001 f9ea 	bl	8006670 <ip4_addr_isbroadcast_u32>
 800529c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d105      	bne.n	80052ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80052aa:	2be0      	cmp	r3, #224	@ 0xe0
 80052ac:	d102      	bne.n	80052b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80052ae:	f06f 030f 	mvn.w	r3, #15
 80052b2:	e06c      	b.n	800538e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4619      	mov	r1, r3
 80052ba:	68b8      	ldr	r0, [r7, #8]
 80052bc:	f7ff fe56 	bl	8004f6c <etharp_find_entry>
 80052c0:	4603      	mov	r3, r0
 80052c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80052c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	da02      	bge.n	80052d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80052cc:	8afb      	ldrh	r3, [r7, #22]
 80052ce:	b25b      	sxtb	r3, r3
 80052d0:	e05d      	b.n	800538e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80052d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80052d6:	4933      	ldr	r1, [pc, #204]	@ (80053a4 <etharp_update_arp_entry+0x148>)
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	3314      	adds	r3, #20
 80052e4:	2202      	movs	r2, #2
 80052e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80052e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80052ec:	492d      	ldr	r1, [pc, #180]	@ (80053a4 <etharp_update_arp_entry+0x148>)
 80052ee:	4613      	mov	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4413      	add	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	440b      	add	r3, r1
 80052f8:	3308      	adds	r3, #8
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80052fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005302:	4613      	mov	r3, r2
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	4413      	add	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	3308      	adds	r3, #8
 800530c:	4a25      	ldr	r2, [pc, #148]	@ (80053a4 <etharp_update_arp_entry+0x148>)
 800530e:	4413      	add	r3, r2
 8005310:	3304      	adds	r3, #4
 8005312:	2206      	movs	r2, #6
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	4618      	mov	r0, r3
 8005318:	f00a fe5b 	bl	800ffd2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800531c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005320:	4920      	ldr	r1, [pc, #128]	@ (80053a4 <etharp_update_arp_entry+0x148>)
 8005322:	4613      	mov	r3, r2
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	4413      	add	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	440b      	add	r3, r1
 800532c:	3312      	adds	r3, #18
 800532e:	2200      	movs	r2, #0
 8005330:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8005332:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005336:	491b      	ldr	r1, [pc, #108]	@ (80053a4 <etharp_update_arp_entry+0x148>)
 8005338:	4613      	mov	r3, r2
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	4413      	add	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	440b      	add	r3, r1
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d021      	beq.n	800538c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8005348:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800534c:	4915      	ldr	r1, [pc, #84]	@ (80053a4 <etharp_update_arp_entry+0x148>)
 800534e:	4613      	mov	r3, r2
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	4413      	add	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	440b      	add	r3, r1
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800535c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005360:	4910      	ldr	r1, [pc, #64]	@ (80053a4 <etharp_update_arp_entry+0x148>)
 8005362:	4613      	mov	r3, r2
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	4413      	add	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	440b      	add	r3, r1
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8005376:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6939      	ldr	r1, [r7, #16]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 fcf3 	bl	8005d6c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8005386:	6938      	ldr	r0, [r7, #16]
 8005388:	f003 fb0c 	bl	80089a4 <pbuf_free>
  }
  return ERR_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	0801102c 	.word	0x0801102c
 800539c:	0801115c 	.word	0x0801115c
 80053a0:	080110dc 	.word	0x080110dc
 80053a4:	20004d68 	.word	0x20004d68

080053a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e01e      	b.n	80053f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80053b6:	4913      	ldr	r1, [pc, #76]	@ (8005404 <etharp_cleanup_netif+0x5c>)
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4613      	mov	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	3314      	adds	r3, #20
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80053ca:	7afb      	ldrb	r3, [r7, #11]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00e      	beq.n	80053ee <etharp_cleanup_netif+0x46>
 80053d0:	490c      	ldr	r1, [pc, #48]	@ (8005404 <etharp_cleanup_netif+0x5c>)
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4613      	mov	r3, r2
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	4413      	add	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	440b      	add	r3, r1
 80053de:	3308      	adds	r3, #8
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d102      	bne.n	80053ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff fce5 	bl	8004db8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b09      	cmp	r3, #9
 80053f8:	dddd      	ble.n	80053b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 80053fa:	bf00      	nop
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20004d68 	.word	0x20004d68

08005408 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8005408:	b5b0      	push	{r4, r5, r7, lr}
 800540a:	b08a      	sub	sp, #40	@ 0x28
 800540c:	af04      	add	r7, sp, #16
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <etharp_input+0x20>
 8005418:	4b3d      	ldr	r3, [pc, #244]	@ (8005510 <etharp_input+0x108>)
 800541a:	f240 228a 	movw	r2, #650	@ 0x28a
 800541e:	493d      	ldr	r1, [pc, #244]	@ (8005514 <etharp_input+0x10c>)
 8005420:	483d      	ldr	r0, [pc, #244]	@ (8005518 <etharp_input+0x110>)
 8005422:	f00a fc6f 	bl	800fd04 <iprintf>
 8005426:	e06f      	b.n	8005508 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005438:	d10c      	bne.n	8005454 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800543e:	2b06      	cmp	r3, #6
 8005440:	d108      	bne.n	8005454 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005446:	2b04      	cmp	r3, #4
 8005448:	d104      	bne.n	8005454 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	885b      	ldrh	r3, [r3, #2]
 800544e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005450:	2b08      	cmp	r3, #8
 8005452:	d003      	beq.n	800545c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f003 faa5 	bl	80089a4 <pbuf_free>
    return;
 800545a:	e055      	b.n	8005508 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	330e      	adds	r3, #14
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	3318      	adds	r3, #24
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	3304      	adds	r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <etharp_input+0x74>
    for_us = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	75fb      	strb	r3, [r7, #23]
 800547a:	e009      	b.n	8005490 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	3304      	adds	r3, #4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f103 0208 	add.w	r2, r3, #8
 8005496:	7dfb      	ldrb	r3, [r7, #23]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <etharp_input+0x98>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <etharp_input+0x9a>
 80054a0:	2302      	movs	r3, #2
 80054a2:	f107 010c 	add.w	r1, r7, #12
 80054a6:	6838      	ldr	r0, [r7, #0]
 80054a8:	f7ff fed8 	bl	800525c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	88db      	ldrh	r3, [r3, #6]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b6:	d003      	beq.n	80054c0 <etharp_input+0xb8>
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054bc:	d01e      	beq.n	80054fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80054be:	e020      	b.n	8005502 <etharp_input+0xfa>
      if (for_us) {
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01c      	beq.n	8005500 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	3208      	adds	r2, #8
        etharp_raw(netif,
 80054e0:	2102      	movs	r1, #2
 80054e2:	9103      	str	r1, [sp, #12]
 80054e4:	f107 010c 	add.w	r1, r7, #12
 80054e8:	9102      	str	r1, [sp, #8]
 80054ea:	9201      	str	r2, [sp, #4]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	462b      	mov	r3, r5
 80054f0:	4622      	mov	r2, r4
 80054f2:	4601      	mov	r1, r0
 80054f4:	6838      	ldr	r0, [r7, #0]
 80054f6:	f000 faeb 	bl	8005ad0 <etharp_raw>
      break;
 80054fa:	e001      	b.n	8005500 <etharp_input+0xf8>
      break;
 80054fc:	bf00      	nop
 80054fe:	e000      	b.n	8005502 <etharp_input+0xfa>
      break;
 8005500:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f003 fa4e 	bl	80089a4 <pbuf_free>
}
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bdb0      	pop	{r4, r5, r7, pc}
 800550e:	bf00      	nop
 8005510:	0801102c 	.word	0x0801102c
 8005514:	080111b4 	.word	0x080111b4
 8005518:	080110dc 	.word	0x080110dc

0800551c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800552a:	79fa      	ldrb	r2, [r7, #7]
 800552c:	4944      	ldr	r1, [pc, #272]	@ (8005640 <etharp_output_to_arp_index+0x124>)
 800552e:	4613      	mov	r3, r2
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	4413      	add	r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	440b      	add	r3, r1
 8005538:	3314      	adds	r3, #20
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d806      	bhi.n	800554e <etharp_output_to_arp_index+0x32>
 8005540:	4b40      	ldr	r3, [pc, #256]	@ (8005644 <etharp_output_to_arp_index+0x128>)
 8005542:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8005546:	4940      	ldr	r1, [pc, #256]	@ (8005648 <etharp_output_to_arp_index+0x12c>)
 8005548:	4840      	ldr	r0, [pc, #256]	@ (800564c <etharp_output_to_arp_index+0x130>)
 800554a:	f00a fbdb 	bl	800fd04 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800554e:	79fa      	ldrb	r2, [r7, #7]
 8005550:	493b      	ldr	r1, [pc, #236]	@ (8005640 <etharp_output_to_arp_index+0x124>)
 8005552:	4613      	mov	r3, r2
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	4413      	add	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	440b      	add	r3, r1
 800555c:	3314      	adds	r3, #20
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d153      	bne.n	800560c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005564:	79fa      	ldrb	r2, [r7, #7]
 8005566:	4936      	ldr	r1, [pc, #216]	@ (8005640 <etharp_output_to_arp_index+0x124>)
 8005568:	4613      	mov	r3, r2
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4413      	add	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	440b      	add	r3, r1
 8005572:	3312      	adds	r3, #18
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800557a:	d919      	bls.n	80055b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800557c:	79fa      	ldrb	r2, [r7, #7]
 800557e:	4613      	mov	r3, r2
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	4413      	add	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4a2e      	ldr	r2, [pc, #184]	@ (8005640 <etharp_output_to_arp_index+0x124>)
 8005588:	4413      	add	r3, r2
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 fb4c 	bl	8005c2c <etharp_request>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d138      	bne.n	800560c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800559a:	79fa      	ldrb	r2, [r7, #7]
 800559c:	4928      	ldr	r1, [pc, #160]	@ (8005640 <etharp_output_to_arp_index+0x124>)
 800559e:	4613      	mov	r3, r2
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	4413      	add	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	440b      	add	r3, r1
 80055a8:	3314      	adds	r3, #20
 80055aa:	2203      	movs	r2, #3
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e02d      	b.n	800560c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80055b0:	79fa      	ldrb	r2, [r7, #7]
 80055b2:	4923      	ldr	r1, [pc, #140]	@ (8005640 <etharp_output_to_arp_index+0x124>)
 80055b4:	4613      	mov	r3, r2
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	4413      	add	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	440b      	add	r3, r1
 80055be:	3312      	adds	r3, #18
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80055c6:	d321      	bcc.n	800560c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80055c8:	79fa      	ldrb	r2, [r7, #7]
 80055ca:	4613      	mov	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005640 <etharp_output_to_arp_index+0x124>)
 80055d4:	4413      	add	r3, r2
 80055d6:	1d19      	adds	r1, r3, #4
 80055d8:	79fa      	ldrb	r2, [r7, #7]
 80055da:	4613      	mov	r3, r2
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	4413      	add	r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	3308      	adds	r3, #8
 80055e4:	4a16      	ldr	r2, [pc, #88]	@ (8005640 <etharp_output_to_arp_index+0x124>)
 80055e6:	4413      	add	r3, r2
 80055e8:	3304      	adds	r3, #4
 80055ea:	461a      	mov	r2, r3
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 fafb 	bl	8005be8 <etharp_request_dst>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80055f8:	79fa      	ldrb	r2, [r7, #7]
 80055fa:	4911      	ldr	r1, [pc, #68]	@ (8005640 <etharp_output_to_arp_index+0x124>)
 80055fc:	4613      	mov	r3, r2
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	4413      	add	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	440b      	add	r3, r1
 8005606:	3314      	adds	r3, #20
 8005608:	2203      	movs	r2, #3
 800560a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8005612:	79fa      	ldrb	r2, [r7, #7]
 8005614:	4613      	mov	r3, r2
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	4413      	add	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	3308      	adds	r3, #8
 800561e:	4a08      	ldr	r2, [pc, #32]	@ (8005640 <etharp_output_to_arp_index+0x124>)
 8005620:	4413      	add	r3, r2
 8005622:	3304      	adds	r3, #4
 8005624:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005628:	9200      	str	r2, [sp, #0]
 800562a:	460a      	mov	r2, r1
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fb9c 	bl	8005d6c <ethernet_output>
 8005634:	4603      	mov	r3, r0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20004d68 	.word	0x20004d68
 8005644:	0801102c 	.word	0x0801102c
 8005648:	080111d4 	.word	0x080111d4
 800564c:	080110dc 	.word	0x080110dc

08005650 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	@ 0x28
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <etharp_output+0x24>
 8005666:	4b73      	ldr	r3, [pc, #460]	@ (8005834 <etharp_output+0x1e4>)
 8005668:	f240 321e 	movw	r2, #798	@ 0x31e
 800566c:	4972      	ldr	r1, [pc, #456]	@ (8005838 <etharp_output+0x1e8>)
 800566e:	4873      	ldr	r0, [pc, #460]	@ (800583c <etharp_output+0x1ec>)
 8005670:	f00a fb48 	bl	800fd04 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <etharp_output+0x38>
 800567a:	4b6e      	ldr	r3, [pc, #440]	@ (8005834 <etharp_output+0x1e4>)
 800567c:	f240 321f 	movw	r2, #799	@ 0x31f
 8005680:	496f      	ldr	r1, [pc, #444]	@ (8005840 <etharp_output+0x1f0>)
 8005682:	486e      	ldr	r0, [pc, #440]	@ (800583c <etharp_output+0x1ec>)
 8005684:	f00a fb3e 	bl	800fd04 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <etharp_output+0x4c>
 800568e:	4b69      	ldr	r3, [pc, #420]	@ (8005834 <etharp_output+0x1e4>)
 8005690:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005694:	496b      	ldr	r1, [pc, #428]	@ (8005844 <etharp_output+0x1f4>)
 8005696:	4869      	ldr	r0, [pc, #420]	@ (800583c <etharp_output+0x1ec>)
 8005698:	f00a fb34 	bl	800fd04 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 ffe4 	bl	8006670 <ip4_addr_isbroadcast_u32>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80056ae:	4b66      	ldr	r3, [pc, #408]	@ (8005848 <etharp_output+0x1f8>)
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	e0af      	b.n	8005814 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056bc:	2be0      	cmp	r3, #224	@ 0xe0
 80056be:	d118      	bne.n	80056f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80056c0:	2301      	movs	r3, #1
 80056c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80056c4:	2300      	movs	r3, #0
 80056c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80056c8:	235e      	movs	r3, #94	@ 0x5e
 80056ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3301      	adds	r3, #1
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3302      	adds	r3, #2
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3303      	adds	r3, #3
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80056ea:	f107 0310 	add.w	r3, r7, #16
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	e090      	b.n	8005814 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3304      	adds	r3, #4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	405a      	eors	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3308      	adds	r3, #8
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4013      	ands	r3, r2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d012      	beq.n	8005730 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005710:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8005714:	4293      	cmp	r3, r2
 8005716:	d00b      	beq.n	8005730 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	330c      	adds	r3, #12
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	330c      	adds	r3, #12
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	e002      	b.n	8005730 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800572a:	f06f 0303 	mvn.w	r3, #3
 800572e:	e07d      	b.n	800582c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005730:	4b46      	ldr	r3, [pc, #280]	@ (800584c <etharp_output+0x1fc>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	4619      	mov	r1, r3
 8005736:	4a46      	ldr	r2, [pc, #280]	@ (8005850 <etharp_output+0x200>)
 8005738:	460b      	mov	r3, r1
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	440b      	add	r3, r1
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	3314      	adds	r3, #20
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d925      	bls.n	8005796 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800574a:	4b40      	ldr	r3, [pc, #256]	@ (800584c <etharp_output+0x1fc>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	4619      	mov	r1, r3
 8005750:	4a3f      	ldr	r2, [pc, #252]	@ (8005850 <etharp_output+0x200>)
 8005752:	460b      	mov	r3, r1
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	440b      	add	r3, r1
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	3308      	adds	r3, #8
 800575e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	429a      	cmp	r2, r3
 8005764:	d117      	bne.n	8005796 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4b38      	ldr	r3, [pc, #224]	@ (800584c <etharp_output+0x1fc>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	4937      	ldr	r1, [pc, #220]	@ (8005850 <etharp_output+0x200>)
 8005772:	4603      	mov	r3, r0
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	4403      	add	r3, r0
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	440b      	add	r3, r1
 800577c:	3304      	adds	r3, #4
 800577e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8005780:	429a      	cmp	r2, r3
 8005782:	d108      	bne.n	8005796 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8005784:	4b31      	ldr	r3, [pc, #196]	@ (800584c <etharp_output+0x1fc>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff fec5 	bl	800551c <etharp_output_to_arp_index>
 8005792:	4603      	mov	r3, r0
 8005794:	e04a      	b.n	800582c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
 800579a:	e031      	b.n	8005800 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800579c:	7dfa      	ldrb	r2, [r7, #23]
 800579e:	492c      	ldr	r1, [pc, #176]	@ (8005850 <etharp_output+0x200>)
 80057a0:	4613      	mov	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	440b      	add	r3, r1
 80057aa:	3314      	adds	r3, #20
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d923      	bls.n	80057fa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80057b2:	7dfa      	ldrb	r2, [r7, #23]
 80057b4:	4926      	ldr	r1, [pc, #152]	@ (8005850 <etharp_output+0x200>)
 80057b6:	4613      	mov	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4413      	add	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	440b      	add	r3, r1
 80057c0:	3308      	adds	r3, #8
 80057c2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d117      	bne.n	80057fa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	6819      	ldr	r1, [r3, #0]
 80057ce:	7dfa      	ldrb	r2, [r7, #23]
 80057d0:	481f      	ldr	r0, [pc, #124]	@ (8005850 <etharp_output+0x200>)
 80057d2:	4613      	mov	r3, r2
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4403      	add	r3, r0
 80057dc:	3304      	adds	r3, #4
 80057de:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80057e0:	4299      	cmp	r1, r3
 80057e2:	d10a      	bne.n	80057fa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80057e4:	4a19      	ldr	r2, [pc, #100]	@ (800584c <etharp_output+0x1fc>)
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
 80057e8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	461a      	mov	r2, r3
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff fe93 	bl	800551c <etharp_output_to_arp_index>
 80057f6:	4603      	mov	r3, r0
 80057f8:	e018      	b.n	800582c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	3301      	adds	r3, #1
 80057fe:	75fb      	strb	r3, [r7, #23]
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	2b09      	cmp	r3, #9
 8005804:	d9ca      	bls.n	800579c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	69b9      	ldr	r1, [r7, #24]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f822 	bl	8005854 <etharp_query>
 8005810:	4603      	mov	r3, r0
 8005812:	e00b      	b.n	800582c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800581a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 faa1 	bl	8005d6c <ethernet_output>
 800582a:	4603      	mov	r3, r0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	0801102c 	.word	0x0801102c
 8005838:	080111b4 	.word	0x080111b4
 800583c:	080110dc 	.word	0x080110dc
 8005840:	08011204 	.word	0x08011204
 8005844:	080111a4 	.word	0x080111a4
 8005848:	08013fc0 	.word	0x08013fc0
 800584c:	20004e58 	.word	0x20004e58
 8005850:	20004d68 	.word	0x20004d68

08005854 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08c      	sub	sp, #48	@ 0x30
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3326      	adds	r3, #38	@ 0x26
 8005864:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8005866:	23ff      	movs	r3, #255	@ 0xff
 8005868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fefa 	bl	8006670 <ip4_addr_isbroadcast_u32>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10c      	bne.n	800589c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800588a:	2be0      	cmp	r3, #224	@ 0xe0
 800588c:	d006      	beq.n	800589c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800589c:	f06f 030f 	mvn.w	r3, #15
 80058a0:	e101      	b.n	8005aa6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	2101      	movs	r1, #1
 80058a6:	68b8      	ldr	r0, [r7, #8]
 80058a8:	f7ff fb60 	bl	8004f6c <etharp_find_entry>
 80058ac:	4603      	mov	r3, r0
 80058ae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80058b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	da02      	bge.n	80058be <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80058b8:	8a7b      	ldrh	r3, [r7, #18]
 80058ba:	b25b      	sxtb	r3, r3
 80058bc:	e0f3      	b.n	8005aa6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80058be:	8a7b      	ldrh	r3, [r7, #18]
 80058c0:	2b7e      	cmp	r3, #126	@ 0x7e
 80058c2:	d906      	bls.n	80058d2 <etharp_query+0x7e>
 80058c4:	4b7a      	ldr	r3, [pc, #488]	@ (8005ab0 <etharp_query+0x25c>)
 80058c6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80058ca:	497a      	ldr	r1, [pc, #488]	@ (8005ab4 <etharp_query+0x260>)
 80058cc:	487a      	ldr	r0, [pc, #488]	@ (8005ab8 <etharp_query+0x264>)
 80058ce:	f00a fa19 	bl	800fd04 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80058d2:	8a7b      	ldrh	r3, [r7, #18]
 80058d4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80058d6:	7c7a      	ldrb	r2, [r7, #17]
 80058d8:	4978      	ldr	r1, [pc, #480]	@ (8005abc <etharp_query+0x268>)
 80058da:	4613      	mov	r3, r2
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	4413      	add	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	440b      	add	r3, r1
 80058e4:	3314      	adds	r3, #20
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d115      	bne.n	8005918 <etharp_query+0xc4>
    is_new_entry = 1;
 80058ec:	2301      	movs	r3, #1
 80058ee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80058f0:	7c7a      	ldrb	r2, [r7, #17]
 80058f2:	4972      	ldr	r1, [pc, #456]	@ (8005abc <etharp_query+0x268>)
 80058f4:	4613      	mov	r3, r2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	4413      	add	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	440b      	add	r3, r1
 80058fe:	3314      	adds	r3, #20
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8005904:	7c7a      	ldrb	r2, [r7, #17]
 8005906:	496d      	ldr	r1, [pc, #436]	@ (8005abc <etharp_query+0x268>)
 8005908:	4613      	mov	r3, r2
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	4413      	add	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	440b      	add	r3, r1
 8005912:	3308      	adds	r3, #8
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005918:	7c7a      	ldrb	r2, [r7, #17]
 800591a:	4968      	ldr	r1, [pc, #416]	@ (8005abc <etharp_query+0x268>)
 800591c:	4613      	mov	r3, r2
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	4413      	add	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	440b      	add	r3, r1
 8005926:	3314      	adds	r3, #20
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d011      	beq.n	8005952 <etharp_query+0xfe>
 800592e:	7c7a      	ldrb	r2, [r7, #17]
 8005930:	4962      	ldr	r1, [pc, #392]	@ (8005abc <etharp_query+0x268>)
 8005932:	4613      	mov	r3, r2
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	4413      	add	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	440b      	add	r3, r1
 800593c:	3314      	adds	r3, #20
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d806      	bhi.n	8005952 <etharp_query+0xfe>
 8005944:	4b5a      	ldr	r3, [pc, #360]	@ (8005ab0 <etharp_query+0x25c>)
 8005946:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800594a:	495d      	ldr	r1, [pc, #372]	@ (8005ac0 <etharp_query+0x26c>)
 800594c:	485a      	ldr	r0, [pc, #360]	@ (8005ab8 <etharp_query+0x264>)
 800594e:	f00a f9d9 	bl	800fd04 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <etharp_query+0x10a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10c      	bne.n	8005978 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f963 	bl	8005c2c <etharp_request>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <etharp_query+0x124>
      return result;
 8005972:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005976:	e096      	b.n	8005aa6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <etharp_query+0x138>
 800597e:	4b4c      	ldr	r3, [pc, #304]	@ (8005ab0 <etharp_query+0x25c>)
 8005980:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8005984:	494f      	ldr	r1, [pc, #316]	@ (8005ac4 <etharp_query+0x270>)
 8005986:	484c      	ldr	r0, [pc, #304]	@ (8005ab8 <etharp_query+0x264>)
 8005988:	f00a f9bc 	bl	800fd04 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800598c:	7c7a      	ldrb	r2, [r7, #17]
 800598e:	494b      	ldr	r1, [pc, #300]	@ (8005abc <etharp_query+0x268>)
 8005990:	4613      	mov	r3, r2
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	4413      	add	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	440b      	add	r3, r1
 800599a:	3314      	adds	r3, #20
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d917      	bls.n	80059d2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80059a2:	4a49      	ldr	r2, [pc, #292]	@ (8005ac8 <etharp_query+0x274>)
 80059a4:	7c7b      	ldrb	r3, [r7, #17]
 80059a6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80059a8:	7c7a      	ldrb	r2, [r7, #17]
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	3308      	adds	r3, #8
 80059b4:	4a41      	ldr	r2, [pc, #260]	@ (8005abc <etharp_query+0x268>)
 80059b6:	4413      	add	r3, r2
 80059b8:	3304      	adds	r3, #4
 80059ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059be:	9200      	str	r2, [sp, #0]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f9d1 	bl	8005d6c <ethernet_output>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80059d0:	e067      	b.n	8005aa2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80059d2:	7c7a      	ldrb	r2, [r7, #17]
 80059d4:	4939      	ldr	r1, [pc, #228]	@ (8005abc <etharp_query+0x268>)
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	440b      	add	r3, r1
 80059e0:	3314      	adds	r3, #20
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d15c      	bne.n	8005aa2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80059f0:	e01c      	b.n	8005a2c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	895a      	ldrh	r2, [r3, #10]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	891b      	ldrh	r3, [r3, #8]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d10a      	bne.n	8005a14 <etharp_query+0x1c0>
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d006      	beq.n	8005a14 <etharp_query+0x1c0>
 8005a06:	4b2a      	ldr	r3, [pc, #168]	@ (8005ab0 <etharp_query+0x25c>)
 8005a08:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8005a0c:	492f      	ldr	r1, [pc, #188]	@ (8005acc <etharp_query+0x278>)
 8005a0e:	482a      	ldr	r0, [pc, #168]	@ (8005ab8 <etharp_query+0x264>)
 8005a10:	f00a f978 	bl	800fd04 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	7b1b      	ldrb	r3, [r3, #12]
 8005a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <etharp_query+0x1d2>
        copy_needed = 1;
 8005a20:	2301      	movs	r3, #1
 8005a22:	61bb      	str	r3, [r7, #24]
        break;
 8005a24:	e005      	b.n	8005a32 <etharp_query+0x1de>
      }
      p = p->next;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1df      	bne.n	80059f2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d007      	beq.n	8005a48 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8005a3e:	200e      	movs	r0, #14
 8005a40:	f003 fa0c 	bl	8008e5c <pbuf_clone>
 8005a44:	61f8      	str	r0, [r7, #28]
 8005a46:	e004      	b.n	8005a52 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8005a4c:	69f8      	ldr	r0, [r7, #28]
 8005a4e:	f003 f849 	bl	8008ae4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d021      	beq.n	8005a9c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8005a58:	7c7a      	ldrb	r2, [r7, #17]
 8005a5a:	4918      	ldr	r1, [pc, #96]	@ (8005abc <etharp_query+0x268>)
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	440b      	add	r3, r1
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8005a6c:	7c7a      	ldrb	r2, [r7, #17]
 8005a6e:	4913      	ldr	r1, [pc, #76]	@ (8005abc <etharp_query+0x268>)
 8005a70:	4613      	mov	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	440b      	add	r3, r1
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f002 ff91 	bl	80089a4 <pbuf_free>
      }
      arp_table[i].q = p;
 8005a82:	7c7a      	ldrb	r2, [r7, #17]
 8005a84:	490d      	ldr	r1, [pc, #52]	@ (8005abc <etharp_query+0x268>)
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	440b      	add	r3, r1
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005a9a:	e002      	b.n	8005aa2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8005a9c:	23ff      	movs	r3, #255	@ 0xff
 8005a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8005aa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3728      	adds	r7, #40	@ 0x28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	0801102c 	.word	0x0801102c
 8005ab4:	08011210 	.word	0x08011210
 8005ab8:	080110dc 	.word	0x080110dc
 8005abc:	20004d68 	.word	0x20004d68
 8005ac0:	08011220 	.word	0x08011220
 8005ac4:	08011204 	.word	0x08011204
 8005ac8:	20004e58 	.word	0x20004e58
 8005acc:	08011248 	.word	0x08011248

08005ad0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	@ 0x28
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <etharp_raw+0x26>
 8005ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd4 <etharp_raw+0x104>)
 8005aea:	f240 4257 	movw	r2, #1111	@ 0x457
 8005aee:	493a      	ldr	r1, [pc, #232]	@ (8005bd8 <etharp_raw+0x108>)
 8005af0:	483a      	ldr	r0, [pc, #232]	@ (8005bdc <etharp_raw+0x10c>)
 8005af2:	f00a f907 	bl	800fd04 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8005af6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005afa:	211c      	movs	r1, #28
 8005afc:	200e      	movs	r0, #14
 8005afe:	f002 fc69 	bl	80083d4 <pbuf_alloc>
 8005b02:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0e:	e05d      	b.n	8005bcc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	895b      	ldrh	r3, [r3, #10]
 8005b14:	2b1b      	cmp	r3, #27
 8005b16:	d806      	bhi.n	8005b26 <etharp_raw+0x56>
 8005b18:	4b2e      	ldr	r3, [pc, #184]	@ (8005bd4 <etharp_raw+0x104>)
 8005b1a:	f240 4262 	movw	r2, #1122	@ 0x462
 8005b1e:	4930      	ldr	r1, [pc, #192]	@ (8005be0 <etharp_raw+0x110>)
 8005b20:	482e      	ldr	r0, [pc, #184]	@ (8005bdc <etharp_raw+0x10c>)
 8005b22:	f00a f8ef 	bl	800fd04 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005b2c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff f912 	bl	8004d58 <lwip_htons>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d006      	beq.n	8005b54 <etharp_raw+0x84>
 8005b46:	4b23      	ldr	r3, [pc, #140]	@ (8005bd4 <etharp_raw+0x104>)
 8005b48:	f240 4269 	movw	r2, #1129	@ 0x469
 8005b4c:	4925      	ldr	r1, [pc, #148]	@ (8005be4 <etharp_raw+0x114>)
 8005b4e:	4823      	ldr	r0, [pc, #140]	@ (8005bdc <etharp_raw+0x10c>)
 8005b50:	f00a f8d8 	bl	800fd04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	3308      	adds	r3, #8
 8005b58:	2206      	movs	r2, #6
 8005b5a:	6839      	ldr	r1, [r7, #0]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f00a fa38 	bl	800ffd2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	3312      	adds	r3, #18
 8005b66:	2206      	movs	r2, #6
 8005b68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f00a fa31 	bl	800ffd2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	330e      	adds	r3, #14
 8005b74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	3318      	adds	r3, #24
 8005b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f042 0208 	orr.w	r2, r2, #8
 8005b9a:	709a      	strb	r2, [r3, #2]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2206      	movs	r2, #6
 8005ba4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005bac:	f640 0306 	movw	r3, #2054	@ 0x806
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f8d7 	bl	8005d6c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005bbe:	69b8      	ldr	r0, [r7, #24]
 8005bc0:	f002 fef0 	bl	80089a4 <pbuf_free>
  p = NULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8005bc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	0801102c 	.word	0x0801102c
 8005bd8:	080111b4 	.word	0x080111b4
 8005bdc:	080110dc 	.word	0x080110dc
 8005be0:	08011264 	.word	0x08011264
 8005be4:	08011298 	.word	0x08011298

08005be8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af04      	add	r7, sp, #16
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005c04:	2201      	movs	r2, #1
 8005c06:	9203      	str	r2, [sp, #12]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	9202      	str	r2, [sp, #8]
 8005c0c:	4a06      	ldr	r2, [pc, #24]	@ (8005c28 <etharp_request_dst+0x40>)
 8005c0e:	9201      	str	r2, [sp, #4]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	4603      	mov	r3, r0
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff ff5a 	bl	8005ad0 <etharp_raw>
 8005c1c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	08013fc8 	.word	0x08013fc8

08005c2c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8005c36:	4a05      	ldr	r2, [pc, #20]	@ (8005c4c <etharp_request+0x20>)
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff ffd4 	bl	8005be8 <etharp_request_dst>
 8005c40:	4603      	mov	r3, r0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	08013fc0 	.word	0x08013fc0

08005c50 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8005c5a:	230e      	movs	r3, #14
 8005c5c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	895b      	ldrh	r3, [r3, #10]
 8005c62:	2b0e      	cmp	r3, #14
 8005c64:	d96e      	bls.n	8005d44 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	7bdb      	ldrb	r3, [r3, #15]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c74:	3301      	adds	r3, #1
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	7b1a      	ldrb	r2, [r3, #12]
 8005c86:	7b5b      	ldrb	r3, [r3, #13]
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d023      	beq.n	8005ce2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d10f      	bne.n	8005cc2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d11b      	bne.n	8005ce2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8005cae:	2b5e      	cmp	r3, #94	@ 0x5e
 8005cb0:	d117      	bne.n	8005ce2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	7b5b      	ldrb	r3, [r3, #13]
 8005cb6:	f043 0310 	orr.w	r3, r3, #16
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	735a      	strb	r2, [r3, #13]
 8005cc0:	e00f      	b.n	8005ce2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2206      	movs	r2, #6
 8005cc6:	4928      	ldr	r1, [pc, #160]	@ (8005d68 <ethernet_input+0x118>)
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f00a f8e3 	bl	800fe94 <memcmp>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d106      	bne.n	8005ce2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	7b5b      	ldrb	r3, [r3, #13]
 8005cd8:	f043 0308 	orr.w	r3, r3, #8
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8005ce2:	89fb      	ldrh	r3, [r7, #14]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d003      	beq.n	8005cf0 <ethernet_input+0xa0>
 8005ce8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8005cec:	d014      	beq.n	8005d18 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8005cee:	e032      	b.n	8005d56 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d024      	beq.n	8005d48 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8005cfe:	8afb      	ldrh	r3, [r7, #22]
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f002 fdc8 	bl	8008898 <pbuf_remove_header>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d11e      	bne.n	8005d4c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fab1 	bl	8006278 <ip4_input>
      break;
 8005d16:	e013      	b.n	8005d40 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d014      	beq.n	8005d50 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8005d26:	8afb      	ldrh	r3, [r7, #22]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f002 fdb4 	bl	8008898 <pbuf_remove_header>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10e      	bne.n	8005d54 <ethernet_input+0x104>
        etharp_input(p, netif);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fb65 	bl	8005408 <etharp_input>
      break;
 8005d3e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e00c      	b.n	8005d5e <ethernet_input+0x10e>
    goto free_and_return;
 8005d44:	bf00      	nop
 8005d46:	e006      	b.n	8005d56 <ethernet_input+0x106>
        goto free_and_return;
 8005d48:	bf00      	nop
 8005d4a:	e004      	b.n	8005d56 <ethernet_input+0x106>
        goto free_and_return;
 8005d4c:	bf00      	nop
 8005d4e:	e002      	b.n	8005d56 <ethernet_input+0x106>
        goto free_and_return;
 8005d50:	bf00      	nop
 8005d52:	e000      	b.n	8005d56 <ethernet_input+0x106>
        goto free_and_return;
 8005d54:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f002 fe24 	bl	80089a4 <pbuf_free>
  return ERR_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	08013fc0 	.word	0x08013fc0

08005d6c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8005d7a:	8c3b      	ldrh	r3, [r7, #32]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fe ffeb 	bl	8004d58 <lwip_htons>
 8005d82:	4603      	mov	r3, r0
 8005d84:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8005d86:	210e      	movs	r1, #14
 8005d88:	68b8      	ldr	r0, [r7, #8]
 8005d8a:	f002 fd75 	bl	8008878 <pbuf_add_header>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d125      	bne.n	8005de0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	8afa      	ldrh	r2, [r7, #22]
 8005d9e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	2206      	movs	r2, #6
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f00a f913 	bl	800ffd2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	3306      	adds	r3, #6
 8005db0:	2206      	movs	r2, #6
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f00a f90c 	bl	800ffd2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005dc0:	2b06      	cmp	r3, #6
 8005dc2:	d006      	beq.n	8005dd2 <ethernet_output+0x66>
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <ethernet_output+0x84>)
 8005dc6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8005dca:	490a      	ldr	r1, [pc, #40]	@ (8005df4 <ethernet_output+0x88>)
 8005dcc:	480a      	ldr	r0, [pc, #40]	@ (8005df8 <ethernet_output+0x8c>)
 8005dce:	f009 ff99 	bl	800fd04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	4798      	blx	r3
 8005ddc:	4603      	mov	r3, r0
 8005dde:	e002      	b.n	8005de6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8005de0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8005de2:	f06f 0301 	mvn.w	r3, #1
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	080112dc 	.word	0x080112dc
 8005df4:	0801134c 	.word	0x0801134c
 8005df8:	08011380 	.word	0x08011380

08005dfc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	@ 0x38
 8005e00:	af04      	add	r7, sp, #16
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8005e06:	4b79      	ldr	r3, [pc, #484]	@ (8005fec <icmp_input+0x1f0>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8005e1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e1e:	2b13      	cmp	r3, #19
 8005e20:	f240 80cd 	bls.w	8005fbe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	895b      	ldrh	r3, [r3, #10]
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	f240 80ca 	bls.w	8005fc2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8005e38:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80b7 	beq.w	8005fb0 <icmp_input+0x1b4>
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	f040 80b7 	bne.w	8005fb6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8005e48:	4b69      	ldr	r3, [pc, #420]	@ (8005ff0 <icmp_input+0x1f4>)
 8005e4a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005e4c:	4b67      	ldr	r3, [pc, #412]	@ (8005fec <icmp_input+0x1f0>)
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e54:	2be0      	cmp	r3, #224	@ 0xe0
 8005e56:	f000 80bb 	beq.w	8005fd0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8005e5a:	4b64      	ldr	r3, [pc, #400]	@ (8005fec <icmp_input+0x1f0>)
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	4a63      	ldr	r2, [pc, #396]	@ (8005fec <icmp_input+0x1f0>)
 8005e60:	6812      	ldr	r2, [r2, #0]
 8005e62:	4611      	mov	r1, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fc03 	bl	8006670 <ip4_addr_isbroadcast_u32>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f040 80b1 	bne.w	8005fd4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	891b      	ldrh	r3, [r3, #8]
 8005e76:	2b07      	cmp	r3, #7
 8005e78:	f240 80a5 	bls.w	8005fc6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005e7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e7e:	330e      	adds	r3, #14
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f002 fcf8 	bl	8008878 <pbuf_add_header>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d04b      	beq.n	8005f26 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	891a      	ldrh	r2, [r3, #8]
 8005e92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e94:	4413      	add	r3, r2
 8005e96:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	891b      	ldrh	r3, [r3, #8]
 8005e9c:	8b7a      	ldrh	r2, [r7, #26]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	f0c0 809a 	bcc.w	8005fd8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8005ea4:	8b7b      	ldrh	r3, [r7, #26]
 8005ea6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005eaa:	4619      	mov	r1, r3
 8005eac:	200e      	movs	r0, #14
 8005eae:	f002 fa91 	bl	80083d4 <pbuf_alloc>
 8005eb2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 8090 	beq.w	8005fdc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	895b      	ldrh	r3, [r3, #10]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d203      	bcs.n	8005ed2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8005eca:	6978      	ldr	r0, [r7, #20]
 8005ecc:	f002 fd6a 	bl	80089a4 <pbuf_free>
          goto icmperr;
 8005ed0:	e085      	b.n	8005fde <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005eda:	4618      	mov	r0, r3
 8005edc:	f00a f879 	bl	800ffd2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8005ee0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6978      	ldr	r0, [r7, #20]
 8005ee6:	f002 fcd7 	bl	8008898 <pbuf_remove_header>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8005ef0:	4b40      	ldr	r3, [pc, #256]	@ (8005ff4 <icmp_input+0x1f8>)
 8005ef2:	22b6      	movs	r2, #182	@ 0xb6
 8005ef4:	4940      	ldr	r1, [pc, #256]	@ (8005ff8 <icmp_input+0x1fc>)
 8005ef6:	4841      	ldr	r0, [pc, #260]	@ (8005ffc <icmp_input+0x200>)
 8005ef8:	f009 ff04 	bl	800fd04 <iprintf>
          pbuf_free(r);
 8005efc:	6978      	ldr	r0, [r7, #20]
 8005efe:	f002 fd51 	bl	80089a4 <pbuf_free>
          goto icmperr;
 8005f02:	e06c      	b.n	8005fde <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	6978      	ldr	r0, [r7, #20]
 8005f08:	f002 fe64 	bl	8008bd4 <pbuf_copy>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8005f12:	6978      	ldr	r0, [r7, #20]
 8005f14:	f002 fd46 	bl	80089a4 <pbuf_free>
          goto icmperr;
 8005f18:	e061      	b.n	8005fde <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f002 fd42 	bl	80089a4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	607b      	str	r3, [r7, #4]
 8005f24:	e00f      	b.n	8005f46 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005f26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f28:	330e      	adds	r3, #14
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f002 fcb3 	bl	8008898 <pbuf_remove_header>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d006      	beq.n	8005f46 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005f38:	4b2e      	ldr	r3, [pc, #184]	@ (8005ff4 <icmp_input+0x1f8>)
 8005f3a:	22c7      	movs	r2, #199	@ 0xc7
 8005f3c:	4930      	ldr	r1, [pc, #192]	@ (8006000 <icmp_input+0x204>)
 8005f3e:	482f      	ldr	r0, [pc, #188]	@ (8005ffc <icmp_input+0x200>)
 8005f40:	f009 fee0 	bl	800fd04 <iprintf>
          goto icmperr;
 8005f44:	e04b      	b.n	8005fde <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8005f4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f002 fc91 	bl	8008878 <pbuf_add_header>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d12b      	bne.n	8005fb4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005f6a:	4b20      	ldr	r3, [pc, #128]	@ (8005fec <icmp_input+0x1f0>)
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	709a      	strb	r2, [r3, #2]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	22ff      	movs	r2, #255	@ 0xff
 8005f86:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	729a      	strb	r2, [r3, #10]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	2301      	movs	r3, #1
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	23ff      	movs	r3, #255	@ 0xff
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	69f9      	ldr	r1, [r7, #28]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fa8b 	bl	80064c0 <ip4_output_if>
 8005faa:	4603      	mov	r3, r0
 8005fac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8005fae:	e001      	b.n	8005fb4 <icmp_input+0x1b8>
      break;
 8005fb0:	bf00      	nop
 8005fb2:	e000      	b.n	8005fb6 <icmp_input+0x1ba>
      break;
 8005fb4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f002 fcf4 	bl	80089a4 <pbuf_free>
  return;
 8005fbc:	e013      	b.n	8005fe6 <icmp_input+0x1ea>
    goto lenerr;
 8005fbe:	bf00      	nop
 8005fc0:	e002      	b.n	8005fc8 <icmp_input+0x1cc>
    goto lenerr;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <icmp_input+0x1cc>
        goto lenerr;
 8005fc6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f002 fceb 	bl	80089a4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005fce:	e00a      	b.n	8005fe6 <icmp_input+0x1ea>
        goto icmperr;
 8005fd0:	bf00      	nop
 8005fd2:	e004      	b.n	8005fde <icmp_input+0x1e2>
        goto icmperr;
 8005fd4:	bf00      	nop
 8005fd6:	e002      	b.n	8005fde <icmp_input+0x1e2>
          goto icmperr;
 8005fd8:	bf00      	nop
 8005fda:	e000      	b.n	8005fde <icmp_input+0x1e2>
          goto icmperr;
 8005fdc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f002 fce0 	bl	80089a4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005fe4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8005fe6:	3728      	adds	r7, #40	@ 0x28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20004e5c 	.word	0x20004e5c
 8005ff0:	20004e70 	.word	0x20004e70
 8005ff4:	080113a8 	.word	0x080113a8
 8005ff8:	08011418 	.word	0x08011418
 8005ffc:	08011450 	.word	0x08011450
 8006000:	08011478 	.word	0x08011478

08006004 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	461a      	mov	r2, r3
 8006014:	2103      	movs	r1, #3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f814 	bl	8006044 <icmp_send_response>
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	461a      	mov	r2, r3
 8006034:	210b      	movs	r1, #11
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f804 	bl	8006044 <icmp_send_response>
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	@ 0x30
 8006048:	af04      	add	r7, sp, #16
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
 8006050:	4613      	mov	r3, r2
 8006052:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006054:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8006058:	2124      	movs	r1, #36	@ 0x24
 800605a:	2022      	movs	r0, #34	@ 0x22
 800605c:	f002 f9ba 	bl	80083d4 <pbuf_alloc>
 8006060:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d04c      	beq.n	8006102 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	895b      	ldrh	r3, [r3, #10]
 800606c:	2b23      	cmp	r3, #35	@ 0x23
 800606e:	d806      	bhi.n	800607e <icmp_send_response+0x3a>
 8006070:	4b26      	ldr	r3, [pc, #152]	@ (800610c <icmp_send_response+0xc8>)
 8006072:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8006076:	4926      	ldr	r1, [pc, #152]	@ (8006110 <icmp_send_response+0xcc>)
 8006078:	4826      	ldr	r0, [pc, #152]	@ (8006114 <icmp_send_response+0xd0>)
 800607a:	f009 fe43 	bl	800fd04 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	78fa      	ldrb	r2, [r7, #3]
 800608e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	78ba      	ldrb	r2, [r7, #2]
 8006094:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2200      	movs	r2, #0
 800609a:	711a      	strb	r2, [r3, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2200      	movs	r2, #0
 80060a4:	719a      	strb	r2, [r3, #6]
 80060a6:	2200      	movs	r2, #0
 80060a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f103 0008 	add.w	r0, r3, #8
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	221c      	movs	r2, #28
 80060b8:	4619      	mov	r1, r3
 80060ba:	f009 ff8a 	bl	800ffd2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80060c4:	f107 030c 	add.w	r3, r7, #12
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f83b 	bl	8006144 <ip4_route>
 80060ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d011      	beq.n	80060fa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	709a      	strb	r2, [r3, #2]
 80060dc:	2200      	movs	r2, #0
 80060de:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80060e0:	f107 020c 	add.w	r2, r7, #12
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	9302      	str	r3, [sp, #8]
 80060e8:	2301      	movs	r3, #1
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	2300      	movs	r3, #0
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	23ff      	movs	r3, #255	@ 0xff
 80060f2:	2100      	movs	r1, #0
 80060f4:	69f8      	ldr	r0, [r7, #28]
 80060f6:	f000 f9e3 	bl	80064c0 <ip4_output_if>
  }
  pbuf_free(q);
 80060fa:	69f8      	ldr	r0, [r7, #28]
 80060fc:	f002 fc52 	bl	80089a4 <pbuf_free>
 8006100:	e000      	b.n	8006104 <icmp_send_response+0xc0>
    return;
 8006102:	bf00      	nop
}
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	080113a8 	.word	0x080113a8
 8006110:	080114ac 	.word	0x080114ac
 8006114:	08011450 	.word	0x08011450

08006118 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006122:	f001 f9eb 	bl	80074fc <mem_init>
  memp_init();
 8006126:	f001 fced 	bl	8007b04 <memp_init>
  pbuf_init();
  netif_init();
 800612a:	f001 fdeb 	bl	8007d04 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800612e:	f009 f805 	bl	800f13c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006132:	f002 fec5 	bl	8008ec0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006136:	f008 ff77 	bl	800f028 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800614c:	4b33      	ldr	r3, [pc, #204]	@ (800621c <ip4_route+0xd8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e036      	b.n	80061c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d02b      	beq.n	80061bc <ip4_route+0x78>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800616a:	089b      	lsrs	r3, r3, #2
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d022      	beq.n	80061bc <ip4_route+0x78>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3304      	adds	r3, #4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01d      	beq.n	80061bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3304      	adds	r3, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	405a      	eors	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3308      	adds	r3, #8
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4013      	ands	r3, r2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	e038      	b.n	800620e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d108      	bne.n	80061bc <ip4_route+0x78>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	330c      	adds	r3, #12
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d101      	bne.n	80061bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	e028      	b.n	800620e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1c5      	bne.n	8006154 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80061c8:	4b15      	ldr	r3, [pc, #84]	@ (8006220 <ip4_route+0xdc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01a      	beq.n	8006206 <ip4_route+0xc2>
 80061d0:	4b13      	ldr	r3, [pc, #76]	@ (8006220 <ip4_route+0xdc>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d012      	beq.n	8006206 <ip4_route+0xc2>
 80061e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006220 <ip4_route+0xdc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80061f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006220 <ip4_route+0xdc>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3304      	adds	r3, #4
 80061f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b7f      	cmp	r3, #127	@ 0x7f
 8006204:	d101      	bne.n	800620a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	e001      	b.n	800620e <ip4_route+0xca>
  }

  return netif_default;
 800620a:	4b05      	ldr	r3, [pc, #20]	@ (8006220 <ip4_route+0xdc>)
 800620c:	681b      	ldr	r3, [r3, #0]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	2000b758 	.word	0x2000b758
 8006220:	2000b75c 	.word	0x2000b75c

08006224 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d016      	beq.n	800626a <ip4_input_accept+0x46>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d011      	beq.n	800626a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006246:	4b0b      	ldr	r3, [pc, #44]	@ (8006274 <ip4_input_accept+0x50>)
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d008      	beq.n	8006266 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006254:	4b07      	ldr	r3, [pc, #28]	@ (8006274 <ip4_input_accept+0x50>)
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fa08 	bl	8006670 <ip4_addr_isbroadcast_u32>
 8006260:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20004e5c 	.word	0x20004e5c

08006278 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b04      	cmp	r3, #4
 8006292:	d004      	beq.n	800629e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f002 fb85 	bl	80089a4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e107      	b.n	80064ae <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	885b      	ldrh	r3, [r3, #2]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe fd4f 	bl	8004d58 <lwip_htons>
 80062ba:	4603      	mov	r3, r0
 80062bc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	891b      	ldrh	r3, [r3, #8]
 80062c2:	89ba      	ldrh	r2, [r7, #12]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d204      	bcs.n	80062d2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80062c8:	89bb      	ldrh	r3, [r7, #12]
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f002 f9e3 	bl	8008698 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	895b      	ldrh	r3, [r3, #10]
 80062d6:	89fa      	ldrh	r2, [r7, #14]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d807      	bhi.n	80062ec <ip4_input+0x74>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	891b      	ldrh	r3, [r3, #8]
 80062e0:	89ba      	ldrh	r2, [r7, #12]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d802      	bhi.n	80062ec <ip4_input+0x74>
 80062e6:	89fb      	ldrh	r3, [r7, #14]
 80062e8:	2b13      	cmp	r3, #19
 80062ea:	d804      	bhi.n	80062f6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f002 fb59 	bl	80089a4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e0db      	b.n	80064ae <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	4a6f      	ldr	r2, [pc, #444]	@ (80064b8 <ip4_input+0x240>)
 80062fc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	4a6d      	ldr	r2, [pc, #436]	@ (80064b8 <ip4_input+0x240>)
 8006304:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006306:	4b6c      	ldr	r3, [pc, #432]	@ (80064b8 <ip4_input+0x240>)
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800630e:	2be0      	cmp	r3, #224	@ 0xe0
 8006310:	d112      	bne.n	8006338 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d007      	beq.n	8006332 <ip4_input+0xba>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	3304      	adds	r3, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <ip4_input+0xba>
      netif = inp;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	e02a      	b.n	8006388 <ip4_input+0x110>
    } else {
      netif = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	e027      	b.n	8006388 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8006338:	6838      	ldr	r0, [r7, #0]
 800633a:	f7ff ff73 	bl	8006224 <ip4_input_accept>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <ip4_input+0xd2>
      netif = inp;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	e01e      	b.n	8006388 <ip4_input+0x110>
    } else {
      netif = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800634e:	4b5a      	ldr	r3, [pc, #360]	@ (80064b8 <ip4_input+0x240>)
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b7f      	cmp	r3, #127	@ 0x7f
 8006356:	d017      	beq.n	8006388 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8006358:	4b58      	ldr	r3, [pc, #352]	@ (80064bc <ip4_input+0x244>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	613b      	str	r3, [r7, #16]
 800635e:	e00e      	b.n	800637e <ip4_input+0x106>
          if (netif == inp) {
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d006      	beq.n	8006376 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8006368:	6938      	ldr	r0, [r7, #16]
 800636a:	f7ff ff5b 	bl	8006224 <ip4_input_accept>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d108      	bne.n	8006386 <ip4_input+0x10e>
 8006374:	e000      	b.n	8006378 <ip4_input+0x100>
            continue;
 8006376:	bf00      	nop
        NETIF_FOREACH(netif) {
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1ed      	bne.n	8006360 <ip4_input+0xe8>
 8006384:	e000      	b.n	8006388 <ip4_input+0x110>
            break;
 8006386:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006388:	4b4b      	ldr	r3, [pc, #300]	@ (80064b8 <ip4_input+0x240>)
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 f96e 	bl	8006670 <ip4_addr_isbroadcast_u32>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d105      	bne.n	80063a6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800639a:	4b47      	ldr	r3, [pc, #284]	@ (80064b8 <ip4_input+0x240>)
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80063a2:	2be0      	cmp	r3, #224	@ 0xe0
 80063a4:	d104      	bne.n	80063b0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f002 fafc 	bl	80089a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e07e      	b.n	80064ae <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f002 faf4 	bl	80089a4 <pbuf_free>
    return ERR_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	e076      	b.n	80064ae <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	88db      	ldrh	r3, [r3, #6]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00b      	beq.n	80063ea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fc92 	bl	8006cfc <ip4_reass>
 80063d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <ip4_input+0x16c>
      return ERR_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e064      	b.n	80064ae <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80063ea:	4a33      	ldr	r2, [pc, #204]	@ (80064b8 <ip4_input+0x240>)
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80063f0:	4a31      	ldr	r2, [pc, #196]	@ (80064b8 <ip4_input+0x240>)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80063f6:	4a30      	ldr	r2, [pc, #192]	@ (80064b8 <ip4_input+0x240>)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	b2db      	uxtb	r3, r3
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	b2db      	uxtb	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	4b2a      	ldr	r3, [pc, #168]	@ (80064b8 <ip4_input+0x240>)
 800640e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8006410:	89fb      	ldrh	r3, [r7, #14]
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f002 fa3f 	bl	8008898 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	7a5b      	ldrb	r3, [r3, #9]
 800641e:	2b11      	cmp	r3, #17
 8006420:	d006      	beq.n	8006430 <ip4_input+0x1b8>
 8006422:	2b11      	cmp	r3, #17
 8006424:	dc13      	bgt.n	800644e <ip4_input+0x1d6>
 8006426:	2b01      	cmp	r3, #1
 8006428:	d00c      	beq.n	8006444 <ip4_input+0x1cc>
 800642a:	2b06      	cmp	r3, #6
 800642c:	d005      	beq.n	800643a <ip4_input+0x1c2>
 800642e:	e00e      	b.n	800644e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f008 fef8 	bl	800f228 <udp_input>
        break;
 8006438:	e026      	b.n	8006488 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f004 fb03 	bl	800aa48 <tcp_input>
        break;
 8006442:	e021      	b.n	8006488 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fcd8 	bl	8005dfc <icmp_input>
        break;
 800644c:	e01c      	b.n	8006488 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800644e:	4b1a      	ldr	r3, [pc, #104]	@ (80064b8 <ip4_input+0x240>)
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	6939      	ldr	r1, [r7, #16]
 8006454:	4618      	mov	r0, r3
 8006456:	f000 f90b 	bl	8006670 <ip4_addr_isbroadcast_u32>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10f      	bne.n	8006480 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006460:	4b15      	ldr	r3, [pc, #84]	@ (80064b8 <ip4_input+0x240>)
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8006468:	2be0      	cmp	r3, #224	@ 0xe0
 800646a:	d009      	beq.n	8006480 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800646c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f002 fa83 	bl	800897e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8006478:	2102      	movs	r1, #2
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff fdc2 	bl	8006004 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f002 fa8f 	bl	80089a4 <pbuf_free>
        break;
 8006486:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8006488:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <ip4_input+0x240>)
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800648e:	4b0a      	ldr	r3, [pc, #40]	@ (80064b8 <ip4_input+0x240>)
 8006490:	2200      	movs	r2, #0
 8006492:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8006494:	4b08      	ldr	r3, [pc, #32]	@ (80064b8 <ip4_input+0x240>)
 8006496:	2200      	movs	r2, #0
 8006498:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800649a:	4b07      	ldr	r3, [pc, #28]	@ (80064b8 <ip4_input+0x240>)
 800649c:	2200      	movs	r2, #0
 800649e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80064a0:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <ip4_input+0x240>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80064a6:	4b04      	ldr	r3, [pc, #16]	@ (80064b8 <ip4_input+0x240>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20004e5c 	.word	0x20004e5c
 80064bc:	2000b758 	.word	0x2000b758

080064c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	@ 0x28
 80064c4:	af04      	add	r7, sp, #16
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <ip4_output_if+0x26>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	3304      	adds	r3, #4
 80064ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f0:	9302      	str	r3, [sp, #8]
 80064f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	4613      	mov	r3, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6979      	ldr	r1, [r7, #20]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f805 	bl	8006514 <ip4_output_if_src>
 800650a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	7b9b      	ldrb	r3, [r3, #14]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d006      	beq.n	8006538 <ip4_output_if_src+0x24>
 800652a:	4b4b      	ldr	r3, [pc, #300]	@ (8006658 <ip4_output_if_src+0x144>)
 800652c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8006530:	494a      	ldr	r1, [pc, #296]	@ (800665c <ip4_output_if_src+0x148>)
 8006532:	484b      	ldr	r0, [pc, #300]	@ (8006660 <ip4_output_if_src+0x14c>)
 8006534:	f009 fbe6 	bl	800fd04 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d060      	beq.n	8006600 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800653e:	2314      	movs	r3, #20
 8006540:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8006542:	2114      	movs	r1, #20
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f002 f997 	bl	8008878 <pbuf_add_header>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8006550:	f06f 0301 	mvn.w	r3, #1
 8006554:	e07c      	b.n	8006650 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	895b      	ldrh	r3, [r3, #10]
 8006560:	2b13      	cmp	r3, #19
 8006562:	d806      	bhi.n	8006572 <ip4_output_if_src+0x5e>
 8006564:	4b3c      	ldr	r3, [pc, #240]	@ (8006658 <ip4_output_if_src+0x144>)
 8006566:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800656a:	493e      	ldr	r1, [pc, #248]	@ (8006664 <ip4_output_if_src+0x150>)
 800656c:	483c      	ldr	r0, [pc, #240]	@ (8006660 <ip4_output_if_src+0x14c>)
 800656e:	f009 fbc9 	bl	800fd04 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800657e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006588:	8b7b      	ldrh	r3, [r7, #26]
 800658a:	089b      	lsrs	r3, r3, #2
 800658c:	b29b      	uxth	r3, r3
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006594:	b2da      	uxtb	r2, r3
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80065a0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	891b      	ldrh	r3, [r3, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fe fbd6 	bl	8004d58 <lwip_htons>
 80065ac:	4603      	mov	r3, r0
 80065ae:	461a      	mov	r2, r3
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2200      	movs	r2, #0
 80065b8:	719a      	strb	r2, [r3, #6]
 80065ba:	2200      	movs	r2, #0
 80065bc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80065be:	4b2a      	ldr	r3, [pc, #168]	@ (8006668 <ip4_output_if_src+0x154>)
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fbc8 	bl	8004d58 <lwip_htons>
 80065c8:	4603      	mov	r3, r0
 80065ca:	461a      	mov	r2, r3
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80065d0:	4b25      	ldr	r3, [pc, #148]	@ (8006668 <ip4_output_if_src+0x154>)
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	4b23      	ldr	r3, [pc, #140]	@ (8006668 <ip4_output_if_src+0x154>)
 80065da:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80065e2:	4b22      	ldr	r3, [pc, #136]	@ (800666c <ip4_output_if_src+0x158>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	60da      	str	r2, [r3, #12]
 80065ea:	e003      	b.n	80065f4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	2200      	movs	r2, #0
 80065f8:	729a      	strb	r2, [r3, #10]
 80065fa:	2200      	movs	r2, #0
 80065fc:	72da      	strb	r2, [r3, #11]
 80065fe:	e00f      	b.n	8006620 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	895b      	ldrh	r3, [r3, #10]
 8006604:	2b13      	cmp	r3, #19
 8006606:	d802      	bhi.n	800660e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8006608:	f06f 0301 	mvn.w	r3, #1
 800660c:	e020      	b.n	8006650 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800661a:	f107 0314 	add.w	r3, r7, #20
 800661e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00c      	beq.n	8006642 <ip4_output_if_src+0x12e>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	891a      	ldrh	r2, [r3, #8]
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006630:	429a      	cmp	r2, r3
 8006632:	d906      	bls.n	8006642 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fd53 	bl	80070e4 <ip4_frag>
 800663e:	4603      	mov	r3, r0
 8006640:	e006      	b.n	8006650 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68f9      	ldr	r1, [r7, #12]
 800664a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800664c:	4798      	blx	r3
 800664e:	4603      	mov	r3, r0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3720      	adds	r7, #32
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	080114d8 	.word	0x080114d8
 800665c:	08011548 	.word	0x08011548
 8006660:	08011554 	.word	0x08011554
 8006664:	0801157c 	.word	0x0801157c
 8006668:	20004e74 	.word	0x20004e74
 800666c:	08013fd0 	.word	0x08013fd0

08006670 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d002      	beq.n	800668c <ip4_addr_isbroadcast_u32+0x1c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800668c:	2301      	movs	r3, #1
 800668e:	e02a      	b.n	80066e6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	e021      	b.n	80066e6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	3304      	adds	r3, #4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d101      	bne.n	80066b2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	e019      	b.n	80066e6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	3304      	adds	r3, #4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	405a      	eors	r2, r3
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	3308      	adds	r3, #8
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4013      	ands	r3, r2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10d      	bne.n	80066e4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	43da      	mvns	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	3308      	adds	r3, #8
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80066dc:	429a      	cmp	r2, r3
 80066de:	d101      	bne.n	80066e4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80066e4:	2300      	movs	r3, #0
  }
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
	...

080066f4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80066fe:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <ip_reass_tmr+0x54>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8006704:	e018      	b.n	8006738 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	7fdb      	ldrb	r3, [r3, #31]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <ip_reass_tmr+0x32>
      r->timer--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	7fdb      	ldrb	r3, [r3, #31]
 8006712:	3b01      	subs	r3, #1
 8006714:	b2da      	uxtb	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e008      	b.n	8006738 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f80a 	bl	800674c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e3      	bne.n	8006706 <ip_reass_tmr+0x12>
    }
  }
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20004e78 	.word	0x20004e78

0800674c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	d105      	bne.n	800676e <ip_reass_free_complete_datagram+0x22>
 8006762:	4b45      	ldr	r3, [pc, #276]	@ (8006878 <ip_reass_free_complete_datagram+0x12c>)
 8006764:	22ab      	movs	r2, #171	@ 0xab
 8006766:	4945      	ldr	r1, [pc, #276]	@ (800687c <ip_reass_free_complete_datagram+0x130>)
 8006768:	4845      	ldr	r0, [pc, #276]	@ (8006880 <ip_reass_free_complete_datagram+0x134>)
 800676a:	f009 facb 	bl	800fd04 <iprintf>
  if (prev != NULL) {
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	429a      	cmp	r2, r3
 800677c:	d005      	beq.n	800678a <ip_reass_free_complete_datagram+0x3e>
 800677e:	4b3e      	ldr	r3, [pc, #248]	@ (8006878 <ip_reass_free_complete_datagram+0x12c>)
 8006780:	22ad      	movs	r2, #173	@ 0xad
 8006782:	4940      	ldr	r1, [pc, #256]	@ (8006884 <ip_reass_free_complete_datagram+0x138>)
 8006784:	483e      	ldr	r0, [pc, #248]	@ (8006880 <ip_reass_free_complete_datagram+0x134>)
 8006786:	f009 fabd 	bl	800fd04 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	889b      	ldrh	r3, [r3, #4]
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d12a      	bne.n	80067f2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	6858      	ldr	r0, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3308      	adds	r3, #8
 80067b2:	2214      	movs	r2, #20
 80067b4:	4619      	mov	r1, r3
 80067b6:	f009 fc0c 	bl	800ffd2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80067ba:	2101      	movs	r1, #1
 80067bc:	69b8      	ldr	r0, [r7, #24]
 80067be:	f7ff fc31 	bl	8006024 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80067c2:	69b8      	ldr	r0, [r7, #24]
 80067c4:	f002 f976 	bl	8008ab4 <pbuf_clen>
 80067c8:	4603      	mov	r3, r0
 80067ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80067cc:	8bfa      	ldrh	r2, [r7, #30]
 80067ce:	8a7b      	ldrh	r3, [r7, #18]
 80067d0:	4413      	add	r3, r2
 80067d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d6:	db05      	blt.n	80067e4 <ip_reass_free_complete_datagram+0x98>
 80067d8:	4b27      	ldr	r3, [pc, #156]	@ (8006878 <ip_reass_free_complete_datagram+0x12c>)
 80067da:	22bc      	movs	r2, #188	@ 0xbc
 80067dc:	492a      	ldr	r1, [pc, #168]	@ (8006888 <ip_reass_free_complete_datagram+0x13c>)
 80067de:	4828      	ldr	r0, [pc, #160]	@ (8006880 <ip_reass_free_complete_datagram+0x134>)
 80067e0:	f009 fa90 	bl	800fd04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80067e4:	8bfa      	ldrh	r2, [r7, #30]
 80067e6:	8a7b      	ldrh	r3, [r7, #18]
 80067e8:	4413      	add	r3, r2
 80067ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80067ec:	69b8      	ldr	r0, [r7, #24]
 80067ee:	f002 f8d9 	bl	80089a4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80067f8:	e01f      	b.n	800683a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f002 f952 	bl	8008ab4 <pbuf_clen>
 8006810:	4603      	mov	r3, r0
 8006812:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006814:	8bfa      	ldrh	r2, [r7, #30]
 8006816:	8a7b      	ldrh	r3, [r7, #18]
 8006818:	4413      	add	r3, r2
 800681a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800681e:	db05      	blt.n	800682c <ip_reass_free_complete_datagram+0xe0>
 8006820:	4b15      	ldr	r3, [pc, #84]	@ (8006878 <ip_reass_free_complete_datagram+0x12c>)
 8006822:	22cc      	movs	r2, #204	@ 0xcc
 8006824:	4918      	ldr	r1, [pc, #96]	@ (8006888 <ip_reass_free_complete_datagram+0x13c>)
 8006826:	4816      	ldr	r0, [pc, #88]	@ (8006880 <ip_reass_free_complete_datagram+0x134>)
 8006828:	f009 fa6c 	bl	800fd04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800682c:	8bfa      	ldrh	r2, [r7, #30]
 800682e:	8a7b      	ldrh	r3, [r7, #18]
 8006830:	4413      	add	r3, r2
 8006832:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f002 f8b5 	bl	80089a4 <pbuf_free>
  while (p != NULL) {
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1dc      	bne.n	80067fa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f8c2 	bl	80069cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8006848:	4b10      	ldr	r3, [pc, #64]	@ (800688c <ip_reass_free_complete_datagram+0x140>)
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	8bfa      	ldrh	r2, [r7, #30]
 800684e:	429a      	cmp	r2, r3
 8006850:	d905      	bls.n	800685e <ip_reass_free_complete_datagram+0x112>
 8006852:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <ip_reass_free_complete_datagram+0x12c>)
 8006854:	22d2      	movs	r2, #210	@ 0xd2
 8006856:	490e      	ldr	r1, [pc, #56]	@ (8006890 <ip_reass_free_complete_datagram+0x144>)
 8006858:	4809      	ldr	r0, [pc, #36]	@ (8006880 <ip_reass_free_complete_datagram+0x134>)
 800685a:	f009 fa53 	bl	800fd04 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800685e:	4b0b      	ldr	r3, [pc, #44]	@ (800688c <ip_reass_free_complete_datagram+0x140>)
 8006860:	881a      	ldrh	r2, [r3, #0]
 8006862:	8bfb      	ldrh	r3, [r7, #30]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	b29a      	uxth	r2, r3
 8006868:	4b08      	ldr	r3, [pc, #32]	@ (800688c <ip_reass_free_complete_datagram+0x140>)
 800686a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800686c:	8bfb      	ldrh	r3, [r7, #30]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	080115ac 	.word	0x080115ac
 800687c:	08011620 	.word	0x08011620
 8006880:	0801162c 	.word	0x0801162c
 8006884:	08011654 	.word	0x08011654
 8006888:	08011668 	.word	0x08011668
 800688c:	20004e7c 	.word	0x20004e7c
 8006890:	08011688 	.word	0x08011688

08006894 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08a      	sub	sp, #40	@ 0x28
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80068b2:	4b28      	ldr	r3, [pc, #160]	@ (8006954 <ip_reass_remove_oldest_datagram+0xc0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80068b8:	e030      	b.n	800691c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d10c      	bne.n	80068e0 <ip_reass_remove_oldest_datagram+0x4c>
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d106      	bne.n	80068e0 <ip_reass_remove_oldest_datagram+0x4c>
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	899a      	ldrh	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	889b      	ldrh	r3, [r3, #4]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	429a      	cmp	r2, r3
 80068de:	d014      	beq.n	800690a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	3301      	adds	r3, #1
 80068e4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d104      	bne.n	80068f6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	61bb      	str	r3, [r7, #24]
 80068f4:	e009      	b.n	800690a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	7fda      	ldrb	r2, [r3, #31]
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	7fdb      	ldrb	r3, [r3, #31]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d803      	bhi.n	800690a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1cb      	bne.n	80068ba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d008      	beq.n	800693a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8006928:	69b9      	ldr	r1, [r7, #24]
 800692a:	6a38      	ldr	r0, [r7, #32]
 800692c:	f7ff ff0e 	bl	800674c <ip_reass_free_complete_datagram>
 8006930:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	da02      	bge.n	8006948 <ip_reass_remove_oldest_datagram+0xb4>
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b01      	cmp	r3, #1
 8006946:	dcac      	bgt.n	80068a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8006948:	697b      	ldr	r3, [r7, #20]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3728      	adds	r7, #40	@ 0x28
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20004e78 	.word	0x20004e78

08006958 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006962:	2004      	movs	r0, #4
 8006964:	f001 f934 	bl	8007bd0 <memp_malloc>
 8006968:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d110      	bne.n	8006992 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff ff8e 	bl	8006894 <ip_reass_remove_oldest_datagram>
 8006978:	4602      	mov	r2, r0
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	4293      	cmp	r3, r2
 800697e:	dc03      	bgt.n	8006988 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006980:	2004      	movs	r0, #4
 8006982:	f001 f925 	bl	8007bd0 <memp_malloc>
 8006986:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	e016      	b.n	80069c0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8006992:	2220      	movs	r2, #32
 8006994:	2100      	movs	r1, #0
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f009 faa6 	bl	800fee8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	220f      	movs	r2, #15
 80069a0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80069a2:	4b09      	ldr	r3, [pc, #36]	@ (80069c8 <ip_reass_enqueue_new_datagram+0x70>)
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80069aa:	4a07      	ldr	r2, [pc, #28]	@ (80069c8 <ip_reass_enqueue_new_datagram+0x70>)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3308      	adds	r3, #8
 80069b4:	2214      	movs	r2, #20
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f009 fb0a 	bl	800ffd2 <memcpy>
  return ipr;
 80069be:	68fb      	ldr	r3, [r7, #12]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20004e78 	.word	0x20004e78

080069cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80069d6:	4b10      	ldr	r3, [pc, #64]	@ (8006a18 <ip_reass_dequeue_datagram+0x4c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d104      	bne.n	80069ea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006a18 <ip_reass_dequeue_datagram+0x4c>)
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	e00d      	b.n	8006a06 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d106      	bne.n	80069fe <ip_reass_dequeue_datagram+0x32>
 80069f0:	4b0a      	ldr	r3, [pc, #40]	@ (8006a1c <ip_reass_dequeue_datagram+0x50>)
 80069f2:	f240 1245 	movw	r2, #325	@ 0x145
 80069f6:	490a      	ldr	r1, [pc, #40]	@ (8006a20 <ip_reass_dequeue_datagram+0x54>)
 80069f8:	480a      	ldr	r0, [pc, #40]	@ (8006a24 <ip_reass_dequeue_datagram+0x58>)
 80069fa:	f009 f983 	bl	800fd04 <iprintf>
    prev->next = ipr->next;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	2004      	movs	r0, #4
 8006a0a:	f001 f951 	bl	8007cb0 <memp_free>
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20004e78 	.word	0x20004e78
 8006a1c:	080115ac 	.word	0x080115ac
 8006a20:	080116ac 	.word	0x080116ac
 8006a24:	0801162c 	.word	0x0801162c

08006a28 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08c      	sub	sp, #48	@ 0x30
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	885b      	ldrh	r3, [r3, #2]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe f985 	bl	8004d58 <lwip_htons>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8006a60:	7e7b      	ldrb	r3, [r7, #25]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	8b7a      	ldrh	r2, [r7, #26]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d202      	bcs.n	8006a70 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6e:	e135      	b.n	8006cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8006a70:	7e7b      	ldrb	r3, [r7, #25]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	8b7a      	ldrh	r2, [r7, #26]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	88db      	ldrh	r3, [r3, #6]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe f969 	bl	8004d58 <lwip_htons>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8006a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	705a      	strb	r2, [r3, #1]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	709a      	strb	r2, [r3, #2]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	8afa      	ldrh	r2, [r7, #22]
 8006aae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8006ab0:	8afa      	ldrh	r2, [r7, #22]
 8006ab2:	8b7b      	ldrh	r3, [r7, #26]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	88db      	ldrh	r3, [r3, #6]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	8afa      	ldrh	r2, [r7, #22]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d902      	bls.n	8006ace <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8006acc:	e106      	b.n	8006cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad4:	e068      	b.n	8006ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8006adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ade:	889b      	ldrh	r3, [r3, #4]
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	889b      	ldrh	r3, [r3, #4]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d235      	bcs.n	8006b58 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8006aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8006af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d020      	beq.n	8006b3a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afa:	889b      	ldrh	r3, [r3, #4]
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	88db      	ldrh	r3, [r3, #6]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d307      	bcc.n	8006b18 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8006b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0a:	88db      	ldrh	r3, [r3, #6]
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	889b      	ldrh	r3, [r3, #4]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d902      	bls.n	8006b1e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006b18:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1c:	e0de      	b.n	8006cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8006b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	88db      	ldrh	r3, [r3, #6]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2c:	889b      	ldrh	r3, [r3, #4]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d03d      	beq.n	8006bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8006b38:	e03a      	b.n	8006bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8006b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3c:	88db      	ldrh	r3, [r3, #6]
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	889b      	ldrh	r3, [r3, #4]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d902      	bls.n	8006b50 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4e:	e0c5      	b.n	8006cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	605a      	str	r2, [r3, #4]
      break;
 8006b56:	e02b      	b.n	8006bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8006b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5a:	889b      	ldrh	r3, [r3, #4]
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	889b      	ldrh	r3, [r3, #4]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d102      	bne.n	8006b6e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006b68:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6c:	e0b6      	b.n	8006cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8006b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b70:	889b      	ldrh	r3, [r3, #4]
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	88db      	ldrh	r3, [r3, #6]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d202      	bcs.n	8006b84 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b82:	e0ab      	b.n	8006cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8006b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	88db      	ldrh	r3, [r3, #6]
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	889b      	ldrh	r3, [r3, #4]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d001      	beq.n	8006b9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d193      	bne.n	8006ad6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8006bae:	e000      	b.n	8006bb2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8006bb0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d12d      	bne.n	8006c14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8006bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d01c      	beq.n	8006bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc0:	88db      	ldrh	r3, [r3, #6]
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc6:	889b      	ldrh	r3, [r3, #4]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d906      	bls.n	8006bdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8006bce:	4b45      	ldr	r3, [pc, #276]	@ (8006ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006bd0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8006bd4:	4944      	ldr	r1, [pc, #272]	@ (8006ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8006bd6:	4845      	ldr	r0, [pc, #276]	@ (8006cec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006bd8:	f009 f894 	bl	800fd04 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8006be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be4:	88db      	ldrh	r3, [r3, #6]
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	889b      	ldrh	r3, [r3, #4]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d010      	beq.n	8006c14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	623b      	str	r3, [r7, #32]
 8006bf6:	e00d      	b.n	8006c14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d006      	beq.n	8006c0e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8006c00:	4b38      	ldr	r3, [pc, #224]	@ (8006ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006c02:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8006c06:	493a      	ldr	r1, [pc, #232]	@ (8006cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8006c08:	4838      	ldr	r0, [pc, #224]	@ (8006cec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006c0a:	f009 f87b 	bl	800fd04 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	7f9b      	ldrb	r3, [r3, #30]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d059      	beq.n	8006cda <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d04f      	beq.n	8006ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	889b      	ldrh	r3, [r3, #4]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	623b      	str	r3, [r7, #32]
 8006c46:	e041      	b.n	8006ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8006c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8006c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8006c52:	e012      	b.n	8006c7a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	88db      	ldrh	r3, [r3, #6]
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c62:	889b      	ldrh	r3, [r3, #4]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d002      	beq.n	8006c70 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	623b      	str	r3, [r7, #32]
            break;
 8006c6e:	e007      	b.n	8006c80 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8006c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c72:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8006c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e9      	bne.n	8006c54 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d022      	beq.n	8006ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8006c8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006c90:	f240 12df 	movw	r2, #479	@ 0x1df
 8006c94:	4917      	ldr	r1, [pc, #92]	@ (8006cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8006c96:	4815      	ldr	r0, [pc, #84]	@ (8006cec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006c98:	f009 f834 	bl	800fd04 <iprintf>
          LWIP_ASSERT("sanity check",
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d106      	bne.n	8006cb6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8006ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006caa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006cae:	4911      	ldr	r1, [pc, #68]	@ (8006cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8006cb0:	480e      	ldr	r0, [pc, #56]	@ (8006cec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006cb2:	f009 f827 	bl	800fd04 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8006cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d006      	beq.n	8006ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8006cbe:	4b09      	ldr	r3, [pc, #36]	@ (8006ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006cc0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8006cc4:	490c      	ldr	r1, [pc, #48]	@ (8006cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8006cc6:	4809      	ldr	r0, [pc, #36]	@ (8006cec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006cc8:	f009 f81c 	bl	800fd04 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bf14      	ite	ne
 8006cd2:	2301      	movne	r3, #1
 8006cd4:	2300      	moveq	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	e000      	b.n	8006cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3730      	adds	r7, #48	@ 0x30
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	080115ac 	.word	0x080115ac
 8006ce8:	080116c8 	.word	0x080116c8
 8006cec:	0801162c 	.word	0x0801162c
 8006cf0:	080116e8 	.word	0x080116e8
 8006cf4:	08011720 	.word	0x08011720
 8006cf8:	08011730 	.word	0x08011730

08006cfc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08e      	sub	sp, #56	@ 0x38
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8006d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b14      	cmp	r3, #20
 8006d1a:	f040 8171 	bne.w	8007000 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8006d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d20:	88db      	ldrh	r3, [r3, #6]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fe f817 	bl	8004d58 <lwip_htons>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8006d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d38:	885b      	ldrh	r3, [r3, #2]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe f80b 	bl	8004d58 <lwip_htons>
 8006d42:	4603      	mov	r3, r0
 8006d44:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8006d56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	f0c0 8150 	bcc.w	8007004 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8006d64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 fe9f 	bl	8008ab4 <pbuf_clen>
 8006d76:	4603      	mov	r3, r0
 8006d78:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006d7a:	4b8c      	ldr	r3, [pc, #560]	@ (8006fac <ip4_reass+0x2b0>)
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	8c3b      	ldrh	r3, [r7, #32]
 8006d82:	4413      	add	r3, r2
 8006d84:	2b0a      	cmp	r3, #10
 8006d86:	dd10      	ble.n	8006daa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006d88:	8c3b      	ldrh	r3, [r7, #32]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d8e:	f7ff fd81 	bl	8006894 <ip_reass_remove_oldest_datagram>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 8137 	beq.w	8007008 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8006d9a:	4b84      	ldr	r3, [pc, #528]	@ (8006fac <ip4_reass+0x2b0>)
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	8c3b      	ldrh	r3, [r7, #32]
 8006da2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006da4:	2b0a      	cmp	r3, #10
 8006da6:	f300 812f 	bgt.w	8007008 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006daa:	4b81      	ldr	r3, [pc, #516]	@ (8006fb0 <ip4_reass+0x2b4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	633b      	str	r3, [r7, #48]	@ 0x30
 8006db0:	e015      	b.n	8006dde <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d10c      	bne.n	8006dd8 <ip4_reass+0xdc>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	699a      	ldr	r2, [r3, #24]
 8006dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d106      	bne.n	8006dd8 <ip4_reass+0xdc>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	899a      	ldrh	r2, [r3, #12]
 8006dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd0:	889b      	ldrh	r3, [r3, #4]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d006      	beq.n	8006de6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e6      	bne.n	8006db2 <ip4_reass+0xb6>
 8006de4:	e000      	b.n	8006de8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8006de6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8006de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8006dee:	8c3b      	ldrh	r3, [r7, #32]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006df4:	f7ff fdb0 	bl	8006958 <ip_reass_enqueue_new_datagram>
 8006df8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d11c      	bne.n	8006e3a <ip4_reass+0x13e>
      goto nullreturn;
 8006e00:	e105      	b.n	800700e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e04:	88db      	ldrh	r3, [r3, #6]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fd ffa5 	bl	8004d58 <lwip_htons>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d110      	bne.n	8006e3a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1a:	89db      	ldrh	r3, [r3, #14]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fd ff9b 	bl	8004d58 <lwip_htons>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d006      	beq.n	8006e3a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	3308      	adds	r3, #8
 8006e30:	2214      	movs	r2, #20
 8006e32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e34:	4618      	mov	r0, r3
 8006e36:	f009 f8cc 	bl	800ffd2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	88db      	ldrh	r3, [r3, #6]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bf0c      	ite	eq
 8006e48:	2301      	moveq	r3, #1
 8006e4a:	2300      	movne	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00e      	beq.n	8006e74 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8006e56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006e58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e5a:	4413      	add	r3, r2
 8006e5c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006e5e:	8b7a      	ldrh	r2, [r7, #26]
 8006e60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006e62:	429a      	cmp	r2, r3
 8006e64:	f0c0 80a0 	bcc.w	8006fa8 <ip4_reass+0x2ac>
 8006e68:	8b7b      	ldrh	r3, [r7, #26]
 8006e6a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	f200 809a 	bhi.w	8006fa8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e7a:	f7ff fdd5 	bl	8006a28 <ip_reass_chain_frag_into_datagram_and_validate>
 8006e7e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	f000 809b 	beq.w	8006fc0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006e8a:	4b48      	ldr	r3, [pc, #288]	@ (8006fac <ip4_reass+0x2b0>)
 8006e8c:	881a      	ldrh	r2, [r3, #0]
 8006e8e:	8c3b      	ldrh	r3, [r7, #32]
 8006e90:	4413      	add	r3, r2
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	4b45      	ldr	r3, [pc, #276]	@ (8006fac <ip4_reass+0x2b0>)
 8006e96:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00d      	beq.n	8006eba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8006e9e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006ea0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ea2:	4413      	add	r3, r2
 8006ea4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea8:	8a7a      	ldrh	r2, [r7, #18]
 8006eaa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eae:	7f9b      	ldrb	r3, [r3, #30]
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d171      	bne.n	8006fa4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	8b9b      	ldrh	r3, [r3, #28]
 8006ec4:	3314      	adds	r3, #20
 8006ec6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006edc:	3308      	adds	r3, #8
 8006ede:	2214      	movs	r2, #20
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ee4:	f009 f875 	bl	800ffd2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8006ee8:	8a3b      	ldrh	r3, [r7, #16]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fd ff34 	bl	8004d58 <lwip_htons>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efa:	2200      	movs	r2, #0
 8006efc:	719a      	strb	r2, [r3, #6]
 8006efe:	2200      	movs	r2, #0
 8006f00:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f04:	2200      	movs	r2, #0
 8006f06:	729a      	strb	r2, [r3, #10]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8006f12:	e00d      	b.n	8006f30 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8006f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8006f1a:	2114      	movs	r1, #20
 8006f1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006f1e:	f001 fcbb 	bl	8008898 <pbuf_remove_header>
      pbuf_cat(p, r);
 8006f22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 fdff 	bl	8008b28 <pbuf_cat>
      r = iprh->next_pbuf;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8006f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1ee      	bne.n	8006f14 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8006f36:	4b1e      	ldr	r3, [pc, #120]	@ (8006fb0 <ip4_reass+0x2b4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d102      	bne.n	8006f46 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f44:	e010      	b.n	8006f68 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006f46:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb0 <ip4_reass+0x2b4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f4c:	e007      	b.n	8006f5e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8006f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d006      	beq.n	8006f66 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1f4      	bne.n	8006f4e <ip4_reass+0x252>
 8006f64:	e000      	b.n	8006f68 <ip4_reass+0x26c>
          break;
 8006f66:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006f68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f6c:	f7ff fd2e 	bl	80069cc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 fd9f 	bl	8008ab4 <pbuf_clen>
 8006f76:	4603      	mov	r3, r0
 8006f78:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fac <ip4_reass+0x2b0>)
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	8c3a      	ldrh	r2, [r7, #32]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d906      	bls.n	8006f92 <ip4_reass+0x296>
 8006f84:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb4 <ip4_reass+0x2b8>)
 8006f86:	f240 229b 	movw	r2, #667	@ 0x29b
 8006f8a:	490b      	ldr	r1, [pc, #44]	@ (8006fb8 <ip4_reass+0x2bc>)
 8006f8c:	480b      	ldr	r0, [pc, #44]	@ (8006fbc <ip4_reass+0x2c0>)
 8006f8e:	f008 feb9 	bl	800fd04 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8006f92:	4b06      	ldr	r3, [pc, #24]	@ (8006fac <ip4_reass+0x2b0>)
 8006f94:	881a      	ldrh	r2, [r3, #0]
 8006f96:	8c3b      	ldrh	r3, [r7, #32]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	4b03      	ldr	r3, [pc, #12]	@ (8006fac <ip4_reass+0x2b0>)
 8006f9e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	e038      	b.n	8007016 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e036      	b.n	8007016 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8006fa8:	bf00      	nop
 8006faa:	e00a      	b.n	8006fc2 <ip4_reass+0x2c6>
 8006fac:	20004e7c 	.word	0x20004e7c
 8006fb0:	20004e78 	.word	0x20004e78
 8006fb4:	080115ac 	.word	0x080115ac
 8006fb8:	08011754 	.word	0x08011754
 8006fbc:	0801162c 	.word	0x0801162c
    goto nullreturn_ipr;
 8006fc0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <ip4_reass+0x2da>
 8006fc8:	4b15      	ldr	r3, [pc, #84]	@ (8007020 <ip4_reass+0x324>)
 8006fca:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8006fce:	4915      	ldr	r1, [pc, #84]	@ (8007024 <ip4_reass+0x328>)
 8006fd0:	4815      	ldr	r0, [pc, #84]	@ (8007028 <ip4_reass+0x32c>)
 8006fd2:	f008 fe97 	bl	800fd04 <iprintf>
  if (ipr->p == NULL) {
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d116      	bne.n	800700c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8006fde:	4b13      	ldr	r3, [pc, #76]	@ (800702c <ip4_reass+0x330>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d006      	beq.n	8006ff6 <ip4_reass+0x2fa>
 8006fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8007020 <ip4_reass+0x324>)
 8006fea:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8006fee:	4910      	ldr	r1, [pc, #64]	@ (8007030 <ip4_reass+0x334>)
 8006ff0:	480d      	ldr	r0, [pc, #52]	@ (8007028 <ip4_reass+0x32c>)
 8006ff2:	f008 fe87 	bl	800fd04 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ffa:	f7ff fce7 	bl	80069cc <ip_reass_dequeue_datagram>
 8006ffe:	e006      	b.n	800700e <ip4_reass+0x312>
    goto nullreturn;
 8007000:	bf00      	nop
 8007002:	e004      	b.n	800700e <ip4_reass+0x312>
    goto nullreturn;
 8007004:	bf00      	nop
 8007006:	e002      	b.n	800700e <ip4_reass+0x312>
      goto nullreturn;
 8007008:	bf00      	nop
 800700a:	e000      	b.n	800700e <ip4_reass+0x312>
  }

nullreturn:
 800700c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fcc8 	bl	80089a4 <pbuf_free>
  return NULL;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3738      	adds	r7, #56	@ 0x38
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	080115ac 	.word	0x080115ac
 8007024:	08011770 	.word	0x08011770
 8007028:	0801162c 	.word	0x0801162c
 800702c:	20004e78 	.word	0x20004e78
 8007030:	0801177c 	.word	0x0801177c

08007034 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8007038:	2005      	movs	r0, #5
 800703a:	f000 fdc9 	bl	8007bd0 <memp_malloc>
 800703e:	4603      	mov	r3, r0
}
 8007040:	4618      	mov	r0, r3
 8007042:	bd80      	pop	{r7, pc}

08007044 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <ip_frag_free_pbuf_custom_ref+0x1c>
 8007052:	4b07      	ldr	r3, [pc, #28]	@ (8007070 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8007054:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8007058:	4906      	ldr	r1, [pc, #24]	@ (8007074 <ip_frag_free_pbuf_custom_ref+0x30>)
 800705a:	4807      	ldr	r0, [pc, #28]	@ (8007078 <ip_frag_free_pbuf_custom_ref+0x34>)
 800705c:	f008 fe52 	bl	800fd04 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	2005      	movs	r0, #5
 8007064:	f000 fe24 	bl	8007cb0 <memp_free>
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	080115ac 	.word	0x080115ac
 8007074:	0801179c 	.word	0x0801179c
 8007078:	0801162c 	.word	0x0801162c

0800707c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <ipfrag_free_pbuf_custom+0x20>
 800708e:	4b11      	ldr	r3, [pc, #68]	@ (80070d4 <ipfrag_free_pbuf_custom+0x58>)
 8007090:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8007094:	4910      	ldr	r1, [pc, #64]	@ (80070d8 <ipfrag_free_pbuf_custom+0x5c>)
 8007096:	4811      	ldr	r0, [pc, #68]	@ (80070dc <ipfrag_free_pbuf_custom+0x60>)
 8007098:	f008 fe34 	bl	800fd04 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d006      	beq.n	80070b2 <ipfrag_free_pbuf_custom+0x36>
 80070a4:	4b0b      	ldr	r3, [pc, #44]	@ (80070d4 <ipfrag_free_pbuf_custom+0x58>)
 80070a6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80070aa:	490d      	ldr	r1, [pc, #52]	@ (80070e0 <ipfrag_free_pbuf_custom+0x64>)
 80070ac:	480b      	ldr	r0, [pc, #44]	@ (80070dc <ipfrag_free_pbuf_custom+0x60>)
 80070ae:	f008 fe29 	bl	800fd04 <iprintf>
  if (pcr->original != NULL) {
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d004      	beq.n	80070c4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 fc70 	bl	80089a4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff ffbd 	bl	8007044 <ip_frag_free_pbuf_custom_ref>
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	080115ac 	.word	0x080115ac
 80070d8:	080117a8 	.word	0x080117a8
 80070dc:	0801162c 	.word	0x0801162c
 80070e0:	080117b4 	.word	0x080117b4

080070e4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b094      	sub	sp, #80	@ 0x50
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80070fa:	3b14      	subs	r3, #20
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	da00      	bge.n	8007102 <ip4_frag+0x1e>
 8007100:	3307      	adds	r3, #7
 8007102:	10db      	asrs	r3, r3, #3
 8007104:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8007106:	2314      	movs	r3, #20
 8007108:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8007110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007112:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	b2db      	uxtb	r3, r3
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b14      	cmp	r3, #20
 8007124:	d002      	beq.n	800712c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8007126:	f06f 0305 	mvn.w	r3, #5
 800712a:	e110      	b.n	800734e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	895b      	ldrh	r3, [r3, #10]
 8007130:	2b13      	cmp	r3, #19
 8007132:	d809      	bhi.n	8007148 <ip4_frag+0x64>
 8007134:	4b88      	ldr	r3, [pc, #544]	@ (8007358 <ip4_frag+0x274>)
 8007136:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800713a:	4988      	ldr	r1, [pc, #544]	@ (800735c <ip4_frag+0x278>)
 800713c:	4888      	ldr	r0, [pc, #544]	@ (8007360 <ip4_frag+0x27c>)
 800713e:	f008 fde1 	bl	800fd04 <iprintf>
 8007142:	f06f 0305 	mvn.w	r3, #5
 8007146:	e102      	b.n	800734e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	88db      	ldrh	r3, [r3, #6]
 800714c:	b29b      	uxth	r3, r3
 800714e:	4618      	mov	r0, r3
 8007150:	f7fd fe02 	bl	8004d58 <lwip_htons>
 8007154:	4603      	mov	r3, r0
 8007156:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8007158:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800715a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800715e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8007162:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007168:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	891b      	ldrh	r3, [r3, #8]
 800716e:	3b14      	subs	r3, #20
 8007170:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8007174:	e0e1      	b.n	800733a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8007176:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	b29b      	uxth	r3, r3
 800717c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8007180:	4293      	cmp	r3, r2
 8007182:	bf28      	it	cs
 8007184:	4613      	movcs	r3, r2
 8007186:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007188:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800718c:	2114      	movs	r1, #20
 800718e:	200e      	movs	r0, #14
 8007190:	f001 f920 	bl	80083d4 <pbuf_alloc>
 8007194:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80d5 	beq.w	8007348 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	895b      	ldrh	r3, [r3, #10]
 80071a2:	2b13      	cmp	r3, #19
 80071a4:	d806      	bhi.n	80071b4 <ip4_frag+0xd0>
 80071a6:	4b6c      	ldr	r3, [pc, #432]	@ (8007358 <ip4_frag+0x274>)
 80071a8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80071ac:	496d      	ldr	r1, [pc, #436]	@ (8007364 <ip4_frag+0x280>)
 80071ae:	486c      	ldr	r0, [pc, #432]	@ (8007360 <ip4_frag+0x27c>)
 80071b0:	f008 fda8 	bl	800fd04 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2214      	movs	r2, #20
 80071ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80071bc:	4618      	mov	r0, r3
 80071be:	f008 ff08 	bl	800ffd2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80071c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80071ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80071ce:	e064      	b.n	800729a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	895a      	ldrh	r2, [r3, #10]
 80071d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	895b      	ldrh	r3, [r3, #10]
 80071de:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d906      	bls.n	80071f2 <ip4_frag+0x10e>
 80071e4:	4b5c      	ldr	r3, [pc, #368]	@ (8007358 <ip4_frag+0x274>)
 80071e6:	f240 322d 	movw	r2, #813	@ 0x32d
 80071ea:	495f      	ldr	r1, [pc, #380]	@ (8007368 <ip4_frag+0x284>)
 80071ec:	485c      	ldr	r0, [pc, #368]	@ (8007360 <ip4_frag+0x27c>)
 80071ee:	f008 fd89 	bl	800fd04 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80071f2:	8bfa      	ldrh	r2, [r7, #30]
 80071f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80071f8:	4293      	cmp	r3, r2
 80071fa:	bf28      	it	cs
 80071fc:	4613      	movcs	r3, r2
 80071fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8007202:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007206:	2b00      	cmp	r3, #0
 8007208:	d105      	bne.n	8007216 <ip4_frag+0x132>
        poff = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]
        continue;
 8007214:	e041      	b.n	800729a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8007216:	f7ff ff0d 	bl	8007034 <ip_frag_alloc_pbuf_custom_ref>
 800721a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d103      	bne.n	800722a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8007222:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007224:	f001 fbbe 	bl	80089a4 <pbuf_free>
        goto memerr;
 8007228:	e08f      	b.n	800734a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800722a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8007230:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007232:	4413      	add	r3, r2
 8007234:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8007238:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800723c:	9201      	str	r2, [sp, #4]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	4603      	mov	r3, r0
 8007242:	2241      	movs	r2, #65	@ 0x41
 8007244:	2000      	movs	r0, #0
 8007246:	f001 f9f3 	bl	8008630 <pbuf_alloced_custom>
 800724a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8007252:	69b8      	ldr	r0, [r7, #24]
 8007254:	f7ff fef6 	bl	8007044 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8007258:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800725a:	f001 fba3 	bl	80089a4 <pbuf_free>
        goto memerr;
 800725e:	e074      	b.n	800734a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f001 fc3f 	bl	8008ae4 <pbuf_ref>
      pcr->original = p;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	4a3f      	ldr	r2, [pc, #252]	@ (800736c <ip4_frag+0x288>)
 8007270:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8007272:	6979      	ldr	r1, [r7, #20]
 8007274:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007276:	f001 fc57 	bl	8008b28 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800727a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800727e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8007288:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800728c:	2b00      	cmp	r3, #0
 800728e:	d004      	beq.n	800729a <ip4_frag+0x1b6>
        poff = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800729a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d196      	bne.n	80071d0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80072a2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80072a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80072a8:	4413      	add	r3, r2
 80072aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80072b0:	f1a3 0213 	sub.w	r2, r3, #19
 80072b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80072b8:	429a      	cmp	r2, r3
 80072ba:	bfcc      	ite	gt
 80072bc:	2301      	movgt	r3, #1
 80072be:	2300      	movle	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80072c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80072c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <ip4_frag+0x1f6>
 80072d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80072da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80072dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80072e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80072e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fd fd37 	bl	8004d58 <lwip_htons>
 80072ea:	4603      	mov	r3, r0
 80072ec:	461a      	mov	r2, r3
 80072ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80072f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80072f4:	3314      	adds	r3, #20
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fd fd2d 	bl	8004d58 <lwip_htons>
 80072fe:	4603      	mov	r3, r0
 8007300:	461a      	mov	r2, r3
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	2200      	movs	r2, #0
 800730a:	729a      	strb	r2, [r3, #10]
 800730c:	2200      	movs	r2, #0
 800730e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007318:	68b8      	ldr	r0, [r7, #8]
 800731a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800731c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800731e:	f001 fb41 	bl	80089a4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8007322:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8007326:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800732e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8007332:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007334:	4413      	add	r3, r2
 8007336:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800733a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800733e:	2b00      	cmp	r3, #0
 8007340:	f47f af19 	bne.w	8007176 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	e002      	b.n	800734e <ip4_frag+0x26a>
      goto memerr;
 8007348:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800734a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800734e:	4618      	mov	r0, r3
 8007350:	3748      	adds	r7, #72	@ 0x48
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	080115ac 	.word	0x080115ac
 800735c:	080117c0 	.word	0x080117c0
 8007360:	0801162c 	.word	0x0801162c
 8007364:	080117dc 	.word	0x080117dc
 8007368:	080117fc 	.word	0x080117fc
 800736c:	0800707d 	.word	0x0800707d

08007370 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800737a:	4b05      	ldr	r3, [pc, #20]	@ (8007390 <ptr_to_mem+0x20>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	4413      	add	r3, r2
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20004e80 	.word	0x20004e80

08007394 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800739c:	4b05      	ldr	r3, [pc, #20]	@ (80073b4 <mem_to_ptr+0x20>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	b29b      	uxth	r3, r3
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20004e80 	.word	0x20004e80

080073b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80073c0:	4b45      	ldr	r3, [pc, #276]	@ (80074d8 <plug_holes+0x120>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d206      	bcs.n	80073d8 <plug_holes+0x20>
 80073ca:	4b44      	ldr	r3, [pc, #272]	@ (80074dc <plug_holes+0x124>)
 80073cc:	f240 12df 	movw	r2, #479	@ 0x1df
 80073d0:	4943      	ldr	r1, [pc, #268]	@ (80074e0 <plug_holes+0x128>)
 80073d2:	4844      	ldr	r0, [pc, #272]	@ (80074e4 <plug_holes+0x12c>)
 80073d4:	f008 fc96 	bl	800fd04 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80073d8:	4b43      	ldr	r3, [pc, #268]	@ (80074e8 <plug_holes+0x130>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d306      	bcc.n	80073f0 <plug_holes+0x38>
 80073e2:	4b3e      	ldr	r3, [pc, #248]	@ (80074dc <plug_holes+0x124>)
 80073e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80073e8:	4940      	ldr	r1, [pc, #256]	@ (80074ec <plug_holes+0x134>)
 80073ea:	483e      	ldr	r0, [pc, #248]	@ (80074e4 <plug_holes+0x12c>)
 80073ec:	f008 fc8a 	bl	800fd04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	791b      	ldrb	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d006      	beq.n	8007406 <plug_holes+0x4e>
 80073f8:	4b38      	ldr	r3, [pc, #224]	@ (80074dc <plug_holes+0x124>)
 80073fa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80073fe:	493c      	ldr	r1, [pc, #240]	@ (80074f0 <plug_holes+0x138>)
 8007400:	4838      	ldr	r0, [pc, #224]	@ (80074e4 <plug_holes+0x12c>)
 8007402:	f008 fc7f 	bl	800fd04 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800740e:	d906      	bls.n	800741e <plug_holes+0x66>
 8007410:	4b32      	ldr	r3, [pc, #200]	@ (80074dc <plug_holes+0x124>)
 8007412:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8007416:	4937      	ldr	r1, [pc, #220]	@ (80074f4 <plug_holes+0x13c>)
 8007418:	4832      	ldr	r0, [pc, #200]	@ (80074e4 <plug_holes+0x12c>)
 800741a:	f008 fc73 	bl	800fd04 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff ffa4 	bl	8007370 <ptr_to_mem>
 8007428:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	429a      	cmp	r2, r3
 8007430:	d024      	beq.n	800747c <plug_holes+0xc4>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	791b      	ldrb	r3, [r3, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d120      	bne.n	800747c <plug_holes+0xc4>
 800743a:	4b2b      	ldr	r3, [pc, #172]	@ (80074e8 <plug_holes+0x130>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	429a      	cmp	r2, r3
 8007442:	d01b      	beq.n	800747c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007444:	4b2c      	ldr	r3, [pc, #176]	@ (80074f8 <plug_holes+0x140>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	429a      	cmp	r2, r3
 800744c:	d102      	bne.n	8007454 <plug_holes+0x9c>
      lfree = mem;
 800744e:	4a2a      	ldr	r2, [pc, #168]	@ (80074f8 <plug_holes+0x140>)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	881a      	ldrh	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007464:	d00a      	beq.n	800747c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff ff80 	bl	8007370 <ptr_to_mem>
 8007470:	4604      	mov	r4, r0
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff ff8e 	bl	8007394 <mem_to_ptr>
 8007478:	4603      	mov	r3, r0
 800747a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	885b      	ldrh	r3, [r3, #2]
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff ff75 	bl	8007370 <ptr_to_mem>
 8007486:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	429a      	cmp	r2, r3
 800748e:	d01f      	beq.n	80074d0 <plug_holes+0x118>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	791b      	ldrb	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d11b      	bne.n	80074d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007498:	4b17      	ldr	r3, [pc, #92]	@ (80074f8 <plug_holes+0x140>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d102      	bne.n	80074a8 <plug_holes+0xf0>
      lfree = pmem;
 80074a2:	4a15      	ldr	r2, [pc, #84]	@ (80074f8 <plug_holes+0x140>)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	881a      	ldrh	r2, [r3, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80074b8:	d00a      	beq.n	80074d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff ff56 	bl	8007370 <ptr_to_mem>
 80074c4:	4604      	mov	r4, r0
 80074c6:	68b8      	ldr	r0, [r7, #8]
 80074c8:	f7ff ff64 	bl	8007394 <mem_to_ptr>
 80074cc:	4603      	mov	r3, r0
 80074ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80074d0:	bf00      	nop
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd90      	pop	{r4, r7, pc}
 80074d8:	20004e80 	.word	0x20004e80
 80074dc:	0801180c 	.word	0x0801180c
 80074e0:	08011874 	.word	0x08011874
 80074e4:	0801188c 	.word	0x0801188c
 80074e8:	20004e84 	.word	0x20004e84
 80074ec:	080118b4 	.word	0x080118b4
 80074f0:	080118d0 	.word	0x080118d0
 80074f4:	080118ec 	.word	0x080118ec
 80074f8:	20004e88 	.word	0x20004e88

080074fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007502:	4b16      	ldr	r3, [pc, #88]	@ (800755c <mem_init+0x60>)
 8007504:	4a16      	ldr	r2, [pc, #88]	@ (8007560 <mem_init+0x64>)
 8007506:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007508:	4b14      	ldr	r3, [pc, #80]	@ (800755c <mem_init+0x60>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007514:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007522:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8007526:	f7ff ff23 	bl	8007370 <ptr_to_mem>
 800752a:	4603      	mov	r3, r0
 800752c:	4a0d      	ldr	r2, [pc, #52]	@ (8007564 <mem_init+0x68>)
 800752e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007530:	4b0c      	ldr	r3, [pc, #48]	@ (8007564 <mem_init+0x68>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2201      	movs	r2, #1
 8007536:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007538:	4b0a      	ldr	r3, [pc, #40]	@ (8007564 <mem_init+0x68>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007540:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007542:	4b08      	ldr	r3, [pc, #32]	@ (8007564 <mem_init+0x68>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800754a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800754c:	4b03      	ldr	r3, [pc, #12]	@ (800755c <mem_init+0x60>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a05      	ldr	r2, [pc, #20]	@ (8007568 <mem_init+0x6c>)
 8007552:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20004e80 	.word	0x20004e80
 8007560:	20048000 	.word	0x20048000
 8007564:	20004e84 	.word	0x20004e84
 8007568:	20004e88 	.word	0x20004e88

0800756c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff ff0d 	bl	8007394 <mem_to_ptr>
 800757a:	4603      	mov	r3, r0
 800757c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff fef4 	bl	8007370 <ptr_to_mem>
 8007588:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	885b      	ldrh	r3, [r3, #2]
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff feee 	bl	8007370 <ptr_to_mem>
 8007594:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800759e:	d818      	bhi.n	80075d2 <mem_link_valid+0x66>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	885b      	ldrh	r3, [r3, #2]
 80075a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80075a8:	d813      	bhi.n	80075d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80075ae:	8afa      	ldrh	r2, [r7, #22]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d004      	beq.n	80075be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	8afa      	ldrh	r2, [r7, #22]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d109      	bne.n	80075d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80075be:	4b08      	ldr	r3, [pc, #32]	@ (80075e0 <mem_link_valid+0x74>)
 80075c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d006      	beq.n	80075d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	885b      	ldrh	r3, [r3, #2]
 80075cc:	8afa      	ldrh	r2, [r7, #22]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d001      	beq.n	80075d6 <mem_link_valid+0x6a>
    return 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	e000      	b.n	80075d8 <mem_link_valid+0x6c>
  }
  return 1;
 80075d6:	2301      	movs	r3, #1
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20004e84 	.word	0x20004e84

080075e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d04c      	beq.n	800768c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f003 0303 	and.w	r3, r3, #3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d007      	beq.n	800760c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80075fc:	4b25      	ldr	r3, [pc, #148]	@ (8007694 <mem_free+0xb0>)
 80075fe:	f240 2273 	movw	r2, #627	@ 0x273
 8007602:	4925      	ldr	r1, [pc, #148]	@ (8007698 <mem_free+0xb4>)
 8007604:	4825      	ldr	r0, [pc, #148]	@ (800769c <mem_free+0xb8>)
 8007606:	f008 fb7d 	bl	800fd04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800760a:	e040      	b.n	800768e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3b08      	subs	r3, #8
 8007610:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007612:	4b23      	ldr	r3, [pc, #140]	@ (80076a0 <mem_free+0xbc>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	429a      	cmp	r2, r3
 800761a:	d306      	bcc.n	800762a <mem_free+0x46>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f103 020c 	add.w	r2, r3, #12
 8007622:	4b20      	ldr	r3, [pc, #128]	@ (80076a4 <mem_free+0xc0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d907      	bls.n	800763a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800762a:	4b1a      	ldr	r3, [pc, #104]	@ (8007694 <mem_free+0xb0>)
 800762c:	f240 227f 	movw	r2, #639	@ 0x27f
 8007630:	491d      	ldr	r1, [pc, #116]	@ (80076a8 <mem_free+0xc4>)
 8007632:	481a      	ldr	r0, [pc, #104]	@ (800769c <mem_free+0xb8>)
 8007634:	f008 fb66 	bl	800fd04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007638:	e029      	b.n	800768e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	791b      	ldrb	r3, [r3, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d107      	bne.n	8007652 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007642:	4b14      	ldr	r3, [pc, #80]	@ (8007694 <mem_free+0xb0>)
 8007644:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007648:	4918      	ldr	r1, [pc, #96]	@ (80076ac <mem_free+0xc8>)
 800764a:	4814      	ldr	r0, [pc, #80]	@ (800769c <mem_free+0xb8>)
 800764c:	f008 fb5a 	bl	800fd04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007650:	e01d      	b.n	800768e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f7ff ff8a 	bl	800756c <mem_link_valid>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d107      	bne.n	800766e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800765e:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <mem_free+0xb0>)
 8007660:	f240 2295 	movw	r2, #661	@ 0x295
 8007664:	4912      	ldr	r1, [pc, #72]	@ (80076b0 <mem_free+0xcc>)
 8007666:	480d      	ldr	r0, [pc, #52]	@ (800769c <mem_free+0xb8>)
 8007668:	f008 fb4c 	bl	800fd04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800766c:	e00f      	b.n	800768e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007674:	4b0f      	ldr	r3, [pc, #60]	@ (80076b4 <mem_free+0xd0>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	429a      	cmp	r2, r3
 800767c:	d202      	bcs.n	8007684 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800767e:	4a0d      	ldr	r2, [pc, #52]	@ (80076b4 <mem_free+0xd0>)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff fe97 	bl	80073b8 <plug_holes>
 800768a:	e000      	b.n	800768e <mem_free+0xaa>
    return;
 800768c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	0801180c 	.word	0x0801180c
 8007698:	08011918 	.word	0x08011918
 800769c:	0801188c 	.word	0x0801188c
 80076a0:	20004e80 	.word	0x20004e80
 80076a4:	20004e84 	.word	0x20004e84
 80076a8:	0801193c 	.word	0x0801193c
 80076ac:	08011958 	.word	0x08011958
 80076b0:	08011980 	.word	0x08011980
 80076b4:	20004e88 	.word	0x20004e88

080076b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80076c4:	887b      	ldrh	r3, [r7, #2]
 80076c6:	3303      	adds	r3, #3
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f023 0303 	bic.w	r3, r3, #3
 80076ce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80076d0:	8bfb      	ldrh	r3, [r7, #30]
 80076d2:	2b0b      	cmp	r3, #11
 80076d4:	d801      	bhi.n	80076da <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80076d6:	230c      	movs	r3, #12
 80076d8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80076da:	8bfb      	ldrh	r3, [r7, #30]
 80076dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80076e0:	d803      	bhi.n	80076ea <mem_trim+0x32>
 80076e2:	8bfa      	ldrh	r2, [r7, #30]
 80076e4:	887b      	ldrh	r3, [r7, #2]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d201      	bcs.n	80076ee <mem_trim+0x36>
    return NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	e0cc      	b.n	8007888 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80076ee:	4b68      	ldr	r3, [pc, #416]	@ (8007890 <mem_trim+0x1d8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d304      	bcc.n	8007702 <mem_trim+0x4a>
 80076f8:	4b66      	ldr	r3, [pc, #408]	@ (8007894 <mem_trim+0x1dc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d306      	bcc.n	8007710 <mem_trim+0x58>
 8007702:	4b65      	ldr	r3, [pc, #404]	@ (8007898 <mem_trim+0x1e0>)
 8007704:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8007708:	4964      	ldr	r1, [pc, #400]	@ (800789c <mem_trim+0x1e4>)
 800770a:	4865      	ldr	r0, [pc, #404]	@ (80078a0 <mem_trim+0x1e8>)
 800770c:	f008 fafa 	bl	800fd04 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007710:	4b5f      	ldr	r3, [pc, #380]	@ (8007890 <mem_trim+0x1d8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	429a      	cmp	r2, r3
 8007718:	d304      	bcc.n	8007724 <mem_trim+0x6c>
 800771a:	4b5e      	ldr	r3, [pc, #376]	@ (8007894 <mem_trim+0x1dc>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	429a      	cmp	r2, r3
 8007722:	d301      	bcc.n	8007728 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	e0af      	b.n	8007888 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3b08      	subs	r3, #8
 800772c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800772e:	69b8      	ldr	r0, [r7, #24]
 8007730:	f7ff fe30 	bl	8007394 <mem_to_ptr>
 8007734:	4603      	mov	r3, r0
 8007736:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	881a      	ldrh	r2, [r3, #0]
 800773c:	8afb      	ldrh	r3, [r7, #22]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b08      	subs	r3, #8
 8007744:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007746:	8bfa      	ldrh	r2, [r7, #30]
 8007748:	8abb      	ldrh	r3, [r7, #20]
 800774a:	429a      	cmp	r2, r3
 800774c:	d906      	bls.n	800775c <mem_trim+0xa4>
 800774e:	4b52      	ldr	r3, [pc, #328]	@ (8007898 <mem_trim+0x1e0>)
 8007750:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007754:	4953      	ldr	r1, [pc, #332]	@ (80078a4 <mem_trim+0x1ec>)
 8007756:	4852      	ldr	r0, [pc, #328]	@ (80078a0 <mem_trim+0x1e8>)
 8007758:	f008 fad4 	bl	800fd04 <iprintf>
  if (newsize > size) {
 800775c:	8bfa      	ldrh	r2, [r7, #30]
 800775e:	8abb      	ldrh	r3, [r7, #20]
 8007760:	429a      	cmp	r2, r3
 8007762:	d901      	bls.n	8007768 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	e08f      	b.n	8007888 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007768:	8bfa      	ldrh	r2, [r7, #30]
 800776a:	8abb      	ldrh	r3, [r7, #20]
 800776c:	429a      	cmp	r2, r3
 800776e:	d101      	bne.n	8007774 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	e089      	b.n	8007888 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff fdf9 	bl	8007370 <ptr_to_mem>
 800777e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	791b      	ldrb	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d13f      	bne.n	8007808 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007790:	d106      	bne.n	80077a0 <mem_trim+0xe8>
 8007792:	4b41      	ldr	r3, [pc, #260]	@ (8007898 <mem_trim+0x1e0>)
 8007794:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007798:	4943      	ldr	r1, [pc, #268]	@ (80078a8 <mem_trim+0x1f0>)
 800779a:	4841      	ldr	r0, [pc, #260]	@ (80078a0 <mem_trim+0x1e8>)
 800779c:	f008 fab2 	bl	800fd04 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80077a6:	8afa      	ldrh	r2, [r7, #22]
 80077a8:	8bfb      	ldrh	r3, [r7, #30]
 80077aa:	4413      	add	r3, r2
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	3308      	adds	r3, #8
 80077b0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80077b2:	4b3e      	ldr	r3, [pc, #248]	@ (80078ac <mem_trim+0x1f4>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d106      	bne.n	80077ca <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80077bc:	89fb      	ldrh	r3, [r7, #14]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fdd6 	bl	8007370 <ptr_to_mem>
 80077c4:	4603      	mov	r3, r0
 80077c6:	4a39      	ldr	r2, [pc, #228]	@ (80078ac <mem_trim+0x1f4>)
 80077c8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80077ca:	89fb      	ldrh	r3, [r7, #14]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff fdcf 	bl	8007370 <ptr_to_mem>
 80077d2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	2200      	movs	r2, #0
 80077d8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	89ba      	ldrh	r2, [r7, #12]
 80077de:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	8afa      	ldrh	r2, [r7, #22]
 80077e4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	89fa      	ldrh	r2, [r7, #14]
 80077ea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80077f4:	d047      	beq.n	8007886 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fdb8 	bl	8007370 <ptr_to_mem>
 8007800:	4602      	mov	r2, r0
 8007802:	89fb      	ldrh	r3, [r7, #14]
 8007804:	8053      	strh	r3, [r2, #2]
 8007806:	e03e      	b.n	8007886 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007808:	8bfb      	ldrh	r3, [r7, #30]
 800780a:	f103 0214 	add.w	r2, r3, #20
 800780e:	8abb      	ldrh	r3, [r7, #20]
 8007810:	429a      	cmp	r2, r3
 8007812:	d838      	bhi.n	8007886 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007814:	8afa      	ldrh	r2, [r7, #22]
 8007816:	8bfb      	ldrh	r3, [r7, #30]
 8007818:	4413      	add	r3, r2
 800781a:	b29b      	uxth	r3, r3
 800781c:	3308      	adds	r3, #8
 800781e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007828:	d106      	bne.n	8007838 <mem_trim+0x180>
 800782a:	4b1b      	ldr	r3, [pc, #108]	@ (8007898 <mem_trim+0x1e0>)
 800782c:	f240 3216 	movw	r2, #790	@ 0x316
 8007830:	491d      	ldr	r1, [pc, #116]	@ (80078a8 <mem_trim+0x1f0>)
 8007832:	481b      	ldr	r0, [pc, #108]	@ (80078a0 <mem_trim+0x1e8>)
 8007834:	f008 fa66 	bl	800fd04 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007838:	89fb      	ldrh	r3, [r7, #14]
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff fd98 	bl	8007370 <ptr_to_mem>
 8007840:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007842:	4b1a      	ldr	r3, [pc, #104]	@ (80078ac <mem_trim+0x1f4>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	429a      	cmp	r2, r3
 800784a:	d202      	bcs.n	8007852 <mem_trim+0x19a>
      lfree = mem2;
 800784c:	4a17      	ldr	r2, [pc, #92]	@ (80078ac <mem_trim+0x1f4>)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2200      	movs	r2, #0
 8007856:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	881a      	ldrh	r2, [r3, #0]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	8afa      	ldrh	r2, [r7, #22]
 8007864:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	89fa      	ldrh	r2, [r7, #14]
 800786a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007874:	d007      	beq.n	8007886 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff fd78 	bl	8007370 <ptr_to_mem>
 8007880:	4602      	mov	r2, r0
 8007882:	89fb      	ldrh	r3, [r7, #14]
 8007884:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007886:	687b      	ldr	r3, [r7, #4]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3720      	adds	r7, #32
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20004e80 	.word	0x20004e80
 8007894:	20004e84 	.word	0x20004e84
 8007898:	0801180c 	.word	0x0801180c
 800789c:	080119b4 	.word	0x080119b4
 80078a0:	0801188c 	.word	0x0801188c
 80078a4:	080119cc 	.word	0x080119cc
 80078a8:	080119ec 	.word	0x080119ec
 80078ac:	20004e88 	.word	0x20004e88

080078b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <mem_malloc+0x14>
    return NULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	e0d9      	b.n	8007a78 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80078c4:	88fb      	ldrh	r3, [r7, #6]
 80078c6:	3303      	adds	r3, #3
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80078d0:	8bbb      	ldrh	r3, [r7, #28]
 80078d2:	2b0b      	cmp	r3, #11
 80078d4:	d801      	bhi.n	80078da <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80078d6:	230c      	movs	r3, #12
 80078d8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80078da:	8bbb      	ldrh	r3, [r7, #28]
 80078dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80078e0:	d803      	bhi.n	80078ea <mem_malloc+0x3a>
 80078e2:	8bba      	ldrh	r2, [r7, #28]
 80078e4:	88fb      	ldrh	r3, [r7, #6]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d201      	bcs.n	80078ee <mem_malloc+0x3e>
    return NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e0c4      	b.n	8007a78 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80078ee:	4b64      	ldr	r3, [pc, #400]	@ (8007a80 <mem_malloc+0x1d0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fd4e 	bl	8007394 <mem_to_ptr>
 80078f8:	4603      	mov	r3, r0
 80078fa:	83fb      	strh	r3, [r7, #30]
 80078fc:	e0b4      	b.n	8007a68 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80078fe:	8bfb      	ldrh	r3, [r7, #30]
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff fd35 	bl	8007370 <ptr_to_mem>
 8007906:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	791b      	ldrb	r3, [r3, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f040 80a4 	bne.w	8007a5a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	8bfb      	ldrh	r3, [r7, #30]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	f1a3 0208 	sub.w	r2, r3, #8
 8007920:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007922:	429a      	cmp	r2, r3
 8007924:	f0c0 8099 	bcc.w	8007a5a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	8bfb      	ldrh	r3, [r7, #30]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	f1a3 0208 	sub.w	r2, r3, #8
 8007936:	8bbb      	ldrh	r3, [r7, #28]
 8007938:	3314      	adds	r3, #20
 800793a:	429a      	cmp	r2, r3
 800793c:	d333      	bcc.n	80079a6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800793e:	8bfa      	ldrh	r2, [r7, #30]
 8007940:	8bbb      	ldrh	r3, [r7, #28]
 8007942:	4413      	add	r3, r2
 8007944:	b29b      	uxth	r3, r3
 8007946:	3308      	adds	r3, #8
 8007948:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800794a:	8a7b      	ldrh	r3, [r7, #18]
 800794c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007950:	d106      	bne.n	8007960 <mem_malloc+0xb0>
 8007952:	4b4c      	ldr	r3, [pc, #304]	@ (8007a84 <mem_malloc+0x1d4>)
 8007954:	f240 3287 	movw	r2, #903	@ 0x387
 8007958:	494b      	ldr	r1, [pc, #300]	@ (8007a88 <mem_malloc+0x1d8>)
 800795a:	484c      	ldr	r0, [pc, #304]	@ (8007a8c <mem_malloc+0x1dc>)
 800795c:	f008 f9d2 	bl	800fd04 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007960:	8a7b      	ldrh	r3, [r7, #18]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fd04 	bl	8007370 <ptr_to_mem>
 8007968:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	881a      	ldrh	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8bfa      	ldrh	r2, [r7, #30]
 800797c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	8a7a      	ldrh	r2, [r7, #18]
 8007982:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2201      	movs	r2, #1
 8007988:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007992:	d00b      	beq.n	80079ac <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff fce9 	bl	8007370 <ptr_to_mem>
 800799e:	4602      	mov	r2, r0
 80079a0:	8a7b      	ldrh	r3, [r7, #18]
 80079a2:	8053      	strh	r3, [r2, #2]
 80079a4:	e002      	b.n	80079ac <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2201      	movs	r2, #1
 80079aa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80079ac:	4b34      	ldr	r3, [pc, #208]	@ (8007a80 <mem_malloc+0x1d0>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d127      	bne.n	8007a06 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80079b6:	4b32      	ldr	r3, [pc, #200]	@ (8007a80 <mem_malloc+0x1d0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80079bc:	e005      	b.n	80079ca <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff fcd4 	bl	8007370 <ptr_to_mem>
 80079c8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	791b      	ldrb	r3, [r3, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <mem_malloc+0x12c>
 80079d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007a90 <mem_malloc+0x1e0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d1f0      	bne.n	80079be <mem_malloc+0x10e>
          }
          lfree = cur;
 80079dc:	4a28      	ldr	r2, [pc, #160]	@ (8007a80 <mem_malloc+0x1d0>)
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80079e2:	4b27      	ldr	r3, [pc, #156]	@ (8007a80 <mem_malloc+0x1d0>)
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007a90 <mem_malloc+0x1e0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d00b      	beq.n	8007a06 <mem_malloc+0x156>
 80079ee:	4b24      	ldr	r3, [pc, #144]	@ (8007a80 <mem_malloc+0x1d0>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	791b      	ldrb	r3, [r3, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d006      	beq.n	8007a06 <mem_malloc+0x156>
 80079f8:	4b22      	ldr	r3, [pc, #136]	@ (8007a84 <mem_malloc+0x1d4>)
 80079fa:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80079fe:	4925      	ldr	r1, [pc, #148]	@ (8007a94 <mem_malloc+0x1e4>)
 8007a00:	4822      	ldr	r0, [pc, #136]	@ (8007a8c <mem_malloc+0x1dc>)
 8007a02:	f008 f97f 	bl	800fd04 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007a06:	8bba      	ldrh	r2, [r7, #28]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	4a20      	ldr	r2, [pc, #128]	@ (8007a90 <mem_malloc+0x1e0>)
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d906      	bls.n	8007a24 <mem_malloc+0x174>
 8007a16:	4b1b      	ldr	r3, [pc, #108]	@ (8007a84 <mem_malloc+0x1d4>)
 8007a18:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8007a1c:	491e      	ldr	r1, [pc, #120]	@ (8007a98 <mem_malloc+0x1e8>)
 8007a1e:	481b      	ldr	r0, [pc, #108]	@ (8007a8c <mem_malloc+0x1dc>)
 8007a20:	f008 f970 	bl	800fd04 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d006      	beq.n	8007a3c <mem_malloc+0x18c>
 8007a2e:	4b15      	ldr	r3, [pc, #84]	@ (8007a84 <mem_malloc+0x1d4>)
 8007a30:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8007a34:	4919      	ldr	r1, [pc, #100]	@ (8007a9c <mem_malloc+0x1ec>)
 8007a36:	4815      	ldr	r0, [pc, #84]	@ (8007a8c <mem_malloc+0x1dc>)
 8007a38:	f008 f964 	bl	800fd04 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d006      	beq.n	8007a54 <mem_malloc+0x1a4>
 8007a46:	4b0f      	ldr	r3, [pc, #60]	@ (8007a84 <mem_malloc+0x1d4>)
 8007a48:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007a4c:	4914      	ldr	r1, [pc, #80]	@ (8007aa0 <mem_malloc+0x1f0>)
 8007a4e:	480f      	ldr	r0, [pc, #60]	@ (8007a8c <mem_malloc+0x1dc>)
 8007a50:	f008 f958 	bl	800fd04 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	3308      	adds	r3, #8
 8007a58:	e00e      	b.n	8007a78 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007a5a:	8bfb      	ldrh	r3, [r7, #30]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff fc87 	bl	8007370 <ptr_to_mem>
 8007a62:	4603      	mov	r3, r0
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007a68:	8bfa      	ldrh	r2, [r7, #30]
 8007a6a:	8bbb      	ldrh	r3, [r7, #28]
 8007a6c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8007a70:	429a      	cmp	r2, r3
 8007a72:	f4ff af44 	bcc.w	80078fe <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3720      	adds	r7, #32
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	20004e88 	.word	0x20004e88
 8007a84:	0801180c 	.word	0x0801180c
 8007a88:	080119ec 	.word	0x080119ec
 8007a8c:	0801188c 	.word	0x0801188c
 8007a90:	20004e84 	.word	0x20004e84
 8007a94:	08011a00 	.word	0x08011a00
 8007a98:	08011a1c 	.word	0x08011a1c
 8007a9c:	08011a4c 	.word	0x08011a4c
 8007aa0:	08011a7c 	.word	0x08011a7c

08007aa4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	3303      	adds	r3, #3
 8007aba:	f023 0303 	bic.w	r3, r3, #3
 8007abe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	e011      	b.n	8007aea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	461a      	mov	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4293      	cmp	r3, r2
 8007af4:	dbe7      	blt.n	8007ac6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007af6:	bf00      	nop
 8007af8:	bf00      	nop
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	80fb      	strh	r3, [r7, #6]
 8007b0e:	e009      	b.n	8007b24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007b10:	88fb      	ldrh	r3, [r7, #6]
 8007b12:	4a08      	ldr	r2, [pc, #32]	@ (8007b34 <memp_init+0x30>)
 8007b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff ffc3 	bl	8007aa4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	3301      	adds	r3, #1
 8007b22:	80fb      	strh	r3, [r7, #6]
 8007b24:	88fb      	ldrh	r3, [r7, #6]
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d9f2      	bls.n	8007b10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007b2a:	bf00      	nop
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	08014040 	.word	0x08014040

08007b38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d012      	beq.n	8007b74 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d006      	beq.n	8007b70 <do_memp_malloc_pool+0x38>
 8007b62:	4b07      	ldr	r3, [pc, #28]	@ (8007b80 <do_memp_malloc_pool+0x48>)
 8007b64:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007b68:	4906      	ldr	r1, [pc, #24]	@ (8007b84 <do_memp_malloc_pool+0x4c>)
 8007b6a:	4807      	ldr	r0, [pc, #28]	@ (8007b88 <do_memp_malloc_pool+0x50>)
 8007b6c:	f008 f8ca 	bl	800fd04 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	e000      	b.n	8007b76 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	08011aa0 	.word	0x08011aa0
 8007b84:	08011b0c 	.word	0x08011b0c
 8007b88:	08011b30 	.word	0x08011b30

08007b8c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <memp_malloc_pool+0x1c>
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc4 <memp_malloc_pool+0x38>)
 8007b9c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8007ba0:	4909      	ldr	r1, [pc, #36]	@ (8007bc8 <memp_malloc_pool+0x3c>)
 8007ba2:	480a      	ldr	r0, [pc, #40]	@ (8007bcc <memp_malloc_pool+0x40>)
 8007ba4:	f008 f8ae 	bl	800fd04 <iprintf>
  if (desc == NULL) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <memp_malloc_pool+0x26>
    return NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e003      	b.n	8007bba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff ffc0 	bl	8007b38 <do_memp_malloc_pool>
 8007bb8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	08011aa0 	.word	0x08011aa0
 8007bc8:	08011b58 	.word	0x08011b58
 8007bcc:	08011b30 	.word	0x08011b30

08007bd0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d908      	bls.n	8007bf2 <memp_malloc+0x22>
 8007be0:	4b0a      	ldr	r3, [pc, #40]	@ (8007c0c <memp_malloc+0x3c>)
 8007be2:	f240 1257 	movw	r2, #343	@ 0x157
 8007be6:	490a      	ldr	r1, [pc, #40]	@ (8007c10 <memp_malloc+0x40>)
 8007be8:	480a      	ldr	r0, [pc, #40]	@ (8007c14 <memp_malloc+0x44>)
 8007bea:	f008 f88b 	bl	800fd04 <iprintf>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e008      	b.n	8007c04 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	4a08      	ldr	r2, [pc, #32]	@ (8007c18 <memp_malloc+0x48>)
 8007bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff ff9c 	bl	8007b38 <do_memp_malloc_pool>
 8007c00:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007c02:	68fb      	ldr	r3, [r7, #12]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	08011aa0 	.word	0x08011aa0
 8007c10:	08011b6c 	.word	0x08011b6c
 8007c14:	08011b30 	.word	0x08011b30
 8007c18:	08014040 	.word	0x08014040

08007c1c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	f003 0303 	and.w	r3, r3, #3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d006      	beq.n	8007c3e <do_memp_free_pool+0x22>
 8007c30:	4b0a      	ldr	r3, [pc, #40]	@ (8007c5c <do_memp_free_pool+0x40>)
 8007c32:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8007c36:	490a      	ldr	r1, [pc, #40]	@ (8007c60 <do_memp_free_pool+0x44>)
 8007c38:	480a      	ldr	r0, [pc, #40]	@ (8007c64 <do_memp_free_pool+0x48>)
 8007c3a:	f008 f863 	bl	800fd04 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	08011aa0 	.word	0x08011aa0
 8007c60:	08011b8c 	.word	0x08011b8c
 8007c64:	08011b30 	.word	0x08011b30

08007c68 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <memp_free_pool+0x1e>
 8007c78:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca4 <memp_free_pool+0x3c>)
 8007c7a:	f240 1295 	movw	r2, #405	@ 0x195
 8007c7e:	490a      	ldr	r1, [pc, #40]	@ (8007ca8 <memp_free_pool+0x40>)
 8007c80:	480a      	ldr	r0, [pc, #40]	@ (8007cac <memp_free_pool+0x44>)
 8007c82:	f008 f83f 	bl	800fd04 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d007      	beq.n	8007c9c <memp_free_pool+0x34>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d004      	beq.n	8007c9c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff ffc1 	bl	8007c1c <do_memp_free_pool>
 8007c9a:	e000      	b.n	8007c9e <memp_free_pool+0x36>
    return;
 8007c9c:	bf00      	nop
}
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	08011aa0 	.word	0x08011aa0
 8007ca8:	08011b58 	.word	0x08011b58
 8007cac:	08011b30 	.word	0x08011b30

08007cb0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	6039      	str	r1, [r7, #0]
 8007cba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d907      	bls.n	8007cd2 <memp_free+0x22>
 8007cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf4 <memp_free+0x44>)
 8007cc4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007cc8:	490b      	ldr	r1, [pc, #44]	@ (8007cf8 <memp_free+0x48>)
 8007cca:	480c      	ldr	r0, [pc, #48]	@ (8007cfc <memp_free+0x4c>)
 8007ccc:	f008 f81a 	bl	800fd04 <iprintf>
 8007cd0:	e00c      	b.n	8007cec <memp_free+0x3c>

  if (mem == NULL) {
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d008      	beq.n	8007cea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	4a09      	ldr	r2, [pc, #36]	@ (8007d00 <memp_free+0x50>)
 8007cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff ff9a 	bl	8007c1c <do_memp_free_pool>
 8007ce8:	e000      	b.n	8007cec <memp_free+0x3c>
    return;
 8007cea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	08011aa0 	.word	0x08011aa0
 8007cf8:	08011bac 	.word	0x08011bac
 8007cfc:	08011b30 	.word	0x08011b30
 8007d00:	08014040 	.word	0x08014040

08007d04 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007d08:	bf00      	nop
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
	...

08007d14 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d108      	bne.n	8007d3a <netif_add+0x26>
 8007d28:	4b57      	ldr	r3, [pc, #348]	@ (8007e88 <netif_add+0x174>)
 8007d2a:	f240 1227 	movw	r2, #295	@ 0x127
 8007d2e:	4957      	ldr	r1, [pc, #348]	@ (8007e8c <netif_add+0x178>)
 8007d30:	4857      	ldr	r0, [pc, #348]	@ (8007e90 <netif_add+0x17c>)
 8007d32:	f007 ffe7 	bl	800fd04 <iprintf>
 8007d36:	2300      	movs	r3, #0
 8007d38:	e0a2      	b.n	8007e80 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d108      	bne.n	8007d52 <netif_add+0x3e>
 8007d40:	4b51      	ldr	r3, [pc, #324]	@ (8007e88 <netif_add+0x174>)
 8007d42:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007d46:	4953      	ldr	r1, [pc, #332]	@ (8007e94 <netif_add+0x180>)
 8007d48:	4851      	ldr	r0, [pc, #324]	@ (8007e90 <netif_add+0x17c>)
 8007d4a:	f007 ffdb 	bl	800fd04 <iprintf>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e096      	b.n	8007e80 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007d58:	4b4f      	ldr	r3, [pc, #316]	@ (8007e98 <netif_add+0x184>)
 8007d5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007d62:	4b4d      	ldr	r3, [pc, #308]	@ (8007e98 <netif_add+0x184>)
 8007d64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8007e98 <netif_add+0x184>)
 8007d6e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4a45      	ldr	r2, [pc, #276]	@ (8007e9c <netif_add+0x188>)
 8007d86:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a3a      	ldr	r2, [r7, #32]
 8007da0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007da2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ea0 <netif_add+0x18c>)
 8007da4:	781a      	ldrb	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007db0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 f913 	bl	8007fe4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	4798      	blx	r3
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <netif_add+0xba>
    return NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e058      	b.n	8007e80 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007dd4:	2bff      	cmp	r3, #255	@ 0xff
 8007dd6:	d103      	bne.n	8007de0 <netif_add+0xcc>
        netif->num = 0;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007de4:	4b2f      	ldr	r3, [pc, #188]	@ (8007ea4 <netif_add+0x190>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	617b      	str	r3, [r7, #20]
 8007dea:	e02b      	b.n	8007e44 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d106      	bne.n	8007e02 <netif_add+0xee>
 8007df4:	4b24      	ldr	r3, [pc, #144]	@ (8007e88 <netif_add+0x174>)
 8007df6:	f240 128b 	movw	r2, #395	@ 0x18b
 8007dfa:	492b      	ldr	r1, [pc, #172]	@ (8007ea8 <netif_add+0x194>)
 8007dfc:	4824      	ldr	r0, [pc, #144]	@ (8007e90 <netif_add+0x17c>)
 8007dfe:	f007 ff81 	bl	800fd04 <iprintf>
        num_netifs++;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3301      	adds	r3, #1
 8007e06:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2bff      	cmp	r3, #255	@ 0xff
 8007e0c:	dd06      	ble.n	8007e1c <netif_add+0x108>
 8007e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007e88 <netif_add+0x174>)
 8007e10:	f240 128d 	movw	r2, #397	@ 0x18d
 8007e14:	4925      	ldr	r1, [pc, #148]	@ (8007eac <netif_add+0x198>)
 8007e16:	481e      	ldr	r0, [pc, #120]	@ (8007e90 <netif_add+0x17c>)
 8007e18:	f007 ff74 	bl	800fd04 <iprintf>
        if (netif2->num == netif->num) {
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d108      	bne.n	8007e3e <netif_add+0x12a>
          netif->num++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e32:	3301      	adds	r3, #1
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8007e3c:	e005      	b.n	8007e4a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1d0      	bne.n	8007dec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1be      	bne.n	8007dce <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e56:	2bfe      	cmp	r3, #254	@ 0xfe
 8007e58:	d103      	bne.n	8007e62 <netif_add+0x14e>
    netif_num = 0;
 8007e5a:	4b11      	ldr	r3, [pc, #68]	@ (8007ea0 <netif_add+0x18c>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
 8007e60:	e006      	b.n	8007e70 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e68:	3301      	adds	r3, #1
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea0 <netif_add+0x18c>)
 8007e6e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007e70:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea4 <netif_add+0x190>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007e78:	4a0a      	ldr	r2, [pc, #40]	@ (8007ea4 <netif_add+0x190>)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	08011bc8 	.word	0x08011bc8
 8007e8c:	08011c94 	.word	0x08011c94
 8007e90:	08011c50 	.word	0x08011c50
 8007e94:	08011cb0 	.word	0x08011cb0
 8007e98:	08013fd0 	.word	0x08013fd0
 8007e9c:	080082bf 	.word	0x080082bf
 8007ea0:	2000b760 	.word	0x2000b760
 8007ea4:	2000b758 	.word	0x2000b758
 8007ea8:	08011cd4 	.word	0x08011cd4
 8007eac:	08011ce8 	.word	0x08011ce8

08007eb0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f002 fd71 	bl	800a9a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f007 fac3 	bl	800f450 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007eca:	bf00      	nop
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <netif_do_set_ipaddr+0x20>
 8007ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f5c <netif_do_set_ipaddr+0x88>)
 8007ee8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007eec:	491c      	ldr	r1, [pc, #112]	@ (8007f60 <netif_do_set_ipaddr+0x8c>)
 8007eee:	481d      	ldr	r0, [pc, #116]	@ (8007f64 <netif_do_set_ipaddr+0x90>)
 8007ef0:	f007 ff08 	bl	800fd04 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <netif_do_set_ipaddr+0x34>
 8007efa:	4b18      	ldr	r3, [pc, #96]	@ (8007f5c <netif_do_set_ipaddr+0x88>)
 8007efc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007f00:	4917      	ldr	r1, [pc, #92]	@ (8007f60 <netif_do_set_ipaddr+0x8c>)
 8007f02:	4818      	ldr	r0, [pc, #96]	@ (8007f64 <netif_do_set_ipaddr+0x90>)
 8007f04:	f007 fefe 	bl	800fd04 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d01c      	beq.n	8007f50 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007f26:	f107 0314 	add.w	r3, r7, #20
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ffbf 	bl	8007eb0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <netif_do_set_ipaddr+0x6a>
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	e000      	b.n	8007f40 <netif_do_set_ipaddr+0x6c>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007f44:	2101      	movs	r1, #1
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f8d2 	bl	80080f0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e000      	b.n	8007f52 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	08011bc8 	.word	0x08011bc8
 8007f60:	08011d18 	.word	0x08011d18
 8007f64:	08011c50 	.word	0x08011c50

08007f68 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d00a      	beq.n	8007f98 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <netif_do_set_netmask+0x26>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	e000      	b.n	8007f90 <netif_do_set_netmask+0x28>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007f94:	2301      	movs	r3, #1
 8007f96:	e000      	b.n	8007f9a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b085      	sub	sp, #20
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	330c      	adds	r3, #12
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d00a      	beq.n	8007fd6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <netif_do_set_gw+0x26>
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	e000      	b.n	8007fce <netif_do_set_gw+0x28>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008000:	4b1c      	ldr	r3, [pc, #112]	@ (8008074 <netif_set_addr+0x90>)
 8008002:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800800a:	4b1a      	ldr	r3, [pc, #104]	@ (8008074 <netif_set_addr+0x90>)
 800800c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008014:	4b17      	ldr	r3, [pc, #92]	@ (8008074 <netif_set_addr+0x90>)
 8008016:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <netif_set_addr+0x42>
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <netif_set_addr+0x46>
 8008026:	2301      	movs	r3, #1
 8008028:	e000      	b.n	800802c <netif_set_addr+0x48>
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d006      	beq.n	8008042 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008034:	f107 0310 	add.w	r3, r7, #16
 8008038:	461a      	mov	r2, r3
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff ff49 	bl	8007ed4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f7ff ff8e 	bl	8007f68 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff ffa8 	bl	8007fa6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d106      	bne.n	800806a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800805c:	f107 0310 	add.w	r3, r7, #16
 8008060:	461a      	mov	r2, r3
 8008062:	68b9      	ldr	r1, [r7, #8]
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7ff ff35 	bl	8007ed4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800806a:	bf00      	nop
 800806c:	3720      	adds	r7, #32
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	08013fd0 	.word	0x08013fd0

08008078 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008080:	4a04      	ldr	r2, [pc, #16]	@ (8008094 <netif_set_default+0x1c>)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	2000b75c 	.word	0x2000b75c

08008098 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d107      	bne.n	80080b6 <netif_set_up+0x1e>
 80080a6:	4b0f      	ldr	r3, [pc, #60]	@ (80080e4 <netif_set_up+0x4c>)
 80080a8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80080ac:	490e      	ldr	r1, [pc, #56]	@ (80080e8 <netif_set_up+0x50>)
 80080ae:	480f      	ldr	r0, [pc, #60]	@ (80080ec <netif_set_up+0x54>)
 80080b0:	f007 fe28 	bl	800fd04 <iprintf>
 80080b4:	e013      	b.n	80080de <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10c      	bne.n	80080de <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80080d6:	2103      	movs	r1, #3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f809 	bl	80080f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	08011bc8 	.word	0x08011bc8
 80080e8:	08011d88 	.word	0x08011d88
 80080ec:	08011c50 	.word	0x08011c50

080080f0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d106      	bne.n	8008110 <netif_issue_reports+0x20>
 8008102:	4b18      	ldr	r3, [pc, #96]	@ (8008164 <netif_issue_reports+0x74>)
 8008104:	f240 326d 	movw	r2, #877	@ 0x36d
 8008108:	4917      	ldr	r1, [pc, #92]	@ (8008168 <netif_issue_reports+0x78>)
 800810a:	4818      	ldr	r0, [pc, #96]	@ (800816c <netif_issue_reports+0x7c>)
 800810c:	f007 fdfa 	bl	800fd04 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	d01e      	beq.n	800815c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008124:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008128:	2b00      	cmp	r3, #0
 800812a:	d017      	beq.n	800815c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d013      	beq.n	800815e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3304      	adds	r3, #4
 800813a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00e      	beq.n	800815e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7fd fd69 	bl	8005c2c <etharp_request>
 800815a:	e000      	b.n	800815e <netif_issue_reports+0x6e>
    return;
 800815c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	08011bc8 	.word	0x08011bc8
 8008168:	08011da4 	.word	0x08011da4
 800816c:	08011c50 	.word	0x08011c50

08008170 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d107      	bne.n	800818e <netif_set_down+0x1e>
 800817e:	4b12      	ldr	r3, [pc, #72]	@ (80081c8 <netif_set_down+0x58>)
 8008180:	f240 329b 	movw	r2, #923	@ 0x39b
 8008184:	4911      	ldr	r1, [pc, #68]	@ (80081cc <netif_set_down+0x5c>)
 8008186:	4812      	ldr	r0, [pc, #72]	@ (80081d0 <netif_set_down+0x60>)
 8008188:	f007 fdbc 	bl	800fd04 <iprintf>
 800818c:	e019      	b.n	80081c2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d012      	beq.n	80081c2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80081a2:	f023 0301 	bic.w	r3, r3, #1
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7fd f8f3 	bl	80053a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	08011bc8 	.word	0x08011bc8
 80081cc:	08011dc8 	.word	0x08011dc8
 80081d0:	08011c50 	.word	0x08011c50

080081d4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d107      	bne.n	80081f2 <netif_set_link_up+0x1e>
 80081e2:	4b13      	ldr	r3, [pc, #76]	@ (8008230 <netif_set_link_up+0x5c>)
 80081e4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80081e8:	4912      	ldr	r1, [pc, #72]	@ (8008234 <netif_set_link_up+0x60>)
 80081ea:	4813      	ldr	r0, [pc, #76]	@ (8008238 <netif_set_link_up+0x64>)
 80081ec:	f007 fd8a 	bl	800fd04 <iprintf>
 80081f0:	e01b      	b.n	800822a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d114      	bne.n	800822a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008206:	f043 0304 	orr.w	r3, r3, #4
 800820a:	b2da      	uxtb	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008212:	2103      	movs	r1, #3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff ff6b 	bl	80080f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <netif_set_link_up+0x56>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	08011bc8 	.word	0x08011bc8
 8008234:	08011de8 	.word	0x08011de8
 8008238:	08011c50 	.word	0x08011c50

0800823c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d107      	bne.n	800825a <netif_set_link_down+0x1e>
 800824a:	4b11      	ldr	r3, [pc, #68]	@ (8008290 <netif_set_link_down+0x54>)
 800824c:	f240 4206 	movw	r2, #1030	@ 0x406
 8008250:	4910      	ldr	r1, [pc, #64]	@ (8008294 <netif_set_link_down+0x58>)
 8008252:	4811      	ldr	r0, [pc, #68]	@ (8008298 <netif_set_link_down+0x5c>)
 8008254:	f007 fd56 	bl	800fd04 <iprintf>
 8008258:	e017      	b.n	800828a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d010      	beq.n	800828a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800826e:	f023 0304 	bic.w	r3, r3, #4
 8008272:	b2da      	uxtb	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <netif_set_link_down+0x4e>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	08011bc8 	.word	0x08011bc8
 8008294:	08011e0c 	.word	0x08011e0c
 8008298:	08011c50 	.word	0x08011c50

0800829c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	61da      	str	r2, [r3, #28]
  }
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80082ca:	f06f 030b 	mvn.w	r3, #11
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
	...

080082dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d013      	beq.n	8008314 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80082ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008324 <netif_get_by_index+0x48>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	60fb      	str	r3, [r7, #12]
 80082f2:	e00c      	b.n	800830e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082fa:	3301      	adds	r3, #1
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	79fa      	ldrb	r2, [r7, #7]
 8008300:	429a      	cmp	r2, r3
 8008302:	d101      	bne.n	8008308 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	e006      	b.n	8008316 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1ef      	bne.n	80082f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	2000b758 	.word	0x2000b758

08008328 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800832e:	4b0c      	ldr	r3, [pc, #48]	@ (8008360 <pbuf_free_ooseq+0x38>)
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008334:	4b0b      	ldr	r3, [pc, #44]	@ (8008364 <pbuf_free_ooseq+0x3c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	607b      	str	r3, [r7, #4]
 800833a:	e00a      	b.n	8008352 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f002 fb6b 	bl	800aa20 <tcp_free_ooseq>
      return;
 800834a:	e005      	b.n	8008358 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	607b      	str	r3, [r7, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1f1      	bne.n	800833c <pbuf_free_ooseq+0x14>
    }
  }
}
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	2000b761 	.word	0x2000b761
 8008364:	2000b770 	.word	0x2000b770

08008368 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008368:	b480      	push	{r7}
 800836a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800836c:	4b03      	ldr	r3, [pc, #12]	@ (800837c <pbuf_pool_is_empty+0x14>)
 800836e:	2201      	movs	r2, #1
 8008370:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008372:	bf00      	nop
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	2000b761 	.word	0x2000b761

08008380 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4611      	mov	r1, r2
 800838c:	461a      	mov	r2, r3
 800838e:	460b      	mov	r3, r1
 8008390:	80fb      	strh	r3, [r7, #6]
 8008392:	4613      	mov	r3, r2
 8008394:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	88fa      	ldrh	r2, [r7, #6]
 80083a6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	88ba      	ldrh	r2, [r7, #4]
 80083ac:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80083ae:	8b3b      	ldrh	r3, [r7, #24]
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	7f3a      	ldrb	r2, [r7, #28]
 80083ba:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	73da      	strb	r2, [r3, #15]
}
 80083c8:	bf00      	nop
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08c      	sub	sp, #48	@ 0x30
 80083d8:	af02      	add	r7, sp, #8
 80083da:	4603      	mov	r3, r0
 80083dc:	71fb      	strb	r3, [r7, #7]
 80083de:	460b      	mov	r3, r1
 80083e0:	80bb      	strh	r3, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80083ea:	887b      	ldrh	r3, [r7, #2]
 80083ec:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80083f0:	f000 8082 	beq.w	80084f8 <pbuf_alloc+0x124>
 80083f4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80083f8:	f300 80ca 	bgt.w	8008590 <pbuf_alloc+0x1bc>
 80083fc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008400:	d010      	beq.n	8008424 <pbuf_alloc+0x50>
 8008402:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008406:	f300 80c3 	bgt.w	8008590 <pbuf_alloc+0x1bc>
 800840a:	2b01      	cmp	r3, #1
 800840c:	d002      	beq.n	8008414 <pbuf_alloc+0x40>
 800840e:	2b41      	cmp	r3, #65	@ 0x41
 8008410:	f040 80be 	bne.w	8008590 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008414:	887a      	ldrh	r2, [r7, #2]
 8008416:	88bb      	ldrh	r3, [r7, #4]
 8008418:	4619      	mov	r1, r3
 800841a:	2000      	movs	r0, #0
 800841c:	f000 f8d4 	bl	80085c8 <pbuf_alloc_reference>
 8008420:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8008422:	e0bf      	b.n	80085a4 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8008428:	2300      	movs	r3, #0
 800842a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800842c:	88bb      	ldrh	r3, [r7, #4]
 800842e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008430:	2008      	movs	r0, #8
 8008432:	f7ff fbcd 	bl	8007bd0 <memp_malloc>
 8008436:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800843e:	f7ff ff93 	bl	8008368 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <pbuf_alloc+0x7a>
            pbuf_free(p);
 8008448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800844a:	f000 faab 	bl	80089a4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	e0a9      	b.n	80085a6 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008452:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008454:	3303      	adds	r3, #3
 8008456:	b29b      	uxth	r3, r3
 8008458:	f023 0303 	bic.w	r3, r3, #3
 800845c:	b29a      	uxth	r2, r3
 800845e:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 8008462:	1a9b      	subs	r3, r3, r2
 8008464:	b29b      	uxth	r3, r3
 8008466:	8b7a      	ldrh	r2, [r7, #26]
 8008468:	4293      	cmp	r3, r2
 800846a:	bf28      	it	cs
 800846c:	4613      	movcs	r3, r2
 800846e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008470:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008472:	3310      	adds	r3, #16
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	4413      	add	r3, r2
 8008478:	3303      	adds	r3, #3
 800847a:	f023 0303 	bic.w	r3, r3, #3
 800847e:	4618      	mov	r0, r3
 8008480:	89f9      	ldrh	r1, [r7, #14]
 8008482:	8b7a      	ldrh	r2, [r7, #26]
 8008484:	2300      	movs	r3, #0
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	887b      	ldrh	r3, [r7, #2]
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	460b      	mov	r3, r1
 800848e:	4601      	mov	r1, r0
 8008490:	6938      	ldr	r0, [r7, #16]
 8008492:	f7ff ff75 	bl	8008380 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f003 0303 	and.w	r3, r3, #3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d006      	beq.n	80084b0 <pbuf_alloc+0xdc>
 80084a2:	4b43      	ldr	r3, [pc, #268]	@ (80085b0 <pbuf_alloc+0x1dc>)
 80084a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084a8:	4942      	ldr	r1, [pc, #264]	@ (80085b4 <pbuf_alloc+0x1e0>)
 80084aa:	4843      	ldr	r0, [pc, #268]	@ (80085b8 <pbuf_alloc+0x1e4>)
 80084ac:	f007 fc2a 	bl	800fd04 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80084b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084b2:	3303      	adds	r3, #3
 80084b4:	f023 0303 	bic.w	r3, r3, #3
 80084b8:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 80084bc:	4293      	cmp	r3, r2
 80084be:	d106      	bne.n	80084ce <pbuf_alloc+0xfa>
 80084c0:	4b3b      	ldr	r3, [pc, #236]	@ (80085b0 <pbuf_alloc+0x1dc>)
 80084c2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80084c6:	493d      	ldr	r1, [pc, #244]	@ (80085bc <pbuf_alloc+0x1e8>)
 80084c8:	483b      	ldr	r0, [pc, #236]	@ (80085b8 <pbuf_alloc+0x1e4>)
 80084ca:	f007 fc1b 	bl	800fd04 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d102      	bne.n	80084da <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80084d8:	e002      	b.n	80084e0 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80084e4:	8b7a      	ldrh	r2, [r7, #26]
 80084e6:	89fb      	ldrh	r3, [r7, #14]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80084f0:	8b7b      	ldrh	r3, [r7, #26]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d19c      	bne.n	8008430 <pbuf_alloc+0x5c>
      break;
 80084f6:	e055      	b.n	80085a4 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80084f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084fa:	3303      	adds	r3, #3
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	b29a      	uxth	r2, r3
 8008504:	88bb      	ldrh	r3, [r7, #4]
 8008506:	3303      	adds	r3, #3
 8008508:	b29b      	uxth	r3, r3
 800850a:	f023 0303 	bic.w	r3, r3, #3
 800850e:	b29b      	uxth	r3, r3
 8008510:	4413      	add	r3, r2
 8008512:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008514:	8b3b      	ldrh	r3, [r7, #24]
 8008516:	3310      	adds	r3, #16
 8008518:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800851a:	8b3a      	ldrh	r2, [r7, #24]
 800851c:	88bb      	ldrh	r3, [r7, #4]
 800851e:	3303      	adds	r3, #3
 8008520:	f023 0303 	bic.w	r3, r3, #3
 8008524:	429a      	cmp	r2, r3
 8008526:	d306      	bcc.n	8008536 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008528:	8afa      	ldrh	r2, [r7, #22]
 800852a:	88bb      	ldrh	r3, [r7, #4]
 800852c:	3303      	adds	r3, #3
 800852e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008532:	429a      	cmp	r2, r3
 8008534:	d201      	bcs.n	800853a <pbuf_alloc+0x166>
        return NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	e035      	b.n	80085a6 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800853a:	8afb      	ldrh	r3, [r7, #22]
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff f9b7 	bl	80078b0 <mem_malloc>
 8008542:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8008544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <pbuf_alloc+0x17a>
        return NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	e02b      	b.n	80085a6 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800854e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008550:	3310      	adds	r3, #16
 8008552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008554:	4413      	add	r3, r2
 8008556:	3303      	adds	r3, #3
 8008558:	f023 0303 	bic.w	r3, r3, #3
 800855c:	4618      	mov	r0, r3
 800855e:	88b9      	ldrh	r1, [r7, #4]
 8008560:	88ba      	ldrh	r2, [r7, #4]
 8008562:	2300      	movs	r3, #0
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	887b      	ldrh	r3, [r7, #2]
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	460b      	mov	r3, r1
 800856c:	4601      	mov	r1, r0
 800856e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008570:	f7ff ff06 	bl	8008380 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f003 0303 	and.w	r3, r3, #3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d010      	beq.n	80085a2 <pbuf_alloc+0x1ce>
 8008580:	4b0b      	ldr	r3, [pc, #44]	@ (80085b0 <pbuf_alloc+0x1dc>)
 8008582:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8008586:	490e      	ldr	r1, [pc, #56]	@ (80085c0 <pbuf_alloc+0x1ec>)
 8008588:	480b      	ldr	r0, [pc, #44]	@ (80085b8 <pbuf_alloc+0x1e4>)
 800858a:	f007 fbbb 	bl	800fd04 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800858e:	e008      	b.n	80085a2 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008590:	4b07      	ldr	r3, [pc, #28]	@ (80085b0 <pbuf_alloc+0x1dc>)
 8008592:	f240 1227 	movw	r2, #295	@ 0x127
 8008596:	490b      	ldr	r1, [pc, #44]	@ (80085c4 <pbuf_alloc+0x1f0>)
 8008598:	4807      	ldr	r0, [pc, #28]	@ (80085b8 <pbuf_alloc+0x1e4>)
 800859a:	f007 fbb3 	bl	800fd04 <iprintf>
      return NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	e001      	b.n	80085a6 <pbuf_alloc+0x1d2>
      break;
 80085a2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80085a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3728      	adds	r7, #40	@ 0x28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	08011e30 	.word	0x08011e30
 80085b4:	08011e9c 	.word	0x08011e9c
 80085b8:	08011ecc 	.word	0x08011ecc
 80085bc:	08011ef4 	.word	0x08011ef4
 80085c0:	08011f28 	.word	0x08011f28
 80085c4:	08011f54 	.word	0x08011f54

080085c8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	807b      	strh	r3, [r7, #2]
 80085d4:	4613      	mov	r3, r2
 80085d6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80085d8:	883b      	ldrh	r3, [r7, #0]
 80085da:	2b41      	cmp	r3, #65	@ 0x41
 80085dc:	d009      	beq.n	80085f2 <pbuf_alloc_reference+0x2a>
 80085de:	883b      	ldrh	r3, [r7, #0]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d006      	beq.n	80085f2 <pbuf_alloc_reference+0x2a>
 80085e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008624 <pbuf_alloc_reference+0x5c>)
 80085e6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80085ea:	490f      	ldr	r1, [pc, #60]	@ (8008628 <pbuf_alloc_reference+0x60>)
 80085ec:	480f      	ldr	r0, [pc, #60]	@ (800862c <pbuf_alloc_reference+0x64>)
 80085ee:	f007 fb89 	bl	800fd04 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80085f2:	2007      	movs	r0, #7
 80085f4:	f7ff faec 	bl	8007bd0 <memp_malloc>
 80085f8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008600:	2300      	movs	r3, #0
 8008602:	e00b      	b.n	800861c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008604:	8879      	ldrh	r1, [r7, #2]
 8008606:	887a      	ldrh	r2, [r7, #2]
 8008608:	2300      	movs	r3, #0
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	883b      	ldrh	r3, [r7, #0]
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	460b      	mov	r3, r1
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f7ff feb3 	bl	8008380 <pbuf_init_alloced_pbuf>
  return p;
 800861a:	68fb      	ldr	r3, [r7, #12]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	08011e30 	.word	0x08011e30
 8008628:	08011f70 	.word	0x08011f70
 800862c:	08011ecc 	.word	0x08011ecc

08008630 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af02      	add	r7, sp, #8
 8008636:	607b      	str	r3, [r7, #4]
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]
 800863c:	460b      	mov	r3, r1
 800863e:	81bb      	strh	r3, [r7, #12]
 8008640:	4613      	mov	r3, r2
 8008642:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008648:	8a7b      	ldrh	r3, [r7, #18]
 800864a:	3303      	adds	r3, #3
 800864c:	f023 0203 	bic.w	r2, r3, #3
 8008650:	89bb      	ldrh	r3, [r7, #12]
 8008652:	441a      	add	r2, r3
 8008654:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008656:	429a      	cmp	r2, r3
 8008658:	d901      	bls.n	800865e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	e018      	b.n	8008690 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d007      	beq.n	8008674 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008664:	8a7b      	ldrh	r3, [r7, #18]
 8008666:	3303      	adds	r3, #3
 8008668:	f023 0303 	bic.w	r3, r3, #3
 800866c:	6a3a      	ldr	r2, [r7, #32]
 800866e:	4413      	add	r3, r2
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	e001      	b.n	8008678 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	89b9      	ldrh	r1, [r7, #12]
 800867c:	89ba      	ldrh	r2, [r7, #12]
 800867e:	2302      	movs	r3, #2
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	897b      	ldrh	r3, [r7, #10]
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	460b      	mov	r3, r1
 8008688:	6979      	ldr	r1, [r7, #20]
 800868a:	f7ff fe79 	bl	8008380 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800868e:	687b      	ldr	r3, [r7, #4]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d106      	bne.n	80086b8 <pbuf_realloc+0x20>
 80086aa:	4b3a      	ldr	r3, [pc, #232]	@ (8008794 <pbuf_realloc+0xfc>)
 80086ac:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80086b0:	4939      	ldr	r1, [pc, #228]	@ (8008798 <pbuf_realloc+0x100>)
 80086b2:	483a      	ldr	r0, [pc, #232]	@ (800879c <pbuf_realloc+0x104>)
 80086b4:	f007 fb26 	bl	800fd04 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	891b      	ldrh	r3, [r3, #8]
 80086bc:	887a      	ldrh	r2, [r7, #2]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d263      	bcs.n	800878a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	891a      	ldrh	r2, [r3, #8]
 80086c6:	887b      	ldrh	r3, [r7, #2]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80086cc:	887b      	ldrh	r3, [r7, #2]
 80086ce:	817b      	strh	r3, [r7, #10]
  q = p;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80086d4:	e018      	b.n	8008708 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	895b      	ldrh	r3, [r3, #10]
 80086da:	897a      	ldrh	r2, [r7, #10]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	891a      	ldrh	r2, [r3, #8]
 80086e4:	893b      	ldrh	r3, [r7, #8]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <pbuf_realloc+0x70>
 80086fa:	4b26      	ldr	r3, [pc, #152]	@ (8008794 <pbuf_realloc+0xfc>)
 80086fc:	f240 12af 	movw	r2, #431	@ 0x1af
 8008700:	4927      	ldr	r1, [pc, #156]	@ (80087a0 <pbuf_realloc+0x108>)
 8008702:	4826      	ldr	r0, [pc, #152]	@ (800879c <pbuf_realloc+0x104>)
 8008704:	f007 fafe 	bl	800fd04 <iprintf>
  while (rem_len > q->len) {
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	895b      	ldrh	r3, [r3, #10]
 800870c:	897a      	ldrh	r2, [r7, #10]
 800870e:	429a      	cmp	r2, r3
 8008710:	d8e1      	bhi.n	80086d6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	7b1b      	ldrb	r3, [r3, #12]
 8008716:	f003 030f 	and.w	r3, r3, #15
 800871a:	2b00      	cmp	r3, #0
 800871c:	d121      	bne.n	8008762 <pbuf_realloc+0xca>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	895b      	ldrh	r3, [r3, #10]
 8008722:	897a      	ldrh	r2, [r7, #10]
 8008724:	429a      	cmp	r2, r3
 8008726:	d01c      	beq.n	8008762 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	7b5b      	ldrb	r3, [r3, #13]
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d116      	bne.n	8008762 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	b29a      	uxth	r2, r3
 800873e:	897b      	ldrh	r3, [r7, #10]
 8008740:	4413      	add	r3, r2
 8008742:	b29b      	uxth	r3, r3
 8008744:	4619      	mov	r1, r3
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7fe ffb6 	bl	80076b8 <mem_trim>
 800874c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d106      	bne.n	8008762 <pbuf_realloc+0xca>
 8008754:	4b0f      	ldr	r3, [pc, #60]	@ (8008794 <pbuf_realloc+0xfc>)
 8008756:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800875a:	4912      	ldr	r1, [pc, #72]	@ (80087a4 <pbuf_realloc+0x10c>)
 800875c:	480f      	ldr	r0, [pc, #60]	@ (800879c <pbuf_realloc+0x104>)
 800875e:	f007 fad1 	bl	800fd04 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	897a      	ldrh	r2, [r7, #10]
 8008766:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	895a      	ldrh	r2, [r3, #10]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d004      	beq.n	8008782 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4618      	mov	r0, r3
 800877e:	f000 f911 	bl	80089a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	e000      	b.n	800878c <pbuf_realloc+0xf4>
    return;
 800878a:	bf00      	nop

}
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	08011e30 	.word	0x08011e30
 8008798:	08011f84 	.word	0x08011f84
 800879c:	08011ecc 	.word	0x08011ecc
 80087a0:	08011f9c 	.word	0x08011f9c
 80087a4:	08011fb4 	.word	0x08011fb4

080087a8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	4613      	mov	r3, r2
 80087b4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d106      	bne.n	80087ca <pbuf_add_header_impl+0x22>
 80087bc:	4b2b      	ldr	r3, [pc, #172]	@ (800886c <pbuf_add_header_impl+0xc4>)
 80087be:	f240 12df 	movw	r2, #479	@ 0x1df
 80087c2:	492b      	ldr	r1, [pc, #172]	@ (8008870 <pbuf_add_header_impl+0xc8>)
 80087c4:	482b      	ldr	r0, [pc, #172]	@ (8008874 <pbuf_add_header_impl+0xcc>)
 80087c6:	f007 fa9d 	bl	800fd04 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d003      	beq.n	80087d8 <pbuf_add_header_impl+0x30>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087d6:	d301      	bcc.n	80087dc <pbuf_add_header_impl+0x34>
    return 1;
 80087d8:	2301      	movs	r3, #1
 80087da:	e043      	b.n	8008864 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <pbuf_add_header_impl+0x3e>
    return 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	e03e      	b.n	8008864 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	891a      	ldrh	r2, [r3, #8]
 80087ee:	8a7b      	ldrh	r3, [r7, #18]
 80087f0:	4413      	add	r3, r2
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	8a7a      	ldrh	r2, [r7, #18]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d901      	bls.n	80087fe <pbuf_add_header_impl+0x56>
    return 1;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e032      	b.n	8008864 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	7b1b      	ldrb	r3, [r3, #12]
 8008802:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008804:	8a3b      	ldrh	r3, [r7, #16]
 8008806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00c      	beq.n	8008828 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	425b      	negs	r3, r3
 8008816:	4413      	add	r3, r2
 8008818:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3310      	adds	r3, #16
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	429a      	cmp	r2, r3
 8008822:	d20d      	bcs.n	8008840 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008824:	2301      	movs	r3, #1
 8008826:	e01d      	b.n	8008864 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d006      	beq.n	800883c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	425b      	negs	r3, r3
 8008836:	4413      	add	r3, r2
 8008838:	617b      	str	r3, [r7, #20]
 800883a:	e001      	b.n	8008840 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800883c:	2301      	movs	r3, #1
 800883e:	e011      	b.n	8008864 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	895a      	ldrh	r2, [r3, #10]
 800884a:	8a7b      	ldrh	r3, [r7, #18]
 800884c:	4413      	add	r3, r2
 800884e:	b29a      	uxth	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	891a      	ldrh	r2, [r3, #8]
 8008858:	8a7b      	ldrh	r3, [r7, #18]
 800885a:	4413      	add	r3, r2
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	811a      	strh	r2, [r3, #8]


  return 0;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	08011e30 	.word	0x08011e30
 8008870:	08011fd0 	.word	0x08011fd0
 8008874:	08011ecc 	.word	0x08011ecc

08008878 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008882:	2200      	movs	r2, #0
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff ff8e 	bl	80087a8 <pbuf_add_header_impl>
 800888c:	4603      	mov	r3, r0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <pbuf_remove_header+0x1e>
 80088a8:	4b20      	ldr	r3, [pc, #128]	@ (800892c <pbuf_remove_header+0x94>)
 80088aa:	f240 224b 	movw	r2, #587	@ 0x24b
 80088ae:	4920      	ldr	r1, [pc, #128]	@ (8008930 <pbuf_remove_header+0x98>)
 80088b0:	4820      	ldr	r0, [pc, #128]	@ (8008934 <pbuf_remove_header+0x9c>)
 80088b2:	f007 fa27 	bl	800fd04 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <pbuf_remove_header+0x2c>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088c2:	d301      	bcc.n	80088c8 <pbuf_remove_header+0x30>
    return 1;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e02c      	b.n	8008922 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <pbuf_remove_header+0x3a>
    return 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	e027      	b.n	8008922 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	895b      	ldrh	r3, [r3, #10]
 80088da:	89fa      	ldrh	r2, [r7, #14]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d908      	bls.n	80088f2 <pbuf_remove_header+0x5a>
 80088e0:	4b12      	ldr	r3, [pc, #72]	@ (800892c <pbuf_remove_header+0x94>)
 80088e2:	f240 2255 	movw	r2, #597	@ 0x255
 80088e6:	4914      	ldr	r1, [pc, #80]	@ (8008938 <pbuf_remove_header+0xa0>)
 80088e8:	4812      	ldr	r0, [pc, #72]	@ (8008934 <pbuf_remove_header+0x9c>)
 80088ea:	f007 fa0b 	bl	800fd04 <iprintf>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e017      	b.n	8008922 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	441a      	add	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	895a      	ldrh	r2, [r3, #10]
 8008908:	89fb      	ldrh	r3, [r7, #14]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	b29a      	uxth	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	891a      	ldrh	r2, [r3, #8]
 8008916:	89fb      	ldrh	r3, [r7, #14]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	b29a      	uxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	08011e30 	.word	0x08011e30
 8008930:	08011fd0 	.word	0x08011fd0
 8008934:	08011ecc 	.word	0x08011ecc
 8008938:	08011fdc 	.word	0x08011fdc

0800893c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	807b      	strh	r3, [r7, #2]
 8008948:	4613      	mov	r3, r2
 800894a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800894c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008950:	2b00      	cmp	r3, #0
 8008952:	da08      	bge.n	8008966 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008954:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008958:	425b      	negs	r3, r3
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7ff ff9b 	bl	8008898 <pbuf_remove_header>
 8008962:	4603      	mov	r3, r0
 8008964:	e007      	b.n	8008976 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008966:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800896a:	787a      	ldrb	r2, [r7, #1]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff ff1a 	bl	80087a8 <pbuf_add_header_impl>
 8008974:	4603      	mov	r3, r0
  }
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800898a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800898e:	2201      	movs	r2, #1
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7ff ffd2 	bl	800893c <pbuf_header_impl>
 8008998:	4603      	mov	r3, r0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10b      	bne.n	80089ca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d106      	bne.n	80089c6 <pbuf_free+0x22>
 80089b8:	4b38      	ldr	r3, [pc, #224]	@ (8008a9c <pbuf_free+0xf8>)
 80089ba:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80089be:	4938      	ldr	r1, [pc, #224]	@ (8008aa0 <pbuf_free+0xfc>)
 80089c0:	4838      	ldr	r0, [pc, #224]	@ (8008aa4 <pbuf_free+0x100>)
 80089c2:	f007 f99f 	bl	800fd04 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	e063      	b.n	8008a92 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80089ce:	e05c      	b.n	8008a8a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	7b9b      	ldrb	r3, [r3, #14]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <pbuf_free+0x42>
 80089d8:	4b30      	ldr	r3, [pc, #192]	@ (8008a9c <pbuf_free+0xf8>)
 80089da:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80089de:	4932      	ldr	r1, [pc, #200]	@ (8008aa8 <pbuf_free+0x104>)
 80089e0:	4830      	ldr	r0, [pc, #192]	@ (8008aa4 <pbuf_free+0x100>)
 80089e2:	f007 f98f 	bl	800fd04 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	7b9b      	ldrb	r3, [r3, #14]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	739a      	strb	r2, [r3, #14]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	7b9b      	ldrb	r3, [r3, #14]
 80089f6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80089f8:	7dbb      	ldrb	r3, [r7, #22]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d143      	bne.n	8008a86 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	7b1b      	ldrb	r3, [r3, #12]
 8008a08:	f003 030f 	and.w	r3, r3, #15
 8008a0c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	7b5b      	ldrb	r3, [r3, #13]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d011      	beq.n	8008a3e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <pbuf_free+0x90>
 8008a26:	4b1d      	ldr	r3, [pc, #116]	@ (8008a9c <pbuf_free+0xf8>)
 8008a28:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008a2c:	491f      	ldr	r1, [pc, #124]	@ (8008aac <pbuf_free+0x108>)
 8008a2e:	481d      	ldr	r0, [pc, #116]	@ (8008aa4 <pbuf_free+0x100>)
 8008a30:	f007 f968 	bl	800fd04 <iprintf>
        pc->custom_free_function(p);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
 8008a3c:	e01d      	b.n	8008a7a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d104      	bne.n	8008a4e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	2008      	movs	r0, #8
 8008a48:	f7ff f932 	bl	8007cb0 <memp_free>
 8008a4c:	e015      	b.n	8008a7a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d104      	bne.n	8008a5e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	2007      	movs	r0, #7
 8008a58:	f7ff f92a 	bl	8007cb0 <memp_free>
 8008a5c:	e00d      	b.n	8008a7a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d103      	bne.n	8008a6c <pbuf_free+0xc8>
          mem_free(p);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7fe fdbd 	bl	80075e4 <mem_free>
 8008a6a:	e006      	b.n	8008a7a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a9c <pbuf_free+0xf8>)
 8008a6e:	f240 320f 	movw	r2, #783	@ 0x30f
 8008a72:	490f      	ldr	r1, [pc, #60]	@ (8008ab0 <pbuf_free+0x10c>)
 8008a74:	480b      	ldr	r0, [pc, #44]	@ (8008aa4 <pbuf_free+0x100>)
 8008a76:	f007 f945 	bl	800fd04 <iprintf>
        }
      }
      count++;
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	607b      	str	r3, [r7, #4]
 8008a84:	e001      	b.n	8008a8a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008a86:	2300      	movs	r3, #0
 8008a88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d19f      	bne.n	80089d0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	08011e30 	.word	0x08011e30
 8008aa0:	08011fd0 	.word	0x08011fd0
 8008aa4:	08011ecc 	.word	0x08011ecc
 8008aa8:	08011ffc 	.word	0x08011ffc
 8008aac:	08012014 	.word	0x08012014
 8008ab0:	08012038 	.word	0x08012038

08008ab4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008ac0:	e005      	b.n	8008ace <pbuf_clen+0x1a>
    ++len;
 8008ac2:	89fb      	ldrh	r3, [r7, #14]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1f6      	bne.n	8008ac2 <pbuf_clen+0xe>
  }
  return len;
 8008ad4:	89fb      	ldrh	r3, [r7, #14]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
	...

08008ae4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d010      	beq.n	8008b14 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	7b9b      	ldrb	r3, [r3, #14]
 8008af6:	3301      	adds	r3, #1
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	7b9b      	ldrb	r3, [r3, #14]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <pbuf_ref+0x30>
 8008b06:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <pbuf_ref+0x38>)
 8008b08:	f240 3242 	movw	r2, #834	@ 0x342
 8008b0c:	4904      	ldr	r1, [pc, #16]	@ (8008b20 <pbuf_ref+0x3c>)
 8008b0e:	4805      	ldr	r0, [pc, #20]	@ (8008b24 <pbuf_ref+0x40>)
 8008b10:	f007 f8f8 	bl	800fd04 <iprintf>
  }
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	08011e30 	.word	0x08011e30
 8008b20:	0801204c 	.word	0x0801204c
 8008b24:	08011ecc 	.word	0x08011ecc

08008b28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <pbuf_cat+0x16>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d107      	bne.n	8008b4e <pbuf_cat+0x26>
 8008b3e:	4b20      	ldr	r3, [pc, #128]	@ (8008bc0 <pbuf_cat+0x98>)
 8008b40:	f240 3259 	movw	r2, #857	@ 0x359
 8008b44:	491f      	ldr	r1, [pc, #124]	@ (8008bc4 <pbuf_cat+0x9c>)
 8008b46:	4820      	ldr	r0, [pc, #128]	@ (8008bc8 <pbuf_cat+0xa0>)
 8008b48:	f007 f8dc 	bl	800fd04 <iprintf>
 8008b4c:	e034      	b.n	8008bb8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	e00a      	b.n	8008b6a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	891a      	ldrh	r2, [r3, #8]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	891b      	ldrh	r3, [r3, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1f0      	bne.n	8008b54 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	891a      	ldrh	r2, [r3, #8]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	895b      	ldrh	r3, [r3, #10]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d006      	beq.n	8008b8c <pbuf_cat+0x64>
 8008b7e:	4b10      	ldr	r3, [pc, #64]	@ (8008bc0 <pbuf_cat+0x98>)
 8008b80:	f240 3262 	movw	r2, #866	@ 0x362
 8008b84:	4911      	ldr	r1, [pc, #68]	@ (8008bcc <pbuf_cat+0xa4>)
 8008b86:	4810      	ldr	r0, [pc, #64]	@ (8008bc8 <pbuf_cat+0xa0>)
 8008b88:	f007 f8bc 	bl	800fd04 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d006      	beq.n	8008ba2 <pbuf_cat+0x7a>
 8008b94:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc0 <pbuf_cat+0x98>)
 8008b96:	f240 3263 	movw	r2, #867	@ 0x363
 8008b9a:	490d      	ldr	r1, [pc, #52]	@ (8008bd0 <pbuf_cat+0xa8>)
 8008b9c:	480a      	ldr	r0, [pc, #40]	@ (8008bc8 <pbuf_cat+0xa0>)
 8008b9e:	f007 f8b1 	bl	800fd04 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	891a      	ldrh	r2, [r3, #8]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	891b      	ldrh	r3, [r3, #8]
 8008baa:	4413      	add	r3, r2
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	08011e30 	.word	0x08011e30
 8008bc4:	08012060 	.word	0x08012060
 8008bc8:	08011ecc 	.word	0x08011ecc
 8008bcc:	08012098 	.word	0x08012098
 8008bd0:	080120c8 	.word	0x080120c8

08008bd4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008bde:	2300      	movs	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	2300      	movs	r3, #0
 8008be4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d008      	beq.n	8008bfe <pbuf_copy+0x2a>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d005      	beq.n	8008bfe <pbuf_copy+0x2a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	891a      	ldrh	r2, [r3, #8]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	891b      	ldrh	r3, [r3, #8]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d209      	bcs.n	8008c12 <pbuf_copy+0x3e>
 8008bfe:	4b57      	ldr	r3, [pc, #348]	@ (8008d5c <pbuf_copy+0x188>)
 8008c00:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8008c04:	4956      	ldr	r1, [pc, #344]	@ (8008d60 <pbuf_copy+0x18c>)
 8008c06:	4857      	ldr	r0, [pc, #348]	@ (8008d64 <pbuf_copy+0x190>)
 8008c08:	f007 f87c 	bl	800fd04 <iprintf>
 8008c0c:	f06f 030f 	mvn.w	r3, #15
 8008c10:	e09f      	b.n	8008d52 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	895b      	ldrh	r3, [r3, #10]
 8008c16:	461a      	mov	r2, r3
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	1ad2      	subs	r2, r2, r3
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	895b      	ldrh	r3, [r3, #10]
 8008c20:	4619      	mov	r1, r3
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	1acb      	subs	r3, r1, r3
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d306      	bcc.n	8008c38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	895b      	ldrh	r3, [r3, #10]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	e005      	b.n	8008c44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	895b      	ldrh	r3, [r3, #10]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	18d0      	adds	r0, r2, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	4413      	add	r3, r2
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	4619      	mov	r1, r3
 8008c58:	f007 f9bb 	bl	800ffd2 <memcpy>
    offset_to += len;
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	895b      	ldrh	r3, [r3, #10]
 8008c70:	461a      	mov	r2, r3
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d906      	bls.n	8008c86 <pbuf_copy+0xb2>
 8008c78:	4b38      	ldr	r3, [pc, #224]	@ (8008d5c <pbuf_copy+0x188>)
 8008c7a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8008c7e:	493a      	ldr	r1, [pc, #232]	@ (8008d68 <pbuf_copy+0x194>)
 8008c80:	4838      	ldr	r0, [pc, #224]	@ (8008d64 <pbuf_copy+0x190>)
 8008c82:	f007 f83f 	bl	800fd04 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	895b      	ldrh	r3, [r3, #10]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d906      	bls.n	8008ca0 <pbuf_copy+0xcc>
 8008c92:	4b32      	ldr	r3, [pc, #200]	@ (8008d5c <pbuf_copy+0x188>)
 8008c94:	f240 32da 	movw	r2, #986	@ 0x3da
 8008c98:	4934      	ldr	r1, [pc, #208]	@ (8008d6c <pbuf_copy+0x198>)
 8008c9a:	4832      	ldr	r0, [pc, #200]	@ (8008d64 <pbuf_copy+0x190>)
 8008c9c:	f007 f832 	bl	800fd04 <iprintf>
    if (offset_from >= p_from->len) {
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	895b      	ldrh	r3, [r3, #10]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d304      	bcc.n	8008cb6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	895b      	ldrh	r3, [r3, #10]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d114      	bne.n	8008cec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10c      	bne.n	8008cec <pbuf_copy+0x118>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d009      	beq.n	8008cec <pbuf_copy+0x118>
 8008cd8:	4b20      	ldr	r3, [pc, #128]	@ (8008d5c <pbuf_copy+0x188>)
 8008cda:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8008cde:	4924      	ldr	r1, [pc, #144]	@ (8008d70 <pbuf_copy+0x19c>)
 8008ce0:	4820      	ldr	r0, [pc, #128]	@ (8008d64 <pbuf_copy+0x190>)
 8008ce2:	f007 f80f 	bl	800fd04 <iprintf>
 8008ce6:	f06f 030f 	mvn.w	r3, #15
 8008cea:	e032      	b.n	8008d52 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d013      	beq.n	8008d1a <pbuf_copy+0x146>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	895a      	ldrh	r2, [r3, #10]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	891b      	ldrh	r3, [r3, #8]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d10d      	bne.n	8008d1a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d009      	beq.n	8008d1a <pbuf_copy+0x146>
 8008d06:	4b15      	ldr	r3, [pc, #84]	@ (8008d5c <pbuf_copy+0x188>)
 8008d08:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008d0c:	4919      	ldr	r1, [pc, #100]	@ (8008d74 <pbuf_copy+0x1a0>)
 8008d0e:	4815      	ldr	r0, [pc, #84]	@ (8008d64 <pbuf_copy+0x190>)
 8008d10:	f006 fff8 	bl	800fd04 <iprintf>
 8008d14:	f06f 0305 	mvn.w	r3, #5
 8008d18:	e01b      	b.n	8008d52 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d013      	beq.n	8008d48 <pbuf_copy+0x174>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	895a      	ldrh	r2, [r3, #10]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	891b      	ldrh	r3, [r3, #8]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d10d      	bne.n	8008d48 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d009      	beq.n	8008d48 <pbuf_copy+0x174>
 8008d34:	4b09      	ldr	r3, [pc, #36]	@ (8008d5c <pbuf_copy+0x188>)
 8008d36:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008d3a:	490e      	ldr	r1, [pc, #56]	@ (8008d74 <pbuf_copy+0x1a0>)
 8008d3c:	4809      	ldr	r0, [pc, #36]	@ (8008d64 <pbuf_copy+0x190>)
 8008d3e:	f006 ffe1 	bl	800fd04 <iprintf>
 8008d42:	f06f 0305 	mvn.w	r3, #5
 8008d46:	e004      	b.n	8008d52 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f47f af61 	bne.w	8008c12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	08011e30 	.word	0x08011e30
 8008d60:	08012114 	.word	0x08012114
 8008d64:	08011ecc 	.word	0x08011ecc
 8008d68:	08012144 	.word	0x08012144
 8008d6c:	0801215c 	.word	0x0801215c
 8008d70:	08012178 	.word	0x08012178
 8008d74:	08012188 	.word	0x08012188

08008d78 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4611      	mov	r1, r2
 8008d84:	461a      	mov	r2, r3
 8008d86:	460b      	mov	r3, r1
 8008d88:	80fb      	strh	r3, [r7, #6]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d108      	bne.n	8008dae <pbuf_copy_partial+0x36>
 8008d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8008e4c <pbuf_copy_partial+0xd4>)
 8008d9e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008da2:	492b      	ldr	r1, [pc, #172]	@ (8008e50 <pbuf_copy_partial+0xd8>)
 8008da4:	482b      	ldr	r0, [pc, #172]	@ (8008e54 <pbuf_copy_partial+0xdc>)
 8008da6:	f006 ffad 	bl	800fd04 <iprintf>
 8008daa:	2300      	movs	r3, #0
 8008dac:	e04a      	b.n	8008e44 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d108      	bne.n	8008dc6 <pbuf_copy_partial+0x4e>
 8008db4:	4b25      	ldr	r3, [pc, #148]	@ (8008e4c <pbuf_copy_partial+0xd4>)
 8008db6:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008dba:	4927      	ldr	r1, [pc, #156]	@ (8008e58 <pbuf_copy_partial+0xe0>)
 8008dbc:	4825      	ldr	r0, [pc, #148]	@ (8008e54 <pbuf_copy_partial+0xdc>)
 8008dbe:	f006 ffa1 	bl	800fd04 <iprintf>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e03e      	b.n	8008e44 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	61fb      	str	r3, [r7, #28]
 8008dca:	e034      	b.n	8008e36 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008dcc:	88bb      	ldrh	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <pbuf_copy_partial+0x70>
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	895b      	ldrh	r3, [r3, #10]
 8008dd6:	88ba      	ldrh	r2, [r7, #4]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d305      	bcc.n	8008de8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	895b      	ldrh	r3, [r3, #10]
 8008de0:	88ba      	ldrh	r2, [r7, #4]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	80bb      	strh	r3, [r7, #4]
 8008de6:	e023      	b.n	8008e30 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	895a      	ldrh	r2, [r3, #10]
 8008dec:	88bb      	ldrh	r3, [r7, #4]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008df2:	8b3a      	ldrh	r2, [r7, #24]
 8008df4:	88fb      	ldrh	r3, [r7, #6]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d901      	bls.n	8008dfe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008dfa:	88fb      	ldrh	r3, [r7, #6]
 8008dfc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008dfe:	8b7b      	ldrh	r3, [r7, #26]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	18d0      	adds	r0, r2, r3
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	88bb      	ldrh	r3, [r7, #4]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	8b3a      	ldrh	r2, [r7, #24]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	f007 f8df 	bl	800ffd2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008e14:	8afa      	ldrh	r2, [r7, #22]
 8008e16:	8b3b      	ldrh	r3, [r7, #24]
 8008e18:	4413      	add	r3, r2
 8008e1a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008e1c:	8b7a      	ldrh	r2, [r7, #26]
 8008e1e:	8b3b      	ldrh	r3, [r7, #24]
 8008e20:	4413      	add	r3, r2
 8008e22:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008e24:	88fa      	ldrh	r2, [r7, #6]
 8008e26:	8b3b      	ldrh	r3, [r7, #24]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	61fb      	str	r3, [r7, #28]
 8008e36:	88fb      	ldrh	r3, [r7, #6]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <pbuf_copy_partial+0xca>
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1c4      	bne.n	8008dcc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008e42:	8afb      	ldrh	r3, [r7, #22]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	08011e30 	.word	0x08011e30
 8008e50:	080121b4 	.word	0x080121b4
 8008e54:	08011ecc 	.word	0x08011ecc
 8008e58:	080121d4 	.word	0x080121d4

08008e5c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	4603      	mov	r3, r0
 8008e64:	603a      	str	r2, [r7, #0]
 8008e66:	71fb      	strb	r3, [r7, #7]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	8919      	ldrh	r1, [r3, #8]
 8008e70:	88ba      	ldrh	r2, [r7, #4]
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff faad 	bl	80083d4 <pbuf_alloc>
 8008e7a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <pbuf_clone+0x2a>
    return NULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e011      	b.n	8008eaa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f7ff fea3 	bl	8008bd4 <pbuf_copy>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008e92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d006      	beq.n	8008ea8 <pbuf_clone+0x4c>
 8008e9a:	4b06      	ldr	r3, [pc, #24]	@ (8008eb4 <pbuf_clone+0x58>)
 8008e9c:	f240 5224 	movw	r2, #1316	@ 0x524
 8008ea0:	4905      	ldr	r1, [pc, #20]	@ (8008eb8 <pbuf_clone+0x5c>)
 8008ea2:	4806      	ldr	r0, [pc, #24]	@ (8008ebc <pbuf_clone+0x60>)
 8008ea4:	f006 ff2e 	bl	800fd04 <iprintf>
  return q;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	08011e30 	.word	0x08011e30
 8008eb8:	080122e0 	.word	0x080122e0
 8008ebc:	08011ecc 	.word	0x08011ecc

08008ec0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008ec4:	f006 fe1e 	bl	800fb04 <rand>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	4b01      	ldr	r3, [pc, #4]	@ (8008ee0 <tcp_init+0x20>)
 8008eda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008edc:	bf00      	nop
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000020 	.word	0x20000020

08008ee4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	7d1b      	ldrb	r3, [r3, #20]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d105      	bne.n	8008f00 <tcp_free+0x1c>
 8008ef4:	4b06      	ldr	r3, [pc, #24]	@ (8008f10 <tcp_free+0x2c>)
 8008ef6:	22d4      	movs	r2, #212	@ 0xd4
 8008ef8:	4906      	ldr	r1, [pc, #24]	@ (8008f14 <tcp_free+0x30>)
 8008efa:	4807      	ldr	r0, [pc, #28]	@ (8008f18 <tcp_free+0x34>)
 8008efc:	f006 ff02 	bl	800fd04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	2001      	movs	r0, #1
 8008f04:	f7fe fed4 	bl	8007cb0 <memp_free>
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	0801236c 	.word	0x0801236c
 8008f14:	080123d4 	.word	0x080123d4
 8008f18:	080123e8 	.word	0x080123e8

08008f1c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7d1b      	ldrb	r3, [r3, #20]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d105      	bne.n	8008f38 <tcp_free_listen+0x1c>
 8008f2c:	4b06      	ldr	r3, [pc, #24]	@ (8008f48 <tcp_free_listen+0x2c>)
 8008f2e:	22df      	movs	r2, #223	@ 0xdf
 8008f30:	4906      	ldr	r1, [pc, #24]	@ (8008f4c <tcp_free_listen+0x30>)
 8008f32:	4807      	ldr	r0, [pc, #28]	@ (8008f50 <tcp_free_listen+0x34>)
 8008f34:	f006 fee6 	bl	800fd04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008f38:	6879      	ldr	r1, [r7, #4]
 8008f3a:	2002      	movs	r0, #2
 8008f3c:	f7fe feb8 	bl	8007cb0 <memp_free>
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	0801236c 	.word	0x0801236c
 8008f4c:	08012410 	.word	0x08012410
 8008f50:	080123e8 	.word	0x080123e8

08008f54 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008f58:	f001 f846 	bl	8009fe8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008f5c:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <tcp_tmr+0x28>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	3301      	adds	r3, #1
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	4b05      	ldr	r3, [pc, #20]	@ (8008f7c <tcp_tmr+0x28>)
 8008f66:	701a      	strb	r2, [r3, #0]
 8008f68:	4b04      	ldr	r3, [pc, #16]	@ (8008f7c <tcp_tmr+0x28>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008f74:	f000 fcf6 	bl	8009964 <tcp_slowtmr>
  }
}
 8008f78:	bf00      	nop
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	2000b779 	.word	0x2000b779

08008f80 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d105      	bne.n	8008f9c <tcp_remove_listener+0x1c>
 8008f90:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc8 <tcp_remove_listener+0x48>)
 8008f92:	22ff      	movs	r2, #255	@ 0xff
 8008f94:	490d      	ldr	r1, [pc, #52]	@ (8008fcc <tcp_remove_listener+0x4c>)
 8008f96:	480e      	ldr	r0, [pc, #56]	@ (8008fd0 <tcp_remove_listener+0x50>)
 8008f98:	f006 feb4 	bl	800fd04 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	e00a      	b.n	8008fb8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d102      	bne.n	8008fb2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f1      	bne.n	8008fa2 <tcp_remove_listener+0x22>
    }
  }
}
 8008fbe:	bf00      	nop
 8008fc0:	bf00      	nop
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	0801236c 	.word	0x0801236c
 8008fcc:	0801242c 	.word	0x0801242c
 8008fd0:	080123e8 	.word	0x080123e8

08008fd4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <tcp_listen_closed+0x1c>
 8008fe2:	4b14      	ldr	r3, [pc, #80]	@ (8009034 <tcp_listen_closed+0x60>)
 8008fe4:	f240 1211 	movw	r2, #273	@ 0x111
 8008fe8:	4913      	ldr	r1, [pc, #76]	@ (8009038 <tcp_listen_closed+0x64>)
 8008fea:	4814      	ldr	r0, [pc, #80]	@ (800903c <tcp_listen_closed+0x68>)
 8008fec:	f006 fe8a 	bl	800fd04 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	7d1b      	ldrb	r3, [r3, #20]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d006      	beq.n	8009006 <tcp_listen_closed+0x32>
 8008ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8009034 <tcp_listen_closed+0x60>)
 8008ffa:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008ffe:	4910      	ldr	r1, [pc, #64]	@ (8009040 <tcp_listen_closed+0x6c>)
 8009000:	480e      	ldr	r0, [pc, #56]	@ (800903c <tcp_listen_closed+0x68>)
 8009002:	f006 fe7f 	bl	800fd04 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009006:	2301      	movs	r3, #1
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	e00b      	b.n	8009024 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800900c:	4a0d      	ldr	r2, [pc, #52]	@ (8009044 <tcp_listen_closed+0x70>)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff ffb1 	bl	8008f80 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3301      	adds	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b03      	cmp	r3, #3
 8009028:	d9f0      	bls.n	800900c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800902a:	bf00      	nop
 800902c:	bf00      	nop
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	0801236c 	.word	0x0801236c
 8009038:	08012454 	.word	0x08012454
 800903c:	080123e8 	.word	0x080123e8
 8009040:	08012460 	.word	0x08012460
 8009044:	0801407c 	.word	0x0801407c

08009048 <tcp_backlog_accepted>:
 *
 * @param pcb the connection pcb which is now fully accepted (or closed/aborted)
 */
void
tcp_backlog_accepted(struct tcp_pcb *pcb)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <tcp_backlog_accepted+0x1c>
 8009056:	4b17      	ldr	r3, [pc, #92]	@ (80090b4 <tcp_backlog_accepted+0x6c>)
 8009058:	f240 123f 	movw	r2, #319	@ 0x13f
 800905c:	4916      	ldr	r1, [pc, #88]	@ (80090b8 <tcp_backlog_accepted+0x70>)
 800905e:	4817      	ldr	r0, [pc, #92]	@ (80090bc <tcp_backlog_accepted+0x74>)
 8009060:	f006 fe50 	bl	800fd04 <iprintf>
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb->flags & TF_BACKLOGPEND) != 0) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	8b5b      	ldrh	r3, [r3, #26]
 8009068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800906c:	2b00      	cmp	r3, #0
 800906e:	d01c      	beq.n	80090aa <tcp_backlog_accepted+0x62>
    if (pcb->listener != NULL) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d018      	beq.n	80090aa <tcp_backlog_accepted+0x62>
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800907c:	7f5b      	ldrb	r3, [r3, #29]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d106      	bne.n	8009090 <tcp_backlog_accepted+0x48>
 8009082:	4b0c      	ldr	r3, [pc, #48]	@ (80090b4 <tcp_backlog_accepted+0x6c>)
 8009084:	f240 1243 	movw	r2, #323	@ 0x143
 8009088:	490d      	ldr	r1, [pc, #52]	@ (80090c0 <tcp_backlog_accepted+0x78>)
 800908a:	480c      	ldr	r0, [pc, #48]	@ (80090bc <tcp_backlog_accepted+0x74>)
 800908c:	f006 fe3a 	bl	800fd04 <iprintf>
      pcb->listener->accepts_pending--;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009094:	7f5a      	ldrb	r2, [r3, #29]
 8009096:	3a01      	subs	r2, #1
 8009098:	b2d2      	uxtb	r2, r2
 800909a:	775a      	strb	r2, [r3, #29]
      tcp_clear_flags(pcb, TF_BACKLOGPEND);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	8b5b      	ldrh	r3, [r3, #26]
 80090a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	0801236c 	.word	0x0801236c
 80090b8:	08012454 	.word	0x08012454
 80090bc:	080123e8 	.word	0x080123e8
 80090c0:	08012478 	.word	0x08012478

080090c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80090c4:	b5b0      	push	{r4, r5, r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af04      	add	r7, sp, #16
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <tcp_close_shutdown+0x20>
 80090d6:	4b63      	ldr	r3, [pc, #396]	@ (8009264 <tcp_close_shutdown+0x1a0>)
 80090d8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80090dc:	4962      	ldr	r1, [pc, #392]	@ (8009268 <tcp_close_shutdown+0x1a4>)
 80090de:	4863      	ldr	r0, [pc, #396]	@ (800926c <tcp_close_shutdown+0x1a8>)
 80090e0:	f006 fe10 	bl	800fd04 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d067      	beq.n	80091ba <tcp_close_shutdown+0xf6>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	7d1b      	ldrb	r3, [r3, #20]
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	d003      	beq.n	80090fa <tcp_close_shutdown+0x36>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	7d1b      	ldrb	r3, [r3, #20]
 80090f6:	2b07      	cmp	r3, #7
 80090f8:	d15f      	bne.n	80091ba <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d105      	bne.n	800910e <tcp_close_shutdown+0x4a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009106:	f640 3268 	movw	r2, #2920	@ 0xb68
 800910a:	4293      	cmp	r3, r2
 800910c:	d055      	beq.n	80091ba <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	8b5b      	ldrh	r3, [r3, #26]
 8009112:	f003 0310 	and.w	r3, r3, #16
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <tcp_close_shutdown+0x64>
 800911a:	4b52      	ldr	r3, [pc, #328]	@ (8009264 <tcp_close_shutdown+0x1a0>)
 800911c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8009120:	4953      	ldr	r1, [pc, #332]	@ (8009270 <tcp_close_shutdown+0x1ac>)
 8009122:	4852      	ldr	r0, [pc, #328]	@ (800926c <tcp_close_shutdown+0x1a8>)
 8009124:	f006 fdee 	bl	800fd04 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009130:	687d      	ldr	r5, [r7, #4]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3304      	adds	r3, #4
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	8ad2      	ldrh	r2, [r2, #22]
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	8b09      	ldrh	r1, [r1, #24]
 800913e:	9102      	str	r1, [sp, #8]
 8009140:	9201      	str	r2, [sp, #4]
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	462b      	mov	r3, r5
 8009146:	4622      	mov	r2, r4
 8009148:	4601      	mov	r1, r0
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f005 fcea 	bl	800eb24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 faad 	bl	800a6b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009156:	4b47      	ldr	r3, [pc, #284]	@ (8009274 <tcp_close_shutdown+0x1b0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d105      	bne.n	800916c <tcp_close_shutdown+0xa8>
 8009160:	4b44      	ldr	r3, [pc, #272]	@ (8009274 <tcp_close_shutdown+0x1b0>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	4a43      	ldr	r2, [pc, #268]	@ (8009274 <tcp_close_shutdown+0x1b0>)
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	e013      	b.n	8009194 <tcp_close_shutdown+0xd0>
 800916c:	4b41      	ldr	r3, [pc, #260]	@ (8009274 <tcp_close_shutdown+0x1b0>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	e00c      	b.n	800918e <tcp_close_shutdown+0xca>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	429a      	cmp	r2, r3
 800917c:	d104      	bne.n	8009188 <tcp_close_shutdown+0xc4>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	60da      	str	r2, [r3, #12]
 8009186:	e005      	b.n	8009194 <tcp_close_shutdown+0xd0>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	60fb      	str	r3, [r7, #12]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1ef      	bne.n	8009174 <tcp_close_shutdown+0xb0>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	60da      	str	r2, [r3, #12]
 800919a:	4b37      	ldr	r3, [pc, #220]	@ (8009278 <tcp_close_shutdown+0x1b4>)
 800919c:	2201      	movs	r2, #1
 800919e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80091a0:	4b36      	ldr	r3, [pc, #216]	@ (800927c <tcp_close_shutdown+0x1b8>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d102      	bne.n	80091b0 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80091aa:	f003 ff61 	bl	800d070 <tcp_trigger_input_pcb_close>
 80091ae:	e002      	b.n	80091b6 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7ff fe97 	bl	8008ee4 <tcp_free>
      }
      return ERR_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	e050      	b.n	800925c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	7d1b      	ldrb	r3, [r3, #20]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d03b      	beq.n	800923a <tcp_close_shutdown+0x176>
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	dc44      	bgt.n	8009250 <tcp_close_shutdown+0x18c>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <tcp_close_shutdown+0x10c>
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d02a      	beq.n	8009224 <tcp_close_shutdown+0x160>
 80091ce:	e03f      	b.n	8009250 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	8adb      	ldrh	r3, [r3, #22]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d021      	beq.n	800921c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80091d8:	4b29      	ldr	r3, [pc, #164]	@ (8009280 <tcp_close_shutdown+0x1bc>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d105      	bne.n	80091ee <tcp_close_shutdown+0x12a>
 80091e2:	4b27      	ldr	r3, [pc, #156]	@ (8009280 <tcp_close_shutdown+0x1bc>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	4a25      	ldr	r2, [pc, #148]	@ (8009280 <tcp_close_shutdown+0x1bc>)
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	e013      	b.n	8009216 <tcp_close_shutdown+0x152>
 80091ee:	4b24      	ldr	r3, [pc, #144]	@ (8009280 <tcp_close_shutdown+0x1bc>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	60bb      	str	r3, [r7, #8]
 80091f4:	e00c      	b.n	8009210 <tcp_close_shutdown+0x14c>
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d104      	bne.n	800920a <tcp_close_shutdown+0x146>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	60da      	str	r2, [r3, #12]
 8009208:	e005      	b.n	8009216 <tcp_close_shutdown+0x152>
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	60bb      	str	r3, [r7, #8]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1ef      	bne.n	80091f6 <tcp_close_shutdown+0x132>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff fe61 	bl	8008ee4 <tcp_free>
      break;
 8009222:	e01a      	b.n	800925a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff fed5 	bl	8008fd4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	4815      	ldr	r0, [pc, #84]	@ (8009284 <tcp_close_shutdown+0x1c0>)
 800922e:	f001 fa93 	bl	800a758 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff fe72 	bl	8008f1c <tcp_free_listen>
      break;
 8009238:	e00f      	b.n	800925a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	480d      	ldr	r0, [pc, #52]	@ (8009274 <tcp_close_shutdown+0x1b0>)
 800923e:	f001 fa8b 	bl	800a758 <tcp_pcb_remove>
 8009242:	4b0d      	ldr	r3, [pc, #52]	@ (8009278 <tcp_close_shutdown+0x1b4>)
 8009244:	2201      	movs	r2, #1
 8009246:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff fe4b 	bl	8008ee4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800924e:	e004      	b.n	800925a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f819 	bl	8009288 <tcp_close_shutdown_fin>
 8009256:	4603      	mov	r3, r0
 8009258:	e000      	b.n	800925c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bdb0      	pop	{r4, r5, r7, pc}
 8009264:	0801236c 	.word	0x0801236c
 8009268:	08012490 	.word	0x08012490
 800926c:	080123e8 	.word	0x080123e8
 8009270:	080124b0 	.word	0x080124b0
 8009274:	2000b770 	.word	0x2000b770
 8009278:	2000b778 	.word	0x2000b778
 800927c:	2000b7b0 	.word	0x2000b7b0
 8009280:	2000b768 	.word	0x2000b768
 8009284:	2000b76c 	.word	0x2000b76c

08009288 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d106      	bne.n	80092a4 <tcp_close_shutdown_fin+0x1c>
 8009296:	4b2f      	ldr	r3, [pc, #188]	@ (8009354 <tcp_close_shutdown_fin+0xcc>)
 8009298:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800929c:	492e      	ldr	r1, [pc, #184]	@ (8009358 <tcp_close_shutdown_fin+0xd0>)
 800929e:	482f      	ldr	r0, [pc, #188]	@ (800935c <tcp_close_shutdown_fin+0xd4>)
 80092a0:	f006 fd30 	bl	800fd04 <iprintf>

  switch (pcb->state) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7d1b      	ldrb	r3, [r3, #20]
 80092a8:	2b07      	cmp	r3, #7
 80092aa:	d023      	beq.n	80092f4 <tcp_close_shutdown_fin+0x6c>
 80092ac:	2b07      	cmp	r3, #7
 80092ae:	dc2e      	bgt.n	800930e <tcp_close_shutdown_fin+0x86>
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d002      	beq.n	80092ba <tcp_close_shutdown_fin+0x32>
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	d010      	beq.n	80092da <tcp_close_shutdown_fin+0x52>
 80092b8:	e029      	b.n	800930e <tcp_close_shutdown_fin+0x86>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f004 fd40 	bl	800dd40 <tcp_send_fin>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80092c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d122      	bne.n	8009312 <tcp_close_shutdown_fin+0x8a>
        tcp_backlog_accepted(pcb);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff febb 	bl	8009048 <tcp_backlog_accepted>
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2205      	movs	r2, #5
 80092d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80092d8:	e01b      	b.n	8009312 <tcp_close_shutdown_fin+0x8a>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f004 fd30 	bl	800dd40 <tcp_send_fin>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80092e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d114      	bne.n	8009316 <tcp_close_shutdown_fin+0x8e>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2205      	movs	r2, #5
 80092f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80092f2:	e010      	b.n	8009316 <tcp_close_shutdown_fin+0x8e>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f004 fd23 	bl	800dd40 <tcp_send_fin>
 80092fa:	4603      	mov	r3, r0
 80092fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80092fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <tcp_close_shutdown_fin+0x92>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2209      	movs	r2, #9
 800930a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800930c:	e005      	b.n	800931a <tcp_close_shutdown_fin+0x92>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	e01c      	b.n	800934c <tcp_close_shutdown_fin+0xc4>
      break;
 8009312:	bf00      	nop
 8009314:	e002      	b.n	800931c <tcp_close_shutdown_fin+0x94>
      break;
 8009316:	bf00      	nop
 8009318:	e000      	b.n	800931c <tcp_close_shutdown_fin+0x94>
      break;
 800931a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800931c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d103      	bne.n	800932c <tcp_close_shutdown_fin+0xa4>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f004 fe49 	bl	800dfbc <tcp_output>
 800932a:	e00d      	b.n	8009348 <tcp_close_shutdown_fin+0xc0>
  } else if (err == ERR_MEM) {
 800932c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009334:	d108      	bne.n	8009348 <tcp_close_shutdown_fin+0xc0>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	8b5b      	ldrh	r3, [r3, #26]
 800933a:	f043 0308 	orr.w	r3, r3, #8
 800933e:	b29a      	uxth	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	e001      	b.n	800934c <tcp_close_shutdown_fin+0xc4>
  }
  return err;
 8009348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	0801236c 	.word	0x0801236c
 8009358:	08012454 	.word	0x08012454
 800935c:	080123e8 	.word	0x080123e8

08009360 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d109      	bne.n	8009382 <tcp_close+0x22>
 800936e:	4b0f      	ldr	r3, [pc, #60]	@ (80093ac <tcp_close+0x4c>)
 8009370:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8009374:	490e      	ldr	r1, [pc, #56]	@ (80093b0 <tcp_close+0x50>)
 8009376:	480f      	ldr	r0, [pc, #60]	@ (80093b4 <tcp_close+0x54>)
 8009378:	f006 fcc4 	bl	800fd04 <iprintf>
 800937c:	f06f 030f 	mvn.w	r3, #15
 8009380:	e00f      	b.n	80093a2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	7d1b      	ldrb	r3, [r3, #20]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d006      	beq.n	8009398 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	8b5b      	ldrh	r3, [r3, #26]
 800938e:	f043 0310 	orr.w	r3, r3, #16
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009398:	2101      	movs	r1, #1
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff fe92 	bl	80090c4 <tcp_close_shutdown>
 80093a0:	4603      	mov	r3, r0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	0801236c 	.word	0x0801236c
 80093b0:	080124cc 	.word	0x080124cc
 80093b4:	080123e8 	.word	0x080123e8

080093b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08e      	sub	sp, #56	@ 0x38
 80093bc:	af04      	add	r7, sp, #16
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d107      	bne.n	80093d8 <tcp_abandon+0x20>
 80093c8:	4b53      	ldr	r3, [pc, #332]	@ (8009518 <tcp_abandon+0x160>)
 80093ca:	f240 223d 	movw	r2, #573	@ 0x23d
 80093ce:	4953      	ldr	r1, [pc, #332]	@ (800951c <tcp_abandon+0x164>)
 80093d0:	4853      	ldr	r0, [pc, #332]	@ (8009520 <tcp_abandon+0x168>)
 80093d2:	f006 fc97 	bl	800fd04 <iprintf>
 80093d6:	e09c      	b.n	8009512 <tcp_abandon+0x15a>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7d1b      	ldrb	r3, [r3, #20]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d106      	bne.n	80093ee <tcp_abandon+0x36>
 80093e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009518 <tcp_abandon+0x160>)
 80093e2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80093e6:	494f      	ldr	r1, [pc, #316]	@ (8009524 <tcp_abandon+0x16c>)
 80093e8:	484d      	ldr	r0, [pc, #308]	@ (8009520 <tcp_abandon+0x168>)
 80093ea:	f006 fc8b 	bl	800fd04 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	7d1b      	ldrb	r3, [r3, #20]
 80093f2:	2b0a      	cmp	r3, #10
 80093f4:	d107      	bne.n	8009406 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80093f6:	6879      	ldr	r1, [r7, #4]
 80093f8:	484b      	ldr	r0, [pc, #300]	@ (8009528 <tcp_abandon+0x170>)
 80093fa:	f001 f9ad 	bl	800a758 <tcp_pcb_remove>
    tcp_free(pcb);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7ff fd70 	bl	8008ee4 <tcp_free>
 8009404:	e085      	b.n	8009512 <tcp_abandon+0x15a>
  } else {
    int send_rst = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009412:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009418:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009420:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	7d1b      	ldrb	r3, [r3, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d126      	bne.n	800947e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	8adb      	ldrh	r3, [r3, #22]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d02e      	beq.n	8009496 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009438:	4b3c      	ldr	r3, [pc, #240]	@ (800952c <tcp_abandon+0x174>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	429a      	cmp	r2, r3
 8009440:	d105      	bne.n	800944e <tcp_abandon+0x96>
 8009442:	4b3a      	ldr	r3, [pc, #232]	@ (800952c <tcp_abandon+0x174>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	4a38      	ldr	r2, [pc, #224]	@ (800952c <tcp_abandon+0x174>)
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	e013      	b.n	8009476 <tcp_abandon+0xbe>
 800944e:	4b37      	ldr	r3, [pc, #220]	@ (800952c <tcp_abandon+0x174>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	61fb      	str	r3, [r7, #28]
 8009454:	e00c      	b.n	8009470 <tcp_abandon+0xb8>
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	429a      	cmp	r2, r3
 800945e:	d104      	bne.n	800946a <tcp_abandon+0xb2>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68da      	ldr	r2, [r3, #12]
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	60da      	str	r2, [r3, #12]
 8009468:	e005      	b.n	8009476 <tcp_abandon+0xbe>
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	61fb      	str	r3, [r7, #28]
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1ef      	bne.n	8009456 <tcp_abandon+0x9e>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	60da      	str	r2, [r3, #12]
 800947c:	e00b      	b.n	8009496 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	8adb      	ldrh	r3, [r3, #22]
 8009486:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	4829      	ldr	r0, [pc, #164]	@ (8009530 <tcp_abandon+0x178>)
 800948c:	f001 f964 	bl	800a758 <tcp_pcb_remove>
 8009490:	4b28      	ldr	r3, [pc, #160]	@ (8009534 <tcp_abandon+0x17c>)
 8009492:	2201      	movs	r2, #1
 8009494:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800949a:	2b00      	cmp	r3, #0
 800949c:	d004      	beq.n	80094a8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fe82 	bl	800a1ac <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d004      	beq.n	80094ba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 fe79 	bl	800a1ac <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fe70 	bl	800a1ac <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fdbb 	bl	8009048 <tcp_backlog_accepted>
    if (send_rst) {
 80094d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00e      	beq.n	80094f6 <tcp_abandon+0x13e>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	3304      	adds	r3, #4
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	8b12      	ldrh	r2, [r2, #24]
 80094e2:	9202      	str	r2, [sp, #8]
 80094e4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80094e6:	9201      	str	r2, [sp, #4]
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	460b      	mov	r3, r1
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	69b9      	ldr	r1, [r7, #24]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f005 fb17 	bl	800eb24 <tcp_rst>
    }
    last_state = pcb->state;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	7d1b      	ldrb	r3, [r3, #20]
 80094fa:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7ff fcf1 	bl	8008ee4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <tcp_abandon+0x15a>
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f06f 010c 	mvn.w	r1, #12
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	4798      	blx	r3
  }
}
 8009512:	3728      	adds	r7, #40	@ 0x28
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	0801236c 	.word	0x0801236c
 800951c:	08012500 	.word	0x08012500
 8009520:	080123e8 	.word	0x080123e8
 8009524:	0801251c 	.word	0x0801251c
 8009528:	2000b774 	.word	0x2000b774
 800952c:	2000b768 	.word	0x2000b768
 8009530:	2000b770 	.word	0x2000b770
 8009534:	2000b778 	.word	0x2000b778

08009538 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009540:	2101      	movs	r1, #1
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff ff38 	bl	80093b8 <tcp_abandon>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d106      	bne.n	800956c <tcp_update_rcv_ann_wnd+0x1c>
 800955e:	4b25      	ldr	r3, [pc, #148]	@ (80095f4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009560:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009564:	4924      	ldr	r1, [pc, #144]	@ (80095f8 <tcp_update_rcv_ann_wnd+0xa8>)
 8009566:	4825      	ldr	r0, [pc, #148]	@ (80095fc <tcp_update_rcv_ann_wnd+0xac>)
 8009568:	f006 fbcc 	bl	800fd04 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009574:	4413      	add	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009580:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 8009584:	428a      	cmp	r2, r1
 8009586:	bf28      	it	cs
 8009588:	460a      	movcs	r2, r1
 800958a:	b292      	uxth	r2, r2
 800958c:	4413      	add	r3, r2
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	db08      	blt.n	80095a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	e020      	b.n	80095ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	dd03      	ble.n	80095be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80095bc:	e014      	b.n	80095e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095d0:	d306      	bcc.n	80095e0 <tcp_update_rcv_ann_wnd+0x90>
 80095d2:	4b08      	ldr	r3, [pc, #32]	@ (80095f4 <tcp_update_rcv_ann_wnd+0xa4>)
 80095d4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80095d8:	4909      	ldr	r1, [pc, #36]	@ (8009600 <tcp_update_rcv_ann_wnd+0xb0>)
 80095da:	4808      	ldr	r0, [pc, #32]	@ (80095fc <tcp_update_rcv_ann_wnd+0xac>)
 80095dc:	f006 fb92 	bl	800fd04 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80095e8:	2300      	movs	r3, #0
  }
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	0801236c 	.word	0x0801236c
 80095f8:	08012648 	.word	0x08012648
 80095fc:	080123e8 	.word	0x080123e8
 8009600:	0801266c 	.word	0x0801266c

08009604 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d107      	bne.n	8009626 <tcp_recved+0x22>
 8009616:	4b20      	ldr	r3, [pc, #128]	@ (8009698 <tcp_recved+0x94>)
 8009618:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800961c:	491f      	ldr	r1, [pc, #124]	@ (800969c <tcp_recved+0x98>)
 800961e:	4820      	ldr	r0, [pc, #128]	@ (80096a0 <tcp_recved+0x9c>)
 8009620:	f006 fb70 	bl	800fd04 <iprintf>
 8009624:	e034      	b.n	8009690 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	7d1b      	ldrb	r3, [r3, #20]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d106      	bne.n	800963c <tcp_recved+0x38>
 800962e:	4b1a      	ldr	r3, [pc, #104]	@ (8009698 <tcp_recved+0x94>)
 8009630:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009634:	491b      	ldr	r1, [pc, #108]	@ (80096a4 <tcp_recved+0xa0>)
 8009636:	481a      	ldr	r0, [pc, #104]	@ (80096a0 <tcp_recved+0x9c>)
 8009638:	f006 fb64 	bl	800fd04 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009640:	887b      	ldrh	r3, [r7, #2]
 8009642:	4413      	add	r3, r2
 8009644:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009646:	89fb      	ldrh	r3, [r7, #14]
 8009648:	f640 3268 	movw	r2, #2920	@ 0xb68
 800964c:	4293      	cmp	r3, r2
 800964e:	d804      	bhi.n	800965a <tcp_recved+0x56>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009654:	89fa      	ldrh	r2, [r7, #14]
 8009656:	429a      	cmp	r2, r3
 8009658:	d204      	bcs.n	8009664 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f640 3268 	movw	r2, #2920	@ 0xb68
 8009660:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009662:	e002      	b.n	800966a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	89fa      	ldrh	r2, [r7, #14]
 8009668:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff ff70 	bl	8009550 <tcp_update_rcv_ann_wnd>
 8009670:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8009678:	4293      	cmp	r3, r2
 800967a:	d909      	bls.n	8009690 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	8b5b      	ldrh	r3, [r3, #26]
 8009680:	f043 0302 	orr.w	r3, r3, #2
 8009684:	b29a      	uxth	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f004 fc96 	bl	800dfbc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	0801236c 	.word	0x0801236c
 800969c:	08012688 	.word	0x08012688
 80096a0:	080123e8 	.word	0x080123e8
 80096a4:	080126a0 	.word	0x080126a0

080096a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80096b2:	4b1e      	ldr	r3, [pc, #120]	@ (800972c <tcp_new_port+0x84>)
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	3301      	adds	r3, #1
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	4b1c      	ldr	r3, [pc, #112]	@ (800972c <tcp_new_port+0x84>)
 80096bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80096be:	4b1b      	ldr	r3, [pc, #108]	@ (800972c <tcp_new_port+0x84>)
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d103      	bne.n	80096d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80096ca:	4b18      	ldr	r3, [pc, #96]	@ (800972c <tcp_new_port+0x84>)
 80096cc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80096d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80096d2:	2300      	movs	r3, #0
 80096d4:	71fb      	strb	r3, [r7, #7]
 80096d6:	e01e      	b.n	8009716 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	4a15      	ldr	r2, [pc, #84]	@ (8009730 <tcp_new_port+0x88>)
 80096dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	e011      	b.n	800970a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	8ada      	ldrh	r2, [r3, #22]
 80096ea:	4b10      	ldr	r3, [pc, #64]	@ (800972c <tcp_new_port+0x84>)
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d108      	bne.n	8009704 <tcp_new_port+0x5c>
        n++;
 80096f2:	88bb      	ldrh	r3, [r7, #4]
 80096f4:	3301      	adds	r3, #1
 80096f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80096f8:	88bb      	ldrh	r3, [r7, #4]
 80096fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096fe:	d3d8      	bcc.n	80096b2 <tcp_new_port+0xa>
          return 0;
 8009700:	2300      	movs	r3, #0
 8009702:	e00d      	b.n	8009720 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	603b      	str	r3, [r7, #0]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1ea      	bne.n	80096e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	3301      	adds	r3, #1
 8009714:	71fb      	strb	r3, [r7, #7]
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	2b03      	cmp	r3, #3
 800971a:	d9dd      	bls.n	80096d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800971c:	4b03      	ldr	r3, [pc, #12]	@ (800972c <tcp_new_port+0x84>)
 800971e:	881b      	ldrh	r3, [r3, #0]
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	20000020 	.word	0x20000020
 8009730:	0801407c 	.word	0x0801407c

08009734 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08a      	sub	sp, #40	@ 0x28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	603b      	str	r3, [r7, #0]
 8009740:	4613      	mov	r3, r2
 8009742:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8009744:	2300      	movs	r3, #0
 8009746:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <tcp_connect+0x2e>
 800974e:	4b7d      	ldr	r3, [pc, #500]	@ (8009944 <tcp_connect+0x210>)
 8009750:	f240 4235 	movw	r2, #1077	@ 0x435
 8009754:	497c      	ldr	r1, [pc, #496]	@ (8009948 <tcp_connect+0x214>)
 8009756:	487d      	ldr	r0, [pc, #500]	@ (800994c <tcp_connect+0x218>)
 8009758:	f006 fad4 	bl	800fd04 <iprintf>
 800975c:	f06f 030f 	mvn.w	r3, #15
 8009760:	e0ec      	b.n	800993c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d109      	bne.n	800977c <tcp_connect+0x48>
 8009768:	4b76      	ldr	r3, [pc, #472]	@ (8009944 <tcp_connect+0x210>)
 800976a:	f240 4236 	movw	r2, #1078	@ 0x436
 800976e:	4978      	ldr	r1, [pc, #480]	@ (8009950 <tcp_connect+0x21c>)
 8009770:	4876      	ldr	r0, [pc, #472]	@ (800994c <tcp_connect+0x218>)
 8009772:	f006 fac7 	bl	800fd04 <iprintf>
 8009776:	f06f 030f 	mvn.w	r3, #15
 800977a:	e0df      	b.n	800993c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	7d1b      	ldrb	r3, [r3, #20]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d009      	beq.n	8009798 <tcp_connect+0x64>
 8009784:	4b6f      	ldr	r3, [pc, #444]	@ (8009944 <tcp_connect+0x210>)
 8009786:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800978a:	4972      	ldr	r1, [pc, #456]	@ (8009954 <tcp_connect+0x220>)
 800978c:	486f      	ldr	r0, [pc, #444]	@ (800994c <tcp_connect+0x218>)
 800978e:	f006 fab9 	bl	800fd04 <iprintf>
 8009792:	f06f 0309 	mvn.w	r3, #9
 8009796:	e0d1      	b.n	800993c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <tcp_connect+0x70>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	e000      	b.n	80097a6 <tcp_connect+0x72>
 80097a4:	2300      	movs	r3, #0
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	88fa      	ldrh	r2, [r7, #6]
 80097ae:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	7a1b      	ldrb	r3, [r3, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d006      	beq.n	80097c6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	7a1b      	ldrb	r3, [r3, #8]
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fe fd8d 	bl	80082dc <netif_get_by_index>
 80097c2:	6278      	str	r0, [r7, #36]	@ 0x24
 80097c4:	e005      	b.n	80097d2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3304      	adds	r3, #4
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fc fcba 	bl	8006144 <ip4_route>
 80097d0:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 80097d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d102      	bne.n	80097de <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80097d8:	f06f 0303 	mvn.w	r3, #3
 80097dc:	e0ae      	b.n	800993c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <tcp_connect+0xb8>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d111      	bne.n	8009810 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <tcp_connect+0xc4>
 80097f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f4:	3304      	adds	r3, #4
 80097f6:	e000      	b.n	80097fa <tcp_connect+0xc6>
 80097f8:	2300      	movs	r3, #0
 80097fa:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d102      	bne.n	8009808 <tcp_connect+0xd4>
      return ERR_RTE;
 8009802:	f06f 0303 	mvn.w	r3, #3
 8009806:	e099      	b.n	800993c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	8adb      	ldrh	r3, [r3, #22]
 8009814:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	8adb      	ldrh	r3, [r3, #22]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10c      	bne.n	8009838 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800981e:	f7ff ff43 	bl	80096a8 <tcp_new_port>
 8009822:	4603      	mov	r3, r0
 8009824:	461a      	mov	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8adb      	ldrh	r3, [r3, #22]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d102      	bne.n	8009838 <tcp_connect+0x104>
      return ERR_BUF;
 8009832:	f06f 0301 	mvn.w	r3, #1
 8009836:	e081      	b.n	800993c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f001 f821 	bl	800a880 <tcp_next_iss>
 800983e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	1e5a      	subs	r2, r3, #1
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	1e5a      	subs	r2, r3, #1
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	1e5a      	subs	r2, r3, #1
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f640 3268 	movw	r2, #2920	@ 0xb68
 800986a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f640 3268 	movw	r2, #2920	@ 0xb68
 8009882:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800988c:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3304      	adds	r3, #4
 8009896:	461a      	mov	r2, r3
 8009898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800989a:	f001 f817 	bl	800a8cc <tcp_eff_send_mss_netif>
 800989e:	4603      	mov	r3, r0
 80098a0:	461a      	mov	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80098b6:	2102      	movs	r1, #2
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f004 fa91 	bl	800dde0 <tcp_enqueue_flags>
 80098be:	4603      	mov	r3, r0
 80098c0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80098c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d136      	bne.n	8009938 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2202      	movs	r2, #2
 80098ce:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80098d0:	8b7b      	ldrh	r3, [r7, #26]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d021      	beq.n	800991a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80098d6:	4b20      	ldr	r3, [pc, #128]	@ (8009958 <tcp_connect+0x224>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d105      	bne.n	80098ec <tcp_connect+0x1b8>
 80098e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009958 <tcp_connect+0x224>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009958 <tcp_connect+0x224>)
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	e013      	b.n	8009914 <tcp_connect+0x1e0>
 80098ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009958 <tcp_connect+0x224>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	623b      	str	r3, [r7, #32]
 80098f2:	e00c      	b.n	800990e <tcp_connect+0x1da>
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d104      	bne.n	8009908 <tcp_connect+0x1d4>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	68da      	ldr	r2, [r3, #12]
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	60da      	str	r2, [r3, #12]
 8009906:	e005      	b.n	8009914 <tcp_connect+0x1e0>
 8009908:	6a3b      	ldr	r3, [r7, #32]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	623b      	str	r3, [r7, #32]
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1ef      	bne.n	80098f4 <tcp_connect+0x1c0>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800991a:	4b10      	ldr	r3, [pc, #64]	@ (800995c <tcp_connect+0x228>)
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	60da      	str	r2, [r3, #12]
 8009922:	4a0e      	ldr	r2, [pc, #56]	@ (800995c <tcp_connect+0x228>)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	f005 fabe 	bl	800eea8 <tcp_timer_needed>
 800992c:	4b0c      	ldr	r3, [pc, #48]	@ (8009960 <tcp_connect+0x22c>)
 800992e:	2201      	movs	r2, #1
 8009930:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f004 fb42 	bl	800dfbc <tcp_output>
  }
  return ret;
 8009938:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3728      	adds	r7, #40	@ 0x28
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	0801236c 	.word	0x0801236c
 8009948:	080126c8 	.word	0x080126c8
 800994c:	080123e8 	.word	0x080123e8
 8009950:	080126e4 	.word	0x080126e4
 8009954:	08012700 	.word	0x08012700
 8009958:	2000b768 	.word	0x2000b768
 800995c:	2000b770 	.word	0x2000b770
 8009960:	2000b778 	.word	0x2000b778

08009964 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009964:	b5b0      	push	{r4, r5, r7, lr}
 8009966:	b090      	sub	sp, #64	@ 0x40
 8009968:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009970:	4b95      	ldr	r3, [pc, #596]	@ (8009bc8 <tcp_slowtmr+0x264>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3301      	adds	r3, #1
 8009976:	4a94      	ldr	r2, [pc, #592]	@ (8009bc8 <tcp_slowtmr+0x264>)
 8009978:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800997a:	4b94      	ldr	r3, [pc, #592]	@ (8009bcc <tcp_slowtmr+0x268>)
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	3301      	adds	r3, #1
 8009980:	b2da      	uxtb	r2, r3
 8009982:	4b92      	ldr	r3, [pc, #584]	@ (8009bcc <tcp_slowtmr+0x268>)
 8009984:	701a      	strb	r2, [r3, #0]
 8009986:	e000      	b.n	800998a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009988:	bf00      	nop
  prev = NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800998e:	4b90      	ldr	r3, [pc, #576]	@ (8009bd0 <tcp_slowtmr+0x26c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009994:	e29d      	b.n	8009ed2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009998:	7d1b      	ldrb	r3, [r3, #20]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d106      	bne.n	80099ac <tcp_slowtmr+0x48>
 800999e:	4b8d      	ldr	r3, [pc, #564]	@ (8009bd4 <tcp_slowtmr+0x270>)
 80099a0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80099a4:	498c      	ldr	r1, [pc, #560]	@ (8009bd8 <tcp_slowtmr+0x274>)
 80099a6:	488d      	ldr	r0, [pc, #564]	@ (8009bdc <tcp_slowtmr+0x278>)
 80099a8:	f006 f9ac 	bl	800fd04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80099ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ae:	7d1b      	ldrb	r3, [r3, #20]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d106      	bne.n	80099c2 <tcp_slowtmr+0x5e>
 80099b4:	4b87      	ldr	r3, [pc, #540]	@ (8009bd4 <tcp_slowtmr+0x270>)
 80099b6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80099ba:	4989      	ldr	r1, [pc, #548]	@ (8009be0 <tcp_slowtmr+0x27c>)
 80099bc:	4887      	ldr	r0, [pc, #540]	@ (8009bdc <tcp_slowtmr+0x278>)
 80099be:	f006 f9a1 	bl	800fd04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80099c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c4:	7d1b      	ldrb	r3, [r3, #20]
 80099c6:	2b0a      	cmp	r3, #10
 80099c8:	d106      	bne.n	80099d8 <tcp_slowtmr+0x74>
 80099ca:	4b82      	ldr	r3, [pc, #520]	@ (8009bd4 <tcp_slowtmr+0x270>)
 80099cc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80099d0:	4984      	ldr	r1, [pc, #528]	@ (8009be4 <tcp_slowtmr+0x280>)
 80099d2:	4882      	ldr	r0, [pc, #520]	@ (8009bdc <tcp_slowtmr+0x278>)
 80099d4:	f006 f996 	bl	800fd04 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80099d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099da:	7f9a      	ldrb	r2, [r3, #30]
 80099dc:	4b7b      	ldr	r3, [pc, #492]	@ (8009bcc <tcp_slowtmr+0x268>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d105      	bne.n	80099f0 <tcp_slowtmr+0x8c>
      prev = pcb;
 80099e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80099e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80099ee:	e270      	b.n	8009ed2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 80099f0:	4b76      	ldr	r3, [pc, #472]	@ (8009bcc <tcp_slowtmr+0x268>)
 80099f2:	781a      	ldrb	r2, [r3, #0]
 80099f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80099f8:	2300      	movs	r3, #0
 80099fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a06:	7d1b      	ldrb	r3, [r3, #20]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d10a      	bne.n	8009a22 <tcp_slowtmr+0xbe>
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a12:	2b05      	cmp	r3, #5
 8009a14:	d905      	bls.n	8009a22 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009a20:	e11e      	b.n	8009c60 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a28:	2b0b      	cmp	r3, #11
 8009a2a:	d905      	bls.n	8009a38 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a30:	3301      	adds	r3, #1
 8009a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009a36:	e113      	b.n	8009c60 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d075      	beq.n	8009b2e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d006      	beq.n	8009a58 <tcp_slowtmr+0xf4>
 8009a4a:	4b62      	ldr	r3, [pc, #392]	@ (8009bd4 <tcp_slowtmr+0x270>)
 8009a4c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8009a50:	4965      	ldr	r1, [pc, #404]	@ (8009be8 <tcp_slowtmr+0x284>)
 8009a52:	4862      	ldr	r0, [pc, #392]	@ (8009bdc <tcp_slowtmr+0x278>)
 8009a54:	f006 f956 	bl	800fd04 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d106      	bne.n	8009a6e <tcp_slowtmr+0x10a>
 8009a60:	4b5c      	ldr	r3, [pc, #368]	@ (8009bd4 <tcp_slowtmr+0x270>)
 8009a62:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009a66:	4961      	ldr	r1, [pc, #388]	@ (8009bec <tcp_slowtmr+0x288>)
 8009a68:	485c      	ldr	r0, [pc, #368]	@ (8009bdc <tcp_slowtmr+0x278>)
 8009a6a:	f006 f94b 	bl	800fd04 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a70:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009a74:	2b0b      	cmp	r3, #11
 8009a76:	d905      	bls.n	8009a84 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009a82:	e0ed      	b.n	8009c60 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a86:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	4a58      	ldr	r2, [pc, #352]	@ (8009bf0 <tcp_slowtmr+0x28c>)
 8009a8e:	5cd3      	ldrb	r3, [r2, r3]
 8009a90:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009a98:	7c7a      	ldrb	r2, [r7, #17]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d907      	bls.n	8009aae <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8009a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aaa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009ab4:	7c7a      	ldrb	r2, [r7, #17]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	f200 80d2 	bhi.w	8009c60 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009abc:	2301      	movs	r3, #1
 8009abe:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d108      	bne.n	8009adc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009aca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009acc:	f005 f91e 	bl	800ed0c <tcp_zero_window_probe>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d014      	beq.n	8009b00 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	623b      	str	r3, [r7, #32]
 8009ada:	e011      	b.n	8009b00 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009ae6:	f003 ffe3 	bl	800dab0 <tcp_split_unsent_seg>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d107      	bne.n	8009b00 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8009af0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009af2:	f004 fa63 	bl	800dfbc <tcp_output>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 80ac 	beq.w	8009c60 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8009b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b12:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009b16:	2b06      	cmp	r3, #6
 8009b18:	f200 80a2 	bhi.w	8009c60 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8009b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009b22:	3301      	adds	r3, #1
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b28:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8009b2c:	e098      	b.n	8009c60 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	db0f      	blt.n	8009b58 <tcp_slowtmr+0x1f4>
 8009b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009b3e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d008      	beq.n	8009b58 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8009b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	3301      	adds	r3, #1
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	b21a      	sxth	r2, r3
 8009b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b56:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8009b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8009b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b60:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009b64:	429a      	cmp	r2, r3
 8009b66:	db7b      	blt.n	8009c60 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009b68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b6a:	f004 fd1b 	bl	800e5a4 <tcp_rexmit_rto_prepare>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d007      	beq.n	8009b84 <tcp_slowtmr+0x220>
 8009b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d171      	bne.n	8009c60 <tcp_slowtmr+0x2fc>
 8009b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d06d      	beq.n	8009c60 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8009b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b86:	7d1b      	ldrb	r3, [r3, #20]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d03a      	beq.n	8009c02 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b92:	2b0c      	cmp	r3, #12
 8009b94:	bf28      	it	cs
 8009b96:	230c      	movcs	r3, #12
 8009b98:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009ba0:	10db      	asrs	r3, r3, #3
 8009ba2:	b21b      	sxth	r3, r3
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009bac:	4413      	add	r3, r2
 8009bae:	7efa      	ldrb	r2, [r7, #27]
 8009bb0:	4910      	ldr	r1, [pc, #64]	@ (8009bf4 <tcp_slowtmr+0x290>)
 8009bb2:	5c8a      	ldrb	r2, [r1, r2]
 8009bb4:	4093      	lsls	r3, r2
 8009bb6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	dc1a      	bgt.n	8009bf8 <tcp_slowtmr+0x294>
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	b21a      	sxth	r2, r3
 8009bc6:	e019      	b.n	8009bfc <tcp_slowtmr+0x298>
 8009bc8:	2000b764 	.word	0x2000b764
 8009bcc:	2000b77a 	.word	0x2000b77a
 8009bd0:	2000b770 	.word	0x2000b770
 8009bd4:	0801236c 	.word	0x0801236c
 8009bd8:	08012730 	.word	0x08012730
 8009bdc:	080123e8 	.word	0x080123e8
 8009be0:	0801275c 	.word	0x0801275c
 8009be4:	08012788 	.word	0x08012788
 8009be8:	080127b8 	.word	0x080127b8
 8009bec:	080127ec 	.word	0x080127ec
 8009bf0:	08014074 	.word	0x08014074
 8009bf4:	08014064 	.word	0x08014064
 8009bf8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8009c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c04:	2200      	movs	r2, #0
 8009c06:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009c14:	4293      	cmp	r3, r2
 8009c16:	bf28      	it	cs
 8009c18:	4613      	movcs	r3, r2
 8009c1a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009c1c:	8a7b      	ldrh	r3, [r7, #18]
 8009c1e:	085b      	lsrs	r3, r3, #1
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c32:	005b      	lsls	r3, r3, #1
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d206      	bcs.n	8009c48 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8009c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c4a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c4e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8009c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c5c:	f004 fd12 	bl	800e684 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8009c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c62:	7d1b      	ldrb	r3, [r3, #20]
 8009c64:	2b06      	cmp	r3, #6
 8009c66:	d111      	bne.n	8009c8c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8009c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c6a:	8b5b      	ldrh	r3, [r3, #26]
 8009c6c:	f003 0310 	and.w	r3, r3, #16
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009c74:	4b9c      	ldr	r3, [pc, #624]	@ (8009ee8 <tcp_slowtmr+0x584>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7a:	6a1b      	ldr	r3, [r3, #32]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	2b28      	cmp	r3, #40	@ 0x28
 8009c80:	d904      	bls.n	8009c8c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8009c82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c86:	3301      	adds	r3, #1
 8009c88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8e:	7a5b      	ldrb	r3, [r3, #9]
 8009c90:	f003 0308 	and.w	r3, r3, #8
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d04a      	beq.n	8009d2e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009c9c:	2b04      	cmp	r3, #4
 8009c9e:	d003      	beq.n	8009ca8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8009ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009ca4:	2b07      	cmp	r3, #7
 8009ca6:	d142      	bne.n	8009d2e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8009ee8 <tcp_slowtmr+0x584>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cae:	6a1b      	ldr	r3, [r3, #32]
 8009cb0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009cb8:	4b8c      	ldr	r3, [pc, #560]	@ (8009eec <tcp_slowtmr+0x588>)
 8009cba:	440b      	add	r3, r1
 8009cbc:	498c      	ldr	r1, [pc, #560]	@ (8009ef0 <tcp_slowtmr+0x58c>)
 8009cbe:	fba1 1303 	umull	r1, r3, r1, r3
 8009cc2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d90a      	bls.n	8009cde <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8009cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ccc:	3301      	adds	r3, #1
 8009cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8009cd2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009cdc:	e027      	b.n	8009d2e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cde:	4b82      	ldr	r3, [pc, #520]	@ (8009ee8 <tcp_slowtmr+0x584>)
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cea:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8009ef4 <tcp_slowtmr+0x590>)
 8009cf8:	fb00 f303 	mul.w	r3, r0, r3
 8009cfc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009cfe:	497c      	ldr	r1, [pc, #496]	@ (8009ef0 <tcp_slowtmr+0x58c>)
 8009d00:	fba1 1303 	umull	r1, r3, r1, r3
 8009d04:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d911      	bls.n	8009d2e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009d0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d0c:	f004 ffbe 	bl	800ec8c <tcp_keepalive>
 8009d10:	4603      	mov	r3, r0
 8009d12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009d16:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d107      	bne.n	8009d2e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8009d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d20:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009d24:	3301      	adds	r3, #1
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8009d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d011      	beq.n	8009d5a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009d36:	4b6c      	ldr	r3, [pc, #432]	@ (8009ee8 <tcp_slowtmr+0x584>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d42:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009d46:	4619      	mov	r1, r3
 8009d48:	460b      	mov	r3, r1
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	440b      	add	r3, r1
 8009d4e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d302      	bcc.n	8009d5a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8009d54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d56:	f000 fe63 	bl	800aa20 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8009d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5c:	7d1b      	ldrb	r3, [r3, #20]
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d10b      	bne.n	8009d7a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d62:	4b61      	ldr	r3, [pc, #388]	@ (8009ee8 <tcp_slowtmr+0x584>)
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	2b28      	cmp	r3, #40	@ 0x28
 8009d6e:	d904      	bls.n	8009d7a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8009d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d74:	3301      	adds	r3, #1
 8009d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8009d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d7c:	7d1b      	ldrb	r3, [r3, #20]
 8009d7e:	2b09      	cmp	r3, #9
 8009d80:	d10b      	bne.n	8009d9a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009d82:	4b59      	ldr	r3, [pc, #356]	@ (8009ee8 <tcp_slowtmr+0x584>)
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	2bf0      	cmp	r3, #240	@ 0xf0
 8009d8e:	d904      	bls.n	8009d9a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d94:	3301      	adds	r3, #1
 8009d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8009d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d060      	beq.n	8009e64 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8009da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009da8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8009daa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009dac:	f000 fc80 	bl	800a6b0 <tcp_pcb_purge>
      if (prev != NULL) {
 8009db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d010      	beq.n	8009dd8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009db6:	4b50      	ldr	r3, [pc, #320]	@ (8009ef8 <tcp_slowtmr+0x594>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d106      	bne.n	8009dce <tcp_slowtmr+0x46a>
 8009dc0:	4b4e      	ldr	r3, [pc, #312]	@ (8009efc <tcp_slowtmr+0x598>)
 8009dc2:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009dc6:	494e      	ldr	r1, [pc, #312]	@ (8009f00 <tcp_slowtmr+0x59c>)
 8009dc8:	484e      	ldr	r0, [pc, #312]	@ (8009f04 <tcp_slowtmr+0x5a0>)
 8009dca:	f005 ff9b 	bl	800fd04 <iprintf>
        prev->next = pcb->next;
 8009dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd4:	60da      	str	r2, [r3, #12]
 8009dd6:	e00f      	b.n	8009df8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009dd8:	4b47      	ldr	r3, [pc, #284]	@ (8009ef8 <tcp_slowtmr+0x594>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d006      	beq.n	8009df0 <tcp_slowtmr+0x48c>
 8009de2:	4b46      	ldr	r3, [pc, #280]	@ (8009efc <tcp_slowtmr+0x598>)
 8009de4:	f240 5271 	movw	r2, #1393	@ 0x571
 8009de8:	4947      	ldr	r1, [pc, #284]	@ (8009f08 <tcp_slowtmr+0x5a4>)
 8009dea:	4846      	ldr	r0, [pc, #280]	@ (8009f04 <tcp_slowtmr+0x5a0>)
 8009dec:	f005 ff8a 	bl	800fd04 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	4a40      	ldr	r2, [pc, #256]	@ (8009ef8 <tcp_slowtmr+0x594>)
 8009df6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009df8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d013      	beq.n	8009e28 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e02:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e06:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009e08:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8009e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e10:	8ad2      	ldrh	r2, [r2, #22]
 8009e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e14:	8b09      	ldrh	r1, [r1, #24]
 8009e16:	9102      	str	r1, [sp, #8]
 8009e18:	9201      	str	r2, [sp, #4]
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	462b      	mov	r3, r5
 8009e1e:	4622      	mov	r2, r4
 8009e20:	4601      	mov	r1, r0
 8009e22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e24:	f004 fe7e 	bl	800eb24 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e30:	7d1b      	ldrb	r3, [r3, #20]
 8009e32:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e36:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009e3e:	6838      	ldr	r0, [r7, #0]
 8009e40:	f7ff f850 	bl	8008ee4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009e44:	4b31      	ldr	r3, [pc, #196]	@ (8009f0c <tcp_slowtmr+0x5a8>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d004      	beq.n	8009e5a <tcp_slowtmr+0x4f6>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f06f 010c 	mvn.w	r1, #12
 8009e56:	68b8      	ldr	r0, [r7, #8]
 8009e58:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8009f0c <tcp_slowtmr+0x5a8>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d037      	beq.n	8009ed2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009e62:	e592      	b.n	800998a <tcp_slowtmr+0x26>
      prev = pcb;
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8009e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e70:	7f1b      	ldrb	r3, [r3, #28]
 8009e72:	3301      	adds	r3, #1
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e78:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7c:	7f1a      	ldrb	r2, [r3, #28]
 8009e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e80:	7f5b      	ldrb	r3, [r3, #29]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d325      	bcc.n	8009ed2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e88:	2200      	movs	r2, #0
 8009e8a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8009e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8009f0c <tcp_slowtmr+0x5a8>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00b      	beq.n	8009eb4 <tcp_slowtmr+0x550>
 8009e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ea4:	6912      	ldr	r2, [r2, #16]
 8009ea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4798      	blx	r3
 8009eac:	4603      	mov	r3, r0
 8009eae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009eb2:	e002      	b.n	8009eba <tcp_slowtmr+0x556>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8009eba:	4b14      	ldr	r3, [pc, #80]	@ (8009f0c <tcp_slowtmr+0x5a8>)
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f47f ad62 	bne.w	8009988 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009ec4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009ecc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ece:	f004 f875 	bl	800dfbc <tcp_output>
  while (pcb != NULL) {
 8009ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f47f ad5e 	bne.w	8009996 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009eda:	2300      	movs	r3, #0
 8009edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8009ede:	4b0c      	ldr	r3, [pc, #48]	@ (8009f10 <tcp_slowtmr+0x5ac>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009ee4:	e069      	b.n	8009fba <tcp_slowtmr+0x656>
 8009ee6:	bf00      	nop
 8009ee8:	2000b764 	.word	0x2000b764
 8009eec:	000a4cb8 	.word	0x000a4cb8
 8009ef0:	10624dd3 	.word	0x10624dd3
 8009ef4:	000124f8 	.word	0x000124f8
 8009ef8:	2000b770 	.word	0x2000b770
 8009efc:	0801236c 	.word	0x0801236c
 8009f00:	08012824 	.word	0x08012824
 8009f04:	080123e8 	.word	0x080123e8
 8009f08:	08012850 	.word	0x08012850
 8009f0c:	2000b778 	.word	0x2000b778
 8009f10:	2000b774 	.word	0x2000b774
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f16:	7d1b      	ldrb	r3, [r3, #20]
 8009f18:	2b0a      	cmp	r3, #10
 8009f1a:	d006      	beq.n	8009f2a <tcp_slowtmr+0x5c6>
 8009f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8009fcc <tcp_slowtmr+0x668>)
 8009f1e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8009f22:	492b      	ldr	r1, [pc, #172]	@ (8009fd0 <tcp_slowtmr+0x66c>)
 8009f24:	482b      	ldr	r0, [pc, #172]	@ (8009fd4 <tcp_slowtmr+0x670>)
 8009f26:	f005 feed 	bl	800fd04 <iprintf>
    pcb_remove = 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009f30:	4b29      	ldr	r3, [pc, #164]	@ (8009fd8 <tcp_slowtmr+0x674>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f36:	6a1b      	ldr	r3, [r3, #32]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2bf0      	cmp	r3, #240	@ 0xf0
 8009f3c:	d904      	bls.n	8009f48 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8009f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f42:	3301      	adds	r3, #1
 8009f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d02f      	beq.n	8009fb0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009f50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f52:	f000 fbad 	bl	800a6b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d010      	beq.n	8009f7e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8009fdc <tcp_slowtmr+0x678>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d106      	bne.n	8009f74 <tcp_slowtmr+0x610>
 8009f66:	4b19      	ldr	r3, [pc, #100]	@ (8009fcc <tcp_slowtmr+0x668>)
 8009f68:	f240 52af 	movw	r2, #1455	@ 0x5af
 8009f6c:	491c      	ldr	r1, [pc, #112]	@ (8009fe0 <tcp_slowtmr+0x67c>)
 8009f6e:	4819      	ldr	r0, [pc, #100]	@ (8009fd4 <tcp_slowtmr+0x670>)
 8009f70:	f005 fec8 	bl	800fd04 <iprintf>
        prev->next = pcb->next;
 8009f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f76:	68da      	ldr	r2, [r3, #12]
 8009f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7a:	60da      	str	r2, [r3, #12]
 8009f7c:	e00f      	b.n	8009f9e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009f7e:	4b17      	ldr	r3, [pc, #92]	@ (8009fdc <tcp_slowtmr+0x678>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d006      	beq.n	8009f96 <tcp_slowtmr+0x632>
 8009f88:	4b10      	ldr	r3, [pc, #64]	@ (8009fcc <tcp_slowtmr+0x668>)
 8009f8a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009f8e:	4915      	ldr	r1, [pc, #84]	@ (8009fe4 <tcp_slowtmr+0x680>)
 8009f90:	4810      	ldr	r0, [pc, #64]	@ (8009fd4 <tcp_slowtmr+0x670>)
 8009f92:	f005 feb7 	bl	800fd04 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	4a10      	ldr	r2, [pc, #64]	@ (8009fdc <tcp_slowtmr+0x678>)
 8009f9c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009fa8:	69f8      	ldr	r0, [r7, #28]
 8009faa:	f7fe ff9b 	bl	8008ee4 <tcp_free>
 8009fae:	e004      	b.n	8009fba <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8009fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1a9      	bne.n	8009f14 <tcp_slowtmr+0x5b0>
    }
  }
}
 8009fc0:	bf00      	nop
 8009fc2:	bf00      	nop
 8009fc4:	3730      	adds	r7, #48	@ 0x30
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	0801236c 	.word	0x0801236c
 8009fd0:	0801287c 	.word	0x0801287c
 8009fd4:	080123e8 	.word	0x080123e8
 8009fd8:	2000b764 	.word	0x2000b764
 8009fdc:	2000b774 	.word	0x2000b774
 8009fe0:	080128ac 	.word	0x080128ac
 8009fe4:	080128d4 	.word	0x080128d4

08009fe8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009fee:	4b2d      	ldr	r3, [pc, #180]	@ (800a0a4 <tcp_fasttmr+0xbc>)
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	4b2b      	ldr	r3, [pc, #172]	@ (800a0a4 <tcp_fasttmr+0xbc>)
 8009ff8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009ffa:	4b2b      	ldr	r3, [pc, #172]	@ (800a0a8 <tcp_fasttmr+0xc0>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a000:	e048      	b.n	800a094 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	7f9a      	ldrb	r2, [r3, #30]
 800a006:	4b27      	ldr	r3, [pc, #156]	@ (800a0a4 <tcp_fasttmr+0xbc>)
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d03f      	beq.n	800a08e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a00e:	4b25      	ldr	r3, [pc, #148]	@ (800a0a4 <tcp_fasttmr+0xbc>)
 800a010:	781a      	ldrb	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	8b5b      	ldrh	r3, [r3, #26]
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d010      	beq.n	800a044 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	8b5b      	ldrh	r3, [r3, #26]
 800a026:	f043 0302 	orr.w	r3, r3, #2
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f003 ffc3 	bl	800dfbc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	8b5b      	ldrh	r3, [r3, #26]
 800a03a:	f023 0303 	bic.w	r3, r3, #3
 800a03e:	b29a      	uxth	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	8b5b      	ldrh	r3, [r3, #26]
 800a048:	f003 0308 	and.w	r3, r3, #8
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d009      	beq.n	800a064 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	8b5b      	ldrh	r3, [r3, #26]
 800a054:	f023 0308 	bic.w	r3, r3, #8
 800a058:	b29a      	uxth	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff f912 	bl	8009288 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00a      	beq.n	800a088 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a072:	4b0e      	ldr	r3, [pc, #56]	@ (800a0ac <tcp_fasttmr+0xc4>)
 800a074:	2200      	movs	r2, #0
 800a076:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f819 	bl	800a0b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a07e:	4b0b      	ldr	r3, [pc, #44]	@ (800a0ac <tcp_fasttmr+0xc4>)
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d000      	beq.n	800a088 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a086:	e7b8      	b.n	8009ffa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	607b      	str	r3, [r7, #4]
 800a08c:	e002      	b.n	800a094 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1b3      	bne.n	800a002 <tcp_fasttmr+0x1a>
    }
  }
}
 800a09a:	bf00      	nop
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	2000b77a 	.word	0x2000b77a
 800a0a8:	2000b770 	.word	0x2000b770
 800a0ac:	2000b778 	.word	0x2000b778

0800a0b0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a0b0:	b590      	push	{r4, r7, lr}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d109      	bne.n	800a0d2 <tcp_process_refused_data+0x22>
 800a0be:	4b38      	ldr	r3, [pc, #224]	@ (800a1a0 <tcp_process_refused_data+0xf0>)
 800a0c0:	f240 6209 	movw	r2, #1545	@ 0x609
 800a0c4:	4937      	ldr	r1, [pc, #220]	@ (800a1a4 <tcp_process_refused_data+0xf4>)
 800a0c6:	4838      	ldr	r0, [pc, #224]	@ (800a1a8 <tcp_process_refused_data+0xf8>)
 800a0c8:	f005 fe1c 	bl	800fd04 <iprintf>
 800a0cc:	f06f 030f 	mvn.w	r3, #15
 800a0d0:	e061      	b.n	800a196 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0d6:	7b5b      	ldrb	r3, [r3, #13]
 800a0d8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0de:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <tcp_process_refused_data+0x58>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6918      	ldr	r0, [r3, #16]
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	47a0      	blx	r4
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]
 800a106:	e007      	b.n	800a118 <tcp_process_refused_data+0x68>
 800a108:	2300      	movs	r3, #0
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	6879      	ldr	r1, [r7, #4]
 800a10e:	2000      	movs	r0, #0
 800a110:	f000 f8a6 	bl	800a260 <tcp_recv_null>
 800a114:	4603      	mov	r3, r0
 800a116:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d12b      	bne.n	800a178 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a120:	7bbb      	ldrb	r3, [r7, #14]
 800a122:	f003 0320 	and.w	r3, r3, #32
 800a126:	2b00      	cmp	r3, #0
 800a128:	d034      	beq.n	800a194 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a12e:	f640 3268 	movw	r2, #2920	@ 0xb68
 800a132:	4293      	cmp	r3, r2
 800a134:	d005      	beq.n	800a142 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a13a:	3301      	adds	r3, #1
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <tcp_process_refused_data+0xb4>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6918      	ldr	r0, [r3, #16]
 800a156:	2300      	movs	r3, #0
 800a158:	2200      	movs	r2, #0
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	47a0      	blx	r4
 800a15e:	4603      	mov	r3, r0
 800a160:	73fb      	strb	r3, [r7, #15]
 800a162:	e001      	b.n	800a168 <tcp_process_refused_data+0xb8>
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a16c:	f113 0f0d 	cmn.w	r3, #13
 800a170:	d110      	bne.n	800a194 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800a172:	f06f 030c 	mvn.w	r3, #12
 800a176:	e00e      	b.n	800a196 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800a178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a17c:	f113 0f0d 	cmn.w	r3, #13
 800a180:	d102      	bne.n	800a188 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a182:	f06f 030c 	mvn.w	r3, #12
 800a186:	e006      	b.n	800a196 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800a18e:	f06f 0304 	mvn.w	r3, #4
 800a192:	e000      	b.n	800a196 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd90      	pop	{r4, r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	0801236c 	.word	0x0801236c
 800a1a4:	080128fc 	.word	0x080128fc
 800a1a8:	080123e8 	.word	0x080123e8

0800a1ac <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a1b4:	e007      	b.n	800a1c6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f80a 	bl	800a1d6 <tcp_seg_free>
    seg = next;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1f4      	bne.n	800a1b6 <tcp_segs_free+0xa>
  }
}
 800a1cc:	bf00      	nop
 800a1ce:	bf00      	nop
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b082      	sub	sp, #8
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00c      	beq.n	800a1fe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d004      	beq.n	800a1f6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe fbd7 	bl	80089a4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	2003      	movs	r0, #3
 800a1fa:	f7fd fd59 	bl	8007cb0 <memp_free>
  }
}
 800a1fe:	bf00      	nop
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d106      	bne.n	800a224 <tcp_seg_copy+0x1c>
 800a216:	4b0f      	ldr	r3, [pc, #60]	@ (800a254 <tcp_seg_copy+0x4c>)
 800a218:	f240 6282 	movw	r2, #1666	@ 0x682
 800a21c:	490e      	ldr	r1, [pc, #56]	@ (800a258 <tcp_seg_copy+0x50>)
 800a21e:	480f      	ldr	r0, [pc, #60]	@ (800a25c <tcp_seg_copy+0x54>)
 800a220:	f005 fd70 	bl	800fd04 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a224:	2003      	movs	r0, #3
 800a226:	f7fd fcd3 	bl	8007bd0 <memp_malloc>
 800a22a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <tcp_seg_copy+0x2e>
    return NULL;
 800a232:	2300      	movs	r3, #0
 800a234:	e00a      	b.n	800a24c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a236:	2210      	movs	r2, #16
 800a238:	6879      	ldr	r1, [r7, #4]
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f005 fec9 	bl	800ffd2 <memcpy>
  pbuf_ref(cseg->p);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	4618      	mov	r0, r3
 800a246:	f7fe fc4d 	bl	8008ae4 <pbuf_ref>
  return cseg;
 800a24a:	68fb      	ldr	r3, [r7, #12]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	0801236c 	.word	0x0801236c
 800a258:	08012940 	.word	0x08012940
 800a25c:	080123e8 	.word	0x080123e8

0800a260 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d109      	bne.n	800a288 <tcp_recv_null+0x28>
 800a274:	4b12      	ldr	r3, [pc, #72]	@ (800a2c0 <tcp_recv_null+0x60>)
 800a276:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a27a:	4912      	ldr	r1, [pc, #72]	@ (800a2c4 <tcp_recv_null+0x64>)
 800a27c:	4812      	ldr	r0, [pc, #72]	@ (800a2c8 <tcp_recv_null+0x68>)
 800a27e:	f005 fd41 	bl	800fd04 <iprintf>
 800a282:	f06f 030f 	mvn.w	r3, #15
 800a286:	e016      	b.n	800a2b6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d009      	beq.n	800a2a2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	891b      	ldrh	r3, [r3, #8]
 800a292:	4619      	mov	r1, r3
 800a294:	68b8      	ldr	r0, [r7, #8]
 800a296:	f7ff f9b5 	bl	8009604 <tcp_recved>
    pbuf_free(p);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7fe fb82 	bl	80089a4 <pbuf_free>
 800a2a0:	e008      	b.n	800a2b4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a2a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d104      	bne.n	800a2b4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a2aa:	68b8      	ldr	r0, [r7, #8]
 800a2ac:	f7ff f858 	bl	8009360 <tcp_close>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	e000      	b.n	800a2b6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	0801236c 	.word	0x0801236c
 800a2c4:	0801295c 	.word	0x0801295c
 800a2c8:	080123e8 	.word	0x080123e8

0800a2cc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a2d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	db01      	blt.n	800a2e2 <tcp_kill_prio+0x16>
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	e000      	b.n	800a2e4 <tcp_kill_prio+0x18>
 800a2e2:	237f      	movs	r3, #127	@ 0x7f
 800a2e4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a2e6:	7afb      	ldrb	r3, [r7, #11]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d034      	beq.n	800a356 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a2ec:	7afb      	ldrb	r3, [r7, #11]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2fa:	4b19      	ldr	r3, [pc, #100]	@ (800a360 <tcp_kill_prio+0x94>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	e01f      	b.n	800a342 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	7d5b      	ldrb	r3, [r3, #21]
 800a306:	7afa      	ldrb	r2, [r7, #11]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d80c      	bhi.n	800a326 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a310:	7afa      	ldrb	r2, [r7, #11]
 800a312:	429a      	cmp	r2, r3
 800a314:	d112      	bne.n	800a33c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a316:	4b13      	ldr	r3, [pc, #76]	@ (800a364 <tcp_kill_prio+0x98>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	429a      	cmp	r2, r3
 800a324:	d80a      	bhi.n	800a33c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a326:	4b0f      	ldr	r3, [pc, #60]	@ (800a364 <tcp_kill_prio+0x98>)
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	7d5b      	ldrb	r3, [r3, #21]
 800a33a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	617b      	str	r3, [r7, #20]
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1dc      	bne.n	800a302 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d004      	beq.n	800a358 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a34e:	6938      	ldr	r0, [r7, #16]
 800a350:	f7ff f8f2 	bl	8009538 <tcp_abort>
 800a354:	e000      	b.n	800a358 <tcp_kill_prio+0x8c>
    return;
 800a356:	bf00      	nop
  }
}
 800a358:	3718      	adds	r7, #24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	2000b770 	.word	0x2000b770
 800a364:	2000b764 	.word	0x2000b764

0800a368 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a372:	79fb      	ldrb	r3, [r7, #7]
 800a374:	2b08      	cmp	r3, #8
 800a376:	d009      	beq.n	800a38c <tcp_kill_state+0x24>
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b09      	cmp	r3, #9
 800a37c:	d006      	beq.n	800a38c <tcp_kill_state+0x24>
 800a37e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e8 <tcp_kill_state+0x80>)
 800a380:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800a384:	4919      	ldr	r1, [pc, #100]	@ (800a3ec <tcp_kill_state+0x84>)
 800a386:	481a      	ldr	r0, [pc, #104]	@ (800a3f0 <tcp_kill_state+0x88>)
 800a388:	f005 fcbc 	bl	800fd04 <iprintf>

  inactivity = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a390:	2300      	movs	r3, #0
 800a392:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a394:	4b17      	ldr	r3, [pc, #92]	@ (800a3f4 <tcp_kill_state+0x8c>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	617b      	str	r3, [r7, #20]
 800a39a:	e017      	b.n	800a3cc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	7d1b      	ldrb	r3, [r3, #20]
 800a3a0:	79fa      	ldrb	r2, [r7, #7]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d10f      	bne.n	800a3c6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a3a6:	4b14      	ldr	r3, [pc, #80]	@ (800a3f8 <tcp_kill_state+0x90>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d807      	bhi.n	800a3c6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a3b6:	4b10      	ldr	r3, [pc, #64]	@ (800a3f8 <tcp_kill_state+0x90>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	617b      	str	r3, [r7, #20]
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e4      	bne.n	800a39c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a3d8:	2100      	movs	r1, #0
 800a3da:	6938      	ldr	r0, [r7, #16]
 800a3dc:	f7fe ffec 	bl	80093b8 <tcp_abandon>
  }
}
 800a3e0:	bf00      	nop
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	0801236c 	.word	0x0801236c
 800a3ec:	08012978 	.word	0x08012978
 800a3f0:	080123e8 	.word	0x080123e8
 800a3f4:	2000b770 	.word	0x2000b770
 800a3f8:	2000b764 	.word	0x2000b764

0800a3fc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a406:	2300      	movs	r3, #0
 800a408:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a40a:	4b12      	ldr	r3, [pc, #72]	@ (800a454 <tcp_kill_timewait+0x58>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	e012      	b.n	800a438 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a412:	4b11      	ldr	r3, [pc, #68]	@ (800a458 <tcp_kill_timewait+0x5c>)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d807      	bhi.n	800a432 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a422:	4b0d      	ldr	r3, [pc, #52]	@ (800a458 <tcp_kill_timewait+0x5c>)
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1e9      	bne.n	800a412 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a444:	68b8      	ldr	r0, [r7, #8]
 800a446:	f7ff f877 	bl	8009538 <tcp_abort>
  }
}
 800a44a:	bf00      	nop
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	2000b774 	.word	0x2000b774
 800a458:	2000b764 	.word	0x2000b764

0800a45c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a462:	4b10      	ldr	r3, [pc, #64]	@ (800a4a4 <tcp_handle_closepend+0x48>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a468:	e014      	b.n	800a494 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	8b5b      	ldrh	r3, [r3, #26]
 800a474:	f003 0308 	and.w	r3, r3, #8
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d009      	beq.n	800a490 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	8b5b      	ldrh	r3, [r3, #26]
 800a480:	f023 0308 	bic.w	r3, r3, #8
 800a484:	b29a      	uxth	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fe fefc 	bl	8009288 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1e7      	bne.n	800a46a <tcp_handle_closepend+0xe>
  }
}
 800a49a:	bf00      	nop
 800a49c:	bf00      	nop
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	2000b770 	.word	0x2000b770

0800a4a8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a4b2:	2001      	movs	r0, #1
 800a4b4:	f7fd fb8c 	bl	8007bd0 <memp_malloc>
 800a4b8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d126      	bne.n	800a50e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a4c0:	f7ff ffcc 	bl	800a45c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a4c4:	f7ff ff9a 	bl	800a3fc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a4c8:	2001      	movs	r0, #1
 800a4ca:	f7fd fb81 	bl	8007bd0 <memp_malloc>
 800a4ce:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d11b      	bne.n	800a50e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a4d6:	2009      	movs	r0, #9
 800a4d8:	f7ff ff46 	bl	800a368 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a4dc:	2001      	movs	r0, #1
 800a4de:	f7fd fb77 	bl	8007bd0 <memp_malloc>
 800a4e2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d111      	bne.n	800a50e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a4ea:	2008      	movs	r0, #8
 800a4ec:	f7ff ff3c 	bl	800a368 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	f7fd fb6d 	bl	8007bd0 <memp_malloc>
 800a4f6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d107      	bne.n	800a50e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a4fe:	79fb      	ldrb	r3, [r7, #7]
 800a500:	4618      	mov	r0, r3
 800a502:	f7ff fee3 	bl	800a2cc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a506:	2001      	movs	r0, #1
 800a508:	f7fd fb62 	bl	8007bd0 <memp_malloc>
 800a50c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d03f      	beq.n	800a594 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a514:	229c      	movs	r2, #156	@ 0x9c
 800a516:	2100      	movs	r1, #0
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f005 fce5 	bl	800fee8 <memset>
    pcb->prio = prio;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	79fa      	ldrb	r2, [r7, #7]
 800a522:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f640 3268 	movw	r2, #2920	@ 0xb68
 800a52a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f640 3268 	movw	r2, #2920	@ 0xb68
 800a534:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	22ff      	movs	r2, #255	@ 0xff
 800a542:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a54a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2206      	movs	r2, #6
 800a550:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2206      	movs	r2, #6
 800a558:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a560:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2201      	movs	r2, #1
 800a566:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800a56a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a0 <tcp_alloc+0xf8>)
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a572:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a4 <tcp_alloc+0xfc>)
 800a574:	781a      	ldrb	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f640 3268 	movw	r2, #2920	@ 0xb68
 800a580:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	4a08      	ldr	r2, [pc, #32]	@ (800a5a8 <tcp_alloc+0x100>)
 800a588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	4a07      	ldr	r2, [pc, #28]	@ (800a5ac <tcp_alloc+0x104>)
 800a590:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a594:	68fb      	ldr	r3, [r7, #12]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	2000b764 	.word	0x2000b764
 800a5a4:	2000b77a 	.word	0x2000b77a
 800a5a8:	0800a261 	.word	0x0800a261
 800a5ac:	006ddd00 	.word	0x006ddd00

0800a5b0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800a5b4:	2040      	movs	r0, #64	@ 0x40
 800a5b6:	f7ff ff77 	bl	800a4a8 <tcp_alloc>
 800a5ba:	4603      	mov	r3, r0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	611a      	str	r2, [r3, #16]
  }
}
 800a5d6:	bf00      	nop
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
	...

0800a5e4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00e      	beq.n	800a612 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	7d1b      	ldrb	r3, [r3, #20]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d106      	bne.n	800a60a <tcp_recv+0x26>
 800a5fc:	4b07      	ldr	r3, [pc, #28]	@ (800a61c <tcp_recv+0x38>)
 800a5fe:	f240 72df 	movw	r2, #2015	@ 0x7df
 800a602:	4907      	ldr	r1, [pc, #28]	@ (800a620 <tcp_recv+0x3c>)
 800a604:	4807      	ldr	r0, [pc, #28]	@ (800a624 <tcp_recv+0x40>)
 800a606:	f005 fb7d 	bl	800fd04 <iprintf>
    pcb->recv = recv;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	0801236c 	.word	0x0801236c
 800a620:	08012988 	.word	0x08012988
 800a624:	080123e8 	.word	0x080123e8

0800a628 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00e      	beq.n	800a656 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	7d1b      	ldrb	r3, [r3, #20]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d106      	bne.n	800a64e <tcp_sent+0x26>
 800a640:	4b07      	ldr	r3, [pc, #28]	@ (800a660 <tcp_sent+0x38>)
 800a642:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800a646:	4907      	ldr	r1, [pc, #28]	@ (800a664 <tcp_sent+0x3c>)
 800a648:	4807      	ldr	r0, [pc, #28]	@ (800a668 <tcp_sent+0x40>)
 800a64a:	f005 fb5b 	bl	800fd04 <iprintf>
    pcb->sent = sent;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	0801236c 	.word	0x0801236c
 800a664:	080129b0 	.word	0x080129b0
 800a668:	080123e8 	.word	0x080123e8

0800a66c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00e      	beq.n	800a69a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	7d1b      	ldrb	r3, [r3, #20]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d106      	bne.n	800a692 <tcp_err+0x26>
 800a684:	4b07      	ldr	r3, [pc, #28]	@ (800a6a4 <tcp_err+0x38>)
 800a686:	f640 020d 	movw	r2, #2061	@ 0x80d
 800a68a:	4907      	ldr	r1, [pc, #28]	@ (800a6a8 <tcp_err+0x3c>)
 800a68c:	4807      	ldr	r0, [pc, #28]	@ (800a6ac <tcp_err+0x40>)
 800a68e:	f005 fb39 	bl	800fd04 <iprintf>
    pcb->errf = err;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800a69a:	bf00      	nop
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	0801236c 	.word	0x0801236c
 800a6a8:	080129d8 	.word	0x080129d8
 800a6ac:	080123e8 	.word	0x080123e8

0800a6b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d107      	bne.n	800a6ce <tcp_pcb_purge+0x1e>
 800a6be:	4b23      	ldr	r3, [pc, #140]	@ (800a74c <tcp_pcb_purge+0x9c>)
 800a6c0:	f640 0251 	movw	r2, #2129	@ 0x851
 800a6c4:	4922      	ldr	r1, [pc, #136]	@ (800a750 <tcp_pcb_purge+0xa0>)
 800a6c6:	4823      	ldr	r0, [pc, #140]	@ (800a754 <tcp_pcb_purge+0xa4>)
 800a6c8:	f005 fb1c 	bl	800fd04 <iprintf>
 800a6cc:	e03a      	b.n	800a744 <tcp_pcb_purge+0x94>

  if (pcb->state != CLOSED &&
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	7d1b      	ldrb	r3, [r3, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d036      	beq.n	800a744 <tcp_pcb_purge+0x94>
      pcb->state != TIME_WAIT &&
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a6da:	2b0a      	cmp	r3, #10
 800a6dc:	d032      	beq.n	800a744 <tcp_pcb_purge+0x94>
      pcb->state != LISTEN) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d02e      	beq.n	800a744 <tcp_pcb_purge+0x94>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7fe fcae 	bl	8009048 <tcp_backlog_accepted>

    if (pcb->refused_data != NULL) {
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d007      	beq.n	800a704 <tcp_pcb_purge+0x54>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fe f953 	bl	80089a4 <pbuf_free>
      pcb->refused_data = NULL;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <tcp_pcb_purge+0x62>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f987 	bl	800aa20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a718:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff fd44 	bl	800a1ac <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff fd3f 	bl	800a1ac <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	0801236c 	.word	0x0801236c
 800a750:	08012a38 	.word	0x08012a38
 800a754:	080123e8 	.word	0x080123e8

0800a758 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d106      	bne.n	800a776 <tcp_pcb_remove+0x1e>
 800a768:	4b3e      	ldr	r3, [pc, #248]	@ (800a864 <tcp_pcb_remove+0x10c>)
 800a76a:	f640 0283 	movw	r2, #2179	@ 0x883
 800a76e:	493e      	ldr	r1, [pc, #248]	@ (800a868 <tcp_pcb_remove+0x110>)
 800a770:	483e      	ldr	r0, [pc, #248]	@ (800a86c <tcp_pcb_remove+0x114>)
 800a772:	f005 fac7 	bl	800fd04 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d106      	bne.n	800a78a <tcp_pcb_remove+0x32>
 800a77c:	4b39      	ldr	r3, [pc, #228]	@ (800a864 <tcp_pcb_remove+0x10c>)
 800a77e:	f640 0284 	movw	r2, #2180	@ 0x884
 800a782:	493b      	ldr	r1, [pc, #236]	@ (800a870 <tcp_pcb_remove+0x118>)
 800a784:	4839      	ldr	r0, [pc, #228]	@ (800a86c <tcp_pcb_remove+0x114>)
 800a786:	f005 fabd 	bl	800fd04 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	429a      	cmp	r2, r3
 800a792:	d105      	bne.n	800a7a0 <tcp_pcb_remove+0x48>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	68da      	ldr	r2, [r3, #12]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	e013      	b.n	800a7c8 <tcp_pcb_remove+0x70>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	e00c      	b.n	800a7c2 <tcp_pcb_remove+0x6a>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d104      	bne.n	800a7bc <tcp_pcb_remove+0x64>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68da      	ldr	r2, [r3, #12]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	60da      	str	r2, [r3, #12]
 800a7ba:	e005      	b.n	800a7c8 <tcp_pcb_remove+0x70>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1ef      	bne.n	800a7a8 <tcp_pcb_remove+0x50>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a7ce:	6838      	ldr	r0, [r7, #0]
 800a7d0:	f7ff ff6e 	bl	800a6b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	7d1b      	ldrb	r3, [r3, #20]
 800a7d8:	2b0a      	cmp	r3, #10
 800a7da:	d013      	beq.n	800a804 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d00f      	beq.n	800a804 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	8b5b      	ldrh	r3, [r3, #26]
 800a7e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d009      	beq.n	800a804 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	8b5b      	ldrh	r3, [r3, #26]
 800a7f4:	f043 0302 	orr.w	r3, r3, #2
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a7fe:	6838      	ldr	r0, [r7, #0]
 800a800:	f003 fbdc 	bl	800dfbc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	7d1b      	ldrb	r3, [r3, #20]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d020      	beq.n	800a84e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d006      	beq.n	800a822 <tcp_pcb_remove+0xca>
 800a814:	4b13      	ldr	r3, [pc, #76]	@ (800a864 <tcp_pcb_remove+0x10c>)
 800a816:	f640 0293 	movw	r2, #2195	@ 0x893
 800a81a:	4916      	ldr	r1, [pc, #88]	@ (800a874 <tcp_pcb_remove+0x11c>)
 800a81c:	4813      	ldr	r0, [pc, #76]	@ (800a86c <tcp_pcb_remove+0x114>)
 800a81e:	f005 fa71 	bl	800fd04 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a826:	2b00      	cmp	r3, #0
 800a828:	d006      	beq.n	800a838 <tcp_pcb_remove+0xe0>
 800a82a:	4b0e      	ldr	r3, [pc, #56]	@ (800a864 <tcp_pcb_remove+0x10c>)
 800a82c:	f640 0294 	movw	r2, #2196	@ 0x894
 800a830:	4911      	ldr	r1, [pc, #68]	@ (800a878 <tcp_pcb_remove+0x120>)
 800a832:	480e      	ldr	r0, [pc, #56]	@ (800a86c <tcp_pcb_remove+0x114>)
 800a834:	f005 fa66 	bl	800fd04 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d006      	beq.n	800a84e <tcp_pcb_remove+0xf6>
 800a840:	4b08      	ldr	r3, [pc, #32]	@ (800a864 <tcp_pcb_remove+0x10c>)
 800a842:	f640 0296 	movw	r2, #2198	@ 0x896
 800a846:	490d      	ldr	r1, [pc, #52]	@ (800a87c <tcp_pcb_remove+0x124>)
 800a848:	4808      	ldr	r0, [pc, #32]	@ (800a86c <tcp_pcb_remove+0x114>)
 800a84a:	f005 fa5b 	bl	800fd04 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2200      	movs	r2, #0
 800a852:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2200      	movs	r2, #0
 800a858:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	0801236c 	.word	0x0801236c
 800a868:	08012a54 	.word	0x08012a54
 800a86c:	080123e8 	.word	0x080123e8
 800a870:	08012a70 	.word	0x08012a70
 800a874:	08012a90 	.word	0x08012a90
 800a878:	08012aa8 	.word	0x08012aa8
 800a87c:	08012ac4 	.word	0x08012ac4

0800a880 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d106      	bne.n	800a89c <tcp_next_iss+0x1c>
 800a88e:	4b0a      	ldr	r3, [pc, #40]	@ (800a8b8 <tcp_next_iss+0x38>)
 800a890:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a894:	4909      	ldr	r1, [pc, #36]	@ (800a8bc <tcp_next_iss+0x3c>)
 800a896:	480a      	ldr	r0, [pc, #40]	@ (800a8c0 <tcp_next_iss+0x40>)
 800a898:	f005 fa34 	bl	800fd04 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a89c:	4b09      	ldr	r3, [pc, #36]	@ (800a8c4 <tcp_next_iss+0x44>)
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	4b09      	ldr	r3, [pc, #36]	@ (800a8c8 <tcp_next_iss+0x48>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	4a07      	ldr	r2, [pc, #28]	@ (800a8c4 <tcp_next_iss+0x44>)
 800a8a8:	6013      	str	r3, [r2, #0]
  return iss;
 800a8aa:	4b06      	ldr	r3, [pc, #24]	@ (800a8c4 <tcp_next_iss+0x44>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0801236c 	.word	0x0801236c
 800a8bc:	08012adc 	.word	0x08012adc
 800a8c0:	080123e8 	.word	0x080123e8
 800a8c4:	20000024 	.word	0x20000024
 800a8c8:	2000b764 	.word	0x2000b764

0800a8cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
 800a8d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d106      	bne.n	800a8ee <tcp_eff_send_mss_netif+0x22>
 800a8e0:	4b14      	ldr	r3, [pc, #80]	@ (800a934 <tcp_eff_send_mss_netif+0x68>)
 800a8e2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a8e6:	4914      	ldr	r1, [pc, #80]	@ (800a938 <tcp_eff_send_mss_netif+0x6c>)
 800a8e8:	4814      	ldr	r0, [pc, #80]	@ (800a93c <tcp_eff_send_mss_netif+0x70>)
 800a8ea:	f005 fa0b 	bl	800fd04 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a8f4:	89fb      	ldrh	r3, [r7, #14]
 800a8f6:	e019      	b.n	800a92c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a8fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a8fe:	8afb      	ldrh	r3, [r7, #22]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d012      	beq.n	800a92a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a904:	2328      	movs	r3, #40	@ 0x28
 800a906:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a908:	8afa      	ldrh	r2, [r7, #22]
 800a90a:	8abb      	ldrh	r3, [r7, #20]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d904      	bls.n	800a91a <tcp_eff_send_mss_netif+0x4e>
 800a910:	8afa      	ldrh	r2, [r7, #22]
 800a912:	8abb      	ldrh	r3, [r7, #20]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	b29b      	uxth	r3, r3
 800a918:	e000      	b.n	800a91c <tcp_eff_send_mss_netif+0x50>
 800a91a:	2300      	movs	r3, #0
 800a91c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a91e:	8a7a      	ldrh	r2, [r7, #18]
 800a920:	89fb      	ldrh	r3, [r7, #14]
 800a922:	4293      	cmp	r3, r2
 800a924:	bf28      	it	cs
 800a926:	4613      	movcs	r3, r2
 800a928:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a92a:	89fb      	ldrh	r3, [r7, #14]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	0801236c 	.word	0x0801236c
 800a938:	08012af8 	.word	0x08012af8
 800a93c:	080123e8 	.word	0x080123e8

0800a940 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d119      	bne.n	800a988 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a954:	4b10      	ldr	r3, [pc, #64]	@ (800a998 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a956:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a95a:	4910      	ldr	r1, [pc, #64]	@ (800a99c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a95c:	4810      	ldr	r0, [pc, #64]	@ (800a9a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a95e:	f005 f9d1 	bl	800fd04 <iprintf>

  while (pcb != NULL) {
 800a962:	e011      	b.n	800a988 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d108      	bne.n	800a982 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f7fe fdde 	bl	8009538 <tcp_abort>
      pcb = next;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	e002      	b.n	800a988 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1ea      	bne.n	800a964 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a98e:	bf00      	nop
 800a990:	bf00      	nop
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	0801236c 	.word	0x0801236c
 800a99c:	08012b20 	.word	0x08012b20
 800a9a0:	080123e8 	.word	0x080123e8

0800a9a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d02a      	beq.n	800aa0a <tcp_netif_ip_addr_changed+0x66>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d026      	beq.n	800aa0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a9bc:	4b15      	ldr	r3, [pc, #84]	@ (800aa14 <tcp_netif_ip_addr_changed+0x70>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7ff ffbc 	bl	800a940 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a9c8:	4b13      	ldr	r3, [pc, #76]	@ (800aa18 <tcp_netif_ip_addr_changed+0x74>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff ffb6 	bl	800a940 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d017      	beq.n	800aa0a <tcp_netif_ip_addr_changed+0x66>
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d013      	beq.n	800aa0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a9e2:	4b0e      	ldr	r3, [pc, #56]	@ (800aa1c <tcp_netif_ip_addr_changed+0x78>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	60fb      	str	r3, [r7, #12]
 800a9e8:	e00c      	b.n	800aa04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d103      	bne.n	800a9fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1ef      	bne.n	800a9ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800aa0a:	bf00      	nop
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	2000b770 	.word	0x2000b770
 800aa18:	2000b768 	.word	0x2000b768
 800aa1c:	2000b76c 	.word	0x2000b76c

0800aa20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d007      	beq.n	800aa40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff fbb9 	bl	800a1ac <tcp_segs_free>
    pcb->ooseq = NULL;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800aa48:	b590      	push	{r4, r7, lr}
 800aa4a:	b08d      	sub	sp, #52	@ 0x34
 800aa4c:	af04      	add	r7, sp, #16
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d105      	bne.n	800aa64 <tcp_input+0x1c>
 800aa58:	4b9b      	ldr	r3, [pc, #620]	@ (800acc8 <tcp_input+0x280>)
 800aa5a:	2283      	movs	r2, #131	@ 0x83
 800aa5c:	499b      	ldr	r1, [pc, #620]	@ (800accc <tcp_input+0x284>)
 800aa5e:	489c      	ldr	r0, [pc, #624]	@ (800acd0 <tcp_input+0x288>)
 800aa60:	f005 f950 	bl	800fd04 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	4a9a      	ldr	r2, [pc, #616]	@ (800acd4 <tcp_input+0x28c>)
 800aa6a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	895b      	ldrh	r3, [r3, #10]
 800aa70:	2b13      	cmp	r3, #19
 800aa72:	f240 83d1 	bls.w	800b218 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800aa76:	4b98      	ldr	r3, [pc, #608]	@ (800acd8 <tcp_input+0x290>)
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	4a97      	ldr	r2, [pc, #604]	@ (800acd8 <tcp_input+0x290>)
 800aa7c:	6812      	ldr	r2, [r2, #0]
 800aa7e:	4611      	mov	r1, r2
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fb fdf5 	bl	8006670 <ip4_addr_isbroadcast_u32>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f040 83c7 	bne.w	800b21c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800aa8e:	4b92      	ldr	r3, [pc, #584]	@ (800acd8 <tcp_input+0x290>)
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800aa96:	2be0      	cmp	r3, #224	@ 0xe0
 800aa98:	f000 83c0 	beq.w	800b21c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800aa9c:	4b8d      	ldr	r3, [pc, #564]	@ (800acd4 <tcp_input+0x28c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	899b      	ldrh	r3, [r3, #12]
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fa f957 	bl	8004d58 <lwip_htons>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	0b1b      	lsrs	r3, r3, #12
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800aab6:	7cbb      	ldrb	r3, [r7, #18]
 800aab8:	2b13      	cmp	r3, #19
 800aaba:	f240 83b1 	bls.w	800b220 <tcp_input+0x7d8>
 800aabe:	7cbb      	ldrb	r3, [r7, #18]
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	891b      	ldrh	r3, [r3, #8]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	f200 83aa 	bhi.w	800b220 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800aacc:	7cbb      	ldrb	r3, [r7, #18]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	3b14      	subs	r3, #20
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	4b81      	ldr	r3, [pc, #516]	@ (800acdc <tcp_input+0x294>)
 800aad6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800aad8:	4b81      	ldr	r3, [pc, #516]	@ (800ace0 <tcp_input+0x298>)
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	895a      	ldrh	r2, [r3, #10]
 800aae2:	7cbb      	ldrb	r3, [r7, #18]
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d309      	bcc.n	800aafe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800aaea:	4b7c      	ldr	r3, [pc, #496]	@ (800acdc <tcp_input+0x294>)
 800aaec:	881a      	ldrh	r2, [r3, #0]
 800aaee:	4b7d      	ldr	r3, [pc, #500]	@ (800ace4 <tcp_input+0x29c>)
 800aaf0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800aaf2:	7cbb      	ldrb	r3, [r7, #18]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7fd fece 	bl	8008898 <pbuf_remove_header>
 800aafc:	e04e      	b.n	800ab9c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d105      	bne.n	800ab12 <tcp_input+0xca>
 800ab06:	4b70      	ldr	r3, [pc, #448]	@ (800acc8 <tcp_input+0x280>)
 800ab08:	22c2      	movs	r2, #194	@ 0xc2
 800ab0a:	4977      	ldr	r1, [pc, #476]	@ (800ace8 <tcp_input+0x2a0>)
 800ab0c:	4870      	ldr	r0, [pc, #448]	@ (800acd0 <tcp_input+0x288>)
 800ab0e:	f005 f8f9 	bl	800fd04 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ab12:	2114      	movs	r1, #20
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7fd febf 	bl	8008898 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	895a      	ldrh	r2, [r3, #10]
 800ab1e:	4b71      	ldr	r3, [pc, #452]	@ (800ace4 <tcp_input+0x29c>)
 800ab20:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ab22:	4b6e      	ldr	r3, [pc, #440]	@ (800acdc <tcp_input+0x294>)
 800ab24:	881a      	ldrh	r2, [r3, #0]
 800ab26:	4b6f      	ldr	r3, [pc, #444]	@ (800ace4 <tcp_input+0x29c>)
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ab2e:	4b6d      	ldr	r3, [pc, #436]	@ (800ace4 <tcp_input+0x29c>)
 800ab30:	881b      	ldrh	r3, [r3, #0]
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7fd feaf 	bl	8008898 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	895b      	ldrh	r3, [r3, #10]
 800ab40:	8a3a      	ldrh	r2, [r7, #16]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	f200 836e 	bhi.w	800b224 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	4a64      	ldr	r2, [pc, #400]	@ (800ace0 <tcp_input+0x298>)
 800ab50:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	8a3a      	ldrh	r2, [r7, #16]
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fd fe9c 	bl	8008898 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	891a      	ldrh	r2, [r3, #8]
 800ab64:	8a3b      	ldrh	r3, [r7, #16]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	895b      	ldrh	r3, [r3, #10]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d005      	beq.n	800ab82 <tcp_input+0x13a>
 800ab76:	4b54      	ldr	r3, [pc, #336]	@ (800acc8 <tcp_input+0x280>)
 800ab78:	22df      	movs	r2, #223	@ 0xdf
 800ab7a:	495c      	ldr	r1, [pc, #368]	@ (800acec <tcp_input+0x2a4>)
 800ab7c:	4854      	ldr	r0, [pc, #336]	@ (800acd0 <tcp_input+0x288>)
 800ab7e:	f005 f8c1 	bl	800fd04 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	891a      	ldrh	r2, [r3, #8]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	891b      	ldrh	r3, [r3, #8]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d005      	beq.n	800ab9c <tcp_input+0x154>
 800ab90:	4b4d      	ldr	r3, [pc, #308]	@ (800acc8 <tcp_input+0x280>)
 800ab92:	22e0      	movs	r2, #224	@ 0xe0
 800ab94:	4956      	ldr	r1, [pc, #344]	@ (800acf0 <tcp_input+0x2a8>)
 800ab96:	484e      	ldr	r0, [pc, #312]	@ (800acd0 <tcp_input+0x288>)
 800ab98:	f005 f8b4 	bl	800fd04 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ab9c:	4b4d      	ldr	r3, [pc, #308]	@ (800acd4 <tcp_input+0x28c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	4a4b      	ldr	r2, [pc, #300]	@ (800acd4 <tcp_input+0x28c>)
 800aba6:	6814      	ldr	r4, [r2, #0]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fa f8d5 	bl	8004d58 <lwip_htons>
 800abae:	4603      	mov	r3, r0
 800abb0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800abb2:	4b48      	ldr	r3, [pc, #288]	@ (800acd4 <tcp_input+0x28c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	885b      	ldrh	r3, [r3, #2]
 800abb8:	b29b      	uxth	r3, r3
 800abba:	4a46      	ldr	r2, [pc, #280]	@ (800acd4 <tcp_input+0x28c>)
 800abbc:	6814      	ldr	r4, [r2, #0]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fa f8ca 	bl	8004d58 <lwip_htons>
 800abc4:	4603      	mov	r3, r0
 800abc6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800abc8:	4b42      	ldr	r3, [pc, #264]	@ (800acd4 <tcp_input+0x28c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	4a41      	ldr	r2, [pc, #260]	@ (800acd4 <tcp_input+0x28c>)
 800abd0:	6814      	ldr	r4, [r2, #0]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fa f8d6 	bl	8004d84 <lwip_htonl>
 800abd8:	4603      	mov	r3, r0
 800abda:	6063      	str	r3, [r4, #4]
 800abdc:	6863      	ldr	r3, [r4, #4]
 800abde:	4a45      	ldr	r2, [pc, #276]	@ (800acf4 <tcp_input+0x2ac>)
 800abe0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800abe2:	4b3c      	ldr	r3, [pc, #240]	@ (800acd4 <tcp_input+0x28c>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	4a3a      	ldr	r2, [pc, #232]	@ (800acd4 <tcp_input+0x28c>)
 800abea:	6814      	ldr	r4, [r2, #0]
 800abec:	4618      	mov	r0, r3
 800abee:	f7fa f8c9 	bl	8004d84 <lwip_htonl>
 800abf2:	4603      	mov	r3, r0
 800abf4:	60a3      	str	r3, [r4, #8]
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	4a3f      	ldr	r2, [pc, #252]	@ (800acf8 <tcp_input+0x2b0>)
 800abfa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800abfc:	4b35      	ldr	r3, [pc, #212]	@ (800acd4 <tcp_input+0x28c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	89db      	ldrh	r3, [r3, #14]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	4a33      	ldr	r2, [pc, #204]	@ (800acd4 <tcp_input+0x28c>)
 800ac06:	6814      	ldr	r4, [r2, #0]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fa f8a5 	bl	8004d58 <lwip_htons>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ac12:	4b30      	ldr	r3, [pc, #192]	@ (800acd4 <tcp_input+0x28c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	899b      	ldrh	r3, [r3, #12]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fa f89c 	bl	8004d58 <lwip_htons>
 800ac20:	4603      	mov	r3, r0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	4b34      	ldr	r3, [pc, #208]	@ (800acfc <tcp_input+0x2b4>)
 800ac2c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	891a      	ldrh	r2, [r3, #8]
 800ac32:	4b33      	ldr	r3, [pc, #204]	@ (800ad00 <tcp_input+0x2b8>)
 800ac34:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ac36:	4b31      	ldr	r3, [pc, #196]	@ (800acfc <tcp_input+0x2b4>)
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	f003 0303 	and.w	r3, r3, #3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00c      	beq.n	800ac5c <tcp_input+0x214>
    tcplen++;
 800ac42:	4b2f      	ldr	r3, [pc, #188]	@ (800ad00 <tcp_input+0x2b8>)
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	4b2d      	ldr	r3, [pc, #180]	@ (800ad00 <tcp_input+0x2b8>)
 800ac4c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	891a      	ldrh	r2, [r3, #8]
 800ac52:	4b2b      	ldr	r3, [pc, #172]	@ (800ad00 <tcp_input+0x2b8>)
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	f200 82e6 	bhi.w	800b228 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac60:	4b28      	ldr	r3, [pc, #160]	@ (800ad04 <tcp_input+0x2bc>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	61fb      	str	r3, [r7, #28]
 800ac66:	e09d      	b.n	800ada4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	7d1b      	ldrb	r3, [r3, #20]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d105      	bne.n	800ac7c <tcp_input+0x234>
 800ac70:	4b15      	ldr	r3, [pc, #84]	@ (800acc8 <tcp_input+0x280>)
 800ac72:	22fb      	movs	r2, #251	@ 0xfb
 800ac74:	4924      	ldr	r1, [pc, #144]	@ (800ad08 <tcp_input+0x2c0>)
 800ac76:	4816      	ldr	r0, [pc, #88]	@ (800acd0 <tcp_input+0x288>)
 800ac78:	f005 f844 	bl	800fd04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	7d1b      	ldrb	r3, [r3, #20]
 800ac80:	2b0a      	cmp	r3, #10
 800ac82:	d105      	bne.n	800ac90 <tcp_input+0x248>
 800ac84:	4b10      	ldr	r3, [pc, #64]	@ (800acc8 <tcp_input+0x280>)
 800ac86:	22fc      	movs	r2, #252	@ 0xfc
 800ac88:	4920      	ldr	r1, [pc, #128]	@ (800ad0c <tcp_input+0x2c4>)
 800ac8a:	4811      	ldr	r0, [pc, #68]	@ (800acd0 <tcp_input+0x288>)
 800ac8c:	f005 f83a 	bl	800fd04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	7d1b      	ldrb	r3, [r3, #20]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d105      	bne.n	800aca4 <tcp_input+0x25c>
 800ac98:	4b0b      	ldr	r3, [pc, #44]	@ (800acc8 <tcp_input+0x280>)
 800ac9a:	22fd      	movs	r2, #253	@ 0xfd
 800ac9c:	491c      	ldr	r1, [pc, #112]	@ (800ad10 <tcp_input+0x2c8>)
 800ac9e:	480c      	ldr	r0, [pc, #48]	@ (800acd0 <tcp_input+0x288>)
 800aca0:	f005 f830 	bl	800fd04 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	7a1b      	ldrb	r3, [r3, #8]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d033      	beq.n	800ad14 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	7a1a      	ldrb	r2, [r3, #8]
 800acb0:	4b09      	ldr	r3, [pc, #36]	@ (800acd8 <tcp_input+0x290>)
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800acb8:	3301      	adds	r3, #1
 800acba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d029      	beq.n	800ad14 <tcp_input+0x2cc>
      prev = pcb;
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	61bb      	str	r3, [r7, #24]
      continue;
 800acc4:	e06b      	b.n	800ad9e <tcp_input+0x356>
 800acc6:	bf00      	nop
 800acc8:	08012b54 	.word	0x08012b54
 800accc:	08012bc0 	.word	0x08012bc0
 800acd0:	08012bd8 	.word	0x08012bd8
 800acd4:	2000b78c 	.word	0x2000b78c
 800acd8:	20004e5c 	.word	0x20004e5c
 800acdc:	2000b790 	.word	0x2000b790
 800ace0:	2000b794 	.word	0x2000b794
 800ace4:	2000b792 	.word	0x2000b792
 800ace8:	08012c00 	.word	0x08012c00
 800acec:	08012c10 	.word	0x08012c10
 800acf0:	08012c1c 	.word	0x08012c1c
 800acf4:	2000b79c 	.word	0x2000b79c
 800acf8:	2000b7a0 	.word	0x2000b7a0
 800acfc:	2000b7a8 	.word	0x2000b7a8
 800ad00:	2000b7a6 	.word	0x2000b7a6
 800ad04:	2000b770 	.word	0x2000b770
 800ad08:	08012c3c 	.word	0x08012c3c
 800ad0c:	08012c64 	.word	0x08012c64
 800ad10:	08012c90 	.word	0x08012c90
    }

    if (pcb->remote_port == tcphdr->src &&
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	8b1a      	ldrh	r2, [r3, #24]
 800ad18:	4b72      	ldr	r3, [pc, #456]	@ (800aee4 <tcp_input+0x49c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d13a      	bne.n	800ad9a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	8ada      	ldrh	r2, [r3, #22]
 800ad28:	4b6e      	ldr	r3, [pc, #440]	@ (800aee4 <tcp_input+0x49c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	885b      	ldrh	r3, [r3, #2]
 800ad2e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d132      	bne.n	800ad9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	4b6b      	ldr	r3, [pc, #428]	@ (800aee8 <tcp_input+0x4a0>)
 800ad3a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d12c      	bne.n	800ad9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	4b68      	ldr	r3, [pc, #416]	@ (800aee8 <tcp_input+0x4a0>)
 800ad46:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d126      	bne.n	800ad9a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	69fa      	ldr	r2, [r7, #28]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d106      	bne.n	800ad64 <tcp_input+0x31c>
 800ad56:	4b65      	ldr	r3, [pc, #404]	@ (800aeec <tcp_input+0x4a4>)
 800ad58:	f240 120d 	movw	r2, #269	@ 0x10d
 800ad5c:	4964      	ldr	r1, [pc, #400]	@ (800aef0 <tcp_input+0x4a8>)
 800ad5e:	4865      	ldr	r0, [pc, #404]	@ (800aef4 <tcp_input+0x4ac>)
 800ad60:	f004 ffd0 	bl	800fd04 <iprintf>
      if (prev != NULL) {
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00a      	beq.n	800ad80 <tcp_input+0x338>
        prev->next = pcb->next;
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	68da      	ldr	r2, [r3, #12]
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ad72:	4b61      	ldr	r3, [pc, #388]	@ (800aef8 <tcp_input+0x4b0>)
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ad7a:	4a5f      	ldr	r2, [pc, #380]	@ (800aef8 <tcp_input+0x4b0>)
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d111      	bne.n	800adae <tcp_input+0x366>
 800ad8a:	4b58      	ldr	r3, [pc, #352]	@ (800aeec <tcp_input+0x4a4>)
 800ad8c:	f240 1215 	movw	r2, #277	@ 0x115
 800ad90:	495a      	ldr	r1, [pc, #360]	@ (800aefc <tcp_input+0x4b4>)
 800ad92:	4858      	ldr	r0, [pc, #352]	@ (800aef4 <tcp_input+0x4ac>)
 800ad94:	f004 ffb6 	bl	800fd04 <iprintf>
      break;
 800ad98:	e009      	b.n	800adae <tcp_input+0x366>
    }
    prev = pcb;
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	61fb      	str	r3, [r7, #28]
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f47f af5e 	bne.w	800ac68 <tcp_input+0x220>
 800adac:	e000      	b.n	800adb0 <tcp_input+0x368>
      break;
 800adae:	bf00      	nop
  }

  if (pcb == NULL) {
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f040 80aa 	bne.w	800af0c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800adb8:	4b51      	ldr	r3, [pc, #324]	@ (800af00 <tcp_input+0x4b8>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	61fb      	str	r3, [r7, #28]
 800adbe:	e03f      	b.n	800ae40 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	7d1b      	ldrb	r3, [r3, #20]
 800adc4:	2b0a      	cmp	r3, #10
 800adc6:	d006      	beq.n	800add6 <tcp_input+0x38e>
 800adc8:	4b48      	ldr	r3, [pc, #288]	@ (800aeec <tcp_input+0x4a4>)
 800adca:	f240 121f 	movw	r2, #287	@ 0x11f
 800adce:	494d      	ldr	r1, [pc, #308]	@ (800af04 <tcp_input+0x4bc>)
 800add0:	4848      	ldr	r0, [pc, #288]	@ (800aef4 <tcp_input+0x4ac>)
 800add2:	f004 ff97 	bl	800fd04 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	7a1b      	ldrb	r3, [r3, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d009      	beq.n	800adf2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	7a1a      	ldrb	r2, [r3, #8]
 800ade2:	4b41      	ldr	r3, [pc, #260]	@ (800aee8 <tcp_input+0x4a0>)
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800adea:	3301      	adds	r3, #1
 800adec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800adee:	429a      	cmp	r2, r3
 800adf0:	d122      	bne.n	800ae38 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	8b1a      	ldrh	r2, [r3, #24]
 800adf6:	4b3b      	ldr	r3, [pc, #236]	@ (800aee4 <tcp_input+0x49c>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d11b      	bne.n	800ae3a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	8ada      	ldrh	r2, [r3, #22]
 800ae06:	4b37      	ldr	r3, [pc, #220]	@ (800aee4 <tcp_input+0x49c>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	885b      	ldrh	r3, [r3, #2]
 800ae0c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d113      	bne.n	800ae3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	685a      	ldr	r2, [r3, #4]
 800ae16:	4b34      	ldr	r3, [pc, #208]	@ (800aee8 <tcp_input+0x4a0>)
 800ae18:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d10d      	bne.n	800ae3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	4b31      	ldr	r3, [pc, #196]	@ (800aee8 <tcp_input+0x4a0>)
 800ae24:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d107      	bne.n	800ae3a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ae2a:	69f8      	ldr	r0, [r7, #28]
 800ae2c:	f000 fb6c 	bl	800b508 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7fd fdb7 	bl	80089a4 <pbuf_free>
        return;
 800ae36:	e1fd      	b.n	800b234 <tcp_input+0x7ec>
        continue;
 800ae38:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	61fb      	str	r3, [r7, #28]
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1bc      	bne.n	800adc0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ae46:	2300      	movs	r3, #0
 800ae48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ae4a:	4b2f      	ldr	r3, [pc, #188]	@ (800af08 <tcp_input+0x4c0>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	617b      	str	r3, [r7, #20]
 800ae50:	e02a      	b.n	800aea8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	7a1b      	ldrb	r3, [r3, #8]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00c      	beq.n	800ae74 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	7a1a      	ldrb	r2, [r3, #8]
 800ae5e:	4b22      	ldr	r3, [pc, #136]	@ (800aee8 <tcp_input+0x4a0>)
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ae66:	3301      	adds	r3, #1
 800ae68:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d002      	beq.n	800ae74 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	61bb      	str	r3, [r7, #24]
        continue;
 800ae72:	e016      	b.n	800aea2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	8ada      	ldrh	r2, [r3, #22]
 800ae78:	4b1a      	ldr	r3, [pc, #104]	@ (800aee4 <tcp_input+0x49c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	885b      	ldrh	r3, [r3, #2]
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d10c      	bne.n	800ae9e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	4b17      	ldr	r3, [pc, #92]	@ (800aee8 <tcp_input+0x4a0>)
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d00f      	beq.n	800aeb0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00d      	beq.n	800aeb2 <tcp_input+0x46a>
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d009      	beq.n	800aeb2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1d1      	bne.n	800ae52 <tcp_input+0x40a>
 800aeae:	e000      	b.n	800aeb2 <tcp_input+0x46a>
            break;
 800aeb0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d029      	beq.n	800af0c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00a      	beq.n	800aed4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	68da      	ldr	r2, [r3, #12]
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aec6:	4b10      	ldr	r3, [pc, #64]	@ (800af08 <tcp_input+0x4c0>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aece:	4a0e      	ldr	r2, [pc, #56]	@ (800af08 <tcp_input+0x4c0>)
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800aed4:	6978      	ldr	r0, [r7, #20]
 800aed6:	f000 fa03 	bl	800b2e0 <tcp_listen_input>
      }
      pbuf_free(p);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7fd fd62 	bl	80089a4 <pbuf_free>
      return;
 800aee0:	e1a8      	b.n	800b234 <tcp_input+0x7ec>
 800aee2:	bf00      	nop
 800aee4:	2000b78c 	.word	0x2000b78c
 800aee8:	20004e5c 	.word	0x20004e5c
 800aeec:	08012b54 	.word	0x08012b54
 800aef0:	08012cb8 	.word	0x08012cb8
 800aef4:	08012bd8 	.word	0x08012bd8
 800aef8:	2000b770 	.word	0x2000b770
 800aefc:	08012ce4 	.word	0x08012ce4
 800af00:	2000b774 	.word	0x2000b774
 800af04:	08012d10 	.word	0x08012d10
 800af08:	2000b76c 	.word	0x2000b76c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f000 8158 	beq.w	800b1c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800af14:	4b95      	ldr	r3, [pc, #596]	@ (800b16c <tcp_input+0x724>)
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	891a      	ldrh	r2, [r3, #8]
 800af1e:	4b93      	ldr	r3, [pc, #588]	@ (800b16c <tcp_input+0x724>)
 800af20:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800af22:	4a92      	ldr	r2, [pc, #584]	@ (800b16c <tcp_input+0x724>)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800af28:	4b91      	ldr	r3, [pc, #580]	@ (800b170 <tcp_input+0x728>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a8f      	ldr	r2, [pc, #572]	@ (800b16c <tcp_input+0x724>)
 800af2e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800af30:	4b90      	ldr	r3, [pc, #576]	@ (800b174 <tcp_input+0x72c>)
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800af36:	4b90      	ldr	r3, [pc, #576]	@ (800b178 <tcp_input+0x730>)
 800af38:	2200      	movs	r2, #0
 800af3a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800af3c:	4b8f      	ldr	r3, [pc, #572]	@ (800b17c <tcp_input+0x734>)
 800af3e:	2200      	movs	r2, #0
 800af40:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800af42:	4b8f      	ldr	r3, [pc, #572]	@ (800b180 <tcp_input+0x738>)
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	f003 0308 	and.w	r3, r3, #8
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d006      	beq.n	800af5c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7b5b      	ldrb	r3, [r3, #13]
 800af52:	f043 0301 	orr.w	r3, r3, #1
 800af56:	b2da      	uxtb	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af60:	2b00      	cmp	r3, #0
 800af62:	d017      	beq.n	800af94 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800af64:	69f8      	ldr	r0, [r7, #28]
 800af66:	f7ff f8a3 	bl	800a0b0 <tcp_process_refused_data>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f113 0f0d 	cmn.w	r3, #13
 800af70:	d007      	beq.n	800af82 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00c      	beq.n	800af94 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800af7a:	4b82      	ldr	r3, [pc, #520]	@ (800b184 <tcp_input+0x73c>)
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d008      	beq.n	800af94 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af86:	2b00      	cmp	r3, #0
 800af88:	f040 80e4 	bne.w	800b154 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800af8c:	69f8      	ldr	r0, [r7, #28]
 800af8e:	f003 fe1b 	bl	800ebc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800af92:	e0df      	b.n	800b154 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 800af94:	4a7c      	ldr	r2, [pc, #496]	@ (800b188 <tcp_input+0x740>)
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800af9a:	69f8      	ldr	r0, [r7, #28]
 800af9c:	f000 fb2e 	bl	800b5fc <tcp_process>
 800afa0:	4603      	mov	r3, r0
 800afa2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800afa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afa8:	f113 0f0d 	cmn.w	r3, #13
 800afac:	f000 80d4 	beq.w	800b158 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 800afb0:	4b71      	ldr	r3, [pc, #452]	@ (800b178 <tcp_input+0x730>)
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	f003 0308 	and.w	r3, r3, #8
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d015      	beq.n	800afe8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d008      	beq.n	800afd8 <tcp_input+0x590>
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afcc:	69fa      	ldr	r2, [r7, #28]
 800afce:	6912      	ldr	r2, [r2, #16]
 800afd0:	f06f 010d 	mvn.w	r1, #13
 800afd4:	4610      	mov	r0, r2
 800afd6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800afd8:	69f9      	ldr	r1, [r7, #28]
 800afda:	486c      	ldr	r0, [pc, #432]	@ (800b18c <tcp_input+0x744>)
 800afdc:	f7ff fbbc 	bl	800a758 <tcp_pcb_remove>
        tcp_free(pcb);
 800afe0:	69f8      	ldr	r0, [r7, #28]
 800afe2:	f7fd ff7f 	bl	8008ee4 <tcp_free>
 800afe6:	e0da      	b.n	800b19e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800afec:	4b63      	ldr	r3, [pc, #396]	@ (800b17c <tcp_input+0x734>)
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d01d      	beq.n	800b030 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800aff4:	4b61      	ldr	r3, [pc, #388]	@ (800b17c <tcp_input+0x734>)
 800aff6:	881b      	ldrh	r3, [r3, #0]
 800aff8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00a      	beq.n	800b01a <tcp_input+0x5d2>
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b00a:	69fa      	ldr	r2, [r7, #28]
 800b00c:	6910      	ldr	r0, [r2, #16]
 800b00e:	89fa      	ldrh	r2, [r7, #14]
 800b010:	69f9      	ldr	r1, [r7, #28]
 800b012:	4798      	blx	r3
 800b014:	4603      	mov	r3, r0
 800b016:	74fb      	strb	r3, [r7, #19]
 800b018:	e001      	b.n	800b01e <tcp_input+0x5d6>
 800b01a:	2300      	movs	r3, #0
 800b01c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b01e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b022:	f113 0f0d 	cmn.w	r3, #13
 800b026:	f000 8099 	beq.w	800b15c <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b02a:	4b54      	ldr	r3, [pc, #336]	@ (800b17c <tcp_input+0x734>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b030:	69f8      	ldr	r0, [r7, #28]
 800b032:	f000 f915 	bl	800b260 <tcp_input_delayed_close>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f040 8091 	bne.w	800b160 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b03e:	4b4d      	ldr	r3, [pc, #308]	@ (800b174 <tcp_input+0x72c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d041      	beq.n	800b0ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d006      	beq.n	800b05c <tcp_input+0x614>
 800b04e:	4b50      	ldr	r3, [pc, #320]	@ (800b190 <tcp_input+0x748>)
 800b050:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800b054:	494f      	ldr	r1, [pc, #316]	@ (800b194 <tcp_input+0x74c>)
 800b056:	4850      	ldr	r0, [pc, #320]	@ (800b198 <tcp_input+0x750>)
 800b058:	f004 fe54 	bl	800fd04 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	8b5b      	ldrh	r3, [r3, #26]
 800b060:	f003 0310 	and.w	r3, r3, #16
 800b064:	2b00      	cmp	r3, #0
 800b066:	d008      	beq.n	800b07a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b068:	4b42      	ldr	r3, [pc, #264]	@ (800b174 <tcp_input+0x72c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fd fc99 	bl	80089a4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b072:	69f8      	ldr	r0, [r7, #28]
 800b074:	f7fe fa60 	bl	8009538 <tcp_abort>
            goto aborted;
 800b078:	e091      	b.n	800b19e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00c      	beq.n	800b09e <tcp_input+0x656>
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	6918      	ldr	r0, [r3, #16]
 800b08e:	4b39      	ldr	r3, [pc, #228]	@ (800b174 <tcp_input+0x72c>)
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	2300      	movs	r3, #0
 800b094:	69f9      	ldr	r1, [r7, #28]
 800b096:	47a0      	blx	r4
 800b098:	4603      	mov	r3, r0
 800b09a:	74fb      	strb	r3, [r7, #19]
 800b09c:	e008      	b.n	800b0b0 <tcp_input+0x668>
 800b09e:	4b35      	ldr	r3, [pc, #212]	@ (800b174 <tcp_input+0x72c>)
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	69f9      	ldr	r1, [r7, #28]
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	f7ff f8da 	bl	800a260 <tcp_recv_null>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b0b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b0b4:	f113 0f0d 	cmn.w	r3, #13
 800b0b8:	d054      	beq.n	800b164 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b0ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b0c2:	4b2c      	ldr	r3, [pc, #176]	@ (800b174 <tcp_input+0x72c>)
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b0ca:	4b2b      	ldr	r3, [pc, #172]	@ (800b178 <tcp_input+0x730>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	f003 0320 	and.w	r3, r3, #32
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d031      	beq.n	800b13a <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d009      	beq.n	800b0f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0e2:	7b5a      	ldrb	r2, [r3, #13]
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0e8:	f042 0220 	orr.w	r2, r2, #32
 800b0ec:	b2d2      	uxtb	r2, r2
 800b0ee:	735a      	strb	r2, [r3, #13]
 800b0f0:	e023      	b.n	800b13a <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0f6:	f640 3268 	movw	r2, #2920	@ 0xb68
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d005      	beq.n	800b10a <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b102:	3301      	adds	r3, #1
 800b104:	b29a      	uxth	r2, r3
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00b      	beq.n	800b12c <tcp_input+0x6e4>
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	6918      	ldr	r0, [r3, #16]
 800b11e:	2300      	movs	r3, #0
 800b120:	2200      	movs	r2, #0
 800b122:	69f9      	ldr	r1, [r7, #28]
 800b124:	47a0      	blx	r4
 800b126:	4603      	mov	r3, r0
 800b128:	74fb      	strb	r3, [r7, #19]
 800b12a:	e001      	b.n	800b130 <tcp_input+0x6e8>
 800b12c:	2300      	movs	r3, #0
 800b12e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b130:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b134:	f113 0f0d 	cmn.w	r3, #13
 800b138:	d016      	beq.n	800b168 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b13a:	4b13      	ldr	r3, [pc, #76]	@ (800b188 <tcp_input+0x740>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b140:	69f8      	ldr	r0, [r7, #28]
 800b142:	f000 f88d 	bl	800b260 <tcp_input_delayed_close>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d127      	bne.n	800b19c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b14c:	69f8      	ldr	r0, [r7, #28]
 800b14e:	f002 ff35 	bl	800dfbc <tcp_output>
 800b152:	e024      	b.n	800b19e <tcp_input+0x756>
        goto aborted;
 800b154:	bf00      	nop
 800b156:	e022      	b.n	800b19e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b158:	bf00      	nop
 800b15a:	e020      	b.n	800b19e <tcp_input+0x756>
              goto aborted;
 800b15c:	bf00      	nop
 800b15e:	e01e      	b.n	800b19e <tcp_input+0x756>
          goto aborted;
 800b160:	bf00      	nop
 800b162:	e01c      	b.n	800b19e <tcp_input+0x756>
            goto aborted;
 800b164:	bf00      	nop
 800b166:	e01a      	b.n	800b19e <tcp_input+0x756>
              goto aborted;
 800b168:	bf00      	nop
 800b16a:	e018      	b.n	800b19e <tcp_input+0x756>
 800b16c:	2000b77c 	.word	0x2000b77c
 800b170:	2000b78c 	.word	0x2000b78c
 800b174:	2000b7ac 	.word	0x2000b7ac
 800b178:	2000b7a9 	.word	0x2000b7a9
 800b17c:	2000b7a4 	.word	0x2000b7a4
 800b180:	2000b7a8 	.word	0x2000b7a8
 800b184:	2000b7a6 	.word	0x2000b7a6
 800b188:	2000b7b0 	.word	0x2000b7b0
 800b18c:	2000b770 	.word	0x2000b770
 800b190:	08012b54 	.word	0x08012b54
 800b194:	08012d40 	.word	0x08012d40
 800b198:	08012bd8 	.word	0x08012bd8
          goto aborted;
 800b19c:	bf00      	nop
    tcp_input_pcb = NULL;
 800b19e:	4b27      	ldr	r3, [pc, #156]	@ (800b23c <tcp_input+0x7f4>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b1a4:	4b26      	ldr	r3, [pc, #152]	@ (800b240 <tcp_input+0x7f8>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b1aa:	4b26      	ldr	r3, [pc, #152]	@ (800b244 <tcp_input+0x7fc>)
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d03f      	beq.n	800b232 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b1b2:	4b24      	ldr	r3, [pc, #144]	@ (800b244 <tcp_input+0x7fc>)
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fd fbf4 	bl	80089a4 <pbuf_free>
      inseg.p = NULL;
 800b1bc:	4b21      	ldr	r3, [pc, #132]	@ (800b244 <tcp_input+0x7fc>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b1c2:	e036      	b.n	800b232 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b1c4:	4b20      	ldr	r3, [pc, #128]	@ (800b248 <tcp_input+0x800>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	899b      	ldrh	r3, [r3, #12]
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7f9 fdc3 	bl	8004d58 <lwip_htons>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d118      	bne.n	800b210 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b1de:	4b1b      	ldr	r3, [pc, #108]	@ (800b24c <tcp_input+0x804>)
 800b1e0:	6819      	ldr	r1, [r3, #0]
 800b1e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b250 <tcp_input+0x808>)
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b254 <tcp_input+0x80c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b1ee:	4b16      	ldr	r3, [pc, #88]	@ (800b248 <tcp_input+0x800>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b1f2:	885b      	ldrh	r3, [r3, #2]
 800b1f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b1f6:	4a14      	ldr	r2, [pc, #80]	@ (800b248 <tcp_input+0x800>)
 800b1f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b1fa:	8812      	ldrh	r2, [r2, #0]
 800b1fc:	b292      	uxth	r2, r2
 800b1fe:	9202      	str	r2, [sp, #8]
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	4b15      	ldr	r3, [pc, #84]	@ (800b258 <tcp_input+0x810>)
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	4b15      	ldr	r3, [pc, #84]	@ (800b25c <tcp_input+0x814>)
 800b208:	4602      	mov	r2, r0
 800b20a:	2000      	movs	r0, #0
 800b20c:	f003 fc8a 	bl	800eb24 <tcp_rst>
    pbuf_free(p);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7fd fbc7 	bl	80089a4 <pbuf_free>
  return;
 800b216:	e00c      	b.n	800b232 <tcp_input+0x7ea>
    goto dropped;
 800b218:	bf00      	nop
 800b21a:	e006      	b.n	800b22a <tcp_input+0x7e2>
    goto dropped;
 800b21c:	bf00      	nop
 800b21e:	e004      	b.n	800b22a <tcp_input+0x7e2>
    goto dropped;
 800b220:	bf00      	nop
 800b222:	e002      	b.n	800b22a <tcp_input+0x7e2>
      goto dropped;
 800b224:	bf00      	nop
 800b226:	e000      	b.n	800b22a <tcp_input+0x7e2>
      goto dropped;
 800b228:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7fd fbba 	bl	80089a4 <pbuf_free>
 800b230:	e000      	b.n	800b234 <tcp_input+0x7ec>
  return;
 800b232:	bf00      	nop
}
 800b234:	3724      	adds	r7, #36	@ 0x24
 800b236:	46bd      	mov	sp, r7
 800b238:	bd90      	pop	{r4, r7, pc}
 800b23a:	bf00      	nop
 800b23c:	2000b7b0 	.word	0x2000b7b0
 800b240:	2000b7ac 	.word	0x2000b7ac
 800b244:	2000b77c 	.word	0x2000b77c
 800b248:	2000b78c 	.word	0x2000b78c
 800b24c:	2000b7a0 	.word	0x2000b7a0
 800b250:	2000b7a6 	.word	0x2000b7a6
 800b254:	2000b79c 	.word	0x2000b79c
 800b258:	20004e6c 	.word	0x20004e6c
 800b25c:	20004e70 	.word	0x20004e70

0800b260 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d106      	bne.n	800b27c <tcp_input_delayed_close+0x1c>
 800b26e:	4b17      	ldr	r3, [pc, #92]	@ (800b2cc <tcp_input_delayed_close+0x6c>)
 800b270:	f240 225a 	movw	r2, #602	@ 0x25a
 800b274:	4916      	ldr	r1, [pc, #88]	@ (800b2d0 <tcp_input_delayed_close+0x70>)
 800b276:	4817      	ldr	r0, [pc, #92]	@ (800b2d4 <tcp_input_delayed_close+0x74>)
 800b278:	f004 fd44 	bl	800fd04 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b27c:	4b16      	ldr	r3, [pc, #88]	@ (800b2d8 <tcp_input_delayed_close+0x78>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	f003 0310 	and.w	r3, r3, #16
 800b284:	2b00      	cmp	r3, #0
 800b286:	d01c      	beq.n	800b2c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	8b5b      	ldrh	r3, [r3, #26]
 800b28c:	f003 0310 	and.w	r3, r3, #16
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10d      	bne.n	800b2b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d008      	beq.n	800b2b0 <tcp_input_delayed_close+0x50>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	6912      	ldr	r2, [r2, #16]
 800b2a8:	f06f 010e 	mvn.w	r1, #14
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b2b0:	6879      	ldr	r1, [r7, #4]
 800b2b2:	480a      	ldr	r0, [pc, #40]	@ (800b2dc <tcp_input_delayed_close+0x7c>)
 800b2b4:	f7ff fa50 	bl	800a758 <tcp_pcb_remove>
    tcp_free(pcb);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7fd fe13 	bl	8008ee4 <tcp_free>
    return 1;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e000      	b.n	800b2c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	08012b54 	.word	0x08012b54
 800b2d0:	08012d5c 	.word	0x08012d5c
 800b2d4:	08012bd8 	.word	0x08012bd8
 800b2d8:	2000b7a9 	.word	0x2000b7a9
 800b2dc:	2000b770 	.word	0x2000b770

0800b2e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b08b      	sub	sp, #44	@ 0x2c
 800b2e4:	af04      	add	r7, sp, #16
 800b2e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b2e8:	4b7a      	ldr	r3, [pc, #488]	@ (800b4d4 <tcp_listen_input+0x1f4>)
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	f003 0304 	and.w	r3, r3, #4
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f040 80e6 	bne.w	800b4c2 <tcp_listen_input+0x1e2>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <tcp_listen_input+0x2a>
 800b2fc:	4b76      	ldr	r3, [pc, #472]	@ (800b4d8 <tcp_listen_input+0x1f8>)
 800b2fe:	f240 2281 	movw	r2, #641	@ 0x281
 800b302:	4976      	ldr	r1, [pc, #472]	@ (800b4dc <tcp_listen_input+0x1fc>)
 800b304:	4876      	ldr	r0, [pc, #472]	@ (800b4e0 <tcp_listen_input+0x200>)
 800b306:	f004 fcfd 	bl	800fd04 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b30a:	4b72      	ldr	r3, [pc, #456]	@ (800b4d4 <tcp_listen_input+0x1f4>)
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	f003 0310 	and.w	r3, r3, #16
 800b312:	2b00      	cmp	r3, #0
 800b314:	d019      	beq.n	800b34a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b316:	4b73      	ldr	r3, [pc, #460]	@ (800b4e4 <tcp_listen_input+0x204>)
 800b318:	6819      	ldr	r1, [r3, #0]
 800b31a:	4b73      	ldr	r3, [pc, #460]	@ (800b4e8 <tcp_listen_input+0x208>)
 800b31c:	881b      	ldrh	r3, [r3, #0]
 800b31e:	461a      	mov	r2, r3
 800b320:	4b72      	ldr	r3, [pc, #456]	@ (800b4ec <tcp_listen_input+0x20c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b326:	4b72      	ldr	r3, [pc, #456]	@ (800b4f0 <tcp_listen_input+0x210>)
 800b328:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b32a:	885b      	ldrh	r3, [r3, #2]
 800b32c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b32e:	4a70      	ldr	r2, [pc, #448]	@ (800b4f0 <tcp_listen_input+0x210>)
 800b330:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b332:	8812      	ldrh	r2, [r2, #0]
 800b334:	b292      	uxth	r2, r2
 800b336:	9202      	str	r2, [sp, #8]
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	4b6e      	ldr	r3, [pc, #440]	@ (800b4f4 <tcp_listen_input+0x214>)
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	4b6e      	ldr	r3, [pc, #440]	@ (800b4f8 <tcp_listen_input+0x218>)
 800b340:	4602      	mov	r2, r0
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f003 fbee 	bl	800eb24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b348:	e0bd      	b.n	800b4c6 <tcp_listen_input+0x1e6>
  } else if (flags & TCP_SYN) {
 800b34a:	4b62      	ldr	r3, [pc, #392]	@ (800b4d4 <tcp_listen_input+0x1f4>)
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	f003 0302 	and.w	r3, r3, #2
 800b352:	2b00      	cmp	r3, #0
 800b354:	f000 80b7 	beq.w	800b4c6 <tcp_listen_input+0x1e6>
    if (pcb->accepts_pending >= pcb->backlog) {
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	7f5a      	ldrb	r2, [r3, #29]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	7f1b      	ldrb	r3, [r3, #28]
 800b360:	429a      	cmp	r2, r3
 800b362:	f080 80b2 	bcs.w	800b4ca <tcp_listen_input+0x1ea>
    npcb = tcp_alloc(pcb->prio);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	7d5b      	ldrb	r3, [r3, #21]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7ff f89c 	bl	800a4a8 <tcp_alloc>
 800b370:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d111      	bne.n	800b39c <tcp_listen_input+0xbc>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00a      	beq.n	800b396 <tcp_listen_input+0xb6>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	6910      	ldr	r0, [r2, #16]
 800b388:	f04f 32ff 	mov.w	r2, #4294967295
 800b38c:	2100      	movs	r1, #0
 800b38e:	4798      	blx	r3
 800b390:	4603      	mov	r3, r0
 800b392:	73bb      	strb	r3, [r7, #14]
      return;
 800b394:	e09a      	b.n	800b4cc <tcp_listen_input+0x1ec>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b396:	23f0      	movs	r3, #240	@ 0xf0
 800b398:	73bb      	strb	r3, [r7, #14]
      return;
 800b39a:	e097      	b.n	800b4cc <tcp_listen_input+0x1ec>
    pcb->accepts_pending++;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	7f5b      	ldrb	r3, [r3, #29]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	775a      	strb	r2, [r3, #29]
    tcp_set_flags(npcb, TF_BACKLOGPEND);
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	8b5b      	ldrh	r3, [r3, #26]
 800b3ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	835a      	strh	r2, [r3, #26]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b3b6:	4b51      	ldr	r3, [pc, #324]	@ (800b4fc <tcp_listen_input+0x21c>)
 800b3b8:	695a      	ldr	r2, [r3, #20]
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b3be:	4b4f      	ldr	r3, [pc, #316]	@ (800b4fc <tcp_listen_input+0x21c>)
 800b3c0:	691a      	ldr	r2, [r3, #16]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	8ada      	ldrh	r2, [r3, #22]
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b3ce:	4b48      	ldr	r3, [pc, #288]	@ (800b4f0 <tcp_listen_input+0x210>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	881b      	ldrh	r3, [r3, #0]
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2203      	movs	r2, #3
 800b3de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b3e0:	4b42      	ldr	r3, [pc, #264]	@ (800b4ec <tcp_listen_input+0x20c>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	1c5a      	adds	r2, r3, #1
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800b3f2:	6978      	ldr	r0, [r7, #20]
 800b3f4:	f7ff fa44 	bl	800a880 <tcp_next_iss>
 800b3f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b412:	4b36      	ldr	r3, [pc, #216]	@ (800b4ec <tcp_listen_input+0x20c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	1e5a      	subs	r2, r3, #1
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	691a      	ldr	r2, [r3, #16]
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	7a5b      	ldrb	r3, [r3, #9]
 800b42e:	f003 030c 	and.w	r3, r3, #12
 800b432:	b2da      	uxtb	r2, r3
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	7a1a      	ldrb	r2, [r3, #8]
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b440:	4b2f      	ldr	r3, [pc, #188]	@ (800b500 <tcp_listen_input+0x220>)
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	60da      	str	r2, [r3, #12]
 800b448:	4a2d      	ldr	r2, [pc, #180]	@ (800b500 <tcp_listen_input+0x220>)
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	6013      	str	r3, [r2, #0]
 800b44e:	f003 fd2b 	bl	800eea8 <tcp_timer_needed>
 800b452:	4b2c      	ldr	r3, [pc, #176]	@ (800b504 <tcp_listen_input+0x224>)
 800b454:	2201      	movs	r2, #1
 800b456:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b458:	6978      	ldr	r0, [r7, #20]
 800b45a:	f001 fd91 	bl	800cf80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b45e:	4b24      	ldr	r3, [pc, #144]	@ (800b4f0 <tcp_listen_input+0x210>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	89db      	ldrh	r3, [r3, #14]
 800b464:	b29a      	uxth	r2, r3
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	3304      	adds	r3, #4
 800b480:	4618      	mov	r0, r3
 800b482:	f7fa fe5f 	bl	8006144 <ip4_route>
 800b486:	4601      	mov	r1, r0
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	3304      	adds	r3, #4
 800b48c:	461a      	mov	r2, r3
 800b48e:	4620      	mov	r0, r4
 800b490:	f7ff fa1c 	bl	800a8cc <tcp_eff_send_mss_netif>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b49c:	2112      	movs	r1, #18
 800b49e:	6978      	ldr	r0, [r7, #20]
 800b4a0:	f002 fc9e 	bl	800dde0 <tcp_enqueue_flags>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d004      	beq.n	800b4ba <tcp_listen_input+0x1da>
      tcp_abandon(npcb, 0);
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	6978      	ldr	r0, [r7, #20]
 800b4b4:	f7fd ff80 	bl	80093b8 <tcp_abandon>
      return;
 800b4b8:	e008      	b.n	800b4cc <tcp_listen_input+0x1ec>
    tcp_output(npcb);
 800b4ba:	6978      	ldr	r0, [r7, #20]
 800b4bc:	f002 fd7e 	bl	800dfbc <tcp_output>
  return;
 800b4c0:	e001      	b.n	800b4c6 <tcp_listen_input+0x1e6>
    return;
 800b4c2:	bf00      	nop
 800b4c4:	e002      	b.n	800b4cc <tcp_listen_input+0x1ec>
  return;
 800b4c6:	bf00      	nop
 800b4c8:	e000      	b.n	800b4cc <tcp_listen_input+0x1ec>
      return;
 800b4ca:	bf00      	nop
}
 800b4cc:	371c      	adds	r7, #28
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd90      	pop	{r4, r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	2000b7a8 	.word	0x2000b7a8
 800b4d8:	08012b54 	.word	0x08012b54
 800b4dc:	08012d84 	.word	0x08012d84
 800b4e0:	08012bd8 	.word	0x08012bd8
 800b4e4:	2000b7a0 	.word	0x2000b7a0
 800b4e8:	2000b7a6 	.word	0x2000b7a6
 800b4ec:	2000b79c 	.word	0x2000b79c
 800b4f0:	2000b78c 	.word	0x2000b78c
 800b4f4:	20004e6c 	.word	0x20004e6c
 800b4f8:	20004e70 	.word	0x20004e70
 800b4fc:	20004e5c 	.word	0x20004e5c
 800b500:	2000b770 	.word	0x2000b770
 800b504:	2000b778 	.word	0x2000b778

0800b508 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af04      	add	r7, sp, #16
 800b50e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b510:	4b2f      	ldr	r3, [pc, #188]	@ (800b5d0 <tcp_timewait_input+0xc8>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	f003 0304 	and.w	r3, r3, #4
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d153      	bne.n	800b5c4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d106      	bne.n	800b530 <tcp_timewait_input+0x28>
 800b522:	4b2c      	ldr	r3, [pc, #176]	@ (800b5d4 <tcp_timewait_input+0xcc>)
 800b524:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b528:	492b      	ldr	r1, [pc, #172]	@ (800b5d8 <tcp_timewait_input+0xd0>)
 800b52a:	482c      	ldr	r0, [pc, #176]	@ (800b5dc <tcp_timewait_input+0xd4>)
 800b52c:	f004 fbea 	bl	800fd04 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b530:	4b27      	ldr	r3, [pc, #156]	@ (800b5d0 <tcp_timewait_input+0xc8>)
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	f003 0302 	and.w	r3, r3, #2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d02a      	beq.n	800b592 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b53c:	4b28      	ldr	r3, [pc, #160]	@ (800b5e0 <tcp_timewait_input+0xd8>)
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	2b00      	cmp	r3, #0
 800b548:	db2d      	blt.n	800b5a6 <tcp_timewait_input+0x9e>
 800b54a:	4b25      	ldr	r3, [pc, #148]	@ (800b5e0 <tcp_timewait_input+0xd8>)
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b552:	6879      	ldr	r1, [r7, #4]
 800b554:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b556:	440b      	add	r3, r1
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	dc23      	bgt.n	800b5a6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b55e:	4b21      	ldr	r3, [pc, #132]	@ (800b5e4 <tcp_timewait_input+0xdc>)
 800b560:	6819      	ldr	r1, [r3, #0]
 800b562:	4b21      	ldr	r3, [pc, #132]	@ (800b5e8 <tcp_timewait_input+0xe0>)
 800b564:	881b      	ldrh	r3, [r3, #0]
 800b566:	461a      	mov	r2, r3
 800b568:	4b1d      	ldr	r3, [pc, #116]	@ (800b5e0 <tcp_timewait_input+0xd8>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b56e:	4b1f      	ldr	r3, [pc, #124]	@ (800b5ec <tcp_timewait_input+0xe4>)
 800b570:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b572:	885b      	ldrh	r3, [r3, #2]
 800b574:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b576:	4a1d      	ldr	r2, [pc, #116]	@ (800b5ec <tcp_timewait_input+0xe4>)
 800b578:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b57a:	8812      	ldrh	r2, [r2, #0]
 800b57c:	b292      	uxth	r2, r2
 800b57e:	9202      	str	r2, [sp, #8]
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	4b1b      	ldr	r3, [pc, #108]	@ (800b5f0 <tcp_timewait_input+0xe8>)
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	4b1b      	ldr	r3, [pc, #108]	@ (800b5f4 <tcp_timewait_input+0xec>)
 800b588:	4602      	mov	r2, r0
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f003 faca 	bl	800eb24 <tcp_rst>
      return;
 800b590:	e01b      	b.n	800b5ca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b592:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d0 <tcp_timewait_input+0xc8>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	f003 0301 	and.w	r3, r3, #1
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b59e:	4b16      	ldr	r3, [pc, #88]	@ (800b5f8 <tcp_timewait_input+0xf0>)
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b5a6:	4b10      	ldr	r3, [pc, #64]	@ (800b5e8 <tcp_timewait_input+0xe0>)
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00c      	beq.n	800b5c8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	8b5b      	ldrh	r3, [r3, #26]
 800b5b2:	f043 0302 	orr.w	r3, r3, #2
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f002 fcfd 	bl	800dfbc <tcp_output>
  }
  return;
 800b5c2:	e001      	b.n	800b5c8 <tcp_timewait_input+0xc0>
    return;
 800b5c4:	bf00      	nop
 800b5c6:	e000      	b.n	800b5ca <tcp_timewait_input+0xc2>
  return;
 800b5c8:	bf00      	nop
}
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	2000b7a8 	.word	0x2000b7a8
 800b5d4:	08012b54 	.word	0x08012b54
 800b5d8:	08012da4 	.word	0x08012da4
 800b5dc:	08012bd8 	.word	0x08012bd8
 800b5e0:	2000b79c 	.word	0x2000b79c
 800b5e4:	2000b7a0 	.word	0x2000b7a0
 800b5e8:	2000b7a6 	.word	0x2000b7a6
 800b5ec:	2000b78c 	.word	0x2000b78c
 800b5f0:	20004e6c 	.word	0x20004e6c
 800b5f4:	20004e70 	.word	0x20004e70
 800b5f8:	2000b764 	.word	0x2000b764

0800b5fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b5fc:	b590      	push	{r4, r7, lr}
 800b5fe:	b08d      	sub	sp, #52	@ 0x34
 800b600:	af04      	add	r7, sp, #16
 800b602:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d106      	bne.n	800b620 <tcp_process+0x24>
 800b612:	4b9d      	ldr	r3, [pc, #628]	@ (800b888 <tcp_process+0x28c>)
 800b614:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b618:	499c      	ldr	r1, [pc, #624]	@ (800b88c <tcp_process+0x290>)
 800b61a:	489d      	ldr	r0, [pc, #628]	@ (800b890 <tcp_process+0x294>)
 800b61c:	f004 fb72 	bl	800fd04 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b620:	4b9c      	ldr	r3, [pc, #624]	@ (800b894 <tcp_process+0x298>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	f003 0304 	and.w	r3, r3, #4
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d04e      	beq.n	800b6ca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	7d1b      	ldrb	r3, [r3, #20]
 800b630:	2b02      	cmp	r3, #2
 800b632:	d108      	bne.n	800b646 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b638:	4b97      	ldr	r3, [pc, #604]	@ (800b898 <tcp_process+0x29c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d123      	bne.n	800b688 <tcp_process+0x8c>
        acceptable = 1;
 800b640:	2301      	movs	r3, #1
 800b642:	76fb      	strb	r3, [r7, #27]
 800b644:	e020      	b.n	800b688 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b64a:	4b94      	ldr	r3, [pc, #592]	@ (800b89c <tcp_process+0x2a0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d102      	bne.n	800b658 <tcp_process+0x5c>
        acceptable = 1;
 800b652:	2301      	movs	r3, #1
 800b654:	76fb      	strb	r3, [r7, #27]
 800b656:	e017      	b.n	800b688 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b658:	4b90      	ldr	r3, [pc, #576]	@ (800b89c <tcp_process+0x2a0>)
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	db10      	blt.n	800b688 <tcp_process+0x8c>
 800b666:	4b8d      	ldr	r3, [pc, #564]	@ (800b89c <tcp_process+0x2a0>)
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66e:	6879      	ldr	r1, [r7, #4]
 800b670:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b672:	440b      	add	r3, r1
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	dc06      	bgt.n	800b688 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	8b5b      	ldrh	r3, [r3, #26]
 800b67e:	f043 0302 	orr.w	r3, r3, #2
 800b682:	b29a      	uxth	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b688:	7efb      	ldrb	r3, [r7, #27]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d01b      	beq.n	800b6c6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	7d1b      	ldrb	r3, [r3, #20]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d106      	bne.n	800b6a4 <tcp_process+0xa8>
 800b696:	4b7c      	ldr	r3, [pc, #496]	@ (800b888 <tcp_process+0x28c>)
 800b698:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800b69c:	4980      	ldr	r1, [pc, #512]	@ (800b8a0 <tcp_process+0x2a4>)
 800b69e:	487c      	ldr	r0, [pc, #496]	@ (800b890 <tcp_process+0x294>)
 800b6a0:	f004 fb30 	bl	800fd04 <iprintf>
      recv_flags |= TF_RESET;
 800b6a4:	4b7f      	ldr	r3, [pc, #508]	@ (800b8a4 <tcp_process+0x2a8>)
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	f043 0308 	orr.w	r3, r3, #8
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	4b7d      	ldr	r3, [pc, #500]	@ (800b8a4 <tcp_process+0x2a8>)
 800b6b0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	8b5b      	ldrh	r3, [r3, #26]
 800b6b6:	f023 0301 	bic.w	r3, r3, #1
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b6c0:	f06f 030d 	mvn.w	r3, #13
 800b6c4:	e37e      	b.n	800bdc4 <tcp_process+0x7c8>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	e37c      	b.n	800bdc4 <tcp_process+0x7c8>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b6ca:	4b72      	ldr	r3, [pc, #456]	@ (800b894 <tcp_process+0x298>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	f003 0302 	and.w	r3, r3, #2
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d010      	beq.n	800b6f8 <tcp_process+0xfc>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	7d1b      	ldrb	r3, [r3, #20]
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d00c      	beq.n	800b6f8 <tcp_process+0xfc>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	7d1b      	ldrb	r3, [r3, #20]
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d008      	beq.n	800b6f8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	8b5b      	ldrh	r3, [r3, #26]
 800b6ea:	f043 0302 	orr.w	r3, r3, #2
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	e365      	b.n	800bdc4 <tcp_process+0x7c8>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	8b5b      	ldrh	r3, [r3, #26]
 800b6fc:	f003 0310 	and.w	r3, r3, #16
 800b700:	2b00      	cmp	r3, #0
 800b702:	d103      	bne.n	800b70c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b704:	4b68      	ldr	r3, [pc, #416]	@ (800b8a8 <tcp_process+0x2ac>)
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f001 fc2f 	bl	800cf80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	7d1b      	ldrb	r3, [r3, #20]
 800b726:	3b02      	subs	r3, #2
 800b728:	2b07      	cmp	r3, #7
 800b72a:	f200 833b 	bhi.w	800bda4 <tcp_process+0x7a8>
 800b72e:	a201      	add	r2, pc, #4	@ (adr r2, 800b734 <tcp_process+0x138>)
 800b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b734:	0800b755 	.word	0x0800b755
 800b738:	0800b985 	.word	0x0800b985
 800b73c:	0800bb05 	.word	0x0800bb05
 800b740:	0800bb2f 	.word	0x0800bb2f
 800b744:	0800bc53 	.word	0x0800bc53
 800b748:	0800bb05 	.word	0x0800bb05
 800b74c:	0800bcdf 	.word	0x0800bcdf
 800b750:	0800bd6f 	.word	0x0800bd6f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b754:	4b4f      	ldr	r3, [pc, #316]	@ (800b894 <tcp_process+0x298>)
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	f003 0310 	and.w	r3, r3, #16
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f000 80e4 	beq.w	800b92a <tcp_process+0x32e>
 800b762:	4b4c      	ldr	r3, [pc, #304]	@ (800b894 <tcp_process+0x298>)
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	f003 0302 	and.w	r3, r3, #2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 80dd 	beq.w	800b92a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b774:	1c5a      	adds	r2, r3, #1
 800b776:	4b48      	ldr	r3, [pc, #288]	@ (800b898 <tcp_process+0x29c>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	f040 80d5 	bne.w	800b92a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b780:	4b46      	ldr	r3, [pc, #280]	@ (800b89c <tcp_process+0x2a0>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	1c5a      	adds	r2, r3, #1
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800b792:	4b41      	ldr	r3, [pc, #260]	@ (800b898 <tcp_process+0x29c>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b79a:	4b44      	ldr	r3, [pc, #272]	@ (800b8ac <tcp_process+0x2b0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	89db      	ldrh	r3, [r3, #14]
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b7b4:	4b39      	ldr	r3, [pc, #228]	@ (800b89c <tcp_process+0x2a0>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	1e5a      	subs	r2, r3, #1
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2204      	movs	r2, #4
 800b7c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fa fcb9 	bl	8006144 <ip4_route>
 800b7d2:	4601      	mov	r1, r0
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	461a      	mov	r2, r3
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f7ff f876 	bl	800a8cc <tcp_eff_send_mss_netif>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b7ec:	009a      	lsls	r2, r3, #2
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b7f2:	005b      	lsls	r3, r3, #1
 800b7f4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b7f8:	428b      	cmp	r3, r1
 800b7fa:	bf38      	it	cc
 800b7fc:	460b      	movcc	r3, r1
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d204      	bcs.n	800b80c <tcp_process+0x210>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	b29b      	uxth	r3, r3
 800b80a:	e00d      	b.n	800b828 <tcp_process+0x22c>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b810:	005b      	lsls	r3, r3, #1
 800b812:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b816:	4293      	cmp	r3, r2
 800b818:	d904      	bls.n	800b824 <tcp_process+0x228>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b81e:	005b      	lsls	r3, r3, #1
 800b820:	b29b      	uxth	r3, r3
 800b822:	e001      	b.n	800b828 <tcp_process+0x22c>
 800b824:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b834:	2b00      	cmp	r3, #0
 800b836:	d106      	bne.n	800b846 <tcp_process+0x24a>
 800b838:	4b13      	ldr	r3, [pc, #76]	@ (800b888 <tcp_process+0x28c>)
 800b83a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b83e:	491c      	ldr	r1, [pc, #112]	@ (800b8b0 <tcp_process+0x2b4>)
 800b840:	4813      	ldr	r0, [pc, #76]	@ (800b890 <tcp_process+0x294>)
 800b842:	f004 fa5f 	bl	800fd04 <iprintf>
        --pcb->snd_queuelen;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b84c:	3b01      	subs	r3, #1
 800b84e:	b29a      	uxth	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b85a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d12a      	bne.n	800b8b8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b866:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d106      	bne.n	800b87c <tcp_process+0x280>
 800b86e:	4b06      	ldr	r3, [pc, #24]	@ (800b888 <tcp_process+0x28c>)
 800b870:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b874:	490f      	ldr	r1, [pc, #60]	@ (800b8b4 <tcp_process+0x2b8>)
 800b876:	4806      	ldr	r0, [pc, #24]	@ (800b890 <tcp_process+0x294>)
 800b878:	f004 fa44 	bl	800fd04 <iprintf>
          pcb->unsent = rseg->next;
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b884:	e01c      	b.n	800b8c0 <tcp_process+0x2c4>
 800b886:	bf00      	nop
 800b888:	08012b54 	.word	0x08012b54
 800b88c:	08012dc4 	.word	0x08012dc4
 800b890:	08012bd8 	.word	0x08012bd8
 800b894:	2000b7a8 	.word	0x2000b7a8
 800b898:	2000b7a0 	.word	0x2000b7a0
 800b89c:	2000b79c 	.word	0x2000b79c
 800b8a0:	08012de0 	.word	0x08012de0
 800b8a4:	2000b7a9 	.word	0x2000b7a9
 800b8a8:	2000b764 	.word	0x2000b764
 800b8ac:	2000b78c 	.word	0x2000b78c
 800b8b0:	08012e00 	.word	0x08012e00
 800b8b4:	08012e18 	.word	0x08012e18
        } else {
          pcb->unacked = rseg->next;
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b8c0:	69f8      	ldr	r0, [r7, #28]
 800b8c2:	f7fe fc88 	bl	800a1d6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d104      	bne.n	800b8d8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b8d4:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b8d6:	e006      	b.n	800b8e6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00a      	beq.n	800b906 <tcp_process+0x30a>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	6910      	ldr	r0, [r2, #16]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	6879      	ldr	r1, [r7, #4]
 800b8fe:	4798      	blx	r3
 800b900:	4603      	mov	r3, r0
 800b902:	76bb      	strb	r3, [r7, #26]
 800b904:	e001      	b.n	800b90a <tcp_process+0x30e>
 800b906:	2300      	movs	r3, #0
 800b908:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b90a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b90e:	f113 0f0d 	cmn.w	r3, #13
 800b912:	d102      	bne.n	800b91a <tcp_process+0x31e>
          return ERR_ABRT;
 800b914:	f06f 030c 	mvn.w	r3, #12
 800b918:	e254      	b.n	800bdc4 <tcp_process+0x7c8>
        }
        tcp_ack_now(pcb);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	8b5b      	ldrh	r3, [r3, #26]
 800b91e:	f043 0302 	orr.w	r3, r3, #2
 800b922:	b29a      	uxth	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b928:	e23e      	b.n	800bda8 <tcp_process+0x7ac>
      else if (flags & TCP_ACK) {
 800b92a:	4b9a      	ldr	r3, [pc, #616]	@ (800bb94 <tcp_process+0x598>)
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	f003 0310 	and.w	r3, r3, #16
 800b932:	2b00      	cmp	r3, #0
 800b934:	f000 8238 	beq.w	800bda8 <tcp_process+0x7ac>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b938:	4b97      	ldr	r3, [pc, #604]	@ (800bb98 <tcp_process+0x59c>)
 800b93a:	6819      	ldr	r1, [r3, #0]
 800b93c:	4b97      	ldr	r3, [pc, #604]	@ (800bb9c <tcp_process+0x5a0>)
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	461a      	mov	r2, r3
 800b942:	4b97      	ldr	r3, [pc, #604]	@ (800bba0 <tcp_process+0x5a4>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b948:	4b96      	ldr	r3, [pc, #600]	@ (800bba4 <tcp_process+0x5a8>)
 800b94a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b94c:	885b      	ldrh	r3, [r3, #2]
 800b94e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b950:	4a94      	ldr	r2, [pc, #592]	@ (800bba4 <tcp_process+0x5a8>)
 800b952:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b954:	8812      	ldrh	r2, [r2, #0]
 800b956:	b292      	uxth	r2, r2
 800b958:	9202      	str	r2, [sp, #8]
 800b95a:	9301      	str	r3, [sp, #4]
 800b95c:	4b92      	ldr	r3, [pc, #584]	@ (800bba8 <tcp_process+0x5ac>)
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	4b92      	ldr	r3, [pc, #584]	@ (800bbac <tcp_process+0x5b0>)
 800b962:	4602      	mov	r2, r0
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f003 f8dd 	bl	800eb24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b970:	2b05      	cmp	r3, #5
 800b972:	f200 8219 	bhi.w	800bda8 <tcp_process+0x7ac>
          pcb->rtime = 0;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f002 fea9 	bl	800e6d4 <tcp_rexmit_rto>
      break;
 800b982:	e211      	b.n	800bda8 <tcp_process+0x7ac>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b984:	4b83      	ldr	r3, [pc, #524]	@ (800bb94 <tcp_process+0x598>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	f003 0310 	and.w	r3, r3, #16
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f000 80a5 	beq.w	800badc <tcp_process+0x4e0>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b992:	4b81      	ldr	r3, [pc, #516]	@ (800bb98 <tcp_process+0x59c>)
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	3b01      	subs	r3, #1
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f2c0 8082 	blt.w	800baa8 <tcp_process+0x4ac>
 800b9a4:	4b7c      	ldr	r3, [pc, #496]	@ (800bb98 <tcp_process+0x59c>)
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	dc7a      	bgt.n	800baa8 <tcp_process+0x4ac>
          pcb->state = ESTABLISHED;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2204      	movs	r2, #4
 800b9b6:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d102      	bne.n	800b9c6 <tcp_process+0x3ca>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b9c0:	23fa      	movs	r3, #250	@ 0xfa
 800b9c2:	76bb      	strb	r3, [r7, #26]
 800b9c4:	e020      	b.n	800ba08 <tcp_process+0x40c>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d106      	bne.n	800b9de <tcp_process+0x3e2>
 800b9d0:	4b77      	ldr	r3, [pc, #476]	@ (800bbb0 <tcp_process+0x5b4>)
 800b9d2:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b9d6:	4977      	ldr	r1, [pc, #476]	@ (800bbb4 <tcp_process+0x5b8>)
 800b9d8:	4877      	ldr	r0, [pc, #476]	@ (800bbb8 <tcp_process+0x5bc>)
 800b9da:	f004 f993 	bl	800fd04 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7fd fb32 	bl	8009048 <tcp_backlog_accepted>
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00a      	beq.n	800ba04 <tcp_process+0x408>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	6910      	ldr	r0, [r2, #16]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	6879      	ldr	r1, [r7, #4]
 800b9fc:	4798      	blx	r3
 800b9fe:	4603      	mov	r3, r0
 800ba00:	76bb      	strb	r3, [r7, #26]
 800ba02:	e001      	b.n	800ba08 <tcp_process+0x40c>
 800ba04:	23f0      	movs	r3, #240	@ 0xf0
 800ba06:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ba08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00a      	beq.n	800ba26 <tcp_process+0x42a>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ba10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ba14:	f113 0f0d 	cmn.w	r3, #13
 800ba18:	d002      	beq.n	800ba20 <tcp_process+0x424>
              tcp_abort(pcb);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7fd fd8c 	bl	8009538 <tcp_abort>
            }
            return ERR_ABRT;
 800ba20:	f06f 030c 	mvn.w	r3, #12
 800ba24:	e1ce      	b.n	800bdc4 <tcp_process+0x7c8>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fae0 	bl	800bfec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ba2c:	4b63      	ldr	r3, [pc, #396]	@ (800bbbc <tcp_process+0x5c0>)
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d005      	beq.n	800ba40 <tcp_process+0x444>
            recv_acked--;
 800ba34:	4b61      	ldr	r3, [pc, #388]	@ (800bbbc <tcp_process+0x5c0>)
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	4b5f      	ldr	r3, [pc, #380]	@ (800bbbc <tcp_process+0x5c0>)
 800ba3e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ba44:	009a      	lsls	r2, r3, #2
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ba50:	428b      	cmp	r3, r1
 800ba52:	bf38      	it	cc
 800ba54:	460b      	movcc	r3, r1
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d204      	bcs.n	800ba64 <tcp_process+0x468>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	e00d      	b.n	800ba80 <tcp_process+0x484>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ba68:	005b      	lsls	r3, r3, #1
 800ba6a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d904      	bls.n	800ba7c <tcp_process+0x480>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ba76:	005b      	lsls	r3, r3, #1
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	e001      	b.n	800ba80 <tcp_process+0x484>
 800ba7c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ba86:	4b4e      	ldr	r3, [pc, #312]	@ (800bbc0 <tcp_process+0x5c4>)
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	f003 0320 	and.w	r3, r3, #32
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d037      	beq.n	800bb02 <tcp_process+0x506>
            tcp_ack_now(pcb);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	8b5b      	ldrh	r3, [r3, #26]
 800ba96:	f043 0302 	orr.w	r3, r3, #2
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2207      	movs	r2, #7
 800baa4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800baa6:	e02c      	b.n	800bb02 <tcp_process+0x506>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800baa8:	4b3b      	ldr	r3, [pc, #236]	@ (800bb98 <tcp_process+0x59c>)
 800baaa:	6819      	ldr	r1, [r3, #0]
 800baac:	4b3b      	ldr	r3, [pc, #236]	@ (800bb9c <tcp_process+0x5a0>)
 800baae:	881b      	ldrh	r3, [r3, #0]
 800bab0:	461a      	mov	r2, r3
 800bab2:	4b3b      	ldr	r3, [pc, #236]	@ (800bba0 <tcp_process+0x5a4>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bab8:	4b3a      	ldr	r3, [pc, #232]	@ (800bba4 <tcp_process+0x5a8>)
 800baba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800babc:	885b      	ldrh	r3, [r3, #2]
 800babe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bac0:	4a38      	ldr	r2, [pc, #224]	@ (800bba4 <tcp_process+0x5a8>)
 800bac2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bac4:	8812      	ldrh	r2, [r2, #0]
 800bac6:	b292      	uxth	r2, r2
 800bac8:	9202      	str	r2, [sp, #8]
 800baca:	9301      	str	r3, [sp, #4]
 800bacc:	4b36      	ldr	r3, [pc, #216]	@ (800bba8 <tcp_process+0x5ac>)
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	4b36      	ldr	r3, [pc, #216]	@ (800bbac <tcp_process+0x5b0>)
 800bad2:	4602      	mov	r2, r0
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f003 f825 	bl	800eb24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800bada:	e167      	b.n	800bdac <tcp_process+0x7b0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800badc:	4b2d      	ldr	r3, [pc, #180]	@ (800bb94 <tcp_process+0x598>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	f003 0302 	and.w	r3, r3, #2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f000 8161 	beq.w	800bdac <tcp_process+0x7b0>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baee:	1e5a      	subs	r2, r3, #1
 800baf0:	4b2b      	ldr	r3, [pc, #172]	@ (800bba0 <tcp_process+0x5a4>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	f040 8159 	bne.w	800bdac <tcp_process+0x7b0>
        tcp_rexmit(pcb);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f002 fe0c 	bl	800e718 <tcp_rexmit>
      break;
 800bb00:	e154      	b.n	800bdac <tcp_process+0x7b0>
 800bb02:	e153      	b.n	800bdac <tcp_process+0x7b0>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 fa71 	bl	800bfec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bb0a:	4b2d      	ldr	r3, [pc, #180]	@ (800bbc0 <tcp_process+0x5c4>)
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	f003 0320 	and.w	r3, r3, #32
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 814c 	beq.w	800bdb0 <tcp_process+0x7b4>
        tcp_ack_now(pcb);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	8b5b      	ldrh	r3, [r3, #26]
 800bb1c:	f043 0302 	orr.w	r3, r3, #2
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2207      	movs	r2, #7
 800bb2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bb2c:	e140      	b.n	800bdb0 <tcp_process+0x7b4>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fa5c 	bl	800bfec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bb34:	4b22      	ldr	r3, [pc, #136]	@ (800bbc0 <tcp_process+0x5c4>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	f003 0320 	and.w	r3, r3, #32
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d071      	beq.n	800bc24 <tcp_process+0x628>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb40:	4b14      	ldr	r3, [pc, #80]	@ (800bb94 <tcp_process+0x598>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	f003 0310 	and.w	r3, r3, #16
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d060      	beq.n	800bc0e <tcp_process+0x612>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb50:	4b11      	ldr	r3, [pc, #68]	@ (800bb98 <tcp_process+0x59c>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d15a      	bne.n	800bc0e <tcp_process+0x612>
            pcb->unsent == NULL) {
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d156      	bne.n	800bc0e <tcp_process+0x612>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	8b5b      	ldrh	r3, [r3, #26]
 800bb64:	f043 0302 	orr.w	r3, r3, #2
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f7fe fd9e 	bl	800a6b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bb74:	4b13      	ldr	r3, [pc, #76]	@ (800bbc4 <tcp_process+0x5c8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d105      	bne.n	800bb8a <tcp_process+0x58e>
 800bb7e:	4b11      	ldr	r3, [pc, #68]	@ (800bbc4 <tcp_process+0x5c8>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	4a0f      	ldr	r2, [pc, #60]	@ (800bbc4 <tcp_process+0x5c8>)
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	e02e      	b.n	800bbe8 <tcp_process+0x5ec>
 800bb8a:	4b0e      	ldr	r3, [pc, #56]	@ (800bbc4 <tcp_process+0x5c8>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	e027      	b.n	800bbe2 <tcp_process+0x5e6>
 800bb92:	bf00      	nop
 800bb94:	2000b7a8 	.word	0x2000b7a8
 800bb98:	2000b7a0 	.word	0x2000b7a0
 800bb9c:	2000b7a6 	.word	0x2000b7a6
 800bba0:	2000b79c 	.word	0x2000b79c
 800bba4:	2000b78c 	.word	0x2000b78c
 800bba8:	20004e6c 	.word	0x20004e6c
 800bbac:	20004e70 	.word	0x20004e70
 800bbb0:	08012b54 	.word	0x08012b54
 800bbb4:	08012e2c 	.word	0x08012e2c
 800bbb8:	08012bd8 	.word	0x08012bd8
 800bbbc:	2000b7a4 	.word	0x2000b7a4
 800bbc0:	2000b7a9 	.word	0x2000b7a9
 800bbc4:	2000b770 	.word	0x2000b770
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d104      	bne.n	800bbdc <tcp_process+0x5e0>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68da      	ldr	r2, [r3, #12]
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	60da      	str	r2, [r3, #12]
 800bbda:	e005      	b.n	800bbe8 <tcp_process+0x5ec>
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	617b      	str	r3, [r7, #20]
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1ef      	bne.n	800bbc8 <tcp_process+0x5cc>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	60da      	str	r2, [r3, #12]
 800bbee:	4b77      	ldr	r3, [pc, #476]	@ (800bdcc <tcp_process+0x7d0>)
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	220a      	movs	r2, #10
 800bbf8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800bbfa:	4b75      	ldr	r3, [pc, #468]	@ (800bdd0 <tcp_process+0x7d4>)
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	60da      	str	r2, [r3, #12]
 800bc02:	4a73      	ldr	r2, [pc, #460]	@ (800bdd0 <tcp_process+0x7d4>)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6013      	str	r3, [r2, #0]
 800bc08:	f003 f94e 	bl	800eea8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800bc0c:	e0d2      	b.n	800bdb4 <tcp_process+0x7b8>
          tcp_ack_now(pcb);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	8b5b      	ldrh	r3, [r3, #26]
 800bc12:	f043 0302 	orr.w	r3, r3, #2
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2208      	movs	r2, #8
 800bc20:	751a      	strb	r2, [r3, #20]
      break;
 800bc22:	e0c7      	b.n	800bdb4 <tcp_process+0x7b8>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bc24:	4b6b      	ldr	r3, [pc, #428]	@ (800bdd4 <tcp_process+0x7d8>)
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	f003 0310 	and.w	r3, r3, #16
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f000 80c1 	beq.w	800bdb4 <tcp_process+0x7b8>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc36:	4b68      	ldr	r3, [pc, #416]	@ (800bdd8 <tcp_process+0x7dc>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	f040 80ba 	bne.w	800bdb4 <tcp_process+0x7b8>
                 pcb->unsent == NULL) {
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f040 80b5 	bne.w	800bdb4 <tcp_process+0x7b8>
        pcb->state = FIN_WAIT_2;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2206      	movs	r2, #6
 800bc4e:	751a      	strb	r2, [r3, #20]
      break;
 800bc50:	e0b0      	b.n	800bdb4 <tcp_process+0x7b8>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f9ca 	bl	800bfec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bc58:	4b60      	ldr	r3, [pc, #384]	@ (800bddc <tcp_process+0x7e0>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	f003 0320 	and.w	r3, r3, #32
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 80a9 	beq.w	800bdb8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	8b5b      	ldrh	r3, [r3, #26]
 800bc6a:	f043 0302 	orr.w	r3, r3, #2
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7fe fd1b 	bl	800a6b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bc7a:	4b59      	ldr	r3, [pc, #356]	@ (800bde0 <tcp_process+0x7e4>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d105      	bne.n	800bc90 <tcp_process+0x694>
 800bc84:	4b56      	ldr	r3, [pc, #344]	@ (800bde0 <tcp_process+0x7e4>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	4a55      	ldr	r2, [pc, #340]	@ (800bde0 <tcp_process+0x7e4>)
 800bc8c:	6013      	str	r3, [r2, #0]
 800bc8e:	e013      	b.n	800bcb8 <tcp_process+0x6bc>
 800bc90:	4b53      	ldr	r3, [pc, #332]	@ (800bde0 <tcp_process+0x7e4>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	613b      	str	r3, [r7, #16]
 800bc96:	e00c      	b.n	800bcb2 <tcp_process+0x6b6>
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d104      	bne.n	800bcac <tcp_process+0x6b0>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	68da      	ldr	r2, [r3, #12]
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	60da      	str	r2, [r3, #12]
 800bcaa:	e005      	b.n	800bcb8 <tcp_process+0x6bc>
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	613b      	str	r3, [r7, #16]
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1ef      	bne.n	800bc98 <tcp_process+0x69c>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	60da      	str	r2, [r3, #12]
 800bcbe:	4b43      	ldr	r3, [pc, #268]	@ (800bdcc <tcp_process+0x7d0>)
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	220a      	movs	r2, #10
 800bcc8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bcca:	4b41      	ldr	r3, [pc, #260]	@ (800bdd0 <tcp_process+0x7d4>)
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	60da      	str	r2, [r3, #12]
 800bcd2:	4a3f      	ldr	r2, [pc, #252]	@ (800bdd0 <tcp_process+0x7d4>)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	f003 f8e6 	bl	800eea8 <tcp_timer_needed>
      }
      break;
 800bcdc:	e06c      	b.n	800bdb8 <tcp_process+0x7bc>
    case CLOSING:
      tcp_receive(pcb);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f984 	bl	800bfec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bce4:	4b3b      	ldr	r3, [pc, #236]	@ (800bdd4 <tcp_process+0x7d8>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	f003 0310 	and.w	r3, r3, #16
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d065      	beq.n	800bdbc <tcp_process+0x7c0>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcf4:	4b38      	ldr	r3, [pc, #224]	@ (800bdd8 <tcp_process+0x7dc>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d15f      	bne.n	800bdbc <tcp_process+0x7c0>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d15b      	bne.n	800bdbc <tcp_process+0x7c0>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7fe fcd3 	bl	800a6b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bd0a:	4b35      	ldr	r3, [pc, #212]	@ (800bde0 <tcp_process+0x7e4>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d105      	bne.n	800bd20 <tcp_process+0x724>
 800bd14:	4b32      	ldr	r3, [pc, #200]	@ (800bde0 <tcp_process+0x7e4>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	4a31      	ldr	r2, [pc, #196]	@ (800bde0 <tcp_process+0x7e4>)
 800bd1c:	6013      	str	r3, [r2, #0]
 800bd1e:	e013      	b.n	800bd48 <tcp_process+0x74c>
 800bd20:	4b2f      	ldr	r3, [pc, #188]	@ (800bde0 <tcp_process+0x7e4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	e00c      	b.n	800bd42 <tcp_process+0x746>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d104      	bne.n	800bd3c <tcp_process+0x740>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	68da      	ldr	r2, [r3, #12]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	60da      	str	r2, [r3, #12]
 800bd3a:	e005      	b.n	800bd48 <tcp_process+0x74c>
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	60fb      	str	r3, [r7, #12]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1ef      	bne.n	800bd28 <tcp_process+0x72c>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	60da      	str	r2, [r3, #12]
 800bd4e:	4b1f      	ldr	r3, [pc, #124]	@ (800bdcc <tcp_process+0x7d0>)
 800bd50:	2201      	movs	r2, #1
 800bd52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	220a      	movs	r2, #10
 800bd58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bd5a:	4b1d      	ldr	r3, [pc, #116]	@ (800bdd0 <tcp_process+0x7d4>)
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	60da      	str	r2, [r3, #12]
 800bd62:	4a1b      	ldr	r2, [pc, #108]	@ (800bdd0 <tcp_process+0x7d4>)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6013      	str	r3, [r2, #0]
 800bd68:	f003 f89e 	bl	800eea8 <tcp_timer_needed>
      }
      break;
 800bd6c:	e026      	b.n	800bdbc <tcp_process+0x7c0>
    case LAST_ACK:
      tcp_receive(pcb);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f93c 	bl	800bfec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bd74:	4b17      	ldr	r3, [pc, #92]	@ (800bdd4 <tcp_process+0x7d8>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	f003 0310 	and.w	r3, r3, #16
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d01f      	beq.n	800bdc0 <tcp_process+0x7c4>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd84:	4b14      	ldr	r3, [pc, #80]	@ (800bdd8 <tcp_process+0x7dc>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d119      	bne.n	800bdc0 <tcp_process+0x7c4>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d115      	bne.n	800bdc0 <tcp_process+0x7c4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800bd94:	4b11      	ldr	r3, [pc, #68]	@ (800bddc <tcp_process+0x7e0>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	f043 0310 	orr.w	r3, r3, #16
 800bd9c:	b2da      	uxtb	r2, r3
 800bd9e:	4b0f      	ldr	r3, [pc, #60]	@ (800bddc <tcp_process+0x7e0>)
 800bda0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bda2:	e00d      	b.n	800bdc0 <tcp_process+0x7c4>
    default:
      break;
 800bda4:	bf00      	nop
 800bda6:	e00c      	b.n	800bdc2 <tcp_process+0x7c6>
      break;
 800bda8:	bf00      	nop
 800bdaa:	e00a      	b.n	800bdc2 <tcp_process+0x7c6>
      break;
 800bdac:	bf00      	nop
 800bdae:	e008      	b.n	800bdc2 <tcp_process+0x7c6>
      break;
 800bdb0:	bf00      	nop
 800bdb2:	e006      	b.n	800bdc2 <tcp_process+0x7c6>
      break;
 800bdb4:	bf00      	nop
 800bdb6:	e004      	b.n	800bdc2 <tcp_process+0x7c6>
      break;
 800bdb8:	bf00      	nop
 800bdba:	e002      	b.n	800bdc2 <tcp_process+0x7c6>
      break;
 800bdbc:	bf00      	nop
 800bdbe:	e000      	b.n	800bdc2 <tcp_process+0x7c6>
      break;
 800bdc0:	bf00      	nop
  }
  return ERR_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3724      	adds	r7, #36	@ 0x24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd90      	pop	{r4, r7, pc}
 800bdcc:	2000b778 	.word	0x2000b778
 800bdd0:	2000b774 	.word	0x2000b774
 800bdd4:	2000b7a8 	.word	0x2000b7a8
 800bdd8:	2000b7a0 	.word	0x2000b7a0
 800bddc:	2000b7a9 	.word	0x2000b7a9
 800bde0:	2000b770 	.word	0x2000b770

0800bde4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bde4:	b590      	push	{r4, r7, lr}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d106      	bne.n	800be02 <tcp_oos_insert_segment+0x1e>
 800bdf4:	4b3b      	ldr	r3, [pc, #236]	@ (800bee4 <tcp_oos_insert_segment+0x100>)
 800bdf6:	f240 421f 	movw	r2, #1055	@ 0x41f
 800bdfa:	493b      	ldr	r1, [pc, #236]	@ (800bee8 <tcp_oos_insert_segment+0x104>)
 800bdfc:	483b      	ldr	r0, [pc, #236]	@ (800beec <tcp_oos_insert_segment+0x108>)
 800bdfe:	f003 ff81 	bl	800fd04 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	899b      	ldrh	r3, [r3, #12]
 800be08:	b29b      	uxth	r3, r3
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f8 ffa4 	bl	8004d58 <lwip_htons>
 800be10:	4603      	mov	r3, r0
 800be12:	b2db      	uxtb	r3, r3
 800be14:	f003 0301 	and.w	r3, r3, #1
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d028      	beq.n	800be6e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800be1c:	6838      	ldr	r0, [r7, #0]
 800be1e:	f7fe f9c5 	bl	800a1ac <tcp_segs_free>
    next = NULL;
 800be22:	2300      	movs	r3, #0
 800be24:	603b      	str	r3, [r7, #0]
 800be26:	e056      	b.n	800bed6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	899b      	ldrh	r3, [r3, #12]
 800be2e:	b29b      	uxth	r3, r3
 800be30:	4618      	mov	r0, r3
 800be32:	f7f8 ff91 	bl	8004d58 <lwip_htons>
 800be36:	4603      	mov	r3, r0
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00d      	beq.n	800be5e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	899b      	ldrh	r3, [r3, #12]
 800be48:	b29c      	uxth	r4, r3
 800be4a:	2001      	movs	r0, #1
 800be4c:	f7f8 ff84 	bl	8004d58 <lwip_htons>
 800be50:	4603      	mov	r3, r0
 800be52:	461a      	mov	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	4322      	orrs	r2, r4
 800be5a:	b292      	uxth	r2, r2
 800be5c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f7fe f9b4 	bl	800a1d6 <tcp_seg_free>
    while (next &&
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00e      	beq.n	800be92 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	891b      	ldrh	r3, [r3, #8]
 800be78:	461a      	mov	r2, r3
 800be7a:	4b1d      	ldr	r3, [pc, #116]	@ (800bef0 <tcp_oos_insert_segment+0x10c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	441a      	add	r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	8909      	ldrh	r1, [r1, #8]
 800be8a:	440b      	add	r3, r1
 800be8c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800be8e:	2b00      	cmp	r3, #0
 800be90:	daca      	bge.n	800be28 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01e      	beq.n	800bed6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	891b      	ldrh	r3, [r3, #8]
 800be9c:	461a      	mov	r2, r3
 800be9e:	4b14      	ldr	r3, [pc, #80]	@ (800bef0 <tcp_oos_insert_segment+0x10c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	441a      	add	r2, r3
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800beac:	2b00      	cmp	r3, #0
 800beae:	dd12      	ble.n	800bed6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	4b0d      	ldr	r3, [pc, #52]	@ (800bef0 <tcp_oos_insert_segment+0x10c>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	891b      	ldrh	r3, [r3, #8]
 800bece:	4619      	mov	r1, r3
 800bed0:	4610      	mov	r0, r2
 800bed2:	f7fc fbe1 	bl	8008698 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	683a      	ldr	r2, [r7, #0]
 800beda:	601a      	str	r2, [r3, #0]
}
 800bedc:	bf00      	nop
 800bede:	3714      	adds	r7, #20
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd90      	pop	{r4, r7, pc}
 800bee4:	08012b54 	.word	0x08012b54
 800bee8:	08012e4c 	.word	0x08012e4c
 800beec:	08012bd8 	.word	0x08012bd8
 800bef0:	2000b79c 	.word	0x2000b79c

0800bef4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bef4:	b5b0      	push	{r4, r5, r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bf02:	e03e      	b.n	800bf82 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fc fdce 	bl	8008ab4 <pbuf_clen>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bf22:	8a7a      	ldrh	r2, [r7, #18]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d906      	bls.n	800bf36 <tcp_free_acked_segments+0x42>
 800bf28:	4b2a      	ldr	r3, [pc, #168]	@ (800bfd4 <tcp_free_acked_segments+0xe0>)
 800bf2a:	f240 4257 	movw	r2, #1111	@ 0x457
 800bf2e:	492a      	ldr	r1, [pc, #168]	@ (800bfd8 <tcp_free_acked_segments+0xe4>)
 800bf30:	482a      	ldr	r0, [pc, #168]	@ (800bfdc <tcp_free_acked_segments+0xe8>)
 800bf32:	f003 fee7 	bl	800fd04 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800bf3c:	8a7b      	ldrh	r3, [r7, #18]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	891a      	ldrh	r2, [r3, #8]
 800bf4c:	4b24      	ldr	r3, [pc, #144]	@ (800bfe0 <tcp_free_acked_segments+0xec>)
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	4413      	add	r3, r2
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	4b22      	ldr	r3, [pc, #136]	@ (800bfe0 <tcp_free_acked_segments+0xec>)
 800bf56:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bf58:	6978      	ldr	r0, [r7, #20]
 800bf5a:	f7fe f93c 	bl	800a1d6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00c      	beq.n	800bf82 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <tcp_free_acked_segments+0x8e>
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d106      	bne.n	800bf82 <tcp_free_acked_segments+0x8e>
 800bf74:	4b17      	ldr	r3, [pc, #92]	@ (800bfd4 <tcp_free_acked_segments+0xe0>)
 800bf76:	f240 4261 	movw	r2, #1121	@ 0x461
 800bf7a:	491a      	ldr	r1, [pc, #104]	@ (800bfe4 <tcp_free_acked_segments+0xf0>)
 800bf7c:	4817      	ldr	r0, [pc, #92]	@ (800bfdc <tcp_free_acked_segments+0xe8>)
 800bf7e:	f003 fec1 	bl	800fd04 <iprintf>
  while (seg_list != NULL &&
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d020      	beq.n	800bfca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7f8 fef8 	bl	8004d84 <lwip_htonl>
 800bf94:	4604      	mov	r4, r0
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	891b      	ldrh	r3, [r3, #8]
 800bf9a:	461d      	mov	r5, r3
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	899b      	ldrh	r3, [r3, #12]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7f8 fed7 	bl	8004d58 <lwip_htons>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	f003 0303 	and.w	r3, r3, #3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <tcp_free_acked_segments+0xc6>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e000      	b.n	800bfbc <tcp_free_acked_segments+0xc8>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	442b      	add	r3, r5
 800bfbe:	18e2      	adds	r2, r4, r3
 800bfc0:	4b09      	ldr	r3, [pc, #36]	@ (800bfe8 <tcp_free_acked_segments+0xf4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	dd9c      	ble.n	800bf04 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bfca:	68bb      	ldr	r3, [r7, #8]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bdb0      	pop	{r4, r5, r7, pc}
 800bfd4:	08012b54 	.word	0x08012b54
 800bfd8:	08012e74 	.word	0x08012e74
 800bfdc:	08012bd8 	.word	0x08012bd8
 800bfe0:	2000b7a4 	.word	0x2000b7a4
 800bfe4:	08012e9c 	.word	0x08012e9c
 800bfe8:	2000b7a0 	.word	0x2000b7a0

0800bfec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bfec:	b5b0      	push	{r4, r5, r7, lr}
 800bfee:	b094      	sub	sp, #80	@ 0x50
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <tcp_receive+0x20>
 800bffe:	4b91      	ldr	r3, [pc, #580]	@ (800c244 <tcp_receive+0x258>)
 800c000:	f240 427b 	movw	r2, #1147	@ 0x47b
 800c004:	4990      	ldr	r1, [pc, #576]	@ (800c248 <tcp_receive+0x25c>)
 800c006:	4891      	ldr	r0, [pc, #580]	@ (800c24c <tcp_receive+0x260>)
 800c008:	f003 fe7c 	bl	800fd04 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	7d1b      	ldrb	r3, [r3, #20]
 800c010:	2b03      	cmp	r3, #3
 800c012:	d806      	bhi.n	800c022 <tcp_receive+0x36>
 800c014:	4b8b      	ldr	r3, [pc, #556]	@ (800c244 <tcp_receive+0x258>)
 800c016:	f240 427c 	movw	r2, #1148	@ 0x47c
 800c01a:	498d      	ldr	r1, [pc, #564]	@ (800c250 <tcp_receive+0x264>)
 800c01c:	488b      	ldr	r0, [pc, #556]	@ (800c24c <tcp_receive+0x260>)
 800c01e:	f003 fe71 	bl	800fd04 <iprintf>

  if (flags & TCP_ACK) {
 800c022:	4b8c      	ldr	r3, [pc, #560]	@ (800c254 <tcp_receive+0x268>)
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	f003 0310 	and.w	r3, r3, #16
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f000 8264 	beq.w	800c4f8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c036:	461a      	mov	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c03c:	4413      	add	r3, r2
 800c03e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c044:	4b84      	ldr	r3, [pc, #528]	@ (800c258 <tcp_receive+0x26c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	db1b      	blt.n	800c086 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c052:	4b81      	ldr	r3, [pc, #516]	@ (800c258 <tcp_receive+0x26c>)
 800c054:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c056:	429a      	cmp	r2, r3
 800c058:	d106      	bne.n	800c068 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c05e:	4b7f      	ldr	r3, [pc, #508]	@ (800c25c <tcp_receive+0x270>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	2b00      	cmp	r3, #0
 800c066:	db0e      	blt.n	800c086 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c06c:	4b7b      	ldr	r3, [pc, #492]	@ (800c25c <tcp_receive+0x270>)
 800c06e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c070:	429a      	cmp	r2, r3
 800c072:	d125      	bne.n	800c0c0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c074:	4b7a      	ldr	r3, [pc, #488]	@ (800c260 <tcp_receive+0x274>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	89db      	ldrh	r3, [r3, #14]
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c082:	429a      	cmp	r2, r3
 800c084:	d91c      	bls.n	800c0c0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c086:	4b76      	ldr	r3, [pc, #472]	@ (800c260 <tcp_receive+0x274>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	89db      	ldrh	r3, [r3, #14]
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d205      	bcs.n	800c0b0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800c0b0:	4b69      	ldr	r3, [pc, #420]	@ (800c258 <tcp_receive+0x26c>)
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800c0b8:	4b68      	ldr	r3, [pc, #416]	@ (800c25c <tcp_receive+0x270>)
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c0c0:	4b66      	ldr	r3, [pc, #408]	@ (800c25c <tcp_receive+0x270>)
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	dc58      	bgt.n	800c180 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c0ce:	4b65      	ldr	r3, [pc, #404]	@ (800c264 <tcp_receive+0x278>)
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d14b      	bne.n	800c16e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800c0e0:	4413      	add	r3, r2
 800c0e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d142      	bne.n	800c16e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	db3d      	blt.n	800c16e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0f6:	4b59      	ldr	r3, [pc, #356]	@ (800c25c <tcp_receive+0x270>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d137      	bne.n	800c16e <tcp_receive+0x182>
              found_dupack = 1;
 800c0fe:	2301      	movs	r3, #1
 800c100:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c108:	2bff      	cmp	r3, #255	@ 0xff
 800c10a:	d007      	beq.n	800c11c <tcp_receive+0x130>
                ++pcb->dupacks;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c112:	3301      	adds	r3, #1
 800c114:	b2da      	uxtb	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c122:	2b03      	cmp	r3, #3
 800c124:	d91b      	bls.n	800c15e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c130:	4413      	add	r3, r2
 800c132:	b29a      	uxth	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d30a      	bcc.n	800c154 <tcp_receive+0x168>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c148:	4413      	add	r3, r2
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c152:	e004      	b.n	800c15e <tcp_receive+0x172>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c15a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c164:	2b02      	cmp	r3, #2
 800c166:	d902      	bls.n	800c16e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f002 fb41 	bl	800e7f0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c16e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c170:	2b00      	cmp	r3, #0
 800c172:	f040 8161 	bne.w	800c438 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c17e:	e15b      	b.n	800c438 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c180:	4b36      	ldr	r3, [pc, #216]	@ (800c25c <tcp_receive+0x270>)
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	3b01      	subs	r3, #1
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f2c0 814e 	blt.w	800c42e <tcp_receive+0x442>
 800c192:	4b32      	ldr	r3, [pc, #200]	@ (800c25c <tcp_receive+0x270>)
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f300 8146 	bgt.w	800c42e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	8b5b      	ldrh	r3, [r3, #26]
 800c1a6:	f003 0304 	and.w	r3, r3, #4
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d010      	beq.n	800c1d0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	8b5b      	ldrh	r3, [r3, #26]
 800c1b2:	f023 0304 	bic.w	r3, r3, #4
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c1de:	10db      	asrs	r3, r3, #3
 800c1e0:	b21b      	sxth	r3, r3
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	4413      	add	r3, r2
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	b21a      	sxth	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c1f8:	4b18      	ldr	r3, [pc, #96]	@ (800c25c <tcp_receive+0x270>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c202:	b29b      	uxth	r3, r3
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800c210:	4b12      	ldr	r3, [pc, #72]	@ (800c25c <tcp_receive+0x270>)
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	7d1b      	ldrb	r3, [r3, #20]
 800c21c:	2b03      	cmp	r3, #3
 800c21e:	f240 8097 	bls.w	800c350 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c22e:	429a      	cmp	r2, r3
 800c230:	d245      	bcs.n	800c2be <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	8b5b      	ldrh	r3, [r3, #26]
 800c236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d014      	beq.n	800c268 <tcp_receive+0x27c>
 800c23e:	2301      	movs	r3, #1
 800c240:	e013      	b.n	800c26a <tcp_receive+0x27e>
 800c242:	bf00      	nop
 800c244:	08012b54 	.word	0x08012b54
 800c248:	08012ebc 	.word	0x08012ebc
 800c24c:	08012bd8 	.word	0x08012bd8
 800c250:	08012ed8 	.word	0x08012ed8
 800c254:	2000b7a8 	.word	0x2000b7a8
 800c258:	2000b79c 	.word	0x2000b79c
 800c25c:	2000b7a0 	.word	0x2000b7a0
 800c260:	2000b78c 	.word	0x2000b78c
 800c264:	2000b7a6 	.word	0x2000b7a6
 800c268:	2302      	movs	r3, #2
 800c26a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c26e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c272:	b29a      	uxth	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c278:	fb12 f303 	smulbb	r3, r2, r3
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c280:	4293      	cmp	r3, r2
 800c282:	bf28      	it	cs
 800c284:	4613      	movcs	r3, r2
 800c286:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c28e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c290:	4413      	add	r3, r2
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d309      	bcc.n	800c2b2 <tcp_receive+0x2c6>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c2a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c2a6:	4413      	add	r3, r2
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c2b0:	e04e      	b.n	800c350 <tcp_receive+0x364>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c2b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c2bc:	e048      	b.n	800c350 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c2c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c2c6:	4413      	add	r3, r2
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d309      	bcc.n	800c2e8 <tcp_receive+0x2fc>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c2da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c2dc:	4413      	add	r3, r2
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c2e6:	e004      	b.n	800c2f2 <tcp_receive+0x306>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c2ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d326      	bcc.n	800c350 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c30e:	1ad3      	subs	r3, r2, r3
 800c310:	b29a      	uxth	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c322:	4413      	add	r3, r2
 800c324:	b29a      	uxth	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d30a      	bcc.n	800c346 <tcp_receive+0x35a>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c33a:	4413      	add	r3, r2
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c344:	e004      	b.n	800c350 <tcp_receive+0x364>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c34c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c358:	4a98      	ldr	r2, [pc, #608]	@ (800c5bc <tcp_receive+0x5d0>)
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7ff fdca 	bl	800bef4 <tcp_free_acked_segments>
 800c360:	4602      	mov	r2, r0
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c36e:	4a94      	ldr	r2, [pc, #592]	@ (800c5c0 <tcp_receive+0x5d4>)
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff fdbf 	bl	800bef4 <tcp_free_acked_segments>
 800c376:	4602      	mov	r2, r0
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c380:	2b00      	cmp	r3, #0
 800c382:	d104      	bne.n	800c38e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c38a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c38c:	e002      	b.n	800c394 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d103      	bne.n	800c3aa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c3b0:	4b84      	ldr	r3, [pc, #528]	@ (800c5c4 <tcp_receive+0x5d8>)
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	8b5b      	ldrh	r3, [r3, #26]
 800c3c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d035      	beq.n	800c436 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d118      	bne.n	800c404 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00c      	beq.n	800c3f4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7f8 fccc 	bl	8004d84 <lwip_htonl>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	dc20      	bgt.n	800c436 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	8b5b      	ldrh	r3, [r3, #26]
 800c3f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c402:	e018      	b.n	800c436 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	4618      	mov	r0, r3
 800c412:	f7f8 fcb7 	bl	8004d84 <lwip_htonl>
 800c416:	4603      	mov	r3, r0
 800c418:	1ae3      	subs	r3, r4, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	dc0b      	bgt.n	800c436 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	8b5b      	ldrh	r3, [r3, #26]
 800c422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c426:	b29a      	uxth	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c42c:	e003      	b.n	800c436 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f002 fbca 	bl	800ebc8 <tcp_send_empty_ack>
 800c434:	e000      	b.n	800c438 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c436:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d05b      	beq.n	800c4f8 <tcp_receive+0x50c>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c444:	4b60      	ldr	r3, [pc, #384]	@ (800c5c8 <tcp_receive+0x5dc>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	da54      	bge.n	800c4f8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c44e:	4b5f      	ldr	r3, [pc, #380]	@ (800c5cc <tcp_receive+0x5e0>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	b29a      	uxth	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c458:	b29b      	uxth	r3, r3
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c462:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c46c:	10db      	asrs	r3, r3, #3
 800c46e:	b21b      	sxth	r3, r3
 800c470:	b29b      	uxth	r3, r3
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	b29b      	uxth	r3, r3
 800c476:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c480:	b29a      	uxth	r2, r3
 800c482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c486:	4413      	add	r3, r2
 800c488:	b29b      	uxth	r3, r3
 800c48a:	b21a      	sxth	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800c490:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c494:	2b00      	cmp	r3, #0
 800c496:	da05      	bge.n	800c4a4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c498:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c49c:	425b      	negs	r3, r3
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c4a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c4ae:	109b      	asrs	r3, r3, #2
 800c4b0:	b21b      	sxth	r3, r3
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c4c8:	4413      	add	r3, r2
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	b21a      	sxth	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c4d8:	10db      	asrs	r3, r3, #3
 800c4da:	b21b      	sxth	r3, r3
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	4413      	add	r3, r2
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	b21a      	sxth	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c4f8:	4b35      	ldr	r3, [pc, #212]	@ (800c5d0 <tcp_receive+0x5e4>)
 800c4fa:	881b      	ldrh	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 84df 	beq.w	800cec0 <tcp_receive+0xed4>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	7d1b      	ldrb	r3, [r3, #20]
 800c506:	2b06      	cmp	r3, #6
 800c508:	f200 84da 	bhi.w	800cec0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c510:	4b30      	ldr	r3, [pc, #192]	@ (800c5d4 <tcp_receive+0x5e8>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	3b01      	subs	r3, #1
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f2c0 808f 	blt.w	800c63c <tcp_receive+0x650>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c522:	4b2b      	ldr	r3, [pc, #172]	@ (800c5d0 <tcp_receive+0x5e4>)
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	4619      	mov	r1, r3
 800c528:	4b2a      	ldr	r3, [pc, #168]	@ (800c5d4 <tcp_receive+0x5e8>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	440b      	add	r3, r1
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	3301      	adds	r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	f300 8082 	bgt.w	800c63c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c538:	4b27      	ldr	r3, [pc, #156]	@ (800c5d8 <tcp_receive+0x5ec>)
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c542:	4b24      	ldr	r3, [pc, #144]	@ (800c5d4 <tcp_receive+0x5e8>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c54a:	4b23      	ldr	r3, [pc, #140]	@ (800c5d8 <tcp_receive+0x5ec>)
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d106      	bne.n	800c560 <tcp_receive+0x574>
 800c552:	4b22      	ldr	r3, [pc, #136]	@ (800c5dc <tcp_receive+0x5f0>)
 800c554:	f240 5294 	movw	r2, #1428	@ 0x594
 800c558:	4921      	ldr	r1, [pc, #132]	@ (800c5e0 <tcp_receive+0x5f4>)
 800c55a:	4822      	ldr	r0, [pc, #136]	@ (800c5e4 <tcp_receive+0x5f8>)
 800c55c:	f003 fbd2 	bl	800fd04 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c562:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c566:	4293      	cmp	r3, r2
 800c568:	d906      	bls.n	800c578 <tcp_receive+0x58c>
 800c56a:	4b1c      	ldr	r3, [pc, #112]	@ (800c5dc <tcp_receive+0x5f0>)
 800c56c:	f240 5295 	movw	r2, #1429	@ 0x595
 800c570:	491d      	ldr	r1, [pc, #116]	@ (800c5e8 <tcp_receive+0x5fc>)
 800c572:	481c      	ldr	r0, [pc, #112]	@ (800c5e4 <tcp_receive+0x5f8>)
 800c574:	f003 fbc6 	bl	800fd04 <iprintf>
      off = (u16_t)off32;
 800c578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c57e:	4b16      	ldr	r3, [pc, #88]	@ (800c5d8 <tcp_receive+0x5ec>)
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	891b      	ldrh	r3, [r3, #8]
 800c584:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c588:	429a      	cmp	r2, r3
 800c58a:	d906      	bls.n	800c59a <tcp_receive+0x5ae>
 800c58c:	4b13      	ldr	r3, [pc, #76]	@ (800c5dc <tcp_receive+0x5f0>)
 800c58e:	f240 5297 	movw	r2, #1431	@ 0x597
 800c592:	4916      	ldr	r1, [pc, #88]	@ (800c5ec <tcp_receive+0x600>)
 800c594:	4813      	ldr	r0, [pc, #76]	@ (800c5e4 <tcp_receive+0x5f8>)
 800c596:	f003 fbb5 	bl	800fd04 <iprintf>
      inseg.len -= off;
 800c59a:	4b0f      	ldr	r3, [pc, #60]	@ (800c5d8 <tcp_receive+0x5ec>)
 800c59c:	891a      	ldrh	r2, [r3, #8]
 800c59e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d8 <tcp_receive+0x5ec>)
 800c5a8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c5aa:	4b0b      	ldr	r3, [pc, #44]	@ (800c5d8 <tcp_receive+0x5ec>)
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	891a      	ldrh	r2, [r3, #8]
 800c5b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c5b8:	e02a      	b.n	800c610 <tcp_receive+0x624>
 800c5ba:	bf00      	nop
 800c5bc:	08012ef4 	.word	0x08012ef4
 800c5c0:	08012efc 	.word	0x08012efc
 800c5c4:	2000b7a4 	.word	0x2000b7a4
 800c5c8:	2000b7a0 	.word	0x2000b7a0
 800c5cc:	2000b764 	.word	0x2000b764
 800c5d0:	2000b7a6 	.word	0x2000b7a6
 800c5d4:	2000b79c 	.word	0x2000b79c
 800c5d8:	2000b77c 	.word	0x2000b77c
 800c5dc:	08012b54 	.word	0x08012b54
 800c5e0:	08012f04 	.word	0x08012f04
 800c5e4:	08012bd8 	.word	0x08012bd8
 800c5e8:	08012f14 	.word	0x08012f14
 800c5ec:	08012f24 	.word	0x08012f24
        off -= p->len;
 800c5f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5f2:	895b      	ldrh	r3, [r3, #10]
 800c5f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c5fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c600:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c602:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c606:	2200      	movs	r2, #0
 800c608:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c60a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c612:	895b      	ldrh	r3, [r3, #10]
 800c614:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c618:	429a      	cmp	r2, r3
 800c61a:	d8e9      	bhi.n	800c5f0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c61c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c620:	4619      	mov	r1, r3
 800c622:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c624:	f7fc f938 	bl	8008898 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c62c:	4a90      	ldr	r2, [pc, #576]	@ (800c870 <tcp_receive+0x884>)
 800c62e:	6013      	str	r3, [r2, #0]
 800c630:	4b90      	ldr	r3, [pc, #576]	@ (800c874 <tcp_receive+0x888>)
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	4a8e      	ldr	r2, [pc, #568]	@ (800c870 <tcp_receive+0x884>)
 800c636:	6812      	ldr	r2, [r2, #0]
 800c638:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c63a:	e00d      	b.n	800c658 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c63c:	4b8c      	ldr	r3, [pc, #560]	@ (800c870 <tcp_receive+0x884>)
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	2b00      	cmp	r3, #0
 800c648:	da06      	bge.n	800c658 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	8b5b      	ldrh	r3, [r3, #26]
 800c64e:	f043 0302 	orr.w	r3, r3, #2
 800c652:	b29a      	uxth	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c658:	4b85      	ldr	r3, [pc, #532]	@ (800c870 <tcp_receive+0x884>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	2b00      	cmp	r3, #0
 800c664:	f2c0 8427 	blt.w	800ceb6 <tcp_receive+0xeca>
 800c668:	4b81      	ldr	r3, [pc, #516]	@ (800c870 <tcp_receive+0x884>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c670:	6879      	ldr	r1, [r7, #4]
 800c672:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c674:	440b      	add	r3, r1
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	3301      	adds	r3, #1
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f300 841b 	bgt.w	800ceb6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c684:	4b7a      	ldr	r3, [pc, #488]	@ (800c870 <tcp_receive+0x884>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	429a      	cmp	r2, r3
 800c68a:	f040 8298 	bne.w	800cbbe <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c68e:	4b79      	ldr	r3, [pc, #484]	@ (800c874 <tcp_receive+0x888>)
 800c690:	891c      	ldrh	r4, [r3, #8]
 800c692:	4b78      	ldr	r3, [pc, #480]	@ (800c874 <tcp_receive+0x888>)
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	899b      	ldrh	r3, [r3, #12]
 800c698:	b29b      	uxth	r3, r3
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7f8 fb5c 	bl	8004d58 <lwip_htons>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	f003 0303 	and.w	r3, r3, #3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d001      	beq.n	800c6b0 <tcp_receive+0x6c4>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e000      	b.n	800c6b2 <tcp_receive+0x6c6>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	4423      	add	r3, r4
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	4b70      	ldr	r3, [pc, #448]	@ (800c878 <tcp_receive+0x88c>)
 800c6b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c6be:	4b6e      	ldr	r3, [pc, #440]	@ (800c878 <tcp_receive+0x88c>)
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d274      	bcs.n	800c7b0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c6c6:	4b6b      	ldr	r3, [pc, #428]	@ (800c874 <tcp_receive+0x888>)
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	899b      	ldrh	r3, [r3, #12]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7f8 fb42 	bl	8004d58 <lwip_htons>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	f003 0301 	and.w	r3, r3, #1
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d01e      	beq.n	800c71e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c6e0:	4b64      	ldr	r3, [pc, #400]	@ (800c874 <tcp_receive+0x888>)
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	899b      	ldrh	r3, [r3, #12]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	b21b      	sxth	r3, r3
 800c6ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c6ee:	b21c      	sxth	r4, r3
 800c6f0:	4b60      	ldr	r3, [pc, #384]	@ (800c874 <tcp_receive+0x888>)
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	899b      	ldrh	r3, [r3, #12]
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7f8 fb2d 	bl	8004d58 <lwip_htons>
 800c6fe:	4603      	mov	r3, r0
 800c700:	b2db      	uxtb	r3, r3
 800c702:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c706:	b29b      	uxth	r3, r3
 800c708:	4618      	mov	r0, r3
 800c70a:	f7f8 fb25 	bl	8004d58 <lwip_htons>
 800c70e:	4603      	mov	r3, r0
 800c710:	b21b      	sxth	r3, r3
 800c712:	4323      	orrs	r3, r4
 800c714:	b21a      	sxth	r2, r3
 800c716:	4b57      	ldr	r3, [pc, #348]	@ (800c874 <tcp_receive+0x888>)
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	b292      	uxth	r2, r2
 800c71c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c722:	4b54      	ldr	r3, [pc, #336]	@ (800c874 <tcp_receive+0x888>)
 800c724:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c726:	4b53      	ldr	r3, [pc, #332]	@ (800c874 <tcp_receive+0x888>)
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	899b      	ldrh	r3, [r3, #12]
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	4618      	mov	r0, r3
 800c730:	f7f8 fb12 	bl	8004d58 <lwip_htons>
 800c734:	4603      	mov	r3, r0
 800c736:	b2db      	uxtb	r3, r3
 800c738:	f003 0302 	and.w	r3, r3, #2
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d005      	beq.n	800c74c <tcp_receive+0x760>
            inseg.len -= 1;
 800c740:	4b4c      	ldr	r3, [pc, #304]	@ (800c874 <tcp_receive+0x888>)
 800c742:	891b      	ldrh	r3, [r3, #8]
 800c744:	3b01      	subs	r3, #1
 800c746:	b29a      	uxth	r2, r3
 800c748:	4b4a      	ldr	r3, [pc, #296]	@ (800c874 <tcp_receive+0x888>)
 800c74a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c74c:	4b49      	ldr	r3, [pc, #292]	@ (800c874 <tcp_receive+0x888>)
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	4a48      	ldr	r2, [pc, #288]	@ (800c874 <tcp_receive+0x888>)
 800c752:	8912      	ldrh	r2, [r2, #8]
 800c754:	4611      	mov	r1, r2
 800c756:	4618      	mov	r0, r3
 800c758:	f7fb ff9e 	bl	8008698 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c75c:	4b45      	ldr	r3, [pc, #276]	@ (800c874 <tcp_receive+0x888>)
 800c75e:	891c      	ldrh	r4, [r3, #8]
 800c760:	4b44      	ldr	r3, [pc, #272]	@ (800c874 <tcp_receive+0x888>)
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	899b      	ldrh	r3, [r3, #12]
 800c766:	b29b      	uxth	r3, r3
 800c768:	4618      	mov	r0, r3
 800c76a:	f7f8 faf5 	bl	8004d58 <lwip_htons>
 800c76e:	4603      	mov	r3, r0
 800c770:	b2db      	uxtb	r3, r3
 800c772:	f003 0303 	and.w	r3, r3, #3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d001      	beq.n	800c77e <tcp_receive+0x792>
 800c77a:	2301      	movs	r3, #1
 800c77c:	e000      	b.n	800c780 <tcp_receive+0x794>
 800c77e:	2300      	movs	r3, #0
 800c780:	4423      	add	r3, r4
 800c782:	b29a      	uxth	r2, r3
 800c784:	4b3c      	ldr	r3, [pc, #240]	@ (800c878 <tcp_receive+0x88c>)
 800c786:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c788:	4b3b      	ldr	r3, [pc, #236]	@ (800c878 <tcp_receive+0x88c>)
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	461a      	mov	r2, r3
 800c78e:	4b38      	ldr	r3, [pc, #224]	@ (800c870 <tcp_receive+0x884>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	441a      	add	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c798:	6879      	ldr	r1, [r7, #4]
 800c79a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c79c:	440b      	add	r3, r1
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d006      	beq.n	800c7b0 <tcp_receive+0x7c4>
 800c7a2:	4b36      	ldr	r3, [pc, #216]	@ (800c87c <tcp_receive+0x890>)
 800c7a4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c7a8:	4935      	ldr	r1, [pc, #212]	@ (800c880 <tcp_receive+0x894>)
 800c7aa:	4836      	ldr	r0, [pc, #216]	@ (800c884 <tcp_receive+0x898>)
 800c7ac:	f003 faaa 	bl	800fd04 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 80e6 	beq.w	800c986 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c7ba:	4b2e      	ldr	r3, [pc, #184]	@ (800c874 <tcp_receive+0x888>)
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	899b      	ldrh	r3, [r3, #12]
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7f8 fac8 	bl	8004d58 <lwip_htons>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d010      	beq.n	800c7f6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c7d4:	e00a      	b.n	800c7ec <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7da:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f7fd fcf5 	bl	800a1d6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1f0      	bne.n	800c7d6 <tcp_receive+0x7ea>
 800c7f4:	e0c7      	b.n	800c986 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c7fc:	e051      	b.n	800c8a2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c7fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	899b      	ldrh	r3, [r3, #12]
 800c804:	b29b      	uxth	r3, r3
 800c806:	4618      	mov	r0, r3
 800c808:	f7f8 faa6 	bl	8004d58 <lwip_htons>
 800c80c:	4603      	mov	r3, r0
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	f003 0301 	and.w	r3, r3, #1
 800c814:	2b00      	cmp	r3, #0
 800c816:	d03c      	beq.n	800c892 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c818:	4b16      	ldr	r3, [pc, #88]	@ (800c874 <tcp_receive+0x888>)
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	899b      	ldrh	r3, [r3, #12]
 800c81e:	b29b      	uxth	r3, r3
 800c820:	4618      	mov	r0, r3
 800c822:	f7f8 fa99 	bl	8004d58 <lwip_htons>
 800c826:	4603      	mov	r3, r0
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d12f      	bne.n	800c892 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c832:	4b10      	ldr	r3, [pc, #64]	@ (800c874 <tcp_receive+0x888>)
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	899b      	ldrh	r3, [r3, #12]
 800c838:	b29c      	uxth	r4, r3
 800c83a:	2001      	movs	r0, #1
 800c83c:	f7f8 fa8c 	bl	8004d58 <lwip_htons>
 800c840:	4603      	mov	r3, r0
 800c842:	461a      	mov	r2, r3
 800c844:	4b0b      	ldr	r3, [pc, #44]	@ (800c874 <tcp_receive+0x888>)
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	4322      	orrs	r2, r4
 800c84a:	b292      	uxth	r2, r2
 800c84c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c84e:	4b09      	ldr	r3, [pc, #36]	@ (800c874 <tcp_receive+0x888>)
 800c850:	891c      	ldrh	r4, [r3, #8]
 800c852:	4b08      	ldr	r3, [pc, #32]	@ (800c874 <tcp_receive+0x888>)
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	899b      	ldrh	r3, [r3, #12]
 800c858:	b29b      	uxth	r3, r3
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7f8 fa7c 	bl	8004d58 <lwip_htons>
 800c860:	4603      	mov	r3, r0
 800c862:	b2db      	uxtb	r3, r3
 800c864:	f003 0303 	and.w	r3, r3, #3
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00d      	beq.n	800c888 <tcp_receive+0x89c>
 800c86c:	2301      	movs	r3, #1
 800c86e:	e00c      	b.n	800c88a <tcp_receive+0x89e>
 800c870:	2000b79c 	.word	0x2000b79c
 800c874:	2000b77c 	.word	0x2000b77c
 800c878:	2000b7a6 	.word	0x2000b7a6
 800c87c:	08012b54 	.word	0x08012b54
 800c880:	08012f34 	.word	0x08012f34
 800c884:	08012bd8 	.word	0x08012bd8
 800c888:	2300      	movs	r3, #0
 800c88a:	4423      	add	r3, r4
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	4b98      	ldr	r3, [pc, #608]	@ (800caf0 <tcp_receive+0xb04>)
 800c890:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c894:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c89c:	6938      	ldr	r0, [r7, #16]
 800c89e:	f7fd fc9a 	bl	800a1d6 <tcp_seg_free>
            while (next &&
 800c8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00e      	beq.n	800c8c6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c8a8:	4b91      	ldr	r3, [pc, #580]	@ (800caf0 <tcp_receive+0xb04>)
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	4b91      	ldr	r3, [pc, #580]	@ (800caf4 <tcp_receive+0xb08>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	441a      	add	r2, r3
 800c8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c8bc:	8909      	ldrh	r1, [r1, #8]
 800c8be:	440b      	add	r3, r1
 800c8c0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da9b      	bge.n	800c7fe <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c8c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d059      	beq.n	800c980 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c8cc:	4b88      	ldr	r3, [pc, #544]	@ (800caf0 <tcp_receive+0xb04>)
 800c8ce:	881b      	ldrh	r3, [r3, #0]
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	4b88      	ldr	r3, [pc, #544]	@ (800caf4 <tcp_receive+0xb08>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	441a      	add	r2, r3
 800c8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	dd4d      	ble.n	800c980 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c8e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	4b81      	ldr	r3, [pc, #516]	@ (800caf4 <tcp_receive+0xb08>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	1ad3      	subs	r3, r2, r3
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	4b80      	ldr	r3, [pc, #512]	@ (800caf8 <tcp_receive+0xb0c>)
 800c8f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c8fa:	4b7f      	ldr	r3, [pc, #508]	@ (800caf8 <tcp_receive+0xb0c>)
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	899b      	ldrh	r3, [r3, #12]
 800c900:	b29b      	uxth	r3, r3
 800c902:	4618      	mov	r0, r3
 800c904:	f7f8 fa28 	bl	8004d58 <lwip_htons>
 800c908:	4603      	mov	r3, r0
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	f003 0302 	and.w	r3, r3, #2
 800c910:	2b00      	cmp	r3, #0
 800c912:	d005      	beq.n	800c920 <tcp_receive+0x934>
                inseg.len -= 1;
 800c914:	4b78      	ldr	r3, [pc, #480]	@ (800caf8 <tcp_receive+0xb0c>)
 800c916:	891b      	ldrh	r3, [r3, #8]
 800c918:	3b01      	subs	r3, #1
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	4b76      	ldr	r3, [pc, #472]	@ (800caf8 <tcp_receive+0xb0c>)
 800c91e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c920:	4b75      	ldr	r3, [pc, #468]	@ (800caf8 <tcp_receive+0xb0c>)
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	4a74      	ldr	r2, [pc, #464]	@ (800caf8 <tcp_receive+0xb0c>)
 800c926:	8912      	ldrh	r2, [r2, #8]
 800c928:	4611      	mov	r1, r2
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fb feb4 	bl	8008698 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c930:	4b71      	ldr	r3, [pc, #452]	@ (800caf8 <tcp_receive+0xb0c>)
 800c932:	891c      	ldrh	r4, [r3, #8]
 800c934:	4b70      	ldr	r3, [pc, #448]	@ (800caf8 <tcp_receive+0xb0c>)
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	899b      	ldrh	r3, [r3, #12]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7f8 fa0b 	bl	8004d58 <lwip_htons>
 800c942:	4603      	mov	r3, r0
 800c944:	b2db      	uxtb	r3, r3
 800c946:	f003 0303 	and.w	r3, r3, #3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <tcp_receive+0x966>
 800c94e:	2301      	movs	r3, #1
 800c950:	e000      	b.n	800c954 <tcp_receive+0x968>
 800c952:	2300      	movs	r3, #0
 800c954:	4423      	add	r3, r4
 800c956:	b29a      	uxth	r2, r3
 800c958:	4b65      	ldr	r3, [pc, #404]	@ (800caf0 <tcp_receive+0xb04>)
 800c95a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c95c:	4b64      	ldr	r3, [pc, #400]	@ (800caf0 <tcp_receive+0xb04>)
 800c95e:	881b      	ldrh	r3, [r3, #0]
 800c960:	461a      	mov	r2, r3
 800c962:	4b64      	ldr	r3, [pc, #400]	@ (800caf4 <tcp_receive+0xb08>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	441a      	add	r2, r3
 800c968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d006      	beq.n	800c980 <tcp_receive+0x994>
 800c972:	4b62      	ldr	r3, [pc, #392]	@ (800cafc <tcp_receive+0xb10>)
 800c974:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c978:	4961      	ldr	r1, [pc, #388]	@ (800cb00 <tcp_receive+0xb14>)
 800c97a:	4862      	ldr	r0, [pc, #392]	@ (800cb04 <tcp_receive+0xb18>)
 800c97c:	f003 f9c2 	bl	800fd04 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c984:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c986:	4b5a      	ldr	r3, [pc, #360]	@ (800caf0 <tcp_receive+0xb04>)
 800c988:	881b      	ldrh	r3, [r3, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	4b59      	ldr	r3, [pc, #356]	@ (800caf4 <tcp_receive+0xb08>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	441a      	add	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c99a:	4b55      	ldr	r3, [pc, #340]	@ (800caf0 <tcp_receive+0xb04>)
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d206      	bcs.n	800c9b0 <tcp_receive+0x9c4>
 800c9a2:	4b56      	ldr	r3, [pc, #344]	@ (800cafc <tcp_receive+0xb10>)
 800c9a4:	f240 6207 	movw	r2, #1543	@ 0x607
 800c9a8:	4957      	ldr	r1, [pc, #348]	@ (800cb08 <tcp_receive+0xb1c>)
 800c9aa:	4856      	ldr	r0, [pc, #344]	@ (800cb04 <tcp_receive+0xb18>)
 800c9ac:	f003 f9aa 	bl	800fd04 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c9b4:	4b4e      	ldr	r3, [pc, #312]	@ (800caf0 <tcp_receive+0xb04>)
 800c9b6:	881b      	ldrh	r3, [r3, #0]
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7fc fdc5 	bl	8009550 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c9c6:	4b4c      	ldr	r3, [pc, #304]	@ (800caf8 <tcp_receive+0xb0c>)
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	891b      	ldrh	r3, [r3, #8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d006      	beq.n	800c9de <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c9d0:	4b49      	ldr	r3, [pc, #292]	@ (800caf8 <tcp_receive+0xb0c>)
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	4a4d      	ldr	r2, [pc, #308]	@ (800cb0c <tcp_receive+0xb20>)
 800c9d6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c9d8:	4b47      	ldr	r3, [pc, #284]	@ (800caf8 <tcp_receive+0xb0c>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c9de:	4b46      	ldr	r3, [pc, #280]	@ (800caf8 <tcp_receive+0xb0c>)
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	899b      	ldrh	r3, [r3, #12]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7f8 f9b6 	bl	8004d58 <lwip_htons>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	f003 0301 	and.w	r3, r3, #1
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 80b8 	beq.w	800cb6a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c9fa:	4b45      	ldr	r3, [pc, #276]	@ (800cb10 <tcp_receive+0xb24>)
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	f043 0320 	orr.w	r3, r3, #32
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	4b42      	ldr	r3, [pc, #264]	@ (800cb10 <tcp_receive+0xb24>)
 800ca06:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ca08:	e0af      	b.n	800cb6a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca0e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	4a36      	ldr	r2, [pc, #216]	@ (800caf4 <tcp_receive+0xb08>)
 800ca1a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	891b      	ldrh	r3, [r3, #8]
 800ca20:	461c      	mov	r4, r3
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	899b      	ldrh	r3, [r3, #12]
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7f8 f994 	bl	8004d58 <lwip_htons>
 800ca30:	4603      	mov	r3, r0
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	f003 0303 	and.w	r3, r3, #3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <tcp_receive+0xa54>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e000      	b.n	800ca42 <tcp_receive+0xa56>
 800ca40:	2300      	movs	r3, #0
 800ca42:	191a      	adds	r2, r3, r4
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca48:	441a      	add	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca52:	461c      	mov	r4, r3
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	891b      	ldrh	r3, [r3, #8]
 800ca58:	461d      	mov	r5, r3
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	899b      	ldrh	r3, [r3, #12]
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7f8 f978 	bl	8004d58 <lwip_htons>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	f003 0303 	and.w	r3, r3, #3
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <tcp_receive+0xa8c>
 800ca74:	2301      	movs	r3, #1
 800ca76:	e000      	b.n	800ca7a <tcp_receive+0xa8e>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	442b      	add	r3, r5
 800ca7c:	429c      	cmp	r4, r3
 800ca7e:	d206      	bcs.n	800ca8e <tcp_receive+0xaa2>
 800ca80:	4b1e      	ldr	r3, [pc, #120]	@ (800cafc <tcp_receive+0xb10>)
 800ca82:	f240 622b 	movw	r2, #1579	@ 0x62b
 800ca86:	4923      	ldr	r1, [pc, #140]	@ (800cb14 <tcp_receive+0xb28>)
 800ca88:	481e      	ldr	r0, [pc, #120]	@ (800cb04 <tcp_receive+0xb18>)
 800ca8a:	f003 f93b 	bl	800fd04 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	891b      	ldrh	r3, [r3, #8]
 800ca92:	461c      	mov	r4, r3
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	899b      	ldrh	r3, [r3, #12]
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7f8 f95b 	bl	8004d58 <lwip_htons>
 800caa2:	4603      	mov	r3, r0
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	f003 0303 	and.w	r3, r3, #3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <tcp_receive+0xac6>
 800caae:	2301      	movs	r3, #1
 800cab0:	e000      	b.n	800cab4 <tcp_receive+0xac8>
 800cab2:	2300      	movs	r3, #0
 800cab4:	1919      	adds	r1, r3, r4
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800caba:	b28b      	uxth	r3, r1
 800cabc:	1ad3      	subs	r3, r2, r3
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f7fc fd43 	bl	8009550 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	891b      	ldrh	r3, [r3, #8]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d028      	beq.n	800cb26 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800cad4:	4b0d      	ldr	r3, [pc, #52]	@ (800cb0c <tcp_receive+0xb20>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d01d      	beq.n	800cb18 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800cadc:	4b0b      	ldr	r3, [pc, #44]	@ (800cb0c <tcp_receive+0xb20>)
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	4619      	mov	r1, r3
 800cae6:	4610      	mov	r0, r2
 800cae8:	f7fc f81e 	bl	8008b28 <pbuf_cat>
 800caec:	e018      	b.n	800cb20 <tcp_receive+0xb34>
 800caee:	bf00      	nop
 800caf0:	2000b7a6 	.word	0x2000b7a6
 800caf4:	2000b79c 	.word	0x2000b79c
 800caf8:	2000b77c 	.word	0x2000b77c
 800cafc:	08012b54 	.word	0x08012b54
 800cb00:	08012f6c 	.word	0x08012f6c
 800cb04:	08012bd8 	.word	0x08012bd8
 800cb08:	08012fa8 	.word	0x08012fa8
 800cb0c:	2000b7ac 	.word	0x2000b7ac
 800cb10:	2000b7a9 	.word	0x2000b7a9
 800cb14:	08012fc8 	.word	0x08012fc8
            } else {
              recv_data = cseg->p;
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	4a70      	ldr	r2, [pc, #448]	@ (800cce0 <tcp_receive+0xcf4>)
 800cb1e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2200      	movs	r2, #0
 800cb24:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	899b      	ldrh	r3, [r3, #12]
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7f8 f912 	bl	8004d58 <lwip_htons>
 800cb34:	4603      	mov	r3, r0
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00d      	beq.n	800cb5c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800cb40:	4b68      	ldr	r3, [pc, #416]	@ (800cce4 <tcp_receive+0xcf8>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	f043 0320 	orr.w	r3, r3, #32
 800cb48:	b2da      	uxtb	r2, r3
 800cb4a:	4b66      	ldr	r3, [pc, #408]	@ (800cce4 <tcp_receive+0xcf8>)
 800cb4c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7d1b      	ldrb	r3, [r3, #20]
 800cb52:	2b04      	cmp	r3, #4
 800cb54:	d102      	bne.n	800cb5c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2207      	movs	r2, #7
 800cb5a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800cb64:	68b8      	ldr	r0, [r7, #8]
 800cb66:	f7fd fb36 	bl	800a1d6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d008      	beq.n	800cb84 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	685a      	ldr	r2, [r3, #4]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	f43f af43 	beq.w	800ca0a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	8b5b      	ldrh	r3, [r3, #26]
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00e      	beq.n	800cbae <tcp_receive+0xbc2>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	8b5b      	ldrh	r3, [r3, #26]
 800cb94:	f023 0301 	bic.w	r3, r3, #1
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	835a      	strh	r2, [r3, #26]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	8b5b      	ldrh	r3, [r3, #26]
 800cba2:	f043 0302 	orr.w	r3, r3, #2
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cbac:	e187      	b.n	800cebe <tcp_receive+0xed2>
        tcp_ack(pcb);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8b5b      	ldrh	r3, [r3, #26]
 800cbb2:	f043 0301 	orr.w	r3, r3, #1
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cbbc:	e17f      	b.n	800cebe <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cbc6:	4848      	ldr	r0, [pc, #288]	@ (800cce8 <tcp_receive+0xcfc>)
 800cbc8:	f7fd fb1e 	bl	800a208 <tcp_seg_copy>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	675a      	str	r2, [r3, #116]	@ 0x74
 800cbd2:	e16c      	b.n	800ceae <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbde:	e156      	b.n	800ce8e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	4b41      	ldr	r3, [pc, #260]	@ (800ccec <tcp_receive+0xd00>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d11d      	bne.n	800cc2a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cbee:	4b3e      	ldr	r3, [pc, #248]	@ (800cce8 <tcp_receive+0xcfc>)
 800cbf0:	891a      	ldrh	r2, [r3, #8]
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf4:	891b      	ldrh	r3, [r3, #8]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	f240 814e 	bls.w	800ce98 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cbfc:	483a      	ldr	r0, [pc, #232]	@ (800cce8 <tcp_receive+0xcfc>)
 800cbfe:	f7fd fb03 	bl	800a208 <tcp_seg_copy>
 800cc02:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f000 8148 	beq.w	800ce9c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d003      	beq.n	800cc1a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800cc12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	e002      	b.n	800cc20 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	697a      	ldr	r2, [r7, #20]
 800cc1e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cc20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc22:	6978      	ldr	r0, [r7, #20]
 800cc24:	f7ff f8de 	bl	800bde4 <tcp_oos_insert_segment>
                }
                break;
 800cc28:	e138      	b.n	800ce9c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cc2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d117      	bne.n	800cc60 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cc30:	4b2e      	ldr	r3, [pc, #184]	@ (800ccec <tcp_receive+0xd00>)
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	da57      	bge.n	800ccf0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cc40:	4829      	ldr	r0, [pc, #164]	@ (800cce8 <tcp_receive+0xcfc>)
 800cc42:	f7fd fae1 	bl	800a208 <tcp_seg_copy>
 800cc46:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	f000 8128 	beq.w	800cea0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	69ba      	ldr	r2, [r7, #24]
 800cc54:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800cc56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc58:	69b8      	ldr	r0, [r7, #24]
 800cc5a:	f7ff f8c3 	bl	800bde4 <tcp_oos_insert_segment>
                  }
                  break;
 800cc5e:	e11f      	b.n	800cea0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cc60:	4b22      	ldr	r3, [pc, #136]	@ (800ccec <tcp_receive+0xd00>)
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	db3e      	blt.n	800ccf0 <tcp_receive+0xd04>
 800cc72:	4b1e      	ldr	r3, [pc, #120]	@ (800ccec <tcp_receive+0xd00>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	1ad3      	subs	r3, r2, r3
 800cc7e:	3301      	adds	r3, #1
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	dc35      	bgt.n	800ccf0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cc84:	4818      	ldr	r0, [pc, #96]	@ (800cce8 <tcp_receive+0xcfc>)
 800cc86:	f7fd fabf 	bl	800a208 <tcp_seg_copy>
 800cc8a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 8108 	beq.w	800cea4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cc94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc9c:	8912      	ldrh	r2, [r2, #8]
 800cc9e:	441a      	add	r2, r3
 800cca0:	4b12      	ldr	r3, [pc, #72]	@ (800ccec <tcp_receive+0xd00>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	dd12      	ble.n	800ccd0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ccaa:	4b10      	ldr	r3, [pc, #64]	@ (800ccec <tcp_receive+0xd00>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccbe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ccc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccc6:	891b      	ldrh	r3, [r3, #8]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4610      	mov	r0, r2
 800cccc:	f7fb fce4 	bl	8008698 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ccd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccd2:	69fa      	ldr	r2, [r7, #28]
 800ccd4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ccd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ccd8:	69f8      	ldr	r0, [r7, #28]
 800ccda:	f7ff f883 	bl	800bde4 <tcp_oos_insert_segment>
                  }
                  break;
 800ccde:	e0e1      	b.n	800cea4 <tcp_receive+0xeb8>
 800cce0:	2000b7ac 	.word	0x2000b7ac
 800cce4:	2000b7a9 	.word	0x2000b7a9
 800cce8:	2000b77c 	.word	0x2000b77c
 800ccec:	2000b79c 	.word	0x2000b79c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f040 80c5 	bne.w	800ce88 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ccfe:	4b7f      	ldr	r3, [pc, #508]	@ (800cefc <tcp_receive+0xf10>)
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f340 80bc 	ble.w	800ce88 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	899b      	ldrh	r3, [r3, #12]
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7f8 f81d 	bl	8004d58 <lwip_htons>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f040 80be 	bne.w	800cea8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cd2c:	4874      	ldr	r0, [pc, #464]	@ (800cf00 <tcp_receive+0xf14>)
 800cd2e:	f7fd fa6b 	bl	800a208 <tcp_seg_copy>
 800cd32:	4602      	mov	r2, r0
 800cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd36:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f000 80b5 	beq.w	800ceac <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd4a:	8912      	ldrh	r2, [r2, #8]
 800cd4c:	441a      	add	r2, r3
 800cd4e:	4b6b      	ldr	r3, [pc, #428]	@ (800cefc <tcp_receive+0xf10>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	dd12      	ble.n	800cd7e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cd58:	4b68      	ldr	r3, [pc, #416]	@ (800cefc <tcp_receive+0xf10>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd74:	891b      	ldrh	r3, [r3, #8]
 800cd76:	4619      	mov	r1, r3
 800cd78:	4610      	mov	r0, r2
 800cd7a:	f7fb fc8d 	bl	8008698 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cd7e:	4b61      	ldr	r3, [pc, #388]	@ (800cf04 <tcp_receive+0xf18>)
 800cd80:	881b      	ldrh	r3, [r3, #0]
 800cd82:	461a      	mov	r2, r3
 800cd84:	4b5d      	ldr	r3, [pc, #372]	@ (800cefc <tcp_receive+0xf10>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	441a      	add	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cd92:	440b      	add	r3, r1
 800cd94:	1ad3      	subs	r3, r2, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f340 8088 	ble.w	800ceac <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	899b      	ldrh	r3, [r3, #12]
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7f7 ffd6 	bl	8004d58 <lwip_htons>
 800cdac:	4603      	mov	r3, r0
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d021      	beq.n	800cdfc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	899b      	ldrh	r3, [r3, #12]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	b21b      	sxth	r3, r3
 800cdc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cdc8:	b21c      	sxth	r4, r3
 800cdca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	899b      	ldrh	r3, [r3, #12]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7f7 ffbf 	bl	8004d58 <lwip_htons>
 800cdda:	4603      	mov	r3, r0
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7f7 ffb7 	bl	8004d58 <lwip_htons>
 800cdea:	4603      	mov	r3, r0
 800cdec:	b21b      	sxth	r3, r3
 800cdee:	4323      	orrs	r3, r4
 800cdf0:	b21a      	sxth	r2, r3
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	b292      	uxth	r2, r2
 800cdfa:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce06:	4413      	add	r3, r2
 800ce08:	b299      	uxth	r1, r3
 800ce0a:	4b3c      	ldr	r3, [pc, #240]	@ (800cefc <tcp_receive+0xf10>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	1a8a      	subs	r2, r1, r2
 800ce16:	b292      	uxth	r2, r2
 800ce18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	891b      	ldrh	r3, [r3, #8]
 800ce26:	4619      	mov	r1, r3
 800ce28:	4610      	mov	r0, r2
 800ce2a:	f7fb fc35 	bl	8008698 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ce2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	891c      	ldrh	r4, [r3, #8]
 800ce34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	899b      	ldrh	r3, [r3, #12]
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7f7 ff8a 	bl	8004d58 <lwip_htons>
 800ce44:	4603      	mov	r3, r0
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	f003 0303 	and.w	r3, r3, #3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d001      	beq.n	800ce54 <tcp_receive+0xe68>
 800ce50:	2301      	movs	r3, #1
 800ce52:	e000      	b.n	800ce56 <tcp_receive+0xe6a>
 800ce54:	2300      	movs	r3, #0
 800ce56:	4423      	add	r3, r4
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	4b2a      	ldr	r3, [pc, #168]	@ (800cf04 <tcp_receive+0xf18>)
 800ce5c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ce5e:	4b29      	ldr	r3, [pc, #164]	@ (800cf04 <tcp_receive+0xf18>)
 800ce60:	881b      	ldrh	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	4b25      	ldr	r3, [pc, #148]	@ (800cefc <tcp_receive+0xf10>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	441a      	add	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce6e:	6879      	ldr	r1, [r7, #4]
 800ce70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ce72:	440b      	add	r3, r1
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d019      	beq.n	800ceac <tcp_receive+0xec0>
 800ce78:	4b23      	ldr	r3, [pc, #140]	@ (800cf08 <tcp_receive+0xf1c>)
 800ce7a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ce7e:	4923      	ldr	r1, [pc, #140]	@ (800cf0c <tcp_receive+0xf20>)
 800ce80:	4823      	ldr	r0, [pc, #140]	@ (800cf10 <tcp_receive+0xf24>)
 800ce82:	f002 ff3f 	bl	800fd04 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ce86:	e011      	b.n	800ceac <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ce88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f47f aea5 	bne.w	800cbe0 <tcp_receive+0xbf4>
 800ce96:	e00a      	b.n	800ceae <tcp_receive+0xec2>
                break;
 800ce98:	bf00      	nop
 800ce9a:	e008      	b.n	800ceae <tcp_receive+0xec2>
                break;
 800ce9c:	bf00      	nop
 800ce9e:	e006      	b.n	800ceae <tcp_receive+0xec2>
                  break;
 800cea0:	bf00      	nop
 800cea2:	e004      	b.n	800ceae <tcp_receive+0xec2>
                  break;
 800cea4:	bf00      	nop
 800cea6:	e002      	b.n	800ceae <tcp_receive+0xec2>
                  break;
 800cea8:	bf00      	nop
 800ceaa:	e000      	b.n	800ceae <tcp_receive+0xec2>
                break;
 800ceac:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f001 fe8a 	bl	800ebc8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ceb4:	e003      	b.n	800cebe <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f001 fe86 	bl	800ebc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cebc:	e01a      	b.n	800cef4 <tcp_receive+0xf08>
 800cebe:	e019      	b.n	800cef4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cec0:	4b0e      	ldr	r3, [pc, #56]	@ (800cefc <tcp_receive+0xf10>)
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	db0a      	blt.n	800cee4 <tcp_receive+0xef8>
 800cece:	4b0b      	ldr	r3, [pc, #44]	@ (800cefc <tcp_receive+0xf10>)
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced6:	6879      	ldr	r1, [r7, #4]
 800ced8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ceda:	440b      	add	r3, r1
 800cedc:	1ad3      	subs	r3, r2, r3
 800cede:	3301      	adds	r3, #1
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	dd07      	ble.n	800cef4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	8b5b      	ldrh	r3, [r3, #26]
 800cee8:	f043 0302 	orr.w	r3, r3, #2
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cef2:	e7ff      	b.n	800cef4 <tcp_receive+0xf08>
 800cef4:	bf00      	nop
 800cef6:	3750      	adds	r7, #80	@ 0x50
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bdb0      	pop	{r4, r5, r7, pc}
 800cefc:	2000b79c 	.word	0x2000b79c
 800cf00:	2000b77c 	.word	0x2000b77c
 800cf04:	2000b7a6 	.word	0x2000b7a6
 800cf08:	08012b54 	.word	0x08012b54
 800cf0c:	08012f34 	.word	0x08012f34
 800cf10:	08012bd8 	.word	0x08012bd8

0800cf14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cf1a:	4b15      	ldr	r3, [pc, #84]	@ (800cf70 <tcp_get_next_optbyte+0x5c>)
 800cf1c:	881b      	ldrh	r3, [r3, #0]
 800cf1e:	1c5a      	adds	r2, r3, #1
 800cf20:	b291      	uxth	r1, r2
 800cf22:	4a13      	ldr	r2, [pc, #76]	@ (800cf70 <tcp_get_next_optbyte+0x5c>)
 800cf24:	8011      	strh	r1, [r2, #0]
 800cf26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cf28:	4b12      	ldr	r3, [pc, #72]	@ (800cf74 <tcp_get_next_optbyte+0x60>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d004      	beq.n	800cf3a <tcp_get_next_optbyte+0x26>
 800cf30:	4b11      	ldr	r3, [pc, #68]	@ (800cf78 <tcp_get_next_optbyte+0x64>)
 800cf32:	881b      	ldrh	r3, [r3, #0]
 800cf34:	88fa      	ldrh	r2, [r7, #6]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d208      	bcs.n	800cf4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cf3a:	4b10      	ldr	r3, [pc, #64]	@ (800cf7c <tcp_get_next_optbyte+0x68>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	3314      	adds	r3, #20
 800cf40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cf42:	88fb      	ldrh	r3, [r7, #6]
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	4413      	add	r3, r2
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	e00b      	b.n	800cf64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cf4c:	88fb      	ldrh	r3, [r7, #6]
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	4b09      	ldr	r3, [pc, #36]	@ (800cf78 <tcp_get_next_optbyte+0x64>)
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cf5a:	4b06      	ldr	r3, [pc, #24]	@ (800cf74 <tcp_get_next_optbyte+0x60>)
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	797b      	ldrb	r3, [r7, #5]
 800cf60:	4413      	add	r3, r2
 800cf62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	370c      	adds	r7, #12
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	2000b798 	.word	0x2000b798
 800cf74:	2000b794 	.word	0x2000b794
 800cf78:	2000b792 	.word	0x2000b792
 800cf7c:	2000b78c 	.word	0x2000b78c

0800cf80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <tcp_parseopt+0x1c>
 800cf8e:	4b33      	ldr	r3, [pc, #204]	@ (800d05c <tcp_parseopt+0xdc>)
 800cf90:	f240 727d 	movw	r2, #1917	@ 0x77d
 800cf94:	4932      	ldr	r1, [pc, #200]	@ (800d060 <tcp_parseopt+0xe0>)
 800cf96:	4833      	ldr	r0, [pc, #204]	@ (800d064 <tcp_parseopt+0xe4>)
 800cf98:	f002 feb4 	bl	800fd04 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cf9c:	4b32      	ldr	r3, [pc, #200]	@ (800d068 <tcp_parseopt+0xe8>)
 800cf9e:	881b      	ldrh	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d057      	beq.n	800d054 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cfa4:	4b31      	ldr	r3, [pc, #196]	@ (800d06c <tcp_parseopt+0xec>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	801a      	strh	r2, [r3, #0]
 800cfaa:	e047      	b.n	800d03c <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 800cfac:	f7ff ffb2 	bl	800cf14 <tcp_get_next_optbyte>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d006      	beq.n	800cfc8 <tcp_parseopt+0x48>
 800cfba:	2b02      	cmp	r3, #2
 800cfbc:	dc2b      	bgt.n	800d016 <tcp_parseopt+0x96>
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d043      	beq.n	800d04a <tcp_parseopt+0xca>
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d039      	beq.n	800d03a <tcp_parseopt+0xba>
 800cfc6:	e026      	b.n	800d016 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cfc8:	f7ff ffa4 	bl	800cf14 <tcp_get_next_optbyte>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b04      	cmp	r3, #4
 800cfd0:	d13d      	bne.n	800d04e <tcp_parseopt+0xce>
 800cfd2:	4b26      	ldr	r3, [pc, #152]	@ (800d06c <tcp_parseopt+0xec>)
 800cfd4:	881b      	ldrh	r3, [r3, #0]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	4a23      	ldr	r2, [pc, #140]	@ (800d068 <tcp_parseopt+0xe8>)
 800cfda:	8812      	ldrh	r2, [r2, #0]
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	da36      	bge.n	800d04e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cfe0:	f7ff ff98 	bl	800cf14 <tcp_get_next_optbyte>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	021b      	lsls	r3, r3, #8
 800cfe8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cfea:	f7ff ff93 	bl	800cf14 <tcp_get_next_optbyte>
 800cfee:	4603      	mov	r3, r0
 800cff0:	461a      	mov	r2, r3
 800cff2:	89bb      	ldrh	r3, [r7, #12]
 800cff4:	4313      	orrs	r3, r2
 800cff6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cff8:	89bb      	ldrh	r3, [r7, #12]
 800cffa:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800cffe:	4293      	cmp	r3, r2
 800d000:	d804      	bhi.n	800d00c <tcp_parseopt+0x8c>
 800d002:	89bb      	ldrh	r3, [r7, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <tcp_parseopt+0x8c>
 800d008:	89ba      	ldrh	r2, [r7, #12]
 800d00a:	e001      	b.n	800d010 <tcp_parseopt+0x90>
 800d00c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800d014:	e012      	b.n	800d03c <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d016:	f7ff ff7d 	bl	800cf14 <tcp_get_next_optbyte>
 800d01a:	4603      	mov	r3, r0
 800d01c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d01e:	7afb      	ldrb	r3, [r7, #11]
 800d020:	2b01      	cmp	r3, #1
 800d022:	d916      	bls.n	800d052 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d024:	7afb      	ldrb	r3, [r7, #11]
 800d026:	b29a      	uxth	r2, r3
 800d028:	4b10      	ldr	r3, [pc, #64]	@ (800d06c <tcp_parseopt+0xec>)
 800d02a:	881b      	ldrh	r3, [r3, #0]
 800d02c:	4413      	add	r3, r2
 800d02e:	b29b      	uxth	r3, r3
 800d030:	3b02      	subs	r3, #2
 800d032:	b29a      	uxth	r2, r3
 800d034:	4b0d      	ldr	r3, [pc, #52]	@ (800d06c <tcp_parseopt+0xec>)
 800d036:	801a      	strh	r2, [r3, #0]
 800d038:	e000      	b.n	800d03c <tcp_parseopt+0xbc>
          break;
 800d03a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d03c:	4b0b      	ldr	r3, [pc, #44]	@ (800d06c <tcp_parseopt+0xec>)
 800d03e:	881a      	ldrh	r2, [r3, #0]
 800d040:	4b09      	ldr	r3, [pc, #36]	@ (800d068 <tcp_parseopt+0xe8>)
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	429a      	cmp	r2, r3
 800d046:	d3b1      	bcc.n	800cfac <tcp_parseopt+0x2c>
 800d048:	e004      	b.n	800d054 <tcp_parseopt+0xd4>
          return;
 800d04a:	bf00      	nop
 800d04c:	e002      	b.n	800d054 <tcp_parseopt+0xd4>
            return;
 800d04e:	bf00      	nop
 800d050:	e000      	b.n	800d054 <tcp_parseopt+0xd4>
            return;
 800d052:	bf00      	nop
      }
    }
  }
}
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	08012b54 	.word	0x08012b54
 800d060:	08012ff0 	.word	0x08012ff0
 800d064:	08012bd8 	.word	0x08012bd8
 800d068:	2000b790 	.word	0x2000b790
 800d06c:	2000b798 	.word	0x2000b798

0800d070 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d070:	b480      	push	{r7}
 800d072:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d074:	4b05      	ldr	r3, [pc, #20]	@ (800d08c <tcp_trigger_input_pcb_close+0x1c>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	f043 0310 	orr.w	r3, r3, #16
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	4b03      	ldr	r3, [pc, #12]	@ (800d08c <tcp_trigger_input_pcb_close+0x1c>)
 800d080:	701a      	strb	r2, [r3, #0]
}
 800d082:	bf00      	nop
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	2000b7a9 	.word	0x2000b7a9

0800d090 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00a      	beq.n	800d0b8 <tcp_route+0x28>
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	7a1b      	ldrb	r3, [r3, #8]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d006      	beq.n	800d0b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	7a1b      	ldrb	r3, [r3, #8]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fb f914 	bl	80082dc <netif_get_by_index>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	e003      	b.n	800d0c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7f9 f843 	bl	8006144 <ip4_route>
 800d0be:	4603      	mov	r3, r0
  }
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d0c8:	b590      	push	{r4, r7, lr}
 800d0ca:	b087      	sub	sp, #28
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	603b      	str	r3, [r7, #0]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d105      	bne.n	800d0ea <tcp_create_segment+0x22>
 800d0de:	4b43      	ldr	r3, [pc, #268]	@ (800d1ec <tcp_create_segment+0x124>)
 800d0e0:	22a3      	movs	r2, #163	@ 0xa3
 800d0e2:	4943      	ldr	r1, [pc, #268]	@ (800d1f0 <tcp_create_segment+0x128>)
 800d0e4:	4843      	ldr	r0, [pc, #268]	@ (800d1f4 <tcp_create_segment+0x12c>)
 800d0e6:	f002 fe0d 	bl	800fd04 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d105      	bne.n	800d0fc <tcp_create_segment+0x34>
 800d0f0:	4b3e      	ldr	r3, [pc, #248]	@ (800d1ec <tcp_create_segment+0x124>)
 800d0f2:	22a4      	movs	r2, #164	@ 0xa4
 800d0f4:	4940      	ldr	r1, [pc, #256]	@ (800d1f8 <tcp_create_segment+0x130>)
 800d0f6:	483f      	ldr	r0, [pc, #252]	@ (800d1f4 <tcp_create_segment+0x12c>)
 800d0f8:	f002 fe04 	bl	800fd04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d0fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	b2db      	uxtb	r3, r3
 800d104:	f003 0304 	and.w	r3, r3, #4
 800d108:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d10a:	2003      	movs	r0, #3
 800d10c:	f7fa fd60 	bl	8007bd0 <memp_malloc>
 800d110:	6138      	str	r0, [r7, #16]
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d104      	bne.n	800d122 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d118:	68b8      	ldr	r0, [r7, #8]
 800d11a:	f7fb fc43 	bl	80089a4 <pbuf_free>
    return NULL;
 800d11e:	2300      	movs	r3, #0
 800d120:	e060      	b.n	800d1e4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800d128:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	2200      	movs	r2, #0
 800d12e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	891a      	ldrh	r2, [r3, #8]
 800d13a:	7dfb      	ldrb	r3, [r7, #23]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	429a      	cmp	r2, r3
 800d140:	d205      	bcs.n	800d14e <tcp_create_segment+0x86>
 800d142:	4b2a      	ldr	r3, [pc, #168]	@ (800d1ec <tcp_create_segment+0x124>)
 800d144:	22b0      	movs	r2, #176	@ 0xb0
 800d146:	492d      	ldr	r1, [pc, #180]	@ (800d1fc <tcp_create_segment+0x134>)
 800d148:	482a      	ldr	r0, [pc, #168]	@ (800d1f4 <tcp_create_segment+0x12c>)
 800d14a:	f002 fddb 	bl	800fd04 <iprintf>
  seg->len = p->tot_len - optlen;
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	891a      	ldrh	r2, [r3, #8]
 800d152:	7dfb      	ldrb	r3, [r7, #23]
 800d154:	b29b      	uxth	r3, r3
 800d156:	1ad3      	subs	r3, r2, r3
 800d158:	b29a      	uxth	r2, r3
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d15e:	2114      	movs	r1, #20
 800d160:	68b8      	ldr	r0, [r7, #8]
 800d162:	f7fb fb89 	bl	8008878 <pbuf_add_header>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d004      	beq.n	800d176 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d16c:	6938      	ldr	r0, [r7, #16]
 800d16e:	f7fd f832 	bl	800a1d6 <tcp_seg_free>
    return NULL;
 800d172:	2300      	movs	r3, #0
 800d174:	e036      	b.n	800d1e4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	8ada      	ldrh	r2, [r3, #22]
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	68dc      	ldr	r4, [r3, #12]
 800d188:	4610      	mov	r0, r2
 800d18a:	f7f7 fde5 	bl	8004d58 <lwip_htons>
 800d18e:	4603      	mov	r3, r0
 800d190:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	8b1a      	ldrh	r2, [r3, #24]
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	68dc      	ldr	r4, [r3, #12]
 800d19a:	4610      	mov	r0, r2
 800d19c:	f7f7 fddc 	bl	8004d58 <lwip_htons>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	68dc      	ldr	r4, [r3, #12]
 800d1a8:	6838      	ldr	r0, [r7, #0]
 800d1aa:	f7f7 fdeb 	bl	8004d84 <lwip_htonl>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d1b2:	7dfb      	ldrb	r3, [r7, #23]
 800d1b4:	089b      	lsrs	r3, r3, #2
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	3305      	adds	r3, #5
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	031b      	lsls	r3, r3, #12
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	79fb      	ldrb	r3, [r7, #7]
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	68dc      	ldr	r4, [r3, #12]
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	f7f7 fdc3 	bl	8004d58 <lwip_htons>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	749a      	strb	r2, [r3, #18]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	74da      	strb	r2, [r3, #19]
  return seg;
 800d1e2:	693b      	ldr	r3, [r7, #16]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	371c      	adds	r7, #28
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd90      	pop	{r4, r7, pc}
 800d1ec:	0801300c 	.word	0x0801300c
 800d1f0:	08013078 	.word	0x08013078
 800d1f4:	08013098 	.word	0x08013098
 800d1f8:	080130c0 	.word	0x080130c0
 800d1fc:	080130e4 	.word	0x080130e4

0800d200 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b086      	sub	sp, #24
 800d204:	af00      	add	r7, sp, #0
 800d206:	607b      	str	r3, [r7, #4]
 800d208:	4603      	mov	r3, r0
 800d20a:	73fb      	strb	r3, [r7, #15]
 800d20c:	460b      	mov	r3, r1
 800d20e:	81bb      	strh	r3, [r7, #12]
 800d210:	4613      	mov	r3, r2
 800d212:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d214:	89bb      	ldrh	r3, [r7, #12]
 800d216:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d105      	bne.n	800d22a <tcp_pbuf_prealloc+0x2a>
 800d21e:	4b30      	ldr	r3, [pc, #192]	@ (800d2e0 <tcp_pbuf_prealloc+0xe0>)
 800d220:	22e8      	movs	r2, #232	@ 0xe8
 800d222:	4930      	ldr	r1, [pc, #192]	@ (800d2e4 <tcp_pbuf_prealloc+0xe4>)
 800d224:	4830      	ldr	r0, [pc, #192]	@ (800d2e8 <tcp_pbuf_prealloc+0xe8>)
 800d226:	f002 fd6d 	bl	800fd04 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d22a:	6a3b      	ldr	r3, [r7, #32]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d105      	bne.n	800d23c <tcp_pbuf_prealloc+0x3c>
 800d230:	4b2b      	ldr	r3, [pc, #172]	@ (800d2e0 <tcp_pbuf_prealloc+0xe0>)
 800d232:	22e9      	movs	r2, #233	@ 0xe9
 800d234:	492d      	ldr	r1, [pc, #180]	@ (800d2ec <tcp_pbuf_prealloc+0xec>)
 800d236:	482c      	ldr	r0, [pc, #176]	@ (800d2e8 <tcp_pbuf_prealloc+0xe8>)
 800d238:	f002 fd64 	bl	800fd04 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d23c:	89ba      	ldrh	r2, [r7, #12]
 800d23e:	897b      	ldrh	r3, [r7, #10]
 800d240:	429a      	cmp	r2, r3
 800d242:	d221      	bcs.n	800d288 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d244:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d248:	f003 0302 	and.w	r3, r3, #2
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d111      	bne.n	800d274 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d250:	6a3b      	ldr	r3, [r7, #32]
 800d252:	8b5b      	ldrh	r3, [r3, #26]
 800d254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d115      	bne.n	800d288 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d25c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d260:	2b00      	cmp	r3, #0
 800d262:	d007      	beq.n	800d274 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d103      	bne.n	800d274 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800d270:	2b00      	cmp	r3, #0
 800d272:	d009      	beq.n	800d288 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d274:	89bb      	ldrh	r3, [r7, #12]
 800d276:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 800d27a:	f023 0203 	bic.w	r2, r3, #3
 800d27e:	897b      	ldrh	r3, [r7, #10]
 800d280:	4293      	cmp	r3, r2
 800d282:	bf28      	it	cs
 800d284:	4613      	movcs	r3, r2
 800d286:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d288:	8af9      	ldrh	r1, [r7, #22]
 800d28a:	7bfb      	ldrb	r3, [r7, #15]
 800d28c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d290:	4618      	mov	r0, r3
 800d292:	f7fb f89f 	bl	80083d4 <pbuf_alloc>
 800d296:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d101      	bne.n	800d2a2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e019      	b.n	800d2d6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d006      	beq.n	800d2b8 <tcp_pbuf_prealloc+0xb8>
 800d2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d2e0 <tcp_pbuf_prealloc+0xe0>)
 800d2ac:	f240 120b 	movw	r2, #267	@ 0x10b
 800d2b0:	490f      	ldr	r1, [pc, #60]	@ (800d2f0 <tcp_pbuf_prealloc+0xf0>)
 800d2b2:	480d      	ldr	r0, [pc, #52]	@ (800d2e8 <tcp_pbuf_prealloc+0xe8>)
 800d2b4:	f002 fd26 	bl	800fd04 <iprintf>
  *oversize = p->len - length;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	895a      	ldrh	r2, [r3, #10]
 800d2bc:	89bb      	ldrh	r3, [r7, #12]
 800d2be:	1ad3      	subs	r3, r2, r3
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	89ba      	ldrh	r2, [r7, #12]
 800d2ca:	811a      	strh	r2, [r3, #8]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	891a      	ldrh	r2, [r3, #8]
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	815a      	strh	r2, [r3, #10]
  return p;
 800d2d4:	693b      	ldr	r3, [r7, #16]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	0801300c 	.word	0x0801300c
 800d2e4:	080130fc 	.word	0x080130fc
 800d2e8:	08013098 	.word	0x08013098
 800d2ec:	08013120 	.word	0x08013120
 800d2f0:	08013140 	.word	0x08013140

0800d2f4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d106      	bne.n	800d314 <tcp_write_checks+0x20>
 800d306:	4b33      	ldr	r3, [pc, #204]	@ (800d3d4 <tcp_write_checks+0xe0>)
 800d308:	f240 1233 	movw	r2, #307	@ 0x133
 800d30c:	4932      	ldr	r1, [pc, #200]	@ (800d3d8 <tcp_write_checks+0xe4>)
 800d30e:	4833      	ldr	r0, [pc, #204]	@ (800d3dc <tcp_write_checks+0xe8>)
 800d310:	f002 fcf8 	bl	800fd04 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	7d1b      	ldrb	r3, [r3, #20]
 800d318:	2b04      	cmp	r3, #4
 800d31a:	d00e      	beq.n	800d33a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d320:	2b07      	cmp	r3, #7
 800d322:	d00a      	beq.n	800d33a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d006      	beq.n	800d33a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d330:	2b03      	cmp	r3, #3
 800d332:	d002      	beq.n	800d33a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d334:	f06f 030a 	mvn.w	r3, #10
 800d338:	e048      	b.n	800d3cc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d33a:	887b      	ldrh	r3, [r7, #2]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d101      	bne.n	800d344 <tcp_write_checks+0x50>
    return ERR_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	e043      	b.n	800d3cc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d34a:	887a      	ldrh	r2, [r7, #2]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d909      	bls.n	800d364 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	8b5b      	ldrh	r3, [r3, #26]
 800d354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d358:	b29a      	uxth	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d35e:	f04f 33ff 	mov.w	r3, #4294967295
 800d362:	e033      	b.n	800d3cc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d36a:	2b08      	cmp	r3, #8
 800d36c:	d909      	bls.n	800d382 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	8b5b      	ldrh	r3, [r3, #26]
 800d372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d376:	b29a      	uxth	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d37c:	f04f 33ff 	mov.w	r3, #4294967295
 800d380:	e024      	b.n	800d3cc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00f      	beq.n	800d3ac <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d390:	2b00      	cmp	r3, #0
 800d392:	d11a      	bne.n	800d3ca <tcp_write_checks+0xd6>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d116      	bne.n	800d3ca <tcp_write_checks+0xd6>
 800d39c:	4b0d      	ldr	r3, [pc, #52]	@ (800d3d4 <tcp_write_checks+0xe0>)
 800d39e:	f240 1255 	movw	r2, #341	@ 0x155
 800d3a2:	490f      	ldr	r1, [pc, #60]	@ (800d3e0 <tcp_write_checks+0xec>)
 800d3a4:	480d      	ldr	r0, [pc, #52]	@ (800d3dc <tcp_write_checks+0xe8>)
 800d3a6:	f002 fcad 	bl	800fd04 <iprintf>
 800d3aa:	e00e      	b.n	800d3ca <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d103      	bne.n	800d3bc <tcp_write_checks+0xc8>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d006      	beq.n	800d3ca <tcp_write_checks+0xd6>
 800d3bc:	4b05      	ldr	r3, [pc, #20]	@ (800d3d4 <tcp_write_checks+0xe0>)
 800d3be:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800d3c2:	4908      	ldr	r1, [pc, #32]	@ (800d3e4 <tcp_write_checks+0xf0>)
 800d3c4:	4805      	ldr	r0, [pc, #20]	@ (800d3dc <tcp_write_checks+0xe8>)
 800d3c6:	f002 fc9d 	bl	800fd04 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	0801300c 	.word	0x0801300c
 800d3d8:	08013154 	.word	0x08013154
 800d3dc:	08013098 	.word	0x08013098
 800d3e0:	08013174 	.word	0x08013174
 800d3e4:	080131b0 	.word	0x080131b0

0800d3e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d3e8:	b590      	push	{r4, r7, lr}
 800d3ea:	b09b      	sub	sp, #108	@ 0x6c
 800d3ec:	af04      	add	r7, sp, #16
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	80fb      	strh	r3, [r7, #6]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d3fe:	2300      	movs	r3, #0
 800d400:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d402:	2300      	movs	r3, #0
 800d404:	653b      	str	r3, [r7, #80]	@ 0x50
 800d406:	2300      	movs	r3, #0
 800d408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d40a:	2300      	movs	r3, #0
 800d40c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d40e:	2300      	movs	r3, #0
 800d410:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d412:	2300      	movs	r3, #0
 800d414:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d418:	2300      	movs	r3, #0
 800d41a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d41e:	2300      	movs	r3, #0
 800d420:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d422:	2300      	movs	r3, #0
 800d424:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d109      	bne.n	800d444 <tcp_write+0x5c>
 800d430:	4ba4      	ldr	r3, [pc, #656]	@ (800d6c4 <tcp_write+0x2dc>)
 800d432:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800d436:	49a4      	ldr	r1, [pc, #656]	@ (800d6c8 <tcp_write+0x2e0>)
 800d438:	48a4      	ldr	r0, [pc, #656]	@ (800d6cc <tcp_write+0x2e4>)
 800d43a:	f002 fc63 	bl	800fd04 <iprintf>
 800d43e:	f06f 030f 	mvn.w	r3, #15
 800d442:	e32a      	b.n	800da9a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d44a:	085b      	lsrs	r3, r3, #1
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d452:	4293      	cmp	r3, r2
 800d454:	bf28      	it	cs
 800d456:	4613      	movcs	r3, r2
 800d458:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d45a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d102      	bne.n	800d466 <tcp_write+0x7e>
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d464:	e000      	b.n	800d468 <tcp_write+0x80>
 800d466:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d468:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d109      	bne.n	800d484 <tcp_write+0x9c>
 800d470:	4b94      	ldr	r3, [pc, #592]	@ (800d6c4 <tcp_write+0x2dc>)
 800d472:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800d476:	4996      	ldr	r1, [pc, #600]	@ (800d6d0 <tcp_write+0x2e8>)
 800d478:	4894      	ldr	r0, [pc, #592]	@ (800d6cc <tcp_write+0x2e4>)
 800d47a:	f002 fc43 	bl	800fd04 <iprintf>
 800d47e:	f06f 030f 	mvn.w	r3, #15
 800d482:	e30a      	b.n	800da9a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d484:	88fb      	ldrh	r3, [r7, #6]
 800d486:	4619      	mov	r1, r3
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f7ff ff33 	bl	800d2f4 <tcp_write_checks>
 800d48e:	4603      	mov	r3, r0
 800d490:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800d494:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <tcp_write+0xba>
    return err;
 800d49c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d4a0:	e2fb      	b.n	800da9a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d4a8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f000 80f6 	beq.w	800d6a8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4c0:	653b      	str	r3, [r7, #80]	@ 0x50
 800d4c2:	e002      	b.n	800d4ca <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d4c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d4ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1f8      	bne.n	800d4c4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d4d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4d4:	7a9b      	ldrb	r3, [r3, #10]
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	f003 0304 	and.w	r3, r3, #4
 800d4de:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d4e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d4e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e4:	891b      	ldrh	r3, [r3, #8]
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	8c3b      	ldrh	r3, [r7, #32]
 800d4ea:	440b      	add	r3, r1
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	da06      	bge.n	800d4fe <tcp_write+0x116>
 800d4f0:	4b74      	ldr	r3, [pc, #464]	@ (800d6c4 <tcp_write+0x2dc>)
 800d4f2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d4f6:	4977      	ldr	r1, [pc, #476]	@ (800d6d4 <tcp_write+0x2ec>)
 800d4f8:	4874      	ldr	r0, [pc, #464]	@ (800d6cc <tcp_write+0x2e4>)
 800d4fa:	f002 fc03 	bl	800fd04 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d4fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d500:	891a      	ldrh	r2, [r3, #8]
 800d502:	8c3b      	ldrh	r3, [r7, #32]
 800d504:	4413      	add	r3, r2
 800d506:	b29b      	uxth	r3, r3
 800d508:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d514:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d516:	8a7b      	ldrh	r3, [r7, #18]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d026      	beq.n	800d56a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d51c:	8a7b      	ldrh	r3, [r7, #18]
 800d51e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d520:	429a      	cmp	r2, r3
 800d522:	d206      	bcs.n	800d532 <tcp_write+0x14a>
 800d524:	4b67      	ldr	r3, [pc, #412]	@ (800d6c4 <tcp_write+0x2dc>)
 800d526:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800d52a:	496b      	ldr	r1, [pc, #428]	@ (800d6d8 <tcp_write+0x2f0>)
 800d52c:	4867      	ldr	r0, [pc, #412]	@ (800d6cc <tcp_write+0x2e4>)
 800d52e:	f002 fbe9 	bl	800fd04 <iprintf>
      seg = last_unsent;
 800d532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d534:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d536:	8a7b      	ldrh	r3, [r7, #18]
 800d538:	88fa      	ldrh	r2, [r7, #6]
 800d53a:	4293      	cmp	r3, r2
 800d53c:	bf28      	it	cs
 800d53e:	4613      	movcs	r3, r2
 800d540:	b29b      	uxth	r3, r3
 800d542:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d544:	4293      	cmp	r3, r2
 800d546:	bf28      	it	cs
 800d548:	4613      	movcs	r3, r2
 800d54a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800d54c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d550:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d552:	4413      	add	r3, r2
 800d554:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800d558:	8a7a      	ldrh	r2, [r7, #18]
 800d55a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	b29b      	uxth	r3, r3
 800d560:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d562:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d564:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d566:	1ad3      	subs	r3, r2, r3
 800d568:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d56a:	8a7b      	ldrh	r3, [r7, #18]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00b      	beq.n	800d588 <tcp_write+0x1a0>
 800d570:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d574:	88fb      	ldrh	r3, [r7, #6]
 800d576:	429a      	cmp	r2, r3
 800d578:	d006      	beq.n	800d588 <tcp_write+0x1a0>
 800d57a:	4b52      	ldr	r3, [pc, #328]	@ (800d6c4 <tcp_write+0x2dc>)
 800d57c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d580:	4956      	ldr	r1, [pc, #344]	@ (800d6dc <tcp_write+0x2f4>)
 800d582:	4852      	ldr	r0, [pc, #328]	@ (800d6cc <tcp_write+0x2e4>)
 800d584:	f002 fbbe 	bl	800fd04 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d588:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d58c:	88fb      	ldrh	r3, [r7, #6]
 800d58e:	429a      	cmp	r2, r3
 800d590:	f080 8167 	bcs.w	800d862 <tcp_write+0x47a>
 800d594:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 8163 	beq.w	800d862 <tcp_write+0x47a>
 800d59c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d59e:	891b      	ldrh	r3, [r3, #8]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f000 815e 	beq.w	800d862 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d5a6:	88fa      	ldrh	r2, [r7, #6]
 800d5a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d5ac:	1ad2      	subs	r2, r2, r3
 800d5ae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	bfa8      	it	ge
 800d5b4:	4613      	movge	r3, r2
 800d5b6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d5b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d5bc:	797b      	ldrb	r3, [r7, #5]
 800d5be:	f003 0301 	and.w	r3, r3, #1
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d027      	beq.n	800d616 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d5c6:	f107 0012 	add.w	r0, r7, #18
 800d5ca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d5cc:	8bf9      	ldrh	r1, [r7, #30]
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	9302      	str	r3, [sp, #8]
 800d5d2:	797b      	ldrb	r3, [r7, #5]
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2000      	movs	r0, #0
 800d5de:	f7ff fe0f 	bl	800d200 <tcp_pbuf_prealloc>
 800d5e2:	6578      	str	r0, [r7, #84]	@ 0x54
 800d5e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f000 8225 	beq.w	800da36 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d5ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5ee:	6858      	ldr	r0, [r3, #4]
 800d5f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	8bfa      	ldrh	r2, [r7, #30]
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	f002 fce9 	bl	800ffd2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d600:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d602:	f7fb fa57 	bl	8008ab4 <pbuf_clen>
 800d606:	4603      	mov	r3, r0
 800d608:	461a      	mov	r2, r3
 800d60a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d60e:	4413      	add	r3, r2
 800d610:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d614:	e041      	b.n	800d69a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d61c:	e002      	b.n	800d624 <tcp_write+0x23c>
 800d61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	637b      	str	r3, [r7, #52]	@ 0x34
 800d624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1f8      	bne.n	800d61e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d62c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d62e:	7b1b      	ldrb	r3, [r3, #12]
 800d630:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d115      	bne.n	800d664 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d63e:	8952      	ldrh	r2, [r2, #10]
 800d640:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	429a      	cmp	r2, r3
 800d646:	d10d      	bne.n	800d664 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d648:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d006      	beq.n	800d65e <tcp_write+0x276>
 800d650:	4b1c      	ldr	r3, [pc, #112]	@ (800d6c4 <tcp_write+0x2dc>)
 800d652:	f240 2231 	movw	r2, #561	@ 0x231
 800d656:	4922      	ldr	r1, [pc, #136]	@ (800d6e0 <tcp_write+0x2f8>)
 800d658:	481c      	ldr	r0, [pc, #112]	@ (800d6cc <tcp_write+0x2e4>)
 800d65a:	f002 fb53 	bl	800fd04 <iprintf>
          extendlen = seglen;
 800d65e:	8bfb      	ldrh	r3, [r7, #30]
 800d660:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d662:	e01a      	b.n	800d69a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d664:	8bfb      	ldrh	r3, [r7, #30]
 800d666:	2201      	movs	r2, #1
 800d668:	4619      	mov	r1, r3
 800d66a:	2000      	movs	r0, #0
 800d66c:	f7fa feb2 	bl	80083d4 <pbuf_alloc>
 800d670:	6578      	str	r0, [r7, #84]	@ 0x54
 800d672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d674:	2b00      	cmp	r3, #0
 800d676:	f000 81e0 	beq.w	800da3a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d67a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d67e:	68ba      	ldr	r2, [r7, #8]
 800d680:	441a      	add	r2, r3
 800d682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d684:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d686:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d688:	f7fb fa14 	bl	8008ab4 <pbuf_clen>
 800d68c:	4603      	mov	r3, r0
 800d68e:	461a      	mov	r2, r3
 800d690:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d694:	4413      	add	r3, r2
 800d696:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d69a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d69e:	8bfb      	ldrh	r3, [r7, #30]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d6a6:	e0dc      	b.n	800d862 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f000 80d7 	beq.w	800d862 <tcp_write+0x47a>
 800d6b4:	4b03      	ldr	r3, [pc, #12]	@ (800d6c4 <tcp_write+0x2dc>)
 800d6b6:	f240 224a 	movw	r2, #586	@ 0x24a
 800d6ba:	490a      	ldr	r1, [pc, #40]	@ (800d6e4 <tcp_write+0x2fc>)
 800d6bc:	4803      	ldr	r0, [pc, #12]	@ (800d6cc <tcp_write+0x2e4>)
 800d6be:	f002 fb21 	bl	800fd04 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d6c2:	e0ce      	b.n	800d862 <tcp_write+0x47a>
 800d6c4:	0801300c 	.word	0x0801300c
 800d6c8:	080131e4 	.word	0x080131e4
 800d6cc:	08013098 	.word	0x08013098
 800d6d0:	080131fc 	.word	0x080131fc
 800d6d4:	08013230 	.word	0x08013230
 800d6d8:	08013248 	.word	0x08013248
 800d6dc:	08013268 	.word	0x08013268
 800d6e0:	08013288 	.word	0x08013288
 800d6e4:	080132b4 	.word	0x080132b4
    struct pbuf *p;
    u16_t left = len - pos;
 800d6e8:	88fa      	ldrh	r2, [r7, #6]
 800d6ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d6f2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d6fe:	8b7a      	ldrh	r2, [r7, #26]
 800d700:	8bbb      	ldrh	r3, [r7, #28]
 800d702:	4293      	cmp	r3, r2
 800d704:	bf28      	it	cs
 800d706:	4613      	movcs	r3, r2
 800d708:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d70a:	797b      	ldrb	r3, [r7, #5]
 800d70c:	f003 0301 	and.w	r3, r3, #1
 800d710:	2b00      	cmp	r3, #0
 800d712:	d036      	beq.n	800d782 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d714:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d718:	b29a      	uxth	r2, r3
 800d71a:	8b3b      	ldrh	r3, [r7, #24]
 800d71c:	4413      	add	r3, r2
 800d71e:	b299      	uxth	r1, r3
 800d720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d722:	2b00      	cmp	r3, #0
 800d724:	bf0c      	ite	eq
 800d726:	2301      	moveq	r3, #1
 800d728:	2300      	movne	r3, #0
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	f107 0012 	add.w	r0, r7, #18
 800d730:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d732:	9302      	str	r3, [sp, #8]
 800d734:	797b      	ldrb	r3, [r7, #5]
 800d736:	9301      	str	r3, [sp, #4]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	4603      	mov	r3, r0
 800d73e:	2036      	movs	r0, #54	@ 0x36
 800d740:	f7ff fd5e 	bl	800d200 <tcp_pbuf_prealloc>
 800d744:	6338      	str	r0, [r7, #48]	@ 0x30
 800d746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d748:	2b00      	cmp	r3, #0
 800d74a:	f000 8178 	beq.w	800da3e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d750:	895b      	ldrh	r3, [r3, #10]
 800d752:	8b3a      	ldrh	r2, [r7, #24]
 800d754:	429a      	cmp	r2, r3
 800d756:	d906      	bls.n	800d766 <tcp_write+0x37e>
 800d758:	4b8c      	ldr	r3, [pc, #560]	@ (800d98c <tcp_write+0x5a4>)
 800d75a:	f240 2266 	movw	r2, #614	@ 0x266
 800d75e:	498c      	ldr	r1, [pc, #560]	@ (800d990 <tcp_write+0x5a8>)
 800d760:	488c      	ldr	r0, [pc, #560]	@ (800d994 <tcp_write+0x5ac>)
 800d762:	f002 facf 	bl	800fd04 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d768:	685a      	ldr	r2, [r3, #4]
 800d76a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d76e:	18d0      	adds	r0, r2, r3
 800d770:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	4413      	add	r3, r2
 800d778:	8b3a      	ldrh	r2, [r7, #24]
 800d77a:	4619      	mov	r1, r3
 800d77c:	f002 fc29 	bl	800ffd2 <memcpy>
 800d780:	e02f      	b.n	800d7e2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d782:	8a7b      	ldrh	r3, [r7, #18]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d006      	beq.n	800d796 <tcp_write+0x3ae>
 800d788:	4b80      	ldr	r3, [pc, #512]	@ (800d98c <tcp_write+0x5a4>)
 800d78a:	f240 2271 	movw	r2, #625	@ 0x271
 800d78e:	4982      	ldr	r1, [pc, #520]	@ (800d998 <tcp_write+0x5b0>)
 800d790:	4880      	ldr	r0, [pc, #512]	@ (800d994 <tcp_write+0x5ac>)
 800d792:	f002 fab7 	bl	800fd04 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d796:	8b3b      	ldrh	r3, [r7, #24]
 800d798:	2201      	movs	r2, #1
 800d79a:	4619      	mov	r1, r3
 800d79c:	2036      	movs	r0, #54	@ 0x36
 800d79e:	f7fa fe19 	bl	80083d4 <pbuf_alloc>
 800d7a2:	6178      	str	r0, [r7, #20]
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f000 814b 	beq.w	800da42 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d7ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d7b0:	68ba      	ldr	r2, [r7, #8]
 800d7b2:	441a      	add	r2, r3
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d7b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	2036      	movs	r0, #54	@ 0x36
 800d7c6:	f7fa fe05 	bl	80083d4 <pbuf_alloc>
 800d7ca:	6338      	str	r0, [r7, #48]	@ 0x30
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d103      	bne.n	800d7da <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d7d2:	6978      	ldr	r0, [r7, #20]
 800d7d4:	f7fb f8e6 	bl	80089a4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d7d8:	e136      	b.n	800da48 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d7da:	6979      	ldr	r1, [r7, #20]
 800d7dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7de:	f7fb f9a3 	bl	8008b28 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d7e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7e4:	f7fb f966 	bl	8008ab4 <pbuf_clen>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d7f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d7fa:	2b09      	cmp	r3, #9
 800d7fc:	d903      	bls.n	800d806 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d7fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d800:	f7fb f8d0 	bl	80089a4 <pbuf_free>
      goto memerr;
 800d804:	e120      	b.n	800da48 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d80a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d80e:	441a      	add	r2, r3
 800d810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	4613      	mov	r3, r2
 800d818:	2200      	movs	r2, #0
 800d81a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f7ff fc53 	bl	800d0c8 <tcp_create_segment>
 800d822:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d826:	2b00      	cmp	r3, #0
 800d828:	f000 810d 	beq.w	800da46 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d82c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d102      	bne.n	800d838 <tcp_write+0x450>
      queue = seg;
 800d832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d834:	647b      	str	r3, [r7, #68]	@ 0x44
 800d836:	e00c      	b.n	800d852 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <tcp_write+0x464>
 800d83e:	4b53      	ldr	r3, [pc, #332]	@ (800d98c <tcp_write+0x5a4>)
 800d840:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d844:	4955      	ldr	r1, [pc, #340]	@ (800d99c <tcp_write+0x5b4>)
 800d846:	4853      	ldr	r0, [pc, #332]	@ (800d994 <tcp_write+0x5ac>)
 800d848:	f002 fa5c 	bl	800fd04 <iprintf>
      prev_seg->next = seg;
 800d84c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d84e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d850:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d854:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d856:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d85a:	8b3b      	ldrh	r3, [r7, #24]
 800d85c:	4413      	add	r3, r2
 800d85e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800d862:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d866:	88fb      	ldrh	r3, [r7, #6]
 800d868:	429a      	cmp	r2, r3
 800d86a:	f4ff af3d 	bcc.w	800d6e8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d86e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d870:	2b00      	cmp	r3, #0
 800d872:	d02c      	beq.n	800d8ce <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d87a:	e01e      	b.n	800d8ba <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87e:	891a      	ldrh	r2, [r3, #8]
 800d880:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d882:	4413      	add	r3, r2
 800d884:	b29a      	uxth	r2, r3
 800d886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d888:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d110      	bne.n	800d8b4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d898:	8952      	ldrh	r2, [r2, #10]
 800d89a:	4413      	add	r3, r2
 800d89c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d89e:	68b9      	ldr	r1, [r7, #8]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f002 fb96 	bl	800ffd2 <memcpy>
        p->len += oversize_used;
 800d8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a8:	895a      	ldrh	r2, [r3, #10]
 800d8aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d8ac:	4413      	add	r3, r2
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1dd      	bne.n	800d87c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d8c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8c2:	891a      	ldrh	r2, [r3, #8]
 800d8c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d8c6:	4413      	add	r3, r2
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8cc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d8ce:	8a7a      	ldrh	r2, [r7, #18]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d8d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d018      	beq.n	800d90e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d8dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d106      	bne.n	800d8f0 <tcp_write+0x508>
 800d8e2:	4b2a      	ldr	r3, [pc, #168]	@ (800d98c <tcp_write+0x5a4>)
 800d8e4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800d8e8:	492d      	ldr	r1, [pc, #180]	@ (800d9a0 <tcp_write+0x5b8>)
 800d8ea:	482a      	ldr	r0, [pc, #168]	@ (800d994 <tcp_write+0x5ac>)
 800d8ec:	f002 fa0a 	bl	800fd04 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d8f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fb f916 	bl	8008b28 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d8fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8fe:	891a      	ldrh	r2, [r3, #8]
 800d900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d902:	891b      	ldrh	r3, [r3, #8]
 800d904:	4413      	add	r3, r2
 800d906:	b29a      	uxth	r2, r3
 800d908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d90a:	811a      	strh	r2, [r3, #8]
 800d90c:	e037      	b.n	800d97e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d90e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d910:	2b00      	cmp	r3, #0
 800d912:	d034      	beq.n	800d97e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d916:	2b00      	cmp	r3, #0
 800d918:	d003      	beq.n	800d922 <tcp_write+0x53a>
 800d91a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d106      	bne.n	800d930 <tcp_write+0x548>
 800d922:	4b1a      	ldr	r3, [pc, #104]	@ (800d98c <tcp_write+0x5a4>)
 800d924:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d928:	491e      	ldr	r1, [pc, #120]	@ (800d9a4 <tcp_write+0x5bc>)
 800d92a:	481a      	ldr	r0, [pc, #104]	@ (800d994 <tcp_write+0x5ac>)
 800d92c:	f002 f9ea 	bl	800fd04 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d936:	e009      	b.n	800d94c <tcp_write+0x564>
      p->tot_len += extendlen;
 800d938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93a:	891a      	ldrh	r2, [r3, #8]
 800d93c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d93e:	4413      	add	r3, r2
 800d940:	b29a      	uxth	r2, r3
 800d942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d944:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d1f1      	bne.n	800d938 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d956:	891a      	ldrh	r2, [r3, #8]
 800d958:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d95a:	4413      	add	r3, r2
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d960:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d964:	895a      	ldrh	r2, [r3, #10]
 800d966:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d968:	4413      	add	r3, r2
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d972:	891a      	ldrh	r2, [r3, #8]
 800d974:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d976:	4413      	add	r3, r2
 800d978:	b29a      	uxth	r2, r3
 800d97a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d97c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d97e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d980:	2b00      	cmp	r3, #0
 800d982:	d111      	bne.n	800d9a8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d988:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d98a:	e010      	b.n	800d9ae <tcp_write+0x5c6>
 800d98c:	0801300c 	.word	0x0801300c
 800d990:	080132e4 	.word	0x080132e4
 800d994:	08013098 	.word	0x08013098
 800d998:	08013324 	.word	0x08013324
 800d99c:	08013334 	.word	0x08013334
 800d9a0:	08013348 	.word	0x08013348
 800d9a4:	08013380 	.word	0x08013380
  } else {
    last_unsent->next = queue;
 800d9a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9ac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d9b2:	88fb      	ldrh	r3, [r7, #6]
 800d9b4:	441a      	add	r2, r3
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d9c0:	88fb      	ldrh	r3, [r7, #6]
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d9d2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00e      	beq.n	800d9fe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d10a      	bne.n	800d9fe <tcp_write+0x616>
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d106      	bne.n	800d9fe <tcp_write+0x616>
 800d9f0:	4b2c      	ldr	r3, [pc, #176]	@ (800daa4 <tcp_write+0x6bc>)
 800d9f2:	f240 3212 	movw	r2, #786	@ 0x312
 800d9f6:	492c      	ldr	r1, [pc, #176]	@ (800daa8 <tcp_write+0x6c0>)
 800d9f8:	482c      	ldr	r0, [pc, #176]	@ (800daac <tcp_write+0x6c4>)
 800d9fa:	f002 f983 	bl	800fd04 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d9fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da00:	2b00      	cmp	r3, #0
 800da02:	d016      	beq.n	800da32 <tcp_write+0x64a>
 800da04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d012      	beq.n	800da32 <tcp_write+0x64a>
 800da0c:	797b      	ldrb	r3, [r7, #5]
 800da0e:	f003 0302 	and.w	r3, r3, #2
 800da12:	2b00      	cmp	r3, #0
 800da14:	d10d      	bne.n	800da32 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800da16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	899b      	ldrh	r3, [r3, #12]
 800da1c:	b29c      	uxth	r4, r3
 800da1e:	2008      	movs	r0, #8
 800da20:	f7f7 f99a 	bl	8004d58 <lwip_htons>
 800da24:	4603      	mov	r3, r0
 800da26:	461a      	mov	r2, r3
 800da28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	4322      	orrs	r2, r4
 800da2e:	b292      	uxth	r2, r2
 800da30:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	e031      	b.n	800da9a <tcp_write+0x6b2>
          goto memerr;
 800da36:	bf00      	nop
 800da38:	e006      	b.n	800da48 <tcp_write+0x660>
            goto memerr;
 800da3a:	bf00      	nop
 800da3c:	e004      	b.n	800da48 <tcp_write+0x660>
        goto memerr;
 800da3e:	bf00      	nop
 800da40:	e002      	b.n	800da48 <tcp_write+0x660>
        goto memerr;
 800da42:	bf00      	nop
 800da44:	e000      	b.n	800da48 <tcp_write+0x660>
      goto memerr;
 800da46:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	8b5b      	ldrh	r3, [r3, #26]
 800da4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da50:	b29a      	uxth	r2, r3
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800da56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d002      	beq.n	800da62 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800da5c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800da5e:	f7fa ffa1 	bl	80089a4 <pbuf_free>
  }
  if (queue != NULL) {
 800da62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da64:	2b00      	cmp	r3, #0
 800da66:	d002      	beq.n	800da6e <tcp_write+0x686>
    tcp_segs_free(queue);
 800da68:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800da6a:	f7fc fb9f 	bl	800a1ac <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00e      	beq.n	800da96 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10a      	bne.n	800da96 <tcp_write+0x6ae>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da84:	2b00      	cmp	r3, #0
 800da86:	d106      	bne.n	800da96 <tcp_write+0x6ae>
 800da88:	4b06      	ldr	r3, [pc, #24]	@ (800daa4 <tcp_write+0x6bc>)
 800da8a:	f240 3227 	movw	r2, #807	@ 0x327
 800da8e:	4906      	ldr	r1, [pc, #24]	@ (800daa8 <tcp_write+0x6c0>)
 800da90:	4806      	ldr	r0, [pc, #24]	@ (800daac <tcp_write+0x6c4>)
 800da92:	f002 f937 	bl	800fd04 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800da96:	f04f 33ff 	mov.w	r3, #4294967295
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	375c      	adds	r7, #92	@ 0x5c
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd90      	pop	{r4, r7, pc}
 800daa2:	bf00      	nop
 800daa4:	0801300c 	.word	0x0801300c
 800daa8:	080133b8 	.word	0x080133b8
 800daac:	08013098 	.word	0x08013098

0800dab0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800dab0:	b590      	push	{r4, r7, lr}
 800dab2:	b08b      	sub	sp, #44	@ 0x2c
 800dab4:	af02      	add	r7, sp, #8
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	460b      	mov	r3, r1
 800daba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800dabc:	2300      	movs	r3, #0
 800dabe:	61fb      	str	r3, [r7, #28]
 800dac0:	2300      	movs	r3, #0
 800dac2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800dac4:	2300      	movs	r3, #0
 800dac6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d106      	bne.n	800dadc <tcp_split_unsent_seg+0x2c>
 800dace:	4b95      	ldr	r3, [pc, #596]	@ (800dd24 <tcp_split_unsent_seg+0x274>)
 800dad0:	f240 324b 	movw	r2, #843	@ 0x34b
 800dad4:	4994      	ldr	r1, [pc, #592]	@ (800dd28 <tcp_split_unsent_seg+0x278>)
 800dad6:	4895      	ldr	r0, [pc, #596]	@ (800dd2c <tcp_split_unsent_seg+0x27c>)
 800dad8:	f002 f914 	bl	800fd04 <iprintf>

  useg = pcb->unsent;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dae0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d102      	bne.n	800daee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800dae8:	f04f 33ff 	mov.w	r3, #4294967295
 800daec:	e116      	b.n	800dd1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800daee:	887b      	ldrh	r3, [r7, #2]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d109      	bne.n	800db08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800daf4:	4b8b      	ldr	r3, [pc, #556]	@ (800dd24 <tcp_split_unsent_seg+0x274>)
 800daf6:	f240 3253 	movw	r2, #851	@ 0x353
 800dafa:	498d      	ldr	r1, [pc, #564]	@ (800dd30 <tcp_split_unsent_seg+0x280>)
 800dafc:	488b      	ldr	r0, [pc, #556]	@ (800dd2c <tcp_split_unsent_seg+0x27c>)
 800dafe:	f002 f901 	bl	800fd04 <iprintf>
    return ERR_VAL;
 800db02:	f06f 0305 	mvn.w	r3, #5
 800db06:	e109      	b.n	800dd1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	891b      	ldrh	r3, [r3, #8]
 800db0c:	887a      	ldrh	r2, [r7, #2]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d301      	bcc.n	800db16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	e102      	b.n	800dd1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800db1a:	887a      	ldrh	r2, [r7, #2]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d906      	bls.n	800db2e <tcp_split_unsent_seg+0x7e>
 800db20:	4b80      	ldr	r3, [pc, #512]	@ (800dd24 <tcp_split_unsent_seg+0x274>)
 800db22:	f240 325b 	movw	r2, #859	@ 0x35b
 800db26:	4983      	ldr	r1, [pc, #524]	@ (800dd34 <tcp_split_unsent_seg+0x284>)
 800db28:	4880      	ldr	r0, [pc, #512]	@ (800dd2c <tcp_split_unsent_seg+0x27c>)
 800db2a:	f002 f8eb 	bl	800fd04 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	891b      	ldrh	r3, [r3, #8]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d106      	bne.n	800db44 <tcp_split_unsent_seg+0x94>
 800db36:	4b7b      	ldr	r3, [pc, #492]	@ (800dd24 <tcp_split_unsent_seg+0x274>)
 800db38:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800db3c:	497e      	ldr	r1, [pc, #504]	@ (800dd38 <tcp_split_unsent_seg+0x288>)
 800db3e:	487b      	ldr	r0, [pc, #492]	@ (800dd2c <tcp_split_unsent_seg+0x27c>)
 800db40:	f002 f8e0 	bl	800fd04 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	7a9b      	ldrb	r3, [r3, #10]
 800db48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800db4a:	7bfb      	ldrb	r3, [r7, #15]
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	f003 0304 	and.w	r3, r3, #4
 800db54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	891a      	ldrh	r2, [r3, #8]
 800db5a:	887b      	ldrh	r3, [r7, #2]
 800db5c:	1ad3      	subs	r3, r2, r3
 800db5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800db60:	7bbb      	ldrb	r3, [r7, #14]
 800db62:	b29a      	uxth	r2, r3
 800db64:	89bb      	ldrh	r3, [r7, #12]
 800db66:	4413      	add	r3, r2
 800db68:	b29b      	uxth	r3, r3
 800db6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800db6e:	4619      	mov	r1, r3
 800db70:	2036      	movs	r0, #54	@ 0x36
 800db72:	f7fa fc2f 	bl	80083d4 <pbuf_alloc>
 800db76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f000 80b7 	beq.w	800dcee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	891a      	ldrh	r2, [r3, #8]
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	891b      	ldrh	r3, [r3, #8]
 800db8a:	1ad3      	subs	r3, r2, r3
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	887b      	ldrh	r3, [r7, #2]
 800db90:	4413      	add	r3, r2
 800db92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	6858      	ldr	r0, [r3, #4]
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	7bbb      	ldrb	r3, [r7, #14]
 800db9e:	18d1      	adds	r1, r2, r3
 800dba0:	897b      	ldrh	r3, [r7, #10]
 800dba2:	89ba      	ldrh	r2, [r7, #12]
 800dba4:	f7fb f8e8 	bl	8008d78 <pbuf_copy_partial>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	461a      	mov	r2, r3
 800dbac:	89bb      	ldrh	r3, [r7, #12]
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	f040 809f 	bne.w	800dcf2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	899b      	ldrh	r3, [r3, #12]
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7f7 f8cb 	bl	8004d58 <lwip_htons>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dbca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800dbcc:	2300      	movs	r3, #0
 800dbce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800dbd0:	7efb      	ldrb	r3, [r7, #27]
 800dbd2:	f003 0308 	and.w	r3, r3, #8
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d007      	beq.n	800dbea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800dbda:	7efb      	ldrb	r3, [r7, #27]
 800dbdc:	f023 0308 	bic.w	r3, r3, #8
 800dbe0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800dbe2:	7ebb      	ldrb	r3, [r7, #26]
 800dbe4:	f043 0308 	orr.w	r3, r3, #8
 800dbe8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800dbea:	7efb      	ldrb	r3, [r7, #27]
 800dbec:	f003 0301 	and.w	r3, r3, #1
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d007      	beq.n	800dc04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800dbf4:	7efb      	ldrb	r3, [r7, #27]
 800dbf6:	f023 0301 	bic.w	r3, r3, #1
 800dbfa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800dbfc:	7ebb      	ldrb	r3, [r7, #26]
 800dbfe:	f043 0301 	orr.w	r3, r3, #1
 800dc02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7f7 f8ba 	bl	8004d84 <lwip_htonl>
 800dc10:	4602      	mov	r2, r0
 800dc12:	887b      	ldrh	r3, [r7, #2]
 800dc14:	18d1      	adds	r1, r2, r3
 800dc16:	7eba      	ldrb	r2, [r7, #26]
 800dc18:	7bfb      	ldrb	r3, [r7, #15]
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	6939      	ldr	r1, [r7, #16]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7ff fa51 	bl	800d0c8 <tcp_create_segment>
 800dc26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d063      	beq.n	800dcf6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fa ff3e 	bl	8008ab4 <pbuf_clen>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dc42:	1a9b      	subs	r3, r3, r2
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	6858      	ldr	r0, [r3, #4]
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	891a      	ldrh	r2, [r3, #8]
 800dc56:	89bb      	ldrh	r3, [r7, #12]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	f7fa fd1b 	bl	8008698 <pbuf_realloc>
  useg->len -= remainder;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	891a      	ldrh	r2, [r3, #8]
 800dc66:	89bb      	ldrh	r3, [r7, #12]
 800dc68:	1ad3      	subs	r3, r2, r3
 800dc6a:	b29a      	uxth	r2, r3
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	899b      	ldrh	r3, [r3, #12]
 800dc76:	b29c      	uxth	r4, r3
 800dc78:	7efb      	ldrb	r3, [r7, #27]
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7f7 f86b 	bl	8004d58 <lwip_htons>
 800dc82:	4603      	mov	r3, r0
 800dc84:	461a      	mov	r2, r3
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	68db      	ldr	r3, [r3, #12]
 800dc8a:	4322      	orrs	r2, r4
 800dc8c:	b292      	uxth	r2, r2
 800dc8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fa ff0d 	bl	8008ab4 <pbuf_clen>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dca4:	4413      	add	r3, r2
 800dca6:	b29a      	uxth	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fa fefe 	bl	8008ab4 <pbuf_clen>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	461a      	mov	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dcc2:	4413      	add	r3, r2
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	69fa      	ldr	r2, [r7, #28]
 800dcd8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d103      	bne.n	800dcea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	e016      	b.n	800dd1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800dcee:	bf00      	nop
 800dcf0:	e002      	b.n	800dcf8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dcf2:	bf00      	nop
 800dcf4:	e000      	b.n	800dcf8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dcf6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d006      	beq.n	800dd0c <tcp_split_unsent_seg+0x25c>
 800dcfe:	4b09      	ldr	r3, [pc, #36]	@ (800dd24 <tcp_split_unsent_seg+0x274>)
 800dd00:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800dd04:	490d      	ldr	r1, [pc, #52]	@ (800dd3c <tcp_split_unsent_seg+0x28c>)
 800dd06:	4809      	ldr	r0, [pc, #36]	@ (800dd2c <tcp_split_unsent_seg+0x27c>)
 800dd08:	f001 fffc 	bl	800fd04 <iprintf>
  if (p != NULL) {
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d002      	beq.n	800dd18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800dd12:	6938      	ldr	r0, [r7, #16]
 800dd14:	f7fa fe46 	bl	80089a4 <pbuf_free>
  }

  return ERR_MEM;
 800dd18:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3724      	adds	r7, #36	@ 0x24
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd90      	pop	{r4, r7, pc}
 800dd24:	0801300c 	.word	0x0801300c
 800dd28:	080133d8 	.word	0x080133d8
 800dd2c:	08013098 	.word	0x08013098
 800dd30:	080133fc 	.word	0x080133fc
 800dd34:	08013420 	.word	0x08013420
 800dd38:	08013430 	.word	0x08013430
 800dd3c:	08013440 	.word	0x08013440

0800dd40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dd40:	b590      	push	{r4, r7, lr}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d106      	bne.n	800dd5c <tcp_send_fin+0x1c>
 800dd4e:	4b21      	ldr	r3, [pc, #132]	@ (800ddd4 <tcp_send_fin+0x94>)
 800dd50:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800dd54:	4920      	ldr	r1, [pc, #128]	@ (800ddd8 <tcp_send_fin+0x98>)
 800dd56:	4821      	ldr	r0, [pc, #132]	@ (800dddc <tcp_send_fin+0x9c>)
 800dd58:	f001 ffd4 	bl	800fd04 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d02e      	beq.n	800ddc2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd68:	60fb      	str	r3, [r7, #12]
 800dd6a:	e002      	b.n	800dd72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d1f8      	bne.n	800dd6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	899b      	ldrh	r3, [r3, #12]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7f6 ffe8 	bl	8004d58 <lwip_htons>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	f003 0307 	and.w	r3, r3, #7
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d116      	bne.n	800ddc2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	899b      	ldrh	r3, [r3, #12]
 800dd9a:	b29c      	uxth	r4, r3
 800dd9c:	2001      	movs	r0, #1
 800dd9e:	f7f6 ffdb 	bl	8004d58 <lwip_htons>
 800dda2:	4603      	mov	r3, r0
 800dda4:	461a      	mov	r2, r3
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	4322      	orrs	r2, r4
 800ddac:	b292      	uxth	r2, r2
 800ddae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	8b5b      	ldrh	r3, [r3, #26]
 800ddb4:	f043 0320 	orr.w	r3, r3, #32
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e004      	b.n	800ddcc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ddc2:	2101      	movs	r1, #1
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 f80b 	bl	800dde0 <tcp_enqueue_flags>
 800ddca:	4603      	mov	r3, r0
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3714      	adds	r7, #20
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd90      	pop	{r4, r7, pc}
 800ddd4:	0801300c 	.word	0x0801300c
 800ddd8:	0801344c 	.word	0x0801344c
 800dddc:	08013098 	.word	0x08013098

0800dde0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b08a      	sub	sp, #40	@ 0x28
 800dde4:	af02      	add	r7, sp, #8
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	460b      	mov	r3, r1
 800ddea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ddec:	2300      	movs	r3, #0
 800ddee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ddf4:	78fb      	ldrb	r3, [r7, #3]
 800ddf6:	f003 0303 	and.w	r3, r3, #3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d106      	bne.n	800de0c <tcp_enqueue_flags+0x2c>
 800ddfe:	4b67      	ldr	r3, [pc, #412]	@ (800df9c <tcp_enqueue_flags+0x1bc>)
 800de00:	f240 4211 	movw	r2, #1041	@ 0x411
 800de04:	4966      	ldr	r1, [pc, #408]	@ (800dfa0 <tcp_enqueue_flags+0x1c0>)
 800de06:	4867      	ldr	r0, [pc, #412]	@ (800dfa4 <tcp_enqueue_flags+0x1c4>)
 800de08:	f001 ff7c 	bl	800fd04 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d106      	bne.n	800de20 <tcp_enqueue_flags+0x40>
 800de12:	4b62      	ldr	r3, [pc, #392]	@ (800df9c <tcp_enqueue_flags+0x1bc>)
 800de14:	f240 4213 	movw	r2, #1043	@ 0x413
 800de18:	4963      	ldr	r1, [pc, #396]	@ (800dfa8 <tcp_enqueue_flags+0x1c8>)
 800de1a:	4862      	ldr	r0, [pc, #392]	@ (800dfa4 <tcp_enqueue_flags+0x1c4>)
 800de1c:	f001 ff72 	bl	800fd04 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800de20:	78fb      	ldrb	r3, [r7, #3]
 800de22:	f003 0302 	and.w	r3, r3, #2
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800de2a:	2301      	movs	r3, #1
 800de2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800de2e:	7ffb      	ldrb	r3, [r7, #31]
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	b2db      	uxtb	r3, r3
 800de34:	f003 0304 	and.w	r3, r3, #4
 800de38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800de3a:	7dfb      	ldrb	r3, [r7, #23]
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800de42:	4619      	mov	r1, r3
 800de44:	2036      	movs	r0, #54	@ 0x36
 800de46:	f7fa fac5 	bl	80083d4 <pbuf_alloc>
 800de4a:	6138      	str	r0, [r7, #16]
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d109      	bne.n	800de66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	8b5b      	ldrh	r3, [r3, #26]
 800de56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800de60:	f04f 33ff 	mov.w	r3, #4294967295
 800de64:	e095      	b.n	800df92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	895a      	ldrh	r2, [r3, #10]
 800de6a:	7dfb      	ldrb	r3, [r7, #23]
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	429a      	cmp	r2, r3
 800de70:	d206      	bcs.n	800de80 <tcp_enqueue_flags+0xa0>
 800de72:	4b4a      	ldr	r3, [pc, #296]	@ (800df9c <tcp_enqueue_flags+0x1bc>)
 800de74:	f240 4239 	movw	r2, #1081	@ 0x439
 800de78:	494c      	ldr	r1, [pc, #304]	@ (800dfac <tcp_enqueue_flags+0x1cc>)
 800de7a:	484a      	ldr	r0, [pc, #296]	@ (800dfa4 <tcp_enqueue_flags+0x1c4>)
 800de7c:	f001 ff42 	bl	800fd04 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800de84:	78fa      	ldrb	r2, [r7, #3]
 800de86:	7ffb      	ldrb	r3, [r7, #31]
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	460b      	mov	r3, r1
 800de8c:	6939      	ldr	r1, [r7, #16]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7ff f91a 	bl	800d0c8 <tcp_create_segment>
 800de94:	60f8      	str	r0, [r7, #12]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d109      	bne.n	800deb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	8b5b      	ldrh	r3, [r3, #26]
 800dea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800deaa:	f04f 33ff 	mov.w	r3, #4294967295
 800deae:	e070      	b.n	800df92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	f003 0303 	and.w	r3, r3, #3
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d006      	beq.n	800deca <tcp_enqueue_flags+0xea>
 800debc:	4b37      	ldr	r3, [pc, #220]	@ (800df9c <tcp_enqueue_flags+0x1bc>)
 800debe:	f240 4242 	movw	r2, #1090	@ 0x442
 800dec2:	493b      	ldr	r1, [pc, #236]	@ (800dfb0 <tcp_enqueue_flags+0x1d0>)
 800dec4:	4837      	ldr	r0, [pc, #220]	@ (800dfa4 <tcp_enqueue_flags+0x1c4>)
 800dec6:	f001 ff1d 	bl	800fd04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	891b      	ldrh	r3, [r3, #8]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d006      	beq.n	800dee0 <tcp_enqueue_flags+0x100>
 800ded2:	4b32      	ldr	r3, [pc, #200]	@ (800df9c <tcp_enqueue_flags+0x1bc>)
 800ded4:	f240 4243 	movw	r2, #1091	@ 0x443
 800ded8:	4936      	ldr	r1, [pc, #216]	@ (800dfb4 <tcp_enqueue_flags+0x1d4>)
 800deda:	4832      	ldr	r0, [pc, #200]	@ (800dfa4 <tcp_enqueue_flags+0x1c4>)
 800dedc:	f001 ff12 	bl	800fd04 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d103      	bne.n	800def0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	68fa      	ldr	r2, [r7, #12]
 800deec:	66da      	str	r2, [r3, #108]	@ 0x6c
 800deee:	e00d      	b.n	800df0c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800def4:	61bb      	str	r3, [r7, #24]
 800def6:	e002      	b.n	800defe <tcp_enqueue_flags+0x11e>
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	61bb      	str	r3, [r7, #24]
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1f8      	bne.n	800def8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800df14:	78fb      	ldrb	r3, [r7, #3]
 800df16:	f003 0302 	and.w	r3, r3, #2
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d104      	bne.n	800df28 <tcp_enqueue_flags+0x148>
 800df1e:	78fb      	ldrb	r3, [r7, #3]
 800df20:	f003 0301 	and.w	r3, r3, #1
 800df24:	2b00      	cmp	r3, #0
 800df26:	d004      	beq.n	800df32 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df2c:	1c5a      	adds	r2, r3, #1
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800df32:	78fb      	ldrb	r3, [r7, #3]
 800df34:	f003 0301 	and.w	r3, r3, #1
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d006      	beq.n	800df4a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	8b5b      	ldrh	r3, [r3, #26]
 800df40:	f043 0320 	orr.w	r3, r3, #32
 800df44:	b29a      	uxth	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fa fdb0 	bl	8008ab4 <pbuf_clen>
 800df54:	4603      	mov	r3, r0
 800df56:	461a      	mov	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800df5e:	4413      	add	r3, r2
 800df60:	b29a      	uxth	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00e      	beq.n	800df90 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df76:	2b00      	cmp	r3, #0
 800df78:	d10a      	bne.n	800df90 <tcp_enqueue_flags+0x1b0>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d106      	bne.n	800df90 <tcp_enqueue_flags+0x1b0>
 800df82:	4b06      	ldr	r3, [pc, #24]	@ (800df9c <tcp_enqueue_flags+0x1bc>)
 800df84:	f240 4265 	movw	r2, #1125	@ 0x465
 800df88:	490b      	ldr	r1, [pc, #44]	@ (800dfb8 <tcp_enqueue_flags+0x1d8>)
 800df8a:	4806      	ldr	r0, [pc, #24]	@ (800dfa4 <tcp_enqueue_flags+0x1c4>)
 800df8c:	f001 feba 	bl	800fd04 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800df90:	2300      	movs	r3, #0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3720      	adds	r7, #32
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	0801300c 	.word	0x0801300c
 800dfa0:	08013468 	.word	0x08013468
 800dfa4:	08013098 	.word	0x08013098
 800dfa8:	080134c0 	.word	0x080134c0
 800dfac:	080134e0 	.word	0x080134e0
 800dfb0:	0801351c 	.word	0x0801351c
 800dfb4:	08013534 	.word	0x08013534
 800dfb8:	08013560 	.word	0x08013560

0800dfbc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dfbc:	b5b0      	push	{r4, r5, r7, lr}
 800dfbe:	b08a      	sub	sp, #40	@ 0x28
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d106      	bne.n	800dfd8 <tcp_output+0x1c>
 800dfca:	4b8a      	ldr	r3, [pc, #552]	@ (800e1f4 <tcp_output+0x238>)
 800dfcc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800dfd0:	4989      	ldr	r1, [pc, #548]	@ (800e1f8 <tcp_output+0x23c>)
 800dfd2:	488a      	ldr	r0, [pc, #552]	@ (800e1fc <tcp_output+0x240>)
 800dfd4:	f001 fe96 	bl	800fd04 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	7d1b      	ldrb	r3, [r3, #20]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d106      	bne.n	800dfee <tcp_output+0x32>
 800dfe0:	4b84      	ldr	r3, [pc, #528]	@ (800e1f4 <tcp_output+0x238>)
 800dfe2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800dfe6:	4986      	ldr	r1, [pc, #536]	@ (800e200 <tcp_output+0x244>)
 800dfe8:	4884      	ldr	r0, [pc, #528]	@ (800e1fc <tcp_output+0x240>)
 800dfea:	f001 fe8b 	bl	800fd04 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dfee:	4b85      	ldr	r3, [pc, #532]	@ (800e204 <tcp_output+0x248>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d101      	bne.n	800dffc <tcp_output+0x40>
    return ERR_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	e1ce      	b.n	800e39a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e008:	4293      	cmp	r3, r2
 800e00a:	bf28      	it	cs
 800e00c:	4613      	movcs	r3, r2
 800e00e:	b29b      	uxth	r3, r3
 800e010:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e016:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800e018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d10b      	bne.n	800e036 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	8b5b      	ldrh	r3, [r3, #26]
 800e022:	f003 0302 	and.w	r3, r3, #2
 800e026:	2b00      	cmp	r3, #0
 800e028:	f000 81aa 	beq.w	800e380 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 fdcb 	bl	800ebc8 <tcp_send_empty_ack>
 800e032:	4603      	mov	r3, r0
 800e034:	e1b1      	b.n	800e39a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e036:	6879      	ldr	r1, [r7, #4]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	3304      	adds	r3, #4
 800e03c:	461a      	mov	r2, r3
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff f826 	bl	800d090 <tcp_route>
 800e044:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d102      	bne.n	800e052 <tcp_output+0x96>
    return ERR_RTE;
 800e04c:	f06f 0303 	mvn.w	r3, #3
 800e050:	e1a3      	b.n	800e39a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d003      	beq.n	800e060 <tcp_output+0xa4>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d111      	bne.n	800e084 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d002      	beq.n	800e06c <tcp_output+0xb0>
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	3304      	adds	r3, #4
 800e06a:	e000      	b.n	800e06e <tcp_output+0xb2>
 800e06c:	2300      	movs	r3, #0
 800e06e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d102      	bne.n	800e07c <tcp_output+0xc0>
      return ERR_RTE;
 800e076:	f06f 0303 	mvn.w	r3, #3
 800e07a:	e18e      	b.n	800e39a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7f6 fe7a 	bl	8004d84 <lwip_htonl>
 800e090:	4602      	mov	r2, r0
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e096:	1ad3      	subs	r3, r2, r3
 800e098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e09a:	8912      	ldrh	r2, [r2, #8]
 800e09c:	4413      	add	r3, r2
 800e09e:	69ba      	ldr	r2, [r7, #24]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d227      	bcs.n	800e0f4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d114      	bne.n	800e0dc <tcp_output+0x120>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d110      	bne.n	800e0dc <tcp_output+0x120>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10b      	bne.n	800e0dc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	8b5b      	ldrh	r3, [r3, #26]
 800e0e0:	f003 0302 	and.w	r3, r3, #2
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f000 814d 	beq.w	800e384 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 fd6c 	bl	800ebc8 <tcp_send_empty_ack>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	e152      	b.n	800e39a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e100:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e102:	6a3b      	ldr	r3, [r7, #32]
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 811c 	beq.w	800e342 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e10a:	e002      	b.n	800e112 <tcp_output+0x156>
 800e10c:	6a3b      	ldr	r3, [r7, #32]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	623b      	str	r3, [r7, #32]
 800e112:	6a3b      	ldr	r3, [r7, #32]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1f8      	bne.n	800e10c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e11a:	e112      	b.n	800e342 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	899b      	ldrh	r3, [r3, #12]
 800e122:	b29b      	uxth	r3, r3
 800e124:	4618      	mov	r0, r3
 800e126:	f7f6 fe17 	bl	8004d58 <lwip_htons>
 800e12a:	4603      	mov	r3, r0
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	f003 0304 	and.w	r3, r3, #4
 800e132:	2b00      	cmp	r3, #0
 800e134:	d006      	beq.n	800e144 <tcp_output+0x188>
 800e136:	4b2f      	ldr	r3, [pc, #188]	@ (800e1f4 <tcp_output+0x238>)
 800e138:	f240 5236 	movw	r2, #1334	@ 0x536
 800e13c:	4932      	ldr	r1, [pc, #200]	@ (800e208 <tcp_output+0x24c>)
 800e13e:	482f      	ldr	r0, [pc, #188]	@ (800e1fc <tcp_output+0x240>)
 800e140:	f001 fde0 	bl	800fd04 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d01f      	beq.n	800e18c <tcp_output+0x1d0>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	8b5b      	ldrh	r3, [r3, #26]
 800e150:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e154:	2b00      	cmp	r3, #0
 800e156:	d119      	bne.n	800e18c <tcp_output+0x1d0>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00b      	beq.n	800e178 <tcp_output+0x1bc>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d110      	bne.n	800e18c <tcp_output+0x1d0>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e16e:	891a      	ldrh	r2, [r3, #8]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e174:	429a      	cmp	r2, r3
 800e176:	d209      	bcs.n	800e18c <tcp_output+0x1d0>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d004      	beq.n	800e18c <tcp_output+0x1d0>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e188:	2b08      	cmp	r3, #8
 800e18a:	d901      	bls.n	800e190 <tcp_output+0x1d4>
 800e18c:	2301      	movs	r3, #1
 800e18e:	e000      	b.n	800e192 <tcp_output+0x1d6>
 800e190:	2300      	movs	r3, #0
 800e192:	2b00      	cmp	r3, #0
 800e194:	d106      	bne.n	800e1a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	8b5b      	ldrh	r3, [r3, #26]
 800e19a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f000 80e4 	beq.w	800e36c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	7d1b      	ldrb	r3, [r3, #20]
 800e1a8:	2b02      	cmp	r3, #2
 800e1aa:	d00d      	beq.n	800e1c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	899b      	ldrh	r3, [r3, #12]
 800e1b2:	b29c      	uxth	r4, r3
 800e1b4:	2010      	movs	r0, #16
 800e1b6:	f7f6 fdcf 	bl	8004d58 <lwip_htons>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	461a      	mov	r2, r3
 800e1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	4322      	orrs	r2, r4
 800e1c4:	b292      	uxth	r2, r2
 800e1c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	6879      	ldr	r1, [r7, #4]
 800e1cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e1ce:	f000 f909 	bl	800e3e4 <tcp_output_segment>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d016      	beq.n	800e20c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	8b5b      	ldrh	r3, [r3, #26]
 800e1e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	835a      	strh	r2, [r3, #26]
      return err;
 800e1ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1f0:	e0d3      	b.n	800e39a <tcp_output+0x3de>
 800e1f2:	bf00      	nop
 800e1f4:	0801300c 	.word	0x0801300c
 800e1f8:	08013588 	.word	0x08013588
 800e1fc:	08013098 	.word	0x08013098
 800e200:	080135a0 	.word	0x080135a0
 800e204:	2000b7b0 	.word	0x2000b7b0
 800e208:	080135c8 	.word	0x080135c8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	7d1b      	ldrb	r3, [r3, #20]
 800e218:	2b02      	cmp	r3, #2
 800e21a:	d006      	beq.n	800e22a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	8b5b      	ldrh	r3, [r3, #26]
 800e220:	f023 0303 	bic.w	r3, r3, #3
 800e224:	b29a      	uxth	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	4618      	mov	r0, r3
 800e232:	f7f6 fda7 	bl	8004d84 <lwip_htonl>
 800e236:	4604      	mov	r4, r0
 800e238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23a:	891b      	ldrh	r3, [r3, #8]
 800e23c:	461d      	mov	r5, r3
 800e23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e240:	68db      	ldr	r3, [r3, #12]
 800e242:	899b      	ldrh	r3, [r3, #12]
 800e244:	b29b      	uxth	r3, r3
 800e246:	4618      	mov	r0, r3
 800e248:	f7f6 fd86 	bl	8004d58 <lwip_htons>
 800e24c:	4603      	mov	r3, r0
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	f003 0303 	and.w	r3, r3, #3
 800e254:	2b00      	cmp	r3, #0
 800e256:	d001      	beq.n	800e25c <tcp_output+0x2a0>
 800e258:	2301      	movs	r3, #1
 800e25a:	e000      	b.n	800e25e <tcp_output+0x2a2>
 800e25c:	2300      	movs	r3, #0
 800e25e:	442b      	add	r3, r5
 800e260:	4423      	add	r3, r4
 800e262:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	da02      	bge.n	800e276 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e278:	891b      	ldrh	r3, [r3, #8]
 800e27a:	461c      	mov	r4, r3
 800e27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	899b      	ldrh	r3, [r3, #12]
 800e282:	b29b      	uxth	r3, r3
 800e284:	4618      	mov	r0, r3
 800e286:	f7f6 fd67 	bl	8004d58 <lwip_htons>
 800e28a:	4603      	mov	r3, r0
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	f003 0303 	and.w	r3, r3, #3
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <tcp_output+0x2de>
 800e296:	2301      	movs	r3, #1
 800e298:	e000      	b.n	800e29c <tcp_output+0x2e0>
 800e29a:	2300      	movs	r3, #0
 800e29c:	4423      	add	r3, r4
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d049      	beq.n	800e336 <tcp_output+0x37a>
      seg->next = NULL;
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d105      	bne.n	800e2bc <tcp_output+0x300>
        pcb->unacked = seg;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2b4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b8:	623b      	str	r3, [r7, #32]
 800e2ba:	e03f      	b.n	800e33c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7f6 fd5e 	bl	8004d84 <lwip_htonl>
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	6a3b      	ldr	r3, [r7, #32]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7f6 fd57 	bl	8004d84 <lwip_htonl>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	1ae3      	subs	r3, r4, r3
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	da24      	bge.n	800e328 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	3370      	adds	r3, #112	@ 0x70
 800e2e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e2e4:	e002      	b.n	800e2ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d011      	beq.n	800e318 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7f6 fd41 	bl	8004d84 <lwip_htonl>
 800e302:	4604      	mov	r4, r0
 800e304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7f6 fd3a 	bl	8004d84 <lwip_htonl>
 800e310:	4603      	mov	r3, r0
 800e312:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e314:	2b00      	cmp	r3, #0
 800e316:	dbe6      	blt.n	800e2e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	e009      	b.n	800e33c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e328:	6a3b      	ldr	r3, [r7, #32]
 800e32a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e32c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e32e:	6a3b      	ldr	r3, [r7, #32]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	623b      	str	r3, [r7, #32]
 800e334:	e002      	b.n	800e33c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e336:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e338:	f7fb ff4d 	bl	800a1d6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e340:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e344:	2b00      	cmp	r3, #0
 800e346:	d012      	beq.n	800e36e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f6 fd18 	bl	8004d84 <lwip_htonl>
 800e354:	4602      	mov	r2, r0
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e35a:	1ad3      	subs	r3, r2, r3
 800e35c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e35e:	8912      	ldrh	r2, [r2, #8]
 800e360:	4413      	add	r3, r2
  while (seg != NULL &&
 800e362:	69ba      	ldr	r2, [r7, #24]
 800e364:	429a      	cmp	r2, r3
 800e366:	f4bf aed9 	bcs.w	800e11c <tcp_output+0x160>
 800e36a:	e000      	b.n	800e36e <tcp_output+0x3b2>
      break;
 800e36c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e372:	2b00      	cmp	r3, #0
 800e374:	d108      	bne.n	800e388 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e37e:	e004      	b.n	800e38a <tcp_output+0x3ce>
    goto output_done;
 800e380:	bf00      	nop
 800e382:	e002      	b.n	800e38a <tcp_output+0x3ce>
    goto output_done;
 800e384:	bf00      	nop
 800e386:	e000      	b.n	800e38a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e388:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	8b5b      	ldrh	r3, [r3, #26]
 800e38e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e392:	b29a      	uxth	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3728      	adds	r7, #40	@ 0x28
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bdb0      	pop	{r4, r5, r7, pc}
 800e3a2:	bf00      	nop

0800e3a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d106      	bne.n	800e3c0 <tcp_output_segment_busy+0x1c>
 800e3b2:	4b09      	ldr	r3, [pc, #36]	@ (800e3d8 <tcp_output_segment_busy+0x34>)
 800e3b4:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e3b8:	4908      	ldr	r1, [pc, #32]	@ (800e3dc <tcp_output_segment_busy+0x38>)
 800e3ba:	4809      	ldr	r0, [pc, #36]	@ (800e3e0 <tcp_output_segment_busy+0x3c>)
 800e3bc:	f001 fca2 	bl	800fd04 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	7b9b      	ldrb	r3, [r3, #14]
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d001      	beq.n	800e3ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e000      	b.n	800e3d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3708      	adds	r7, #8
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	0801300c 	.word	0x0801300c
 800e3dc:	080135e0 	.word	0x080135e0
 800e3e0:	08013098 	.word	0x08013098

0800e3e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e3e4:	b5b0      	push	{r4, r5, r7, lr}
 800e3e6:	b08c      	sub	sp, #48	@ 0x30
 800e3e8:	af04      	add	r7, sp, #16
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d106      	bne.n	800e404 <tcp_output_segment+0x20>
 800e3f6:	4b64      	ldr	r3, [pc, #400]	@ (800e588 <tcp_output_segment+0x1a4>)
 800e3f8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e3fc:	4963      	ldr	r1, [pc, #396]	@ (800e58c <tcp_output_segment+0x1a8>)
 800e3fe:	4864      	ldr	r0, [pc, #400]	@ (800e590 <tcp_output_segment+0x1ac>)
 800e400:	f001 fc80 	bl	800fd04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d106      	bne.n	800e418 <tcp_output_segment+0x34>
 800e40a:	4b5f      	ldr	r3, [pc, #380]	@ (800e588 <tcp_output_segment+0x1a4>)
 800e40c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e410:	4960      	ldr	r1, [pc, #384]	@ (800e594 <tcp_output_segment+0x1b0>)
 800e412:	485f      	ldr	r0, [pc, #380]	@ (800e590 <tcp_output_segment+0x1ac>)
 800e414:	f001 fc76 	bl	800fd04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d106      	bne.n	800e42c <tcp_output_segment+0x48>
 800e41e:	4b5a      	ldr	r3, [pc, #360]	@ (800e588 <tcp_output_segment+0x1a4>)
 800e420:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e424:	495c      	ldr	r1, [pc, #368]	@ (800e598 <tcp_output_segment+0x1b4>)
 800e426:	485a      	ldr	r0, [pc, #360]	@ (800e590 <tcp_output_segment+0x1ac>)
 800e428:	f001 fc6c 	bl	800fd04 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f7ff ffb9 	bl	800e3a4 <tcp_output_segment_busy>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e438:	2300      	movs	r3, #0
 800e43a:	e0a1      	b.n	800e580 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	68dc      	ldr	r4, [r3, #12]
 800e444:	4610      	mov	r0, r2
 800e446:	f7f6 fc9d 	bl	8004d84 <lwip_htonl>
 800e44a:	4603      	mov	r3, r0
 800e44c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	68dc      	ldr	r4, [r3, #12]
 800e456:	4610      	mov	r0, r2
 800e458:	f7f6 fc7e 	bl	8004d58 <lwip_htons>
 800e45c:	4603      	mov	r3, r0
 800e45e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e464:	68ba      	ldr	r2, [r7, #8]
 800e466:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e468:	441a      	add	r2, r3
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	3314      	adds	r3, #20
 800e474:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	7a9b      	ldrb	r3, [r3, #10]
 800e47a:	f003 0301 	and.w	r3, r3, #1
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d015      	beq.n	800e4ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	3304      	adds	r3, #4
 800e486:	461a      	mov	r2, r3
 800e488:	6879      	ldr	r1, [r7, #4]
 800e48a:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 800e48e:	f7fc fa1d 	bl	800a8cc <tcp_eff_send_mss_netif>
 800e492:	4603      	mov	r3, r0
 800e494:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e496:	8b7b      	ldrh	r3, [r7, #26]
 800e498:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7f6 fc71 	bl	8004d84 <lwip_htonl>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	3304      	adds	r3, #4
 800e4ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	da02      	bge.n	800e4be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d10c      	bne.n	800e4e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e4c6:	4b35      	ldr	r3, [pc, #212]	@ (800e59c <tcp_output_segment+0x1b8>)
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7f6 fc55 	bl	8004d84 <lwip_htonl>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	68da      	ldr	r2, [r3, #12]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	8959      	ldrh	r1, [r3, #10]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	8b3a      	ldrh	r2, [r7, #24]
 800e4fa:	1a8a      	subs	r2, r1, r2
 800e4fc:	b292      	uxth	r2, r2
 800e4fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	8919      	ldrh	r1, [r3, #8]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	8b3a      	ldrh	r2, [r7, #24]
 800e50c:	1a8a      	subs	r2, r1, r2
 800e50e:	b292      	uxth	r2, r2
 800e510:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	68d2      	ldr	r2, [r2, #12]
 800e51a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	2200      	movs	r2, #0
 800e522:	741a      	strb	r2, [r3, #16]
 800e524:	2200      	movs	r2, #0
 800e526:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	68da      	ldr	r2, [r3, #12]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	7a9b      	ldrb	r3, [r3, #10]
 800e530:	f003 0301 	and.w	r3, r3, #1
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <tcp_output_segment+0x158>
 800e538:	2318      	movs	r3, #24
 800e53a:	e000      	b.n	800e53e <tcp_output_segment+0x15a>
 800e53c:	2314      	movs	r3, #20
 800e53e:	4413      	add	r3, r2
 800e540:	69fa      	ldr	r2, [r7, #28]
 800e542:	429a      	cmp	r2, r3
 800e544:	d006      	beq.n	800e554 <tcp_output_segment+0x170>
 800e546:	4b10      	ldr	r3, [pc, #64]	@ (800e588 <tcp_output_segment+0x1a4>)
 800e548:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e54c:	4914      	ldr	r1, [pc, #80]	@ (800e5a0 <tcp_output_segment+0x1bc>)
 800e54e:	4810      	ldr	r0, [pc, #64]	@ (800e590 <tcp_output_segment+0x1ac>)
 800e550:	f001 fbd8 	bl	800fd04 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6858      	ldr	r0, [r3, #4]
 800e558:	68b9      	ldr	r1, [r7, #8]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	1d1c      	adds	r4, r3, #4
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	7add      	ldrb	r5, [r3, #11]
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	7a9b      	ldrb	r3, [r3, #10]
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	9202      	str	r2, [sp, #8]
 800e56a:	2206      	movs	r2, #6
 800e56c:	9201      	str	r2, [sp, #4]
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	462b      	mov	r3, r5
 800e572:	4622      	mov	r2, r4
 800e574:	f7f7 ffa4 	bl	80064c0 <ip4_output_if>
 800e578:	4603      	mov	r3, r0
 800e57a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e57c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3720      	adds	r7, #32
 800e584:	46bd      	mov	sp, r7
 800e586:	bdb0      	pop	{r4, r5, r7, pc}
 800e588:	0801300c 	.word	0x0801300c
 800e58c:	08013608 	.word	0x08013608
 800e590:	08013098 	.word	0x08013098
 800e594:	08013628 	.word	0x08013628
 800e598:	08013648 	.word	0x08013648
 800e59c:	2000b764 	.word	0x2000b764
 800e5a0:	0801366c 	.word	0x0801366c

0800e5a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e5a4:	b5b0      	push	{r4, r5, r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d106      	bne.n	800e5c0 <tcp_rexmit_rto_prepare+0x1c>
 800e5b2:	4b31      	ldr	r3, [pc, #196]	@ (800e678 <tcp_rexmit_rto_prepare+0xd4>)
 800e5b4:	f240 6263 	movw	r2, #1635	@ 0x663
 800e5b8:	4930      	ldr	r1, [pc, #192]	@ (800e67c <tcp_rexmit_rto_prepare+0xd8>)
 800e5ba:	4831      	ldr	r0, [pc, #196]	@ (800e680 <tcp_rexmit_rto_prepare+0xdc>)
 800e5bc:	f001 fba2 	bl	800fd04 <iprintf>

  if (pcb->unacked == NULL) {
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d102      	bne.n	800e5ce <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e5c8:	f06f 0305 	mvn.w	r3, #5
 800e5cc:	e050      	b.n	800e670 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5d2:	60fb      	str	r3, [r7, #12]
 800e5d4:	e00b      	b.n	800e5ee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e5d6:	68f8      	ldr	r0, [r7, #12]
 800e5d8:	f7ff fee4 	bl	800e3a4 <tcp_output_segment_busy>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d002      	beq.n	800e5e8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e5e2:	f06f 0305 	mvn.w	r3, #5
 800e5e6:	e043      	b.n	800e670 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	60fb      	str	r3, [r7, #12]
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1ef      	bne.n	800e5d6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e5f6:	68f8      	ldr	r0, [r7, #12]
 800e5f8:	f7ff fed4 	bl	800e3a4 <tcp_output_segment_busy>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d002      	beq.n	800e608 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e602:	f06f 0305 	mvn.w	r3, #5
 800e606:	e033      	b.n	800e670 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	8b5b      	ldrh	r3, [r3, #26]
 800e622:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e626:	b29a      	uxth	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	4618      	mov	r0, r3
 800e634:	f7f6 fba6 	bl	8004d84 <lwip_htonl>
 800e638:	4604      	mov	r4, r0
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	891b      	ldrh	r3, [r3, #8]
 800e63e:	461d      	mov	r5, r3
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	899b      	ldrh	r3, [r3, #12]
 800e646:	b29b      	uxth	r3, r3
 800e648:	4618      	mov	r0, r3
 800e64a:	f7f6 fb85 	bl	8004d58 <lwip_htons>
 800e64e:	4603      	mov	r3, r0
 800e650:	b2db      	uxtb	r3, r3
 800e652:	f003 0303 	and.w	r3, r3, #3
 800e656:	2b00      	cmp	r3, #0
 800e658:	d001      	beq.n	800e65e <tcp_rexmit_rto_prepare+0xba>
 800e65a:	2301      	movs	r3, #1
 800e65c:	e000      	b.n	800e660 <tcp_rexmit_rto_prepare+0xbc>
 800e65e:	2300      	movs	r3, #0
 800e660:	442b      	add	r3, r5
 800e662:	18e2      	adds	r2, r4, r3
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2200      	movs	r2, #0
 800e66c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800e66e:	2300      	movs	r3, #0
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bdb0      	pop	{r4, r5, r7, pc}
 800e678:	0801300c 	.word	0x0801300c
 800e67c:	08013680 	.word	0x08013680
 800e680:	08013098 	.word	0x08013098

0800e684 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d106      	bne.n	800e6a0 <tcp_rexmit_rto_commit+0x1c>
 800e692:	4b0d      	ldr	r3, [pc, #52]	@ (800e6c8 <tcp_rexmit_rto_commit+0x44>)
 800e694:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e698:	490c      	ldr	r1, [pc, #48]	@ (800e6cc <tcp_rexmit_rto_commit+0x48>)
 800e69a:	480d      	ldr	r0, [pc, #52]	@ (800e6d0 <tcp_rexmit_rto_commit+0x4c>)
 800e69c:	f001 fb32 	bl	800fd04 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e6a6:	2bff      	cmp	r3, #255	@ 0xff
 800e6a8:	d007      	beq.n	800e6ba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f7ff fc7e 	bl	800dfbc <tcp_output>
}
 800e6c0:	bf00      	nop
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	0801300c 	.word	0x0801300c
 800e6cc:	080136a4 	.word	0x080136a4
 800e6d0:	08013098 	.word	0x08013098

0800e6d4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d106      	bne.n	800e6f0 <tcp_rexmit_rto+0x1c>
 800e6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e70c <tcp_rexmit_rto+0x38>)
 800e6e4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800e6e8:	4909      	ldr	r1, [pc, #36]	@ (800e710 <tcp_rexmit_rto+0x3c>)
 800e6ea:	480a      	ldr	r0, [pc, #40]	@ (800e714 <tcp_rexmit_rto+0x40>)
 800e6ec:	f001 fb0a 	bl	800fd04 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7ff ff57 	bl	800e5a4 <tcp_rexmit_rto_prepare>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d102      	bne.n	800e702 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7ff ffc1 	bl	800e684 <tcp_rexmit_rto_commit>
  }
}
 800e702:	bf00      	nop
 800e704:	3708      	adds	r7, #8
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	0801300c 	.word	0x0801300c
 800e710:	080136c8 	.word	0x080136c8
 800e714:	08013098 	.word	0x08013098

0800e718 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e718:	b590      	push	{r4, r7, lr}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d106      	bne.n	800e734 <tcp_rexmit+0x1c>
 800e726:	4b2f      	ldr	r3, [pc, #188]	@ (800e7e4 <tcp_rexmit+0xcc>)
 800e728:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e72c:	492e      	ldr	r1, [pc, #184]	@ (800e7e8 <tcp_rexmit+0xd0>)
 800e72e:	482f      	ldr	r0, [pc, #188]	@ (800e7ec <tcp_rexmit+0xd4>)
 800e730:	f001 fae8 	bl	800fd04 <iprintf>

  if (pcb->unacked == NULL) {
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d102      	bne.n	800e742 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e73c:	f06f 0305 	mvn.w	r3, #5
 800e740:	e04c      	b.n	800e7dc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e746:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e748:	68b8      	ldr	r0, [r7, #8]
 800e74a:	f7ff fe2b 	bl	800e3a4 <tcp_output_segment_busy>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d002      	beq.n	800e75a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e754:	f06f 0305 	mvn.w	r3, #5
 800e758:	e040      	b.n	800e7dc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	336c      	adds	r3, #108	@ 0x6c
 800e766:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e768:	e002      	b.n	800e770 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d011      	beq.n	800e79c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	4618      	mov	r0, r3
 800e782:	f7f6 faff 	bl	8004d84 <lwip_htonl>
 800e786:	4604      	mov	r4, r0
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	4618      	mov	r0, r3
 800e790:	f7f6 faf8 	bl	8004d84 <lwip_htonl>
 800e794:	4603      	mov	r3, r0
 800e796:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e798:	2b00      	cmp	r3, #0
 800e79a:	dbe6      	blt.n	800e76a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	68ba      	ldr	r2, [r7, #8]
 800e7a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d103      	bne.n	800e7ba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e7c0:	2bff      	cmp	r3, #255	@ 0xff
 800e7c2:	d007      	beq.n	800e7d4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	b2da      	uxtb	r2, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e7da:	2300      	movs	r3, #0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3714      	adds	r7, #20
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd90      	pop	{r4, r7, pc}
 800e7e4:	0801300c 	.word	0x0801300c
 800e7e8:	080136e4 	.word	0x080136e4
 800e7ec:	08013098 	.word	0x08013098

0800e7f0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d106      	bne.n	800e80c <tcp_rexmit_fast+0x1c>
 800e7fe:	4b2a      	ldr	r3, [pc, #168]	@ (800e8a8 <tcp_rexmit_fast+0xb8>)
 800e800:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e804:	4929      	ldr	r1, [pc, #164]	@ (800e8ac <tcp_rexmit_fast+0xbc>)
 800e806:	482a      	ldr	r0, [pc, #168]	@ (800e8b0 <tcp_rexmit_fast+0xc0>)
 800e808:	f001 fa7c 	bl	800fd04 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e810:	2b00      	cmp	r3, #0
 800e812:	d045      	beq.n	800e8a0 <tcp_rexmit_fast+0xb0>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	8b5b      	ldrh	r3, [r3, #26]
 800e818:	f003 0304 	and.w	r3, r3, #4
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d13f      	bne.n	800e8a0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f7ff ff79 	bl	800e718 <tcp_rexmit>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d139      	bne.n	800e8a0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e838:	4293      	cmp	r3, r2
 800e83a:	bf28      	it	cs
 800e83c:	4613      	movcs	r3, r2
 800e83e:	b29b      	uxth	r3, r3
 800e840:	2b00      	cmp	r3, #0
 800e842:	da00      	bge.n	800e846 <tcp_rexmit_fast+0x56>
 800e844:	3301      	adds	r3, #1
 800e846:	105b      	asrs	r3, r3, #1
 800e848:	b29a      	uxth	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e856:	461a      	mov	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e85c:	005b      	lsls	r3, r3, #1
 800e85e:	429a      	cmp	r2, r3
 800e860:	d206      	bcs.n	800e870 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e866:	005b      	lsls	r3, r3, #1
 800e868:	b29a      	uxth	r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e87a:	4619      	mov	r1, r3
 800e87c:	0049      	lsls	r1, r1, #1
 800e87e:	440b      	add	r3, r1
 800e880:	b29b      	uxth	r3, r3
 800e882:	4413      	add	r3, r2
 800e884:	b29a      	uxth	r2, r3
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	8b5b      	ldrh	r3, [r3, #26]
 800e890:	f043 0304 	orr.w	r3, r3, #4
 800e894:	b29a      	uxth	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	0801300c 	.word	0x0801300c
 800e8ac:	080136fc 	.word	0x080136fc
 800e8b0:	08013098 	.word	0x08013098

0800e8b4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	607b      	str	r3, [r7, #4]
 800e8be:	460b      	mov	r3, r1
 800e8c0:	817b      	strh	r3, [r7, #10]
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e8c6:	897a      	ldrh	r2, [r7, #10]
 800e8c8:	893b      	ldrh	r3, [r7, #8]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	3314      	adds	r3, #20
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	2022      	movs	r0, #34	@ 0x22
 800e8da:	f7f9 fd7b 	bl	80083d4 <pbuf_alloc>
 800e8de:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d04d      	beq.n	800e982 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e8e6:	897b      	ldrh	r3, [r7, #10]
 800e8e8:	3313      	adds	r3, #19
 800e8ea:	697a      	ldr	r2, [r7, #20]
 800e8ec:	8952      	ldrh	r2, [r2, #10]
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	db06      	blt.n	800e900 <tcp_output_alloc_header_common+0x4c>
 800e8f2:	4b26      	ldr	r3, [pc, #152]	@ (800e98c <tcp_output_alloc_header_common+0xd8>)
 800e8f4:	f240 7223 	movw	r2, #1827	@ 0x723
 800e8f8:	4925      	ldr	r1, [pc, #148]	@ (800e990 <tcp_output_alloc_header_common+0xdc>)
 800e8fa:	4826      	ldr	r0, [pc, #152]	@ (800e994 <tcp_output_alloc_header_common+0xe0>)
 800e8fc:	f001 fa02 	bl	800fd04 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e906:	8c3b      	ldrh	r3, [r7, #32]
 800e908:	4618      	mov	r0, r3
 800e90a:	f7f6 fa25 	bl	8004d58 <lwip_htons>
 800e90e:	4603      	mov	r3, r0
 800e910:	461a      	mov	r2, r3
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e916:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e918:	4618      	mov	r0, r3
 800e91a:	f7f6 fa1d 	bl	8004d58 <lwip_htons>
 800e91e:	4603      	mov	r3, r0
 800e920:	461a      	mov	r2, r3
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	f7f6 fa29 	bl	8004d84 <lwip_htonl>
 800e932:	4602      	mov	r2, r0
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e938:	897b      	ldrh	r3, [r7, #10]
 800e93a:	089b      	lsrs	r3, r3, #2
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	3305      	adds	r3, #5
 800e940:	b29b      	uxth	r3, r3
 800e942:	031b      	lsls	r3, r3, #12
 800e944:	b29a      	uxth	r2, r3
 800e946:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	4313      	orrs	r3, r2
 800e94e:	b29b      	uxth	r3, r3
 800e950:	4618      	mov	r0, r3
 800e952:	f7f6 fa01 	bl	8004d58 <lwip_htons>
 800e956:	4603      	mov	r3, r0
 800e958:	461a      	mov	r2, r3
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e95e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e960:	4618      	mov	r0, r3
 800e962:	f7f6 f9f9 	bl	8004d58 <lwip_htons>
 800e966:	4603      	mov	r3, r0
 800e968:	461a      	mov	r2, r3
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	2200      	movs	r2, #0
 800e972:	741a      	strb	r2, [r3, #16]
 800e974:	2200      	movs	r2, #0
 800e976:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	2200      	movs	r2, #0
 800e97c:	749a      	strb	r2, [r3, #18]
 800e97e:	2200      	movs	r2, #0
 800e980:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e982:	697b      	ldr	r3, [r7, #20]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3718      	adds	r7, #24
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	0801300c 	.word	0x0801300c
 800e990:	0801371c 	.word	0x0801371c
 800e994:	08013098 	.word	0x08013098

0800e998 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e998:	b5b0      	push	{r4, r5, r7, lr}
 800e99a:	b08a      	sub	sp, #40	@ 0x28
 800e99c:	af04      	add	r7, sp, #16
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	607b      	str	r3, [r7, #4]
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	817b      	strh	r3, [r7, #10]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d106      	bne.n	800e9be <tcp_output_alloc_header+0x26>
 800e9b0:	4b15      	ldr	r3, [pc, #84]	@ (800ea08 <tcp_output_alloc_header+0x70>)
 800e9b2:	f240 7242 	movw	r2, #1858	@ 0x742
 800e9b6:	4915      	ldr	r1, [pc, #84]	@ (800ea0c <tcp_output_alloc_header+0x74>)
 800e9b8:	4815      	ldr	r0, [pc, #84]	@ (800ea10 <tcp_output_alloc_header+0x78>)
 800e9ba:	f001 f9a3 	bl	800fd04 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	8adb      	ldrh	r3, [r3, #22]
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	8b12      	ldrh	r2, [r2, #24]
 800e9ca:	68f9      	ldr	r1, [r7, #12]
 800e9cc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800e9ce:	893d      	ldrh	r5, [r7, #8]
 800e9d0:	897c      	ldrh	r4, [r7, #10]
 800e9d2:	9103      	str	r1, [sp, #12]
 800e9d4:	2110      	movs	r1, #16
 800e9d6:	9102      	str	r1, [sp, #8]
 800e9d8:	9201      	str	r2, [sp, #4]
 800e9da:	9300      	str	r3, [sp, #0]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	462a      	mov	r2, r5
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	f7ff ff67 	bl	800e8b4 <tcp_output_alloc_header_common>
 800e9e6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d006      	beq.n	800e9fc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9f2:	68fa      	ldr	r2, [r7, #12]
 800e9f4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e9f6:	441a      	add	r2, r3
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800e9fc:	697b      	ldr	r3, [r7, #20]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3718      	adds	r7, #24
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bdb0      	pop	{r4, r5, r7, pc}
 800ea06:	bf00      	nop
 800ea08:	0801300c 	.word	0x0801300c
 800ea0c:	0801374c 	.word	0x0801374c
 800ea10:	08013098 	.word	0x08013098

0800ea14 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b088      	sub	sp, #32
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	4611      	mov	r1, r2
 800ea20:	461a      	mov	r2, r3
 800ea22:	460b      	mov	r3, r1
 800ea24:	71fb      	strb	r3, [r7, #7]
 800ea26:	4613      	mov	r3, r2
 800ea28:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d106      	bne.n	800ea42 <tcp_output_fill_options+0x2e>
 800ea34:	4b12      	ldr	r3, [pc, #72]	@ (800ea80 <tcp_output_fill_options+0x6c>)
 800ea36:	f240 7256 	movw	r2, #1878	@ 0x756
 800ea3a:	4912      	ldr	r1, [pc, #72]	@ (800ea84 <tcp_output_fill_options+0x70>)
 800ea3c:	4812      	ldr	r0, [pc, #72]	@ (800ea88 <tcp_output_fill_options+0x74>)
 800ea3e:	f001 f961 	bl	800fd04 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	3314      	adds	r3, #20
 800ea4c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ea4e:	8bfb      	ldrh	r3, [r7, #30]
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	461a      	mov	r2, r3
 800ea54:	79fb      	ldrb	r3, [r7, #7]
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	f003 0304 	and.w	r3, r3, #4
 800ea5c:	4413      	add	r3, r2
 800ea5e:	3314      	adds	r3, #20
 800ea60:	69ba      	ldr	r2, [r7, #24]
 800ea62:	4413      	add	r3, r2
 800ea64:	697a      	ldr	r2, [r7, #20]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d006      	beq.n	800ea78 <tcp_output_fill_options+0x64>
 800ea6a:	4b05      	ldr	r3, [pc, #20]	@ (800ea80 <tcp_output_fill_options+0x6c>)
 800ea6c:	f240 7275 	movw	r2, #1909	@ 0x775
 800ea70:	4906      	ldr	r1, [pc, #24]	@ (800ea8c <tcp_output_fill_options+0x78>)
 800ea72:	4805      	ldr	r0, [pc, #20]	@ (800ea88 <tcp_output_fill_options+0x74>)
 800ea74:	f001 f946 	bl	800fd04 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ea78:	bf00      	nop
 800ea7a:	3720      	adds	r7, #32
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	0801300c 	.word	0x0801300c
 800ea84:	08013774 	.word	0x08013774
 800ea88:	08013098 	.word	0x08013098
 800ea8c:	0801366c 	.word	0x0801366c

0800ea90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b08a      	sub	sp, #40	@ 0x28
 800ea94:	af04      	add	r7, sp, #16
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
 800ea9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d106      	bne.n	800eab2 <tcp_output_control_segment+0x22>
 800eaa4:	4b1c      	ldr	r3, [pc, #112]	@ (800eb18 <tcp_output_control_segment+0x88>)
 800eaa6:	f240 7287 	movw	r2, #1927	@ 0x787
 800eaaa:	491c      	ldr	r1, [pc, #112]	@ (800eb1c <tcp_output_control_segment+0x8c>)
 800eaac:	481c      	ldr	r0, [pc, #112]	@ (800eb20 <tcp_output_control_segment+0x90>)
 800eaae:	f001 f929 	bl	800fd04 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800eab2:	683a      	ldr	r2, [r7, #0]
 800eab4:	6879      	ldr	r1, [r7, #4]
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f7fe faea 	bl	800d090 <tcp_route>
 800eabc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d102      	bne.n	800eaca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800eac4:	23fc      	movs	r3, #252	@ 0xfc
 800eac6:	75fb      	strb	r3, [r7, #23]
 800eac8:	e01c      	b.n	800eb04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d006      	beq.n	800eade <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	7adb      	ldrb	r3, [r3, #11]
 800ead4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	7a9b      	ldrb	r3, [r3, #10]
 800eada:	757b      	strb	r3, [r7, #21]
 800eadc:	e003      	b.n	800eae6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800eade:	23ff      	movs	r3, #255	@ 0xff
 800eae0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800eae2:	2300      	movs	r3, #0
 800eae4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800eae6:	7dba      	ldrb	r2, [r7, #22]
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	9302      	str	r3, [sp, #8]
 800eaec:	2306      	movs	r3, #6
 800eaee:	9301      	str	r3, [sp, #4]
 800eaf0:	7d7b      	ldrb	r3, [r7, #21]
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	683a      	ldr	r2, [r7, #0]
 800eaf8:	6879      	ldr	r1, [r7, #4]
 800eafa:	68b8      	ldr	r0, [r7, #8]
 800eafc:	f7f7 fce0 	bl	80064c0 <ip4_output_if>
 800eb00:	4603      	mov	r3, r0
 800eb02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800eb04:	68b8      	ldr	r0, [r7, #8]
 800eb06:	f7f9 ff4d 	bl	80089a4 <pbuf_free>
  return err;
 800eb0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3718      	adds	r7, #24
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	0801300c 	.word	0x0801300c
 800eb1c:	0801379c 	.word	0x0801379c
 800eb20:	08013098 	.word	0x08013098

0800eb24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800eb24:	b590      	push	{r4, r7, lr}
 800eb26:	b08b      	sub	sp, #44	@ 0x2c
 800eb28:	af04      	add	r7, sp, #16
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d106      	bne.n	800eb46 <tcp_rst+0x22>
 800eb38:	4b1f      	ldr	r3, [pc, #124]	@ (800ebb8 <tcp_rst+0x94>)
 800eb3a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800eb3e:	491f      	ldr	r1, [pc, #124]	@ (800ebbc <tcp_rst+0x98>)
 800eb40:	481f      	ldr	r0, [pc, #124]	@ (800ebc0 <tcp_rst+0x9c>)
 800eb42:	f001 f8df 	bl	800fd04 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800eb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d106      	bne.n	800eb5a <tcp_rst+0x36>
 800eb4c:	4b1a      	ldr	r3, [pc, #104]	@ (800ebb8 <tcp_rst+0x94>)
 800eb4e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800eb52:	491c      	ldr	r1, [pc, #112]	@ (800ebc4 <tcp_rst+0xa0>)
 800eb54:	481a      	ldr	r0, [pc, #104]	@ (800ebc0 <tcp_rst+0x9c>)
 800eb56:	f001 f8d5 	bl	800fd04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800eb5e:	f646 030b 	movw	r3, #26635	@ 0x680b
 800eb62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800eb64:	7dfb      	ldrb	r3, [r7, #23]
 800eb66:	b29c      	uxth	r4, r3
 800eb68:	68b8      	ldr	r0, [r7, #8]
 800eb6a:	f7f6 f90b 	bl	8004d84 <lwip_htonl>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	8abb      	ldrh	r3, [r7, #20]
 800eb72:	9303      	str	r3, [sp, #12]
 800eb74:	2314      	movs	r3, #20
 800eb76:	9302      	str	r3, [sp, #8]
 800eb78:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800eb7a:	9301      	str	r3, [sp, #4]
 800eb7c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800eb7e:	9300      	str	r3, [sp, #0]
 800eb80:	4613      	mov	r3, r2
 800eb82:	2200      	movs	r2, #0
 800eb84:	4621      	mov	r1, r4
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f7ff fe94 	bl	800e8b4 <tcp_output_alloc_header_common>
 800eb8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00c      	beq.n	800ebae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb94:	7dfb      	ldrb	r3, [r7, #23]
 800eb96:	2200      	movs	r2, #0
 800eb98:	6939      	ldr	r1, [r7, #16]
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f7ff ff3a 	bl	800ea14 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800eba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba2:	683a      	ldr	r2, [r7, #0]
 800eba4:	6939      	ldr	r1, [r7, #16]
 800eba6:	68f8      	ldr	r0, [r7, #12]
 800eba8:	f7ff ff72 	bl	800ea90 <tcp_output_control_segment>
 800ebac:	e000      	b.n	800ebb0 <tcp_rst+0x8c>
    return;
 800ebae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ebb0:	371c      	adds	r7, #28
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd90      	pop	{r4, r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	0801300c 	.word	0x0801300c
 800ebbc:	080137c8 	.word	0x080137c8
 800ebc0:	08013098 	.word	0x08013098
 800ebc4:	080137e4 	.word	0x080137e4

0800ebc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ebc8:	b590      	push	{r4, r7, lr}
 800ebca:	b087      	sub	sp, #28
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d106      	bne.n	800ebec <tcp_send_empty_ack+0x24>
 800ebde:	4b28      	ldr	r3, [pc, #160]	@ (800ec80 <tcp_send_empty_ack+0xb8>)
 800ebe0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800ebe4:	4927      	ldr	r1, [pc, #156]	@ (800ec84 <tcp_send_empty_ack+0xbc>)
 800ebe6:	4828      	ldr	r0, [pc, #160]	@ (800ec88 <tcp_send_empty_ack+0xc0>)
 800ebe8:	f001 f88c 	bl	800fd04 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ebec:	7dfb      	ldrb	r3, [r7, #23]
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	f003 0304 	and.w	r3, r3, #4
 800ebf6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ebf8:	7d7b      	ldrb	r3, [r7, #21]
 800ebfa:	b29c      	uxth	r4, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7f6 f8bf 	bl	8004d84 <lwip_htonl>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2200      	movs	r2, #0
 800ec0a:	4621      	mov	r1, r4
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7ff fec3 	bl	800e998 <tcp_output_alloc_header>
 800ec12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d109      	bne.n	800ec2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	8b5b      	ldrh	r3, [r3, #26]
 800ec1e:	f043 0303 	orr.w	r3, r3, #3
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ec28:	f06f 0301 	mvn.w	r3, #1
 800ec2c:	e023      	b.n	800ec76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ec2e:	7dbb      	ldrb	r3, [r7, #22]
 800ec30:	7dfa      	ldrb	r2, [r7, #23]
 800ec32:	6939      	ldr	r1, [r7, #16]
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7ff feed 	bl	800ea14 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	3304      	adds	r3, #4
 800ec40:	6939      	ldr	r1, [r7, #16]
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f7ff ff24 	bl	800ea90 <tcp_output_control_segment>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ec4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d007      	beq.n	800ec64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	8b5b      	ldrh	r3, [r3, #26]
 800ec58:	f043 0303 	orr.w	r3, r3, #3
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	835a      	strh	r2, [r3, #26]
 800ec62:	e006      	b.n	800ec72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	8b5b      	ldrh	r3, [r3, #26]
 800ec68:	f023 0303 	bic.w	r3, r3, #3
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ec72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	371c      	adds	r7, #28
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd90      	pop	{r4, r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	0801300c 	.word	0x0801300c
 800ec84:	08013800 	.word	0x08013800
 800ec88:	08013098 	.word	0x08013098

0800ec8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ec8c:	b590      	push	{r4, r7, lr}
 800ec8e:	b087      	sub	sp, #28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ec94:	2300      	movs	r3, #0
 800ec96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d106      	bne.n	800ecac <tcp_keepalive+0x20>
 800ec9e:	4b18      	ldr	r3, [pc, #96]	@ (800ed00 <tcp_keepalive+0x74>)
 800eca0:	f640 0224 	movw	r2, #2084	@ 0x824
 800eca4:	4917      	ldr	r1, [pc, #92]	@ (800ed04 <tcp_keepalive+0x78>)
 800eca6:	4818      	ldr	r0, [pc, #96]	@ (800ed08 <tcp_keepalive+0x7c>)
 800eca8:	f001 f82c 	bl	800fd04 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ecac:	7dfb      	ldrb	r3, [r7, #23]
 800ecae:	b29c      	uxth	r4, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecb4:	3b01      	subs	r3, #1
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7f6 f864 	bl	8004d84 <lwip_htonl>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	4621      	mov	r1, r4
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f7ff fe68 	bl	800e998 <tcp_output_alloc_header>
 800ecc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d102      	bne.n	800ecd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ecd0:	f04f 33ff 	mov.w	r3, #4294967295
 800ecd4:	e010      	b.n	800ecf8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ecd6:	7dfb      	ldrb	r3, [r7, #23]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	6939      	ldr	r1, [r7, #16]
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff fe99 	bl	800ea14 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	3304      	adds	r3, #4
 800ece8:	6939      	ldr	r1, [r7, #16]
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7ff fed0 	bl	800ea90 <tcp_output_control_segment>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ecf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	371c      	adds	r7, #28
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd90      	pop	{r4, r7, pc}
 800ed00:	0801300c 	.word	0x0801300c
 800ed04:	08013820 	.word	0x08013820
 800ed08:	08013098 	.word	0x08013098

0800ed0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ed0c:	b590      	push	{r4, r7, lr}
 800ed0e:	b08b      	sub	sp, #44	@ 0x2c
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ed14:	2300      	movs	r3, #0
 800ed16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d106      	bne.n	800ed2e <tcp_zero_window_probe+0x22>
 800ed20:	4b4c      	ldr	r3, [pc, #304]	@ (800ee54 <tcp_zero_window_probe+0x148>)
 800ed22:	f640 024f 	movw	r2, #2127	@ 0x84f
 800ed26:	494c      	ldr	r1, [pc, #304]	@ (800ee58 <tcp_zero_window_probe+0x14c>)
 800ed28:	484c      	ldr	r0, [pc, #304]	@ (800ee5c <tcp_zero_window_probe+0x150>)
 800ed2a:	f000 ffeb 	bl	800fd04 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d101      	bne.n	800ed3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	e086      	b.n	800ee4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ed44:	2bff      	cmp	r3, #255	@ 0xff
 800ed46:	d007      	beq.n	800ed58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ed4e:	3301      	adds	r3, #1
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ed58:	6a3b      	ldr	r3, [r7, #32]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	899b      	ldrh	r3, [r3, #12]
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7f5 fff9 	bl	8004d58 <lwip_htons>
 800ed66:	4603      	mov	r3, r0
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	f003 0301 	and.w	r3, r3, #1
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d005      	beq.n	800ed7e <tcp_zero_window_probe+0x72>
 800ed72:	6a3b      	ldr	r3, [r7, #32]
 800ed74:	891b      	ldrh	r3, [r3, #8]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d101      	bne.n	800ed7e <tcp_zero_window_probe+0x72>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e000      	b.n	800ed80 <tcp_zero_window_probe+0x74>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ed82:	7ffb      	ldrb	r3, [r7, #31]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	bf0c      	ite	eq
 800ed88:	2301      	moveq	r3, #1
 800ed8a:	2300      	movne	r3, #0
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ed90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed94:	b299      	uxth	r1, r3
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	68db      	ldr	r3, [r3, #12]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	8bba      	ldrh	r2, [r7, #28]
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f7ff fdfa 	bl	800e998 <tcp_output_alloc_header>
 800eda4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d102      	bne.n	800edb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800edac:	f04f 33ff 	mov.w	r3, #4294967295
 800edb0:	e04c      	b.n	800ee4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800edb8:	7ffb      	ldrb	r3, [r7, #31]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d011      	beq.n	800ede2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	899b      	ldrh	r3, [r3, #12]
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	b21b      	sxth	r3, r3
 800edc6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800edca:	b21c      	sxth	r4, r3
 800edcc:	2011      	movs	r0, #17
 800edce:	f7f5 ffc3 	bl	8004d58 <lwip_htons>
 800edd2:	4603      	mov	r3, r0
 800edd4:	b21b      	sxth	r3, r3
 800edd6:	4323      	orrs	r3, r4
 800edd8:	b21b      	sxth	r3, r3
 800edda:	b29a      	uxth	r2, r3
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	819a      	strh	r2, [r3, #12]
 800ede0:	e010      	b.n	800ee04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	3314      	adds	r3, #20
 800ede8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800edea:	6a3b      	ldr	r3, [r7, #32]
 800edec:	6858      	ldr	r0, [r3, #4]
 800edee:	6a3b      	ldr	r3, [r7, #32]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	891a      	ldrh	r2, [r3, #8]
 800edf4:	6a3b      	ldr	r3, [r7, #32]
 800edf6:	891b      	ldrh	r3, [r3, #8]
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	2201      	movs	r2, #1
 800edfe:	6939      	ldr	r1, [r7, #16]
 800ee00:	f7f9 ffba 	bl	8008d78 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ee04:	6a3b      	ldr	r3, [r7, #32]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7f5 ffba 	bl	8004d84 <lwip_htonl>
 800ee10:	4603      	mov	r3, r0
 800ee12:	3301      	adds	r3, #1
 800ee14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	1ad3      	subs	r3, r2, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	da02      	bge.n	800ee28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ee28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	69b9      	ldr	r1, [r7, #24]
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7ff fdef 	bl	800ea14 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	3304      	adds	r3, #4
 800ee3c:	69b9      	ldr	r1, [r7, #24]
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f7ff fe26 	bl	800ea90 <tcp_output_control_segment>
 800ee44:	4603      	mov	r3, r0
 800ee46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ee48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	372c      	adds	r7, #44	@ 0x2c
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd90      	pop	{r4, r7, pc}
 800ee54:	0801300c 	.word	0x0801300c
 800ee58:	0801383c 	.word	0x0801383c
 800ee5c:	08013098 	.word	0x08013098

0800ee60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ee68:	f7fa f874 	bl	8008f54 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ee6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ee98 <tcpip_tcp_timer+0x38>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d103      	bne.n	800ee7c <tcpip_tcp_timer+0x1c>
 800ee74:	4b09      	ldr	r3, [pc, #36]	@ (800ee9c <tcpip_tcp_timer+0x3c>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d005      	beq.n	800ee88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	4908      	ldr	r1, [pc, #32]	@ (800eea0 <tcpip_tcp_timer+0x40>)
 800ee80:	20fa      	movs	r0, #250	@ 0xfa
 800ee82:	f000 f8f3 	bl	800f06c <sys_timeout>
 800ee86:	e003      	b.n	800ee90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ee88:	4b06      	ldr	r3, [pc, #24]	@ (800eea4 <tcpip_tcp_timer+0x44>)
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	601a      	str	r2, [r3, #0]
  }
}
 800ee8e:	bf00      	nop
 800ee90:	bf00      	nop
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	2000b770 	.word	0x2000b770
 800ee9c:	2000b774 	.word	0x2000b774
 800eea0:	0800ee61 	.word	0x0800ee61
 800eea4:	2000b7bc 	.word	0x2000b7bc

0800eea8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800eeac:	4b0a      	ldr	r3, [pc, #40]	@ (800eed8 <tcp_timer_needed+0x30>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10f      	bne.n	800eed4 <tcp_timer_needed+0x2c>
 800eeb4:	4b09      	ldr	r3, [pc, #36]	@ (800eedc <tcp_timer_needed+0x34>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d103      	bne.n	800eec4 <tcp_timer_needed+0x1c>
 800eebc:	4b08      	ldr	r3, [pc, #32]	@ (800eee0 <tcp_timer_needed+0x38>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d007      	beq.n	800eed4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eec4:	4b04      	ldr	r3, [pc, #16]	@ (800eed8 <tcp_timer_needed+0x30>)
 800eec6:	2201      	movs	r2, #1
 800eec8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eeca:	2200      	movs	r2, #0
 800eecc:	4905      	ldr	r1, [pc, #20]	@ (800eee4 <tcp_timer_needed+0x3c>)
 800eece:	20fa      	movs	r0, #250	@ 0xfa
 800eed0:	f000 f8cc 	bl	800f06c <sys_timeout>
  }
}
 800eed4:	bf00      	nop
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	2000b7bc 	.word	0x2000b7bc
 800eedc:	2000b770 	.word	0x2000b770
 800eee0:	2000b774 	.word	0x2000b774
 800eee4:	0800ee61 	.word	0x0800ee61

0800eee8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b086      	sub	sp, #24
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eef4:	2006      	movs	r0, #6
 800eef6:	f7f8 fe6b 	bl	8007bd0 <memp_malloc>
 800eefa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d109      	bne.n	800ef16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d151      	bne.n	800efac <sys_timeout_abs+0xc4>
 800ef08:	4b2a      	ldr	r3, [pc, #168]	@ (800efb4 <sys_timeout_abs+0xcc>)
 800ef0a:	22be      	movs	r2, #190	@ 0xbe
 800ef0c:	492a      	ldr	r1, [pc, #168]	@ (800efb8 <sys_timeout_abs+0xd0>)
 800ef0e:	482b      	ldr	r0, [pc, #172]	@ (800efbc <sys_timeout_abs+0xd4>)
 800ef10:	f000 fef8 	bl	800fd04 <iprintf>
    return;
 800ef14:	e04a      	b.n	800efac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	68ba      	ldr	r2, [r7, #8]
 800ef20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	68fa      	ldr	r2, [r7, #12]
 800ef2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ef2e:	4b24      	ldr	r3, [pc, #144]	@ (800efc0 <sys_timeout_abs+0xd8>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d103      	bne.n	800ef3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ef36:	4a22      	ldr	r2, [pc, #136]	@ (800efc0 <sys_timeout_abs+0xd8>)
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	6013      	str	r3, [r2, #0]
    return;
 800ef3c:	e037      	b.n	800efae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	685a      	ldr	r2, [r3, #4]
 800ef42:	4b1f      	ldr	r3, [pc, #124]	@ (800efc0 <sys_timeout_abs+0xd8>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	0fdb      	lsrs	r3, r3, #31
 800ef4c:	f003 0301 	and.w	r3, r3, #1
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d007      	beq.n	800ef66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ef56:	4b1a      	ldr	r3, [pc, #104]	@ (800efc0 <sys_timeout_abs+0xd8>)
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ef5e:	4a18      	ldr	r2, [pc, #96]	@ (800efc0 <sys_timeout_abs+0xd8>)
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	6013      	str	r3, [r2, #0]
 800ef64:	e023      	b.n	800efae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef66:	4b16      	ldr	r3, [pc, #88]	@ (800efc0 <sys_timeout_abs+0xd8>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	617b      	str	r3, [r7, #20]
 800ef6c:	e01a      	b.n	800efa4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00b      	beq.n	800ef8e <sys_timeout_abs+0xa6>
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	685a      	ldr	r2, [r3, #4]
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	1ad3      	subs	r3, r2, r3
 800ef82:	0fdb      	lsrs	r3, r3, #31
 800ef84:	f003 0301 	and.w	r3, r3, #1
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d007      	beq.n	800ef9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	693a      	ldr	r2, [r7, #16]
 800ef9a:	601a      	str	r2, [r3, #0]
        break;
 800ef9c:	e007      	b.n	800efae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	617b      	str	r3, [r7, #20]
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d1e1      	bne.n	800ef6e <sys_timeout_abs+0x86>
 800efaa:	e000      	b.n	800efae <sys_timeout_abs+0xc6>
    return;
 800efac:	bf00      	nop
      }
    }
  }
}
 800efae:	3718      	adds	r7, #24
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	08013860 	.word	0x08013860
 800efb8:	080138d0 	.word	0x080138d0
 800efbc:	08013910 	.word	0x08013910
 800efc0:	2000b7b4 	.word	0x2000b7b4

0800efc4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	4798      	blx	r3

  now = sys_now();
 800efd6:	f7f5 fcd3 	bl	8004980 <sys_now>
 800efda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	4b0f      	ldr	r3, [pc, #60]	@ (800f020 <lwip_cyclic_timer+0x5c>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4413      	add	r3, r2
 800efe6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	1ad3      	subs	r3, r2, r3
 800efee:	0fdb      	lsrs	r3, r3, #31
 800eff0:	f003 0301 	and.w	r3, r3, #1
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d009      	beq.n	800f00e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	4413      	add	r3, r2
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	4907      	ldr	r1, [pc, #28]	@ (800f024 <lwip_cyclic_timer+0x60>)
 800f006:	4618      	mov	r0, r3
 800f008:	f7ff ff6e 	bl	800eee8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f00c:	e004      	b.n	800f018 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	4904      	ldr	r1, [pc, #16]	@ (800f024 <lwip_cyclic_timer+0x60>)
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f7ff ff68 	bl	800eee8 <sys_timeout_abs>
}
 800f018:	bf00      	nop
 800f01a:	3718      	adds	r7, #24
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	2000b7b8 	.word	0x2000b7b8
 800f024:	0800efc5 	.word	0x0800efc5

0800f028 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f02e:	2301      	movs	r3, #1
 800f030:	607b      	str	r3, [r7, #4]
 800f032:	e00e      	b.n	800f052 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f034:	4a0b      	ldr	r2, [pc, #44]	@ (800f064 <sys_timeouts_init+0x3c>)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	00db      	lsls	r3, r3, #3
 800f040:	4a08      	ldr	r2, [pc, #32]	@ (800f064 <sys_timeouts_init+0x3c>)
 800f042:	4413      	add	r3, r2
 800f044:	461a      	mov	r2, r3
 800f046:	4908      	ldr	r1, [pc, #32]	@ (800f068 <sys_timeouts_init+0x40>)
 800f048:	f000 f810 	bl	800f06c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	3301      	adds	r3, #1
 800f050:	607b      	str	r3, [r7, #4]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2b02      	cmp	r3, #2
 800f056:	d9ed      	bls.n	800f034 <sys_timeouts_init+0xc>
  }
}
 800f058:	bf00      	nop
 800f05a:	bf00      	nop
 800f05c:	3708      	adds	r7, #8
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	0801408c 	.word	0x0801408c
 800f068:	0800efc5 	.word	0x0800efc5

0800f06c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f07e:	d306      	bcc.n	800f08e <sys_timeout+0x22>
 800f080:	4b0a      	ldr	r3, [pc, #40]	@ (800f0ac <sys_timeout+0x40>)
 800f082:	f240 1229 	movw	r2, #297	@ 0x129
 800f086:	490a      	ldr	r1, [pc, #40]	@ (800f0b0 <sys_timeout+0x44>)
 800f088:	480a      	ldr	r0, [pc, #40]	@ (800f0b4 <sys_timeout+0x48>)
 800f08a:	f000 fe3b 	bl	800fd04 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f08e:	f7f5 fc77 	bl	8004980 <sys_now>
 800f092:	4602      	mov	r2, r0
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	4413      	add	r3, r2
 800f098:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	68b9      	ldr	r1, [r7, #8]
 800f09e:	6978      	ldr	r0, [r7, #20]
 800f0a0:	f7ff ff22 	bl	800eee8 <sys_timeout_abs>
#endif
}
 800f0a4:	bf00      	nop
 800f0a6:	3718      	adds	r7, #24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	08013860 	.word	0x08013860
 800f0b0:	08013938 	.word	0x08013938
 800f0b4:	08013910 	.word	0x08013910

0800f0b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f0be:	f7f5 fc5f 	bl	8004980 <sys_now>
 800f0c2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f0c4:	4b1a      	ldr	r3, [pc, #104]	@ (800f130 <sys_check_timeouts+0x78>)
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <sys_check_timeouts+0x1a>
 800f0ce:	f7f9 f92b 	bl	8008328 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f0d2:	4b18      	ldr	r3, [pc, #96]	@ (800f134 <sys_check_timeouts+0x7c>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d022      	beq.n	800f124 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	1ad3      	subs	r3, r2, r3
 800f0e6:	0fdb      	lsrs	r3, r3, #31
 800f0e8:	f003 0301 	and.w	r3, r3, #1
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d11a      	bne.n	800f128 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4a0f      	ldr	r2, [pc, #60]	@ (800f134 <sys_check_timeouts+0x7c>)
 800f0f8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	4a0b      	ldr	r2, [pc, #44]	@ (800f138 <sys_check_timeouts+0x80>)
 800f10c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f10e:	68b9      	ldr	r1, [r7, #8]
 800f110:	2006      	movs	r0, #6
 800f112:	f7f8 fdcd 	bl	8007cb0 <memp_free>
    if (handler != NULL) {
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d0d3      	beq.n	800f0c4 <sys_check_timeouts+0xc>
      handler(arg);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6838      	ldr	r0, [r7, #0]
 800f120:	4798      	blx	r3
  do {
 800f122:	e7cf      	b.n	800f0c4 <sys_check_timeouts+0xc>
      return;
 800f124:	bf00      	nop
 800f126:	e000      	b.n	800f12a <sys_check_timeouts+0x72>
      return;
 800f128:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	2000b761 	.word	0x2000b761
 800f134:	2000b7b4 	.word	0x2000b7b4
 800f138:	2000b7b8 	.word	0x2000b7b8

0800f13c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f140:	f000 fce0 	bl	800fb04 <rand>
 800f144:	4603      	mov	r3, r0
 800f146:	b29b      	uxth	r3, r3
 800f148:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f152:	b29a      	uxth	r2, r3
 800f154:	4b01      	ldr	r3, [pc, #4]	@ (800f15c <udp_init+0x20>)
 800f156:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f158:	bf00      	nop
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	20000028 	.word	0x20000028

0800f160 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	4613      	mov	r3, r2
 800f16c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d105      	bne.n	800f180 <udp_input_local_match+0x20>
 800f174:	4b27      	ldr	r3, [pc, #156]	@ (800f214 <udp_input_local_match+0xb4>)
 800f176:	2287      	movs	r2, #135	@ 0x87
 800f178:	4927      	ldr	r1, [pc, #156]	@ (800f218 <udp_input_local_match+0xb8>)
 800f17a:	4828      	ldr	r0, [pc, #160]	@ (800f21c <udp_input_local_match+0xbc>)
 800f17c:	f000 fdc2 	bl	800fd04 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d105      	bne.n	800f192 <udp_input_local_match+0x32>
 800f186:	4b23      	ldr	r3, [pc, #140]	@ (800f214 <udp_input_local_match+0xb4>)
 800f188:	2288      	movs	r2, #136	@ 0x88
 800f18a:	4925      	ldr	r1, [pc, #148]	@ (800f220 <udp_input_local_match+0xc0>)
 800f18c:	4823      	ldr	r0, [pc, #140]	@ (800f21c <udp_input_local_match+0xbc>)
 800f18e:	f000 fdb9 	bl	800fd04 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	7a1b      	ldrb	r3, [r3, #8]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d00b      	beq.n	800f1b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	7a1a      	ldrb	r2, [r3, #8]
 800f19e:	4b21      	ldr	r3, [pc, #132]	@ (800f224 <udp_input_local_match+0xc4>)
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d001      	beq.n	800f1b2 <udp_input_local_match+0x52>
    return 0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	e02b      	b.n	800f20a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f1b2:	79fb      	ldrb	r3, [r7, #7]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d018      	beq.n	800f1ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d013      	beq.n	800f1e6 <udp_input_local_match+0x86>
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00f      	beq.n	800f1e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f1c6:	4b17      	ldr	r3, [pc, #92]	@ (800f224 <udp_input_local_match+0xc4>)
 800f1c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ce:	d00a      	beq.n	800f1e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	4b13      	ldr	r3, [pc, #76]	@ (800f224 <udp_input_local_match+0xc4>)
 800f1d6:	695b      	ldr	r3, [r3, #20]
 800f1d8:	405a      	eors	r2, r3
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	3308      	adds	r3, #8
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d110      	bne.n	800f208 <udp_input_local_match+0xa8>
          return 1;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e00f      	b.n	800f20a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d009      	beq.n	800f204 <udp_input_local_match+0xa4>
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d005      	beq.n	800f204 <udp_input_local_match+0xa4>
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	4b09      	ldr	r3, [pc, #36]	@ (800f224 <udp_input_local_match+0xc4>)
 800f1fe:	695b      	ldr	r3, [r3, #20]
 800f200:	429a      	cmp	r2, r3
 800f202:	d101      	bne.n	800f208 <udp_input_local_match+0xa8>
        return 1;
 800f204:	2301      	movs	r3, #1
 800f206:	e000      	b.n	800f20a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f208:	2300      	movs	r3, #0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	08013984 	.word	0x08013984
 800f218:	080139ec 	.word	0x080139ec
 800f21c:	08013a10 	.word	0x08013a10
 800f220:	08013a38 	.word	0x08013a38
 800f224:	20004e5c 	.word	0x20004e5c

0800f228 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f228:	b590      	push	{r4, r7, lr}
 800f22a:	b08d      	sub	sp, #52	@ 0x34
 800f22c:	af02      	add	r7, sp, #8
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f232:	2300      	movs	r3, #0
 800f234:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d105      	bne.n	800f248 <udp_input+0x20>
 800f23c:	4b7c      	ldr	r3, [pc, #496]	@ (800f430 <udp_input+0x208>)
 800f23e:	22cf      	movs	r2, #207	@ 0xcf
 800f240:	497c      	ldr	r1, [pc, #496]	@ (800f434 <udp_input+0x20c>)
 800f242:	487d      	ldr	r0, [pc, #500]	@ (800f438 <udp_input+0x210>)
 800f244:	f000 fd5e 	bl	800fd04 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d105      	bne.n	800f25a <udp_input+0x32>
 800f24e:	4b78      	ldr	r3, [pc, #480]	@ (800f430 <udp_input+0x208>)
 800f250:	22d0      	movs	r2, #208	@ 0xd0
 800f252:	497a      	ldr	r1, [pc, #488]	@ (800f43c <udp_input+0x214>)
 800f254:	4878      	ldr	r0, [pc, #480]	@ (800f438 <udp_input+0x210>)
 800f256:	f000 fd55 	bl	800fd04 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	895b      	ldrh	r3, [r3, #10]
 800f25e:	2b07      	cmp	r3, #7
 800f260:	d803      	bhi.n	800f26a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f7f9 fb9e 	bl	80089a4 <pbuf_free>
    goto end;
 800f268:	e0de      	b.n	800f428 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f270:	4b73      	ldr	r3, [pc, #460]	@ (800f440 <udp_input+0x218>)
 800f272:	695b      	ldr	r3, [r3, #20]
 800f274:	4a72      	ldr	r2, [pc, #456]	@ (800f440 <udp_input+0x218>)
 800f276:	6812      	ldr	r2, [r2, #0]
 800f278:	4611      	mov	r1, r2
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7f7 f9f8 	bl	8006670 <ip4_addr_isbroadcast_u32>
 800f280:	4603      	mov	r3, r0
 800f282:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	881b      	ldrh	r3, [r3, #0]
 800f288:	b29b      	uxth	r3, r3
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7f5 fd64 	bl	8004d58 <lwip_htons>
 800f290:	4603      	mov	r3, r0
 800f292:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	885b      	ldrh	r3, [r3, #2]
 800f298:	b29b      	uxth	r3, r3
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7f5 fd5c 	bl	8004d58 <lwip_htons>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2b0:	4b64      	ldr	r3, [pc, #400]	@ (800f444 <udp_input+0x21c>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2b6:	e054      	b.n	800f362 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ba:	8a5b      	ldrh	r3, [r3, #18]
 800f2bc:	89fa      	ldrh	r2, [r7, #14]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d14a      	bne.n	800f358 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f2c2:	7cfb      	ldrb	r3, [r7, #19]
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	6839      	ldr	r1, [r7, #0]
 800f2c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f2ca:	f7ff ff49 	bl	800f160 <udp_input_local_match>
 800f2ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d041      	beq.n	800f358 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d6:	7c1b      	ldrb	r3, [r3, #16]
 800f2d8:	f003 0304 	and.w	r3, r3, #4
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d11d      	bne.n	800f31c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d102      	bne.n	800f2ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e8:	61fb      	str	r3, [r7, #28]
 800f2ea:	e017      	b.n	800f31c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f2ec:	7cfb      	ldrb	r3, [r7, #19]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d014      	beq.n	800f31c <udp_input+0xf4>
 800f2f2:	4b53      	ldr	r3, [pc, #332]	@ (800f440 <udp_input+0x218>)
 800f2f4:	695b      	ldr	r3, [r3, #20]
 800f2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2fa:	d10f      	bne.n	800f31c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	3304      	adds	r3, #4
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	429a      	cmp	r2, r3
 800f308:	d008      	beq.n	800f31c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	3304      	adds	r3, #4
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	429a      	cmp	r2, r3
 800f316:	d101      	bne.n	800f31c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f31a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f31e:	8a9b      	ldrh	r3, [r3, #20]
 800f320:	8a3a      	ldrh	r2, [r7, #16]
 800f322:	429a      	cmp	r2, r3
 800f324:	d118      	bne.n	800f358 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f328:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d005      	beq.n	800f33a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f330:	685a      	ldr	r2, [r3, #4]
 800f332:	4b43      	ldr	r3, [pc, #268]	@ (800f440 <udp_input+0x218>)
 800f334:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f336:	429a      	cmp	r2, r3
 800f338:	d10e      	bne.n	800f358 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d014      	beq.n	800f36a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f342:	68da      	ldr	r2, [r3, #12]
 800f344:	6a3b      	ldr	r3, [r7, #32]
 800f346:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f348:	4b3e      	ldr	r3, [pc, #248]	@ (800f444 <udp_input+0x21c>)
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f350:	4a3c      	ldr	r2, [pc, #240]	@ (800f444 <udp_input+0x21c>)
 800f352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f354:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f356:	e008      	b.n	800f36a <udp_input+0x142>
      }
    }

    prev = pcb;
 800f358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f35a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	627b      	str	r3, [r7, #36]	@ 0x24
 800f362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f364:	2b00      	cmp	r3, #0
 800f366:	d1a7      	bne.n	800f2b8 <udp_input+0x90>
 800f368:	e000      	b.n	800f36c <udp_input+0x144>
        break;
 800f36a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d101      	bne.n	800f376 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d002      	beq.n	800f382 <udp_input+0x15a>
    for_us = 1;
 800f37c:	2301      	movs	r3, #1
 800f37e:	76fb      	strb	r3, [r7, #27]
 800f380:	e00a      	b.n	800f398 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	3304      	adds	r3, #4
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	4b2d      	ldr	r3, [pc, #180]	@ (800f440 <udp_input+0x218>)
 800f38a:	695b      	ldr	r3, [r3, #20]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	bf0c      	ite	eq
 800f390:	2301      	moveq	r3, #1
 800f392:	2300      	movne	r3, #0
 800f394:	b2db      	uxtb	r3, r3
 800f396:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f398:	7efb      	ldrb	r3, [r7, #27]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d041      	beq.n	800f422 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f39e:	2108      	movs	r1, #8
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7f9 fa79 	bl	8008898 <pbuf_remove_header>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d00a      	beq.n	800f3c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f3ac:	4b20      	ldr	r3, [pc, #128]	@ (800f430 <udp_input+0x208>)
 800f3ae:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f3b2:	4925      	ldr	r1, [pc, #148]	@ (800f448 <udp_input+0x220>)
 800f3b4:	4820      	ldr	r0, [pc, #128]	@ (800f438 <udp_input+0x210>)
 800f3b6:	f000 fca5 	bl	800fd04 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7f9 faf2 	bl	80089a4 <pbuf_free>
      goto end;
 800f3c0:	e032      	b.n	800f428 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d012      	beq.n	800f3ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ca:	699b      	ldr	r3, [r3, #24]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d00a      	beq.n	800f3e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d2:	699c      	ldr	r4, [r3, #24]
 800f3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d6:	69d8      	ldr	r0, [r3, #28]
 800f3d8:	8a3b      	ldrh	r3, [r7, #16]
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	4b1b      	ldr	r3, [pc, #108]	@ (800f44c <udp_input+0x224>)
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f3e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f3e4:	e021      	b.n	800f42a <udp_input+0x202>
        pbuf_free(p);
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7f9 fadc 	bl	80089a4 <pbuf_free>
        goto end;
 800f3ec:	e01c      	b.n	800f428 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f3ee:	7cfb      	ldrb	r3, [r7, #19]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d112      	bne.n	800f41a <udp_input+0x1f2>
 800f3f4:	4b12      	ldr	r3, [pc, #72]	@ (800f440 <udp_input+0x218>)
 800f3f6:	695b      	ldr	r3, [r3, #20]
 800f3f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f3fc:	2be0      	cmp	r3, #224	@ 0xe0
 800f3fe:	d00c      	beq.n	800f41a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f400:	4b0f      	ldr	r3, [pc, #60]	@ (800f440 <udp_input+0x218>)
 800f402:	899b      	ldrh	r3, [r3, #12]
 800f404:	3308      	adds	r3, #8
 800f406:	b29b      	uxth	r3, r3
 800f408:	b21b      	sxth	r3, r3
 800f40a:	4619      	mov	r1, r3
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7f9 fab6 	bl	800897e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f412:	2103      	movs	r1, #3
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f7f6 fdf5 	bl	8006004 <icmp_dest_unreach>
      pbuf_free(p);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7f9 fac2 	bl	80089a4 <pbuf_free>
  return;
 800f420:	e003      	b.n	800f42a <udp_input+0x202>
    pbuf_free(p);
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f7f9 fabe 	bl	80089a4 <pbuf_free>
  return;
 800f428:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f42a:	372c      	adds	r7, #44	@ 0x2c
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd90      	pop	{r4, r7, pc}
 800f430:	08013984 	.word	0x08013984
 800f434:	08013a60 	.word	0x08013a60
 800f438:	08013a10 	.word	0x08013a10
 800f43c:	08013a78 	.word	0x08013a78
 800f440:	20004e5c 	.word	0x20004e5c
 800f444:	2000b7c0 	.word	0x2000b7c0
 800f448:	08013a94 	.word	0x08013a94
 800f44c:	20004e6c 	.word	0x20004e6c

0800f450 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f450:	b480      	push	{r7}
 800f452:	b085      	sub	sp, #20
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d01e      	beq.n	800f49e <udp_netif_ip_addr_changed+0x4e>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d01a      	beq.n	800f49e <udp_netif_ip_addr_changed+0x4e>
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d017      	beq.n	800f49e <udp_netif_ip_addr_changed+0x4e>
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d013      	beq.n	800f49e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f476:	4b0d      	ldr	r3, [pc, #52]	@ (800f4ac <udp_netif_ip_addr_changed+0x5c>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	60fb      	str	r3, [r7, #12]
 800f47c:	e00c      	b.n	800f498 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	429a      	cmp	r2, r3
 800f488:	d103      	bne.n	800f492 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	60fb      	str	r3, [r7, #12]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d1ef      	bne.n	800f47e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f49e:	bf00      	nop
 800f4a0:	3714      	adds	r7, #20
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	2000b7c0 	.word	0x2000b7c0

0800f4b0 <tcp_client_connect>:

    DEBUG_INFO("TCP Client initialized. Server: %s:%d\r\n", TCP_SERVER_IP, TCP_SERVER_PORT);
}

/* Connect to TCP server */
void tcp_client_connect(void){
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
    err_t err;

    if (client_state != TCP_STATE_DISCONNECTED) {
 800f4b6:	4b2d      	ldr	r3, [pc, #180]	@ (800f56c <tcp_client_connect+0xbc>)
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d151      	bne.n	800f562 <tcp_client_connect+0xb2>
        return;
    }

    /* Create new TCP PCB */
    client_pcb = tcp_new();
 800f4be:	f7fb f877 	bl	800a5b0 <tcp_new>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	4a2a      	ldr	r2, [pc, #168]	@ (800f570 <tcp_client_connect+0xc0>)
 800f4c6:	6013      	str	r3, [r2, #0]
    if (client_pcb == NULL) {
 800f4c8:	4b29      	ldr	r3, [pc, #164]	@ (800f570 <tcp_client_connect+0xc0>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d107      	bne.n	800f4e0 <tcp_client_connect+0x30>
        DEBUG_INFO("Error: Failed to create PCB\r\n");
 800f4d0:	4928      	ldr	r1, [pc, #160]	@ (800f574 <tcp_client_connect+0xc4>)
 800f4d2:	2002      	movs	r0, #2
 800f4d4:	f000 fa8c 	bl	800f9f0 <uart_debug_print>
        client_state = TCP_STATE_ERROR;
 800f4d8:	4b24      	ldr	r3, [pc, #144]	@ (800f56c <tcp_client_connect+0xbc>)
 800f4da:	2203      	movs	r2, #3
 800f4dc:	701a      	strb	r2, [r3, #0]
        return;
 800f4de:	e041      	b.n	800f564 <tcp_client_connect+0xb4>
    }

    /* Set callbacks */
    tcp_arg(client_pcb, NULL);
 800f4e0:	4b23      	ldr	r3, [pc, #140]	@ (800f570 <tcp_client_connect+0xc0>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fb f86a 	bl	800a5c0 <tcp_arg>
    tcp_recv(client_pcb, tcp_client_recv);
 800f4ec:	4b20      	ldr	r3, [pc, #128]	@ (800f570 <tcp_client_connect+0xc0>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4921      	ldr	r1, [pc, #132]	@ (800f578 <tcp_client_connect+0xc8>)
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fb f876 	bl	800a5e4 <tcp_recv>
    tcp_err(client_pcb, tcp_client_error);
 800f4f8:	4b1d      	ldr	r3, [pc, #116]	@ (800f570 <tcp_client_connect+0xc0>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	491f      	ldr	r1, [pc, #124]	@ (800f57c <tcp_client_connect+0xcc>)
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7fb f8b4 	bl	800a66c <tcp_err>
    tcp_sent(client_pcb, tcp_client_sent);
 800f504:	4b1a      	ldr	r3, [pc, #104]	@ (800f570 <tcp_client_connect+0xc0>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	491d      	ldr	r1, [pc, #116]	@ (800f580 <tcp_client_connect+0xd0>)
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7fb f88c 	bl	800a628 <tcp_sent>

    /* Connect to server */
    client_state = TCP_STATE_CONNECTING;
 800f510:	4b16      	ldr	r3, [pc, #88]	@ (800f56c <tcp_client_connect+0xbc>)
 800f512:	2201      	movs	r2, #1
 800f514:	701a      	strb	r2, [r3, #0]
    err = tcp_connect(client_pcb, &server_ip, TCP_SERVER_PORT, tcp_client_connected);
 800f516:	4b16      	ldr	r3, [pc, #88]	@ (800f570 <tcp_client_connect+0xc0>)
 800f518:	6818      	ldr	r0, [r3, #0]
 800f51a:	4b1a      	ldr	r3, [pc, #104]	@ (800f584 <tcp_client_connect+0xd4>)
 800f51c:	f241 328d 	movw	r2, #5005	@ 0x138d
 800f520:	4919      	ldr	r1, [pc, #100]	@ (800f588 <tcp_client_connect+0xd8>)
 800f522:	f7fa f907 	bl	8009734 <tcp_connect>
 800f526:	4603      	mov	r3, r0
 800f528:	71fb      	strb	r3, [r7, #7]

    if (err != ERR_OK) {
 800f52a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d012      	beq.n	800f558 <tcp_client_connect+0xa8>
        DEBUG_INFO("Error: Connection failed (%d)\r\n", err);
 800f532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f536:	461a      	mov	r2, r3
 800f538:	4914      	ldr	r1, [pc, #80]	@ (800f58c <tcp_client_connect+0xdc>)
 800f53a:	2002      	movs	r0, #2
 800f53c:	f000 fa58 	bl	800f9f0 <uart_debug_print>
        tcp_close(client_pcb);
 800f540:	4b0b      	ldr	r3, [pc, #44]	@ (800f570 <tcp_client_connect+0xc0>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4618      	mov	r0, r3
 800f546:	f7f9 ff0b 	bl	8009360 <tcp_close>
        client_pcb = NULL;
 800f54a:	4b09      	ldr	r3, [pc, #36]	@ (800f570 <tcp_client_connect+0xc0>)
 800f54c:	2200      	movs	r2, #0
 800f54e:	601a      	str	r2, [r3, #0]
        client_state = TCP_STATE_ERROR;
 800f550:	4b06      	ldr	r3, [pc, #24]	@ (800f56c <tcp_client_connect+0xbc>)
 800f552:	2203      	movs	r2, #3
 800f554:	701a      	strb	r2, [r3, #0]
 800f556:	e005      	b.n	800f564 <tcp_client_connect+0xb4>
    } else {
        DEBUG_INFO("Connecting to server...\r\n");
 800f558:	490d      	ldr	r1, [pc, #52]	@ (800f590 <tcp_client_connect+0xe0>)
 800f55a:	2002      	movs	r0, #2
 800f55c:	f000 fa48 	bl	800f9f0 <uart_debug_print>
 800f560:	e000      	b.n	800f564 <tcp_client_connect+0xb4>
        return;
 800f562:	bf00      	nop
    }
}
 800f564:	3708      	adds	r7, #8
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	2000b7c8 	.word	0x2000b7c8
 800f570:	2000b7c4 	.word	0x2000b7c4
 800f574:	08013d58 	.word	0x08013d58
 800f578:	0800f815 	.word	0x0800f815
 800f57c:	0800f7bd 	.word	0x0800f7bd
 800f580:	0800f7f9 	.word	0x0800f7f9
 800f584:	0800f8e1 	.word	0x0800f8e1
 800f588:	2000b7cc 	.word	0x2000b7cc
 800f58c:	08013d78 	.word	0x08013d78
 800f590:	08013d98 	.word	0x08013d98

0800f594 <tcp_client_disconnect>:

/* Disconnect from server */
void tcp_client_disconnect(void){
 800f594:	b580      	push	{r7, lr}
 800f596:	af00      	add	r7, sp, #0
    if (client_pcb != NULL) {
 800f598:	4b0a      	ldr	r3, [pc, #40]	@ (800f5c4 <tcp_client_disconnect+0x30>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d007      	beq.n	800f5b0 <tcp_client_disconnect+0x1c>
        tcp_close(client_pcb);
 800f5a0:	4b08      	ldr	r3, [pc, #32]	@ (800f5c4 <tcp_client_disconnect+0x30>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7f9 fedb 	bl	8009360 <tcp_close>
        client_pcb = NULL;
 800f5aa:	4b06      	ldr	r3, [pc, #24]	@ (800f5c4 <tcp_client_disconnect+0x30>)
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	601a      	str	r2, [r3, #0]
    }
    client_state = TCP_STATE_DISCONNECTED;
 800f5b0:	4b05      	ldr	r3, [pc, #20]	@ (800f5c8 <tcp_client_disconnect+0x34>)
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	701a      	strb	r2, [r3, #0]
    DEBUG_INFO("Disconnected\r\n");
 800f5b6:	4905      	ldr	r1, [pc, #20]	@ (800f5cc <tcp_client_disconnect+0x38>)
 800f5b8:	2002      	movs	r0, #2
 800f5ba:	f000 fa19 	bl	800f9f0 <uart_debug_print>
}
 800f5be:	bf00      	nop
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	2000b7c4 	.word	0x2000b7c4
 800f5c8:	2000b7c8 	.word	0x2000b7c8
 800f5cc:	08013db4 	.word	0x08013db4

0800f5d0 <tcp_client_send>:

/* Send data to server */
void tcp_client_send(const char *data, uint16_t len){
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	807b      	strh	r3, [r7, #2]
    err_t err;

    if (client_state != TCP_STATE_CONNECTED || client_pcb == NULL) {
 800f5dc:	4b1b      	ldr	r3, [pc, #108]	@ (800f64c <tcp_client_send+0x7c>)
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	2b02      	cmp	r3, #2
 800f5e2:	d103      	bne.n	800f5ec <tcp_client_send+0x1c>
 800f5e4:	4b1a      	ldr	r3, [pc, #104]	@ (800f650 <tcp_client_send+0x80>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d104      	bne.n	800f5f6 <tcp_client_send+0x26>
        DEBUG_INFO("Error: Not connected\r\n");
 800f5ec:	4919      	ldr	r1, [pc, #100]	@ (800f654 <tcp_client_send+0x84>)
 800f5ee:	2002      	movs	r0, #2
 800f5f0:	f000 f9fe 	bl	800f9f0 <uart_debug_print>
        return;
 800f5f4:	e026      	b.n	800f644 <tcp_client_send+0x74>
    }

    /* Write data */
    err = tcp_write(client_pcb, data, len, TCP_WRITE_FLAG_COPY);
 800f5f6:	4b16      	ldr	r3, [pc, #88]	@ (800f650 <tcp_client_send+0x80>)
 800f5f8:	6818      	ldr	r0, [r3, #0]
 800f5fa:	887a      	ldrh	r2, [r7, #2]
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	6879      	ldr	r1, [r7, #4]
 800f600:	f7fd fef2 	bl	800d3e8 <tcp_write>
 800f604:	4603      	mov	r3, r0
 800f606:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d112      	bne.n	800f636 <tcp_client_send+0x66>
        /* Flush the data */
        err = tcp_output(client_pcb);
 800f610:	4b0f      	ldr	r3, [pc, #60]	@ (800f650 <tcp_client_send+0x80>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4618      	mov	r0, r3
 800f616:	f7fe fcd1 	bl	800dfbc <tcp_output>
 800f61a:	4603      	mov	r3, r0
 800f61c:	73fb      	strb	r3, [r7, #15]
        if (err != ERR_OK) {
 800f61e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d00e      	beq.n	800f644 <tcp_client_send+0x74>
            DEBUG_INFO("Error: tcp_output failed (%d)\r\n", err);
 800f626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f62a:	461a      	mov	r2, r3
 800f62c:	490a      	ldr	r1, [pc, #40]	@ (800f658 <tcp_client_send+0x88>)
 800f62e:	2002      	movs	r0, #2
 800f630:	f000 f9de 	bl	800f9f0 <uart_debug_print>
 800f634:	e006      	b.n	800f644 <tcp_client_send+0x74>
        }
    } else {
        DEBUG_INFO("Error: tcp_write failed (%d)\r\n", err);
 800f636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f63a:	461a      	mov	r2, r3
 800f63c:	4907      	ldr	r1, [pc, #28]	@ (800f65c <tcp_client_send+0x8c>)
 800f63e:	2002      	movs	r0, #2
 800f640:	f000 f9d6 	bl	800f9f0 <uart_debug_print>
    }
}
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	2000b7c8 	.word	0x2000b7c8
 800f650:	2000b7c4 	.word	0x2000b7c4
 800f654:	08013dc4 	.word	0x08013dc4
 800f658:	08013ddc 	.word	0x08013ddc
 800f65c:	08013dfc 	.word	0x08013dfc

0800f660 <tcp_client_process>:

/* Process TCP client (call from main loop) */
void tcp_client_process(void){
 800f660:	b580      	push	{r7, lr}
 800f662:	af00      	add	r7, sp, #0
    /* Auto-reconnect logic */
    if (client_state == TCP_STATE_ERROR || client_state == TCP_STATE_DISCONNECTED) {
 800f664:	4b0d      	ldr	r3, [pc, #52]	@ (800f69c <tcp_client_process+0x3c>)
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	2b03      	cmp	r3, #3
 800f66a:	d003      	beq.n	800f674 <tcp_client_process+0x14>
 800f66c:	4b0b      	ldr	r3, [pc, #44]	@ (800f69c <tcp_client_process+0x3c>)
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d110      	bne.n	800f696 <tcp_client_process+0x36>
        if (HAL_GetTick() - reconnect_timer > 3000) {  /* 3 second delay */
 800f674:	f7f1 fc20 	bl	8000eb8 <HAL_GetTick>
 800f678:	4602      	mov	r2, r0
 800f67a:	4b09      	ldr	r3, [pc, #36]	@ (800f6a0 <tcp_client_process+0x40>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f684:	4293      	cmp	r3, r2
 800f686:	d906      	bls.n	800f696 <tcp_client_process+0x36>
            reconnect_timer = HAL_GetTick();
 800f688:	f7f1 fc16 	bl	8000eb8 <HAL_GetTick>
 800f68c:	4603      	mov	r3, r0
 800f68e:	4a04      	ldr	r2, [pc, #16]	@ (800f6a0 <tcp_client_process+0x40>)
 800f690:	6013      	str	r3, [r2, #0]
            tcp_client_connect();
 800f692:	f7ff ff0d 	bl	800f4b0 <tcp_client_connect>
        }
    }
}
 800f696:	bf00      	nop
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	2000b7c8 	.word	0x2000b7c8
 800f6a0:	2000b7d0 	.word	0x2000b7d0

0800f6a4 <tcp_client_get_state>:

/* Get current connection state */
tcp_client_state_t tcp_client_get_state(void){
 800f6a4:	b480      	push	{r7}
 800f6a6:	af00      	add	r7, sp, #0
    return client_state;
 800f6a8:	4b03      	ldr	r3, [pc, #12]	@ (800f6b8 <tcp_client_get_state+0x14>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr
 800f6b6:	bf00      	nop
 800f6b8:	2000b7c8 	.word	0x2000b7c8

0800f6bc <tcp_client_read_string>:

/* Read string from receive buffer */
int tcp_client_read_string(char *buffer, uint16_t max_len){
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	807b      	strh	r3, [r7, #2]
    uint16_t i = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	81fb      	strh	r3, [r7, #14]
    uint16_t tail = rx_tail;
 800f6cc:	4b26      	ldr	r3, [pc, #152]	@ (800f768 <tcp_client_read_string+0xac>)
 800f6ce:	881b      	ldrh	r3, [r3, #0]
 800f6d0:	81bb      	strh	r3, [r7, #12]

    if (buffer == NULL || max_len == 0) {
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d002      	beq.n	800f6de <tcp_client_read_string+0x22>
 800f6d8:	887b      	ldrh	r3, [r7, #2]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d102      	bne.n	800f6e4 <tcp_client_read_string+0x28>
        return -1;
 800f6de:	f04f 33ff 	mov.w	r3, #4294967295
 800f6e2:	e03c      	b.n	800f75e <tcp_client_read_string+0xa2>
    }

    /* Clear the output buffer */
    memset(buffer, 0, max_len);
 800f6e4:	887b      	ldrh	r3, [r7, #2]
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f000 fbfc 	bl	800fee8 <memset>

    /* Check if data available */
    if (tail == rx_head) {
 800f6f0:	4b1e      	ldr	r3, [pc, #120]	@ (800f76c <tcp_client_read_string+0xb0>)
 800f6f2:	881b      	ldrh	r3, [r3, #0]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	89ba      	ldrh	r2, [r7, #12]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d11a      	bne.n	800f732 <tcp_client_read_string+0x76>
        return 0;  /* No data available */
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	e02e      	b.n	800f75e <tcp_client_read_string+0xa2>
    }

    /* Read until newline, buffer full, or no more data */
    while (i < (max_len - 1) && tail != rx_head) {
        char c = rx_buffer[tail];
 800f700:	89bb      	ldrh	r3, [r7, #12]
 800f702:	4a1b      	ldr	r2, [pc, #108]	@ (800f770 <tcp_client_read_string+0xb4>)
 800f704:	5cd3      	ldrb	r3, [r2, r3]
 800f706:	72fb      	strb	r3, [r7, #11]
        buffer[i++] = c;
 800f708:	89fb      	ldrh	r3, [r7, #14]
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	81fa      	strh	r2, [r7, #14]
 800f70e:	461a      	mov	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4413      	add	r3, r2
 800f714:	7afa      	ldrb	r2, [r7, #11]
 800f716:	701a      	strb	r2, [r3, #0]

        /* Update tail position */
        tail = (tail + 1) % TCP_RX_BUFFER_SIZE;
 800f718:	89bb      	ldrh	r3, [r7, #12]
 800f71a:	3301      	adds	r3, #1
 800f71c:	425a      	negs	r2, r3
 800f71e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f722:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f726:	bf58      	it	pl
 800f728:	4253      	negpl	r3, r2
 800f72a:	81bb      	strh	r3, [r7, #12]

        /* Stop at newline */
        if (c == '\n') {
 800f72c:	7afb      	ldrb	r3, [r7, #11]
 800f72e:	2b0a      	cmp	r3, #10
 800f730:	d00b      	beq.n	800f74a <tcp_client_read_string+0x8e>
    while (i < (max_len - 1) && tail != rx_head) {
 800f732:	89fa      	ldrh	r2, [r7, #14]
 800f734:	887b      	ldrh	r3, [r7, #2]
 800f736:	3b01      	subs	r3, #1
 800f738:	429a      	cmp	r2, r3
 800f73a:	da07      	bge.n	800f74c <tcp_client_read_string+0x90>
 800f73c:	4b0b      	ldr	r3, [pc, #44]	@ (800f76c <tcp_client_read_string+0xb0>)
 800f73e:	881b      	ldrh	r3, [r3, #0]
 800f740:	b29b      	uxth	r3, r3
 800f742:	89ba      	ldrh	r2, [r7, #12]
 800f744:	429a      	cmp	r2, r3
 800f746:	d1db      	bne.n	800f700 <tcp_client_read_string+0x44>
 800f748:	e000      	b.n	800f74c <tcp_client_read_string+0x90>
            break;
 800f74a:	bf00      	nop
        }
    }

    /* Update the actual tail position */
    rx_tail = tail;
 800f74c:	4a06      	ldr	r2, [pc, #24]	@ (800f768 <tcp_client_read_string+0xac>)
 800f74e:	89bb      	ldrh	r3, [r7, #12]
 800f750:	8013      	strh	r3, [r2, #0]

    /* Null terminate */
    buffer[i] = '\0';
 800f752:	89fb      	ldrh	r3, [r7, #14]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	4413      	add	r3, r2
 800f758:	2200      	movs	r2, #0
 800f75a:	701a      	strb	r2, [r3, #0]

    return i;  /* Return number of bytes read */
 800f75c:	89fb      	ldrh	r3, [r7, #14]
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	2000bbd6 	.word	0x2000bbd6
 800f76c:	2000bbd4 	.word	0x2000bbd4
 800f770:	2000b7d4 	.word	0x2000b7d4

0800f774 <tcp_client_data_available>:

/* Get number of bytes available in receive buffer */
uint16_t tcp_client_data_available(void){
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
    uint16_t head = rx_head;
 800f77a:	4b0e      	ldr	r3, [pc, #56]	@ (800f7b4 <tcp_client_data_available+0x40>)
 800f77c:	881b      	ldrh	r3, [r3, #0]
 800f77e:	80fb      	strh	r3, [r7, #6]
    uint16_t tail = rx_tail;
 800f780:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b8 <tcp_client_data_available+0x44>)
 800f782:	881b      	ldrh	r3, [r3, #0]
 800f784:	80bb      	strh	r3, [r7, #4]

    if (head >= tail) {
 800f786:	88fa      	ldrh	r2, [r7, #6]
 800f788:	88bb      	ldrh	r3, [r7, #4]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d304      	bcc.n	800f798 <tcp_client_data_available+0x24>
        return head - tail;
 800f78e:	88fa      	ldrh	r2, [r7, #6]
 800f790:	88bb      	ldrh	r3, [r7, #4]
 800f792:	1ad3      	subs	r3, r2, r3
 800f794:	b29b      	uxth	r3, r3
 800f796:	e006      	b.n	800f7a6 <tcp_client_data_available+0x32>
    } else {
        return TCP_RX_BUFFER_SIZE - tail + head;
 800f798:	88fa      	ldrh	r2, [r7, #6]
 800f79a:	88bb      	ldrh	r3, [r7, #4]
 800f79c:	1ad3      	subs	r3, r2, r3
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f7a4:	b29b      	uxth	r3, r3
    }
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	2000bbd4 	.word	0x2000bbd4
 800f7b8:	2000bbd6 	.word	0x2000bbd6

0800f7bc <tcp_client_error>:

/* Callback: Error occurred */
static void tcp_client_error(void *arg, err_t err){
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	70fb      	strb	r3, [r7, #3]
    DEBUG_INFO("TCP Error: %d\r\n", err);
 800f7c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	4907      	ldr	r1, [pc, #28]	@ (800f7ec <tcp_client_error+0x30>)
 800f7d0:	2002      	movs	r0, #2
 800f7d2:	f000 f90d 	bl	800f9f0 <uart_debug_print>
    client_pcb = NULL;  /* PCB is already freed by LwIP */
 800f7d6:	4b06      	ldr	r3, [pc, #24]	@ (800f7f0 <tcp_client_error+0x34>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	601a      	str	r2, [r3, #0]
    client_state = TCP_STATE_ERROR;
 800f7dc:	4b05      	ldr	r3, [pc, #20]	@ (800f7f4 <tcp_client_error+0x38>)
 800f7de:	2203      	movs	r2, #3
 800f7e0:	701a      	strb	r2, [r3, #0]
}
 800f7e2:	bf00      	nop
 800f7e4:	3708      	adds	r7, #8
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	08013e1c 	.word	0x08013e1c
 800f7f0:	2000b7c4 	.word	0x2000b7c4
 800f7f4:	2000b7c8 	.word	0x2000b7c8

0800f7f8 <tcp_client_sent>:

/* Callback: Data sent successfully */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len){
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	4613      	mov	r3, r2
 800f804:	80fb      	strh	r3, [r7, #6]
    /* Data sent successfully */
    return ERR_OK;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3714      	adds	r7, #20
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <tcp_client_recv>:

/* Callback: Data received from server */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err){
 800f814:	b580      	push	{r7, lr}
 800f816:	b088      	sub	sp, #32
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	607a      	str	r2, [r7, #4]
 800f820:	70fb      	strb	r3, [r7, #3]
    if (p != NULL) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d046      	beq.n	800f8b6 <tcp_client_recv+0xa2>
        /* Store received data in circular buffer */
        struct pbuf *q;
        for (q = p; q != NULL; q = q->next) {
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	61fb      	str	r3, [r7, #28]
 800f82c:	e036      	b.n	800f89c <tcp_client_recv+0x88>
            uint8_t *data = (uint8_t *)q->payload;
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	617b      	str	r3, [r7, #20]
            uint16_t len = q->len;
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	895b      	ldrh	r3, [r3, #10]
 800f838:	827b      	strh	r3, [r7, #18]

            for (uint16_t i = 0; i < len; i++) {
 800f83a:	2300      	movs	r3, #0
 800f83c:	837b      	strh	r3, [r7, #26]
 800f83e:	e026      	b.n	800f88e <tcp_client_recv+0x7a>
                uint16_t next_head = (rx_head + 1) % TCP_RX_BUFFER_SIZE;
 800f840:	4b22      	ldr	r3, [pc, #136]	@ (800f8cc <tcp_client_recv+0xb8>)
 800f842:	881b      	ldrh	r3, [r3, #0]
 800f844:	b29b      	uxth	r3, r3
 800f846:	3301      	adds	r3, #1
 800f848:	425a      	negs	r2, r3
 800f84a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f84e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f852:	bf58      	it	pl
 800f854:	4253      	negpl	r3, r2
 800f856:	823b      	strh	r3, [r7, #16]

                if (next_head != rx_tail) {
 800f858:	4b1d      	ldr	r3, [pc, #116]	@ (800f8d0 <tcp_client_recv+0xbc>)
 800f85a:	881b      	ldrh	r3, [r3, #0]
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	8a3a      	ldrh	r2, [r7, #16]
 800f860:	429a      	cmp	r2, r3
 800f862:	d00c      	beq.n	800f87e <tcp_client_recv+0x6a>
                    rx_buffer[rx_head] = data[i];
 800f864:	8b7b      	ldrh	r3, [r7, #26]
 800f866:	697a      	ldr	r2, [r7, #20]
 800f868:	4413      	add	r3, r2
 800f86a:	4a18      	ldr	r2, [pc, #96]	@ (800f8cc <tcp_client_recv+0xb8>)
 800f86c:	8812      	ldrh	r2, [r2, #0]
 800f86e:	b292      	uxth	r2, r2
 800f870:	7819      	ldrb	r1, [r3, #0]
 800f872:	4b18      	ldr	r3, [pc, #96]	@ (800f8d4 <tcp_client_recv+0xc0>)
 800f874:	5499      	strb	r1, [r3, r2]
                    rx_head = next_head;
 800f876:	4a15      	ldr	r2, [pc, #84]	@ (800f8cc <tcp_client_recv+0xb8>)
 800f878:	8a3b      	ldrh	r3, [r7, #16]
 800f87a:	8013      	strh	r3, [r2, #0]
 800f87c:	e004      	b.n	800f888 <tcp_client_recv+0x74>
                } else {
                    DEBUG_INFO("RX buffer overflow!\r\n");
 800f87e:	4916      	ldr	r1, [pc, #88]	@ (800f8d8 <tcp_client_recv+0xc4>)
 800f880:	2002      	movs	r0, #2
 800f882:	f000 f8b5 	bl	800f9f0 <uart_debug_print>
                    break;
 800f886:	e006      	b.n	800f896 <tcp_client_recv+0x82>
            for (uint16_t i = 0; i < len; i++) {
 800f888:	8b7b      	ldrh	r3, [r7, #26]
 800f88a:	3301      	adds	r3, #1
 800f88c:	837b      	strh	r3, [r7, #26]
 800f88e:	8b7a      	ldrh	r2, [r7, #26]
 800f890:	8a7b      	ldrh	r3, [r7, #18]
 800f892:	429a      	cmp	r2, r3
 800f894:	d3d4      	bcc.n	800f840 <tcp_client_recv+0x2c>
        for (q = p; q != NULL; q = q->next) {
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	61fb      	str	r3, [r7, #28]
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d1c5      	bne.n	800f82e <tcp_client_recv+0x1a>
                }
            }
        }

        /* Free the buffer */
        tcp_recved(tpcb, p->tot_len);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	891b      	ldrh	r3, [r3, #8]
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	68b8      	ldr	r0, [r7, #8]
 800f8aa:	f7f9 feab 	bl	8009604 <tcp_recved>
        pbuf_free(p);
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f7f9 f878 	bl	80089a4 <pbuf_free>
 800f8b4:	e005      	b.n	800f8c2 <tcp_client_recv+0xae>
    } else {
        /* Connection closed by server */
        DEBUG_INFO("Server closed connection\r\n");
 800f8b6:	4909      	ldr	r1, [pc, #36]	@ (800f8dc <tcp_client_recv+0xc8>)
 800f8b8:	2002      	movs	r0, #2
 800f8ba:	f000 f899 	bl	800f9f0 <uart_debug_print>
        tcp_client_disconnect();
 800f8be:	f7ff fe69 	bl	800f594 <tcp_client_disconnect>
    }

    return ERR_OK;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3720      	adds	r7, #32
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	2000bbd4 	.word	0x2000bbd4
 800f8d0:	2000bbd6 	.word	0x2000bbd6
 800f8d4:	2000b7d4 	.word	0x2000b7d4
 800f8d8:	08013e2c 	.word	0x08013e2c
 800f8dc:	08013e44 	.word	0x08013e44

0800f8e0 <tcp_client_connected>:

/* Callback: Connected */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err){
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b086      	sub	sp, #24
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK) {
 800f8ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d112      	bne.n	800f91c <tcp_client_connected+0x3c>
        client_state = TCP_STATE_CONNECTED;
 800f8f6:	4b11      	ldr	r3, [pc, #68]	@ (800f93c <tcp_client_connected+0x5c>)
 800f8f8:	2202      	movs	r2, #2
 800f8fa:	701a      	strb	r2, [r3, #0]
        DEBUG_INFO("Connected to server!\r\n");
 800f8fc:	4910      	ldr	r1, [pc, #64]	@ (800f940 <tcp_client_connected+0x60>)
 800f8fe:	2002      	movs	r0, #2
 800f900:	f000 f876 	bl	800f9f0 <uart_debug_print>

        /* Send initial message (optional) */
        const char *msg = "Hello from STM32F746G!\r\n";
 800f904:	4b0f      	ldr	r3, [pc, #60]	@ (800f944 <tcp_client_connected+0x64>)
 800f906:	617b      	str	r3, [r7, #20]
        tcp_client_send(msg, strlen(msg));
 800f908:	6978      	ldr	r0, [r7, #20]
 800f90a:	f7f0 fc81 	bl	8000210 <strlen>
 800f90e:	4603      	mov	r3, r0
 800f910:	b29b      	uxth	r3, r3
 800f912:	4619      	mov	r1, r3
 800f914:	6978      	ldr	r0, [r7, #20]
 800f916:	f7ff fe5b 	bl	800f5d0 <tcp_client_send>
 800f91a:	e009      	b.n	800f930 <tcp_client_connected+0x50>

    } else {
        DEBUG_INFO("Connection failed: %d\r\n", err);
 800f91c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f920:	461a      	mov	r2, r3
 800f922:	4909      	ldr	r1, [pc, #36]	@ (800f948 <tcp_client_connected+0x68>)
 800f924:	2002      	movs	r0, #2
 800f926:	f000 f863 	bl	800f9f0 <uart_debug_print>
        client_state = TCP_STATE_ERROR;
 800f92a:	4b04      	ldr	r3, [pc, #16]	@ (800f93c <tcp_client_connected+0x5c>)
 800f92c:	2203      	movs	r2, #3
 800f92e:	701a      	strb	r2, [r3, #0]
    }

    return ERR_OK;
 800f930:	2300      	movs	r3, #0
}
 800f932:	4618      	mov	r0, r3
 800f934:	3718      	adds	r7, #24
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	2000b7c8 	.word	0x2000b7c8
 800f940:	08013e60 	.word	0x08013e60
 800f944:	08013e78 	.word	0x08013e78
 800f948:	08013e94 	.word	0x08013e94

0800f94c <app_ethernet_process>:
    DEBUG_INFO("Ethernet initialized\r\n");
    DEBUG_INFO("IP: %s\r\n", ip4addr_ntoa(&gnetif.ip_addr));
}

/* Process Ethernet link status */
void app_ethernet_process(void){
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
    uint32_t phyreg = 0;
 800f952:	2300      	movs	r3, #0
 800f954:	607b      	str	r3, [r7, #4]

    /* Check link status every 1 second */
    if (HAL_GetTick() - link_timer < 1000) {
 800f956:	f7f1 faaf 	bl	8000eb8 <HAL_GetTick>
 800f95a:	4602      	mov	r2, r0
 800f95c:	4b1e      	ldr	r3, [pc, #120]	@ (800f9d8 <app_ethernet_process+0x8c>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	1ad3      	subs	r3, r2, r3
 800f962:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f966:	d332      	bcc.n	800f9ce <app_ethernet_process+0x82>
        return;
    }
    link_timer = HAL_GetTick();
 800f968:	f7f1 faa6 	bl	8000eb8 <HAL_GetTick>
 800f96c:	4603      	mov	r3, r0
 800f96e:	4a1a      	ldr	r2, [pc, #104]	@ (800f9d8 <app_ethernet_process+0x8c>)
 800f970:	6013      	str	r3, [r2, #0]

    /* Read PHY status register */
    HAL_ETH_ReadPHYRegister(&heth, PHY_ADDRESS, PHY_BSR, &phyreg);
 800f972:	1d3b      	adds	r3, r7, #4
 800f974:	2201      	movs	r2, #1
 800f976:	2100      	movs	r1, #0
 800f978:	4818      	ldr	r0, [pc, #96]	@ (800f9dc <app_ethernet_process+0x90>)
 800f97a:	f7f1 ff55 	bl	8001828 <HAL_ETH_ReadPHYRegister>

    /* Check link status */
    if ((phyreg & PHY_LINKED_STATUS) && (eth_link_state == ETH_LINK_DOWN)) {
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f003 0304 	and.w	r3, r3, #4
 800f984:	2b00      	cmp	r3, #0
 800f986:	d00e      	beq.n	800f9a6 <app_ethernet_process+0x5a>
 800f988:	4b15      	ldr	r3, [pc, #84]	@ (800f9e0 <app_ethernet_process+0x94>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d10a      	bne.n	800f9a6 <app_ethernet_process+0x5a>
        /* Link is up */
        eth_link_state = ETH_LINK_UP;
 800f990:	4b13      	ldr	r3, [pc, #76]	@ (800f9e0 <app_ethernet_process+0x94>)
 800f992:	2201      	movs	r2, #1
 800f994:	701a      	strb	r2, [r3, #0]
        netif_set_link_up(&gnetif);
 800f996:	4813      	ldr	r0, [pc, #76]	@ (800f9e4 <app_ethernet_process+0x98>)
 800f998:	f7f8 fc1c 	bl	80081d4 <netif_set_link_up>
        DEBUG_INFO("Ethernet Link: UP\r\n");
 800f99c:	4912      	ldr	r1, [pc, #72]	@ (800f9e8 <app_ethernet_process+0x9c>)
 800f99e:	2002      	movs	r0, #2
 800f9a0:	f000 f826 	bl	800f9f0 <uart_debug_print>
 800f9a4:	e014      	b.n	800f9d0 <app_ethernet_process+0x84>

    } else if (!(phyreg & PHY_LINKED_STATUS) && (eth_link_state == ETH_LINK_UP)) {
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f003 0304 	and.w	r3, r3, #4
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d10f      	bne.n	800f9d0 <app_ethernet_process+0x84>
 800f9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800f9e0 <app_ethernet_process+0x94>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	d10b      	bne.n	800f9d0 <app_ethernet_process+0x84>
        /* Link is down */
        eth_link_state = ETH_LINK_DOWN;
 800f9b8:	4b09      	ldr	r3, [pc, #36]	@ (800f9e0 <app_ethernet_process+0x94>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	701a      	strb	r2, [r3, #0]
        netif_set_link_down(&gnetif);
 800f9be:	4809      	ldr	r0, [pc, #36]	@ (800f9e4 <app_ethernet_process+0x98>)
 800f9c0:	f7f8 fc3c 	bl	800823c <netif_set_link_down>
        DEBUG_INFO("Ethernet Link: DOWN\r\n");
 800f9c4:	4909      	ldr	r1, [pc, #36]	@ (800f9ec <app_ethernet_process+0xa0>)
 800f9c6:	2002      	movs	r0, #2
 800f9c8:	f000 f812 	bl	800f9f0 <uart_debug_print>
 800f9cc:	e000      	b.n	800f9d0 <app_ethernet_process+0x84>
        return;
 800f9ce:	bf00      	nop
    }
}
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	2000bbdc 	.word	0x2000bbdc
 800f9dc:	20004c60 	.word	0x20004c60
 800f9e0:	2000bbd8 	.word	0x2000bbd8
 800f9e4:	20000288 	.word	0x20000288
 800f9e8:	08013ed0 	.word	0x08013ed0
 800f9ec:	08013ee4 	.word	0x08013ee4

0800f9f0 <uart_debug_print>:
    uart_debug_print(DEBUG_LEVEL_INFO, "Build: %s %s\r\n", __DATE__, __TIME__);
    uart_debug_print(DEBUG_LEVEL_INFO, "=====================================\r\n");
}

/* Print debug message with level */
void uart_debug_print(debug_level_t level, const char *format, ...){
 800f9f0:	b40e      	push	{r1, r2, r3}
 800f9f2:	b580      	push	{r7, lr}
 800f9f4:	b0c9      	sub	sp, #292	@ 0x124
 800f9f6:	af02      	add	r7, sp, #8
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f9fe:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800fa02:	701a      	strb	r2, [r3, #0]
    if (level > current_debug_level) {
 800fa04:	4b30      	ldr	r3, [pc, #192]	@ (800fac8 <uart_debug_print+0xd8>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800fa0c:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 800fa10:	7812      	ldrb	r2, [r2, #0]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d84f      	bhi.n	800fab6 <uart_debug_print+0xc6>

    char buffer[256];
    va_list args;

    /* Add timestamp in milliseconds */
    uint32_t tick = HAL_GetTick();
 800fa16:	f7f1 fa4f 	bl	8000eb8 <HAL_GetTick>
 800fa1a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    int len = snprintf(buffer, sizeof(buffer), "[%7lu.%03lu] %s ",
 800fa1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa22:	4a2a      	ldr	r2, [pc, #168]	@ (800facc <uart_debug_print+0xdc>)
 800fa24:	fba2 2303 	umull	r2, r3, r2, r3
 800fa28:	0999      	lsrs	r1, r3, #6
 800fa2a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800fa2e:	4b27      	ldr	r3, [pc, #156]	@ (800facc <uart_debug_print+0xdc>)
 800fa30:	fba3 0302 	umull	r0, r3, r3, r2
 800fa34:	099b      	lsrs	r3, r3, #6
 800fa36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fa3a:	fb00 f303 	mul.w	r3, r0, r3
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800fa44:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 800fa48:	7812      	ldrb	r2, [r2, #0]
 800fa4a:	4821      	ldr	r0, [pc, #132]	@ (800fad0 <uart_debug_print+0xe0>)
 800fa4c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800fa50:	f107 0010 	add.w	r0, r7, #16
 800fa54:	9201      	str	r2, [sp, #4]
 800fa56:	9300      	str	r3, [sp, #0]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	4a1e      	ldr	r2, [pc, #120]	@ (800fad4 <uart_debug_print+0xe4>)
 800fa5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fa60:	f000 f962 	bl	800fd28 <sniprintf>
 800fa64:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
                       tick / 1000, tick % 1000, level_strings[level]);

    /* Add user message */
    va_start(args, format);
 800fa68:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800fa6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800fa70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800fa74:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + len, sizeof(buffer) - len, format, args);
 800fa76:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800fa7a:	f107 0210 	add.w	r2, r7, #16
 800fa7e:	18d0      	adds	r0, r2, r3
 800fa80:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800fa84:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 800fa88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800fa8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800fa96:	f000 f9ef 	bl	800fe78 <vsniprintf>
    va_end(args);

    /* Send to UART */
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 800fa9a:	f107 0310 	add.w	r3, r7, #16
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7f0 fbb6 	bl	8000210 <strlen>
 800faa4:	4603      	mov	r3, r0
 800faa6:	b29a      	uxth	r2, r3
 800faa8:	f107 0110 	add.w	r1, r7, #16
 800faac:	2364      	movs	r3, #100	@ 0x64
 800faae:	480a      	ldr	r0, [pc, #40]	@ (800fad8 <uart_debug_print+0xe8>)
 800fab0:	f7f3 ff86 	bl	80039c0 <HAL_UART_Transmit>
 800fab4:	e000      	b.n	800fab8 <uart_debug_print+0xc8>
        return;
 800fab6:	bf00      	nop
}
 800fab8:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800fabc:	46bd      	mov	sp, r7
 800fabe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fac2:	b003      	add	sp, #12
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	2000002a 	.word	0x2000002a
 800facc:	10624dd3 	.word	0x10624dd3
 800fad0:	2000002c 	.word	0x2000002c
 800fad4:	08013f88 	.word	0x08013f88
 800fad8:	200001f8 	.word	0x200001f8

0800fadc <_write>:

/* Printf redirect to UART */
int _write(int file, char *ptr, int len){
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	b29a      	uxth	r2, r3
 800faec:	2364      	movs	r3, #100	@ 0x64
 800faee:	68b9      	ldr	r1, [r7, #8]
 800faf0:	4803      	ldr	r0, [pc, #12]	@ (800fb00 <_write+0x24>)
 800faf2:	f7f3 ff65 	bl	80039c0 <HAL_UART_Transmit>
    return len;
 800faf6:	687b      	ldr	r3, [r7, #4]
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3710      	adds	r7, #16
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	200001f8 	.word	0x200001f8

0800fb04 <rand>:
 800fb04:	4b16      	ldr	r3, [pc, #88]	@ (800fb60 <rand+0x5c>)
 800fb06:	b510      	push	{r4, lr}
 800fb08:	681c      	ldr	r4, [r3, #0]
 800fb0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb0c:	b9b3      	cbnz	r3, 800fb3c <rand+0x38>
 800fb0e:	2018      	movs	r0, #24
 800fb10:	f000 fad6 	bl	80100c0 <malloc>
 800fb14:	4602      	mov	r2, r0
 800fb16:	6320      	str	r0, [r4, #48]	@ 0x30
 800fb18:	b920      	cbnz	r0, 800fb24 <rand+0x20>
 800fb1a:	4b12      	ldr	r3, [pc, #72]	@ (800fb64 <rand+0x60>)
 800fb1c:	4812      	ldr	r0, [pc, #72]	@ (800fb68 <rand+0x64>)
 800fb1e:	2152      	movs	r1, #82	@ 0x52
 800fb20:	f000 fa66 	bl	800fff0 <__assert_func>
 800fb24:	4911      	ldr	r1, [pc, #68]	@ (800fb6c <rand+0x68>)
 800fb26:	4b12      	ldr	r3, [pc, #72]	@ (800fb70 <rand+0x6c>)
 800fb28:	e9c0 1300 	strd	r1, r3, [r0]
 800fb2c:	4b11      	ldr	r3, [pc, #68]	@ (800fb74 <rand+0x70>)
 800fb2e:	6083      	str	r3, [r0, #8]
 800fb30:	230b      	movs	r3, #11
 800fb32:	8183      	strh	r3, [r0, #12]
 800fb34:	2100      	movs	r1, #0
 800fb36:	2001      	movs	r0, #1
 800fb38:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fb3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fb3e:	480e      	ldr	r0, [pc, #56]	@ (800fb78 <rand+0x74>)
 800fb40:	690b      	ldr	r3, [r1, #16]
 800fb42:	694c      	ldr	r4, [r1, #20]
 800fb44:	4a0d      	ldr	r2, [pc, #52]	@ (800fb7c <rand+0x78>)
 800fb46:	4358      	muls	r0, r3
 800fb48:	fb02 0004 	mla	r0, r2, r4, r0
 800fb4c:	fba3 3202 	umull	r3, r2, r3, r2
 800fb50:	3301      	adds	r3, #1
 800fb52:	eb40 0002 	adc.w	r0, r0, r2
 800fb56:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fb5a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fb5e:	bd10      	pop	{r4, pc}
 800fb60:	20000048 	.word	0x20000048
 800fb64:	080140a4 	.word	0x080140a4
 800fb68:	080140bb 	.word	0x080140bb
 800fb6c:	abcd330e 	.word	0xabcd330e
 800fb70:	e66d1234 	.word	0xe66d1234
 800fb74:	0005deec 	.word	0x0005deec
 800fb78:	5851f42d 	.word	0x5851f42d
 800fb7c:	4c957f2d 	.word	0x4c957f2d

0800fb80 <std>:
 800fb80:	2300      	movs	r3, #0
 800fb82:	b510      	push	{r4, lr}
 800fb84:	4604      	mov	r4, r0
 800fb86:	e9c0 3300 	strd	r3, r3, [r0]
 800fb8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb8e:	6083      	str	r3, [r0, #8]
 800fb90:	8181      	strh	r1, [r0, #12]
 800fb92:	6643      	str	r3, [r0, #100]	@ 0x64
 800fb94:	81c2      	strh	r2, [r0, #14]
 800fb96:	6183      	str	r3, [r0, #24]
 800fb98:	4619      	mov	r1, r3
 800fb9a:	2208      	movs	r2, #8
 800fb9c:	305c      	adds	r0, #92	@ 0x5c
 800fb9e:	f000 f9a3 	bl	800fee8 <memset>
 800fba2:	4b0d      	ldr	r3, [pc, #52]	@ (800fbd8 <std+0x58>)
 800fba4:	6263      	str	r3, [r4, #36]	@ 0x24
 800fba6:	4b0d      	ldr	r3, [pc, #52]	@ (800fbdc <std+0x5c>)
 800fba8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fbaa:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe0 <std+0x60>)
 800fbac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fbae:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe4 <std+0x64>)
 800fbb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800fbb2:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe8 <std+0x68>)
 800fbb4:	6224      	str	r4, [r4, #32]
 800fbb6:	429c      	cmp	r4, r3
 800fbb8:	d006      	beq.n	800fbc8 <std+0x48>
 800fbba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fbbe:	4294      	cmp	r4, r2
 800fbc0:	d002      	beq.n	800fbc8 <std+0x48>
 800fbc2:	33d0      	adds	r3, #208	@ 0xd0
 800fbc4:	429c      	cmp	r4, r3
 800fbc6:	d105      	bne.n	800fbd4 <std+0x54>
 800fbc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbd0:	f000 b9fc 	b.w	800ffcc <__retarget_lock_init_recursive>
 800fbd4:	bd10      	pop	{r4, pc}
 800fbd6:	bf00      	nop
 800fbd8:	0800fd95 	.word	0x0800fd95
 800fbdc:	0800fdb7 	.word	0x0800fdb7
 800fbe0:	0800fdef 	.word	0x0800fdef
 800fbe4:	0800fe13 	.word	0x0800fe13
 800fbe8:	2000bbe0 	.word	0x2000bbe0

0800fbec <stdio_exit_handler>:
 800fbec:	4a02      	ldr	r2, [pc, #8]	@ (800fbf8 <stdio_exit_handler+0xc>)
 800fbee:	4903      	ldr	r1, [pc, #12]	@ (800fbfc <stdio_exit_handler+0x10>)
 800fbf0:	4803      	ldr	r0, [pc, #12]	@ (800fc00 <stdio_exit_handler+0x14>)
 800fbf2:	f000 b869 	b.w	800fcc8 <_fwalk_sglue>
 800fbf6:	bf00      	nop
 800fbf8:	2000003c 	.word	0x2000003c
 800fbfc:	08010b81 	.word	0x08010b81
 800fc00:	2000004c 	.word	0x2000004c

0800fc04 <cleanup_stdio>:
 800fc04:	6841      	ldr	r1, [r0, #4]
 800fc06:	4b0c      	ldr	r3, [pc, #48]	@ (800fc38 <cleanup_stdio+0x34>)
 800fc08:	4299      	cmp	r1, r3
 800fc0a:	b510      	push	{r4, lr}
 800fc0c:	4604      	mov	r4, r0
 800fc0e:	d001      	beq.n	800fc14 <cleanup_stdio+0x10>
 800fc10:	f000 ffb6 	bl	8010b80 <_fflush_r>
 800fc14:	68a1      	ldr	r1, [r4, #8]
 800fc16:	4b09      	ldr	r3, [pc, #36]	@ (800fc3c <cleanup_stdio+0x38>)
 800fc18:	4299      	cmp	r1, r3
 800fc1a:	d002      	beq.n	800fc22 <cleanup_stdio+0x1e>
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	f000 ffaf 	bl	8010b80 <_fflush_r>
 800fc22:	68e1      	ldr	r1, [r4, #12]
 800fc24:	4b06      	ldr	r3, [pc, #24]	@ (800fc40 <cleanup_stdio+0x3c>)
 800fc26:	4299      	cmp	r1, r3
 800fc28:	d004      	beq.n	800fc34 <cleanup_stdio+0x30>
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc30:	f000 bfa6 	b.w	8010b80 <_fflush_r>
 800fc34:	bd10      	pop	{r4, pc}
 800fc36:	bf00      	nop
 800fc38:	2000bbe0 	.word	0x2000bbe0
 800fc3c:	2000bc48 	.word	0x2000bc48
 800fc40:	2000bcb0 	.word	0x2000bcb0

0800fc44 <global_stdio_init.part.0>:
 800fc44:	b510      	push	{r4, lr}
 800fc46:	4b0b      	ldr	r3, [pc, #44]	@ (800fc74 <global_stdio_init.part.0+0x30>)
 800fc48:	4c0b      	ldr	r4, [pc, #44]	@ (800fc78 <global_stdio_init.part.0+0x34>)
 800fc4a:	4a0c      	ldr	r2, [pc, #48]	@ (800fc7c <global_stdio_init.part.0+0x38>)
 800fc4c:	601a      	str	r2, [r3, #0]
 800fc4e:	4620      	mov	r0, r4
 800fc50:	2200      	movs	r2, #0
 800fc52:	2104      	movs	r1, #4
 800fc54:	f7ff ff94 	bl	800fb80 <std>
 800fc58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	2109      	movs	r1, #9
 800fc60:	f7ff ff8e 	bl	800fb80 <std>
 800fc64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fc68:	2202      	movs	r2, #2
 800fc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc6e:	2112      	movs	r1, #18
 800fc70:	f7ff bf86 	b.w	800fb80 <std>
 800fc74:	2000bd18 	.word	0x2000bd18
 800fc78:	2000bbe0 	.word	0x2000bbe0
 800fc7c:	0800fbed 	.word	0x0800fbed

0800fc80 <__sfp_lock_acquire>:
 800fc80:	4801      	ldr	r0, [pc, #4]	@ (800fc88 <__sfp_lock_acquire+0x8>)
 800fc82:	f000 b9a4 	b.w	800ffce <__retarget_lock_acquire_recursive>
 800fc86:	bf00      	nop
 800fc88:	2000bd21 	.word	0x2000bd21

0800fc8c <__sfp_lock_release>:
 800fc8c:	4801      	ldr	r0, [pc, #4]	@ (800fc94 <__sfp_lock_release+0x8>)
 800fc8e:	f000 b99f 	b.w	800ffd0 <__retarget_lock_release_recursive>
 800fc92:	bf00      	nop
 800fc94:	2000bd21 	.word	0x2000bd21

0800fc98 <__sinit>:
 800fc98:	b510      	push	{r4, lr}
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	f7ff fff0 	bl	800fc80 <__sfp_lock_acquire>
 800fca0:	6a23      	ldr	r3, [r4, #32]
 800fca2:	b11b      	cbz	r3, 800fcac <__sinit+0x14>
 800fca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca8:	f7ff bff0 	b.w	800fc8c <__sfp_lock_release>
 800fcac:	4b04      	ldr	r3, [pc, #16]	@ (800fcc0 <__sinit+0x28>)
 800fcae:	6223      	str	r3, [r4, #32]
 800fcb0:	4b04      	ldr	r3, [pc, #16]	@ (800fcc4 <__sinit+0x2c>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1f5      	bne.n	800fca4 <__sinit+0xc>
 800fcb8:	f7ff ffc4 	bl	800fc44 <global_stdio_init.part.0>
 800fcbc:	e7f2      	b.n	800fca4 <__sinit+0xc>
 800fcbe:	bf00      	nop
 800fcc0:	0800fc05 	.word	0x0800fc05
 800fcc4:	2000bd18 	.word	0x2000bd18

0800fcc8 <_fwalk_sglue>:
 800fcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fccc:	4607      	mov	r7, r0
 800fcce:	4688      	mov	r8, r1
 800fcd0:	4614      	mov	r4, r2
 800fcd2:	2600      	movs	r6, #0
 800fcd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fcd8:	f1b9 0901 	subs.w	r9, r9, #1
 800fcdc:	d505      	bpl.n	800fcea <_fwalk_sglue+0x22>
 800fcde:	6824      	ldr	r4, [r4, #0]
 800fce0:	2c00      	cmp	r4, #0
 800fce2:	d1f7      	bne.n	800fcd4 <_fwalk_sglue+0xc>
 800fce4:	4630      	mov	r0, r6
 800fce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcea:	89ab      	ldrh	r3, [r5, #12]
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d907      	bls.n	800fd00 <_fwalk_sglue+0x38>
 800fcf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	d003      	beq.n	800fd00 <_fwalk_sglue+0x38>
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	4638      	mov	r0, r7
 800fcfc:	47c0      	blx	r8
 800fcfe:	4306      	orrs	r6, r0
 800fd00:	3568      	adds	r5, #104	@ 0x68
 800fd02:	e7e9      	b.n	800fcd8 <_fwalk_sglue+0x10>

0800fd04 <iprintf>:
 800fd04:	b40f      	push	{r0, r1, r2, r3}
 800fd06:	b507      	push	{r0, r1, r2, lr}
 800fd08:	4906      	ldr	r1, [pc, #24]	@ (800fd24 <iprintf+0x20>)
 800fd0a:	ab04      	add	r3, sp, #16
 800fd0c:	6808      	ldr	r0, [r1, #0]
 800fd0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd12:	6881      	ldr	r1, [r0, #8]
 800fd14:	9301      	str	r3, [sp, #4]
 800fd16:	f000 fc0b 	bl	8010530 <_vfiprintf_r>
 800fd1a:	b003      	add	sp, #12
 800fd1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd20:	b004      	add	sp, #16
 800fd22:	4770      	bx	lr
 800fd24:	20000048 	.word	0x20000048

0800fd28 <sniprintf>:
 800fd28:	b40c      	push	{r2, r3}
 800fd2a:	b530      	push	{r4, r5, lr}
 800fd2c:	4b18      	ldr	r3, [pc, #96]	@ (800fd90 <sniprintf+0x68>)
 800fd2e:	1e0c      	subs	r4, r1, #0
 800fd30:	681d      	ldr	r5, [r3, #0]
 800fd32:	b09d      	sub	sp, #116	@ 0x74
 800fd34:	da08      	bge.n	800fd48 <sniprintf+0x20>
 800fd36:	238b      	movs	r3, #139	@ 0x8b
 800fd38:	602b      	str	r3, [r5, #0]
 800fd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd3e:	b01d      	add	sp, #116	@ 0x74
 800fd40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd44:	b002      	add	sp, #8
 800fd46:	4770      	bx	lr
 800fd48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fd4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd50:	f04f 0300 	mov.w	r3, #0
 800fd54:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fd56:	bf14      	ite	ne
 800fd58:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fd5c:	4623      	moveq	r3, r4
 800fd5e:	9304      	str	r3, [sp, #16]
 800fd60:	9307      	str	r3, [sp, #28]
 800fd62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd66:	9002      	str	r0, [sp, #8]
 800fd68:	9006      	str	r0, [sp, #24]
 800fd6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd6e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fd70:	ab21      	add	r3, sp, #132	@ 0x84
 800fd72:	a902      	add	r1, sp, #8
 800fd74:	4628      	mov	r0, r5
 800fd76:	9301      	str	r3, [sp, #4]
 800fd78:	f000 fab4 	bl	80102e4 <_svfiprintf_r>
 800fd7c:	1c43      	adds	r3, r0, #1
 800fd7e:	bfbc      	itt	lt
 800fd80:	238b      	movlt	r3, #139	@ 0x8b
 800fd82:	602b      	strlt	r3, [r5, #0]
 800fd84:	2c00      	cmp	r4, #0
 800fd86:	d0da      	beq.n	800fd3e <sniprintf+0x16>
 800fd88:	9b02      	ldr	r3, [sp, #8]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	701a      	strb	r2, [r3, #0]
 800fd8e:	e7d6      	b.n	800fd3e <sniprintf+0x16>
 800fd90:	20000048 	.word	0x20000048

0800fd94 <__sread>:
 800fd94:	b510      	push	{r4, lr}
 800fd96:	460c      	mov	r4, r1
 800fd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd9c:	f000 f8ce 	bl	800ff3c <_read_r>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	bfab      	itete	ge
 800fda4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fda6:	89a3      	ldrhlt	r3, [r4, #12]
 800fda8:	181b      	addge	r3, r3, r0
 800fdaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fdae:	bfac      	ite	ge
 800fdb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fdb2:	81a3      	strhlt	r3, [r4, #12]
 800fdb4:	bd10      	pop	{r4, pc}

0800fdb6 <__swrite>:
 800fdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdba:	461f      	mov	r7, r3
 800fdbc:	898b      	ldrh	r3, [r1, #12]
 800fdbe:	05db      	lsls	r3, r3, #23
 800fdc0:	4605      	mov	r5, r0
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	4616      	mov	r6, r2
 800fdc6:	d505      	bpl.n	800fdd4 <__swrite+0x1e>
 800fdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdcc:	2302      	movs	r3, #2
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f000 f8a2 	bl	800ff18 <_lseek_r>
 800fdd4:	89a3      	ldrh	r3, [r4, #12]
 800fdd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fdde:	81a3      	strh	r3, [r4, #12]
 800fde0:	4632      	mov	r2, r6
 800fde2:	463b      	mov	r3, r7
 800fde4:	4628      	mov	r0, r5
 800fde6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdea:	f000 b8b9 	b.w	800ff60 <_write_r>

0800fdee <__sseek>:
 800fdee:	b510      	push	{r4, lr}
 800fdf0:	460c      	mov	r4, r1
 800fdf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdf6:	f000 f88f 	bl	800ff18 <_lseek_r>
 800fdfa:	1c43      	adds	r3, r0, #1
 800fdfc:	89a3      	ldrh	r3, [r4, #12]
 800fdfe:	bf15      	itete	ne
 800fe00:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fe02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fe06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fe0a:	81a3      	strheq	r3, [r4, #12]
 800fe0c:	bf18      	it	ne
 800fe0e:	81a3      	strhne	r3, [r4, #12]
 800fe10:	bd10      	pop	{r4, pc}

0800fe12 <__sclose>:
 800fe12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe16:	f000 b86f 	b.w	800fef8 <_close_r>

0800fe1a <_vsniprintf_r>:
 800fe1a:	b530      	push	{r4, r5, lr}
 800fe1c:	4614      	mov	r4, r2
 800fe1e:	2c00      	cmp	r4, #0
 800fe20:	b09b      	sub	sp, #108	@ 0x6c
 800fe22:	4605      	mov	r5, r0
 800fe24:	461a      	mov	r2, r3
 800fe26:	da05      	bge.n	800fe34 <_vsniprintf_r+0x1a>
 800fe28:	238b      	movs	r3, #139	@ 0x8b
 800fe2a:	6003      	str	r3, [r0, #0]
 800fe2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe30:	b01b      	add	sp, #108	@ 0x6c
 800fe32:	bd30      	pop	{r4, r5, pc}
 800fe34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fe38:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fe3c:	f04f 0300 	mov.w	r3, #0
 800fe40:	9319      	str	r3, [sp, #100]	@ 0x64
 800fe42:	bf14      	ite	ne
 800fe44:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fe48:	4623      	moveq	r3, r4
 800fe4a:	9302      	str	r3, [sp, #8]
 800fe4c:	9305      	str	r3, [sp, #20]
 800fe4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe52:	9100      	str	r1, [sp, #0]
 800fe54:	9104      	str	r1, [sp, #16]
 800fe56:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fe5a:	4669      	mov	r1, sp
 800fe5c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fe5e:	f000 fa41 	bl	80102e4 <_svfiprintf_r>
 800fe62:	1c43      	adds	r3, r0, #1
 800fe64:	bfbc      	itt	lt
 800fe66:	238b      	movlt	r3, #139	@ 0x8b
 800fe68:	602b      	strlt	r3, [r5, #0]
 800fe6a:	2c00      	cmp	r4, #0
 800fe6c:	d0e0      	beq.n	800fe30 <_vsniprintf_r+0x16>
 800fe6e:	9b00      	ldr	r3, [sp, #0]
 800fe70:	2200      	movs	r2, #0
 800fe72:	701a      	strb	r2, [r3, #0]
 800fe74:	e7dc      	b.n	800fe30 <_vsniprintf_r+0x16>
	...

0800fe78 <vsniprintf>:
 800fe78:	b507      	push	{r0, r1, r2, lr}
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	4613      	mov	r3, r2
 800fe7e:	460a      	mov	r2, r1
 800fe80:	4601      	mov	r1, r0
 800fe82:	4803      	ldr	r0, [pc, #12]	@ (800fe90 <vsniprintf+0x18>)
 800fe84:	6800      	ldr	r0, [r0, #0]
 800fe86:	f7ff ffc8 	bl	800fe1a <_vsniprintf_r>
 800fe8a:	b003      	add	sp, #12
 800fe8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe90:	20000048 	.word	0x20000048

0800fe94 <memcmp>:
 800fe94:	b510      	push	{r4, lr}
 800fe96:	3901      	subs	r1, #1
 800fe98:	4402      	add	r2, r0
 800fe9a:	4290      	cmp	r0, r2
 800fe9c:	d101      	bne.n	800fea2 <memcmp+0xe>
 800fe9e:	2000      	movs	r0, #0
 800fea0:	e005      	b.n	800feae <memcmp+0x1a>
 800fea2:	7803      	ldrb	r3, [r0, #0]
 800fea4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fea8:	42a3      	cmp	r3, r4
 800feaa:	d001      	beq.n	800feb0 <memcmp+0x1c>
 800feac:	1b18      	subs	r0, r3, r4
 800feae:	bd10      	pop	{r4, pc}
 800feb0:	3001      	adds	r0, #1
 800feb2:	e7f2      	b.n	800fe9a <memcmp+0x6>

0800feb4 <memmove>:
 800feb4:	4288      	cmp	r0, r1
 800feb6:	b510      	push	{r4, lr}
 800feb8:	eb01 0402 	add.w	r4, r1, r2
 800febc:	d902      	bls.n	800fec4 <memmove+0x10>
 800febe:	4284      	cmp	r4, r0
 800fec0:	4623      	mov	r3, r4
 800fec2:	d807      	bhi.n	800fed4 <memmove+0x20>
 800fec4:	1e43      	subs	r3, r0, #1
 800fec6:	42a1      	cmp	r1, r4
 800fec8:	d008      	beq.n	800fedc <memmove+0x28>
 800feca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fece:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fed2:	e7f8      	b.n	800fec6 <memmove+0x12>
 800fed4:	4402      	add	r2, r0
 800fed6:	4601      	mov	r1, r0
 800fed8:	428a      	cmp	r2, r1
 800feda:	d100      	bne.n	800fede <memmove+0x2a>
 800fedc:	bd10      	pop	{r4, pc}
 800fede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fee6:	e7f7      	b.n	800fed8 <memmove+0x24>

0800fee8 <memset>:
 800fee8:	4402      	add	r2, r0
 800feea:	4603      	mov	r3, r0
 800feec:	4293      	cmp	r3, r2
 800feee:	d100      	bne.n	800fef2 <memset+0xa>
 800fef0:	4770      	bx	lr
 800fef2:	f803 1b01 	strb.w	r1, [r3], #1
 800fef6:	e7f9      	b.n	800feec <memset+0x4>

0800fef8 <_close_r>:
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	4d06      	ldr	r5, [pc, #24]	@ (800ff14 <_close_r+0x1c>)
 800fefc:	2300      	movs	r3, #0
 800fefe:	4604      	mov	r4, r0
 800ff00:	4608      	mov	r0, r1
 800ff02:	602b      	str	r3, [r5, #0]
 800ff04:	f7f0 fd4c 	bl	80009a0 <_close>
 800ff08:	1c43      	adds	r3, r0, #1
 800ff0a:	d102      	bne.n	800ff12 <_close_r+0x1a>
 800ff0c:	682b      	ldr	r3, [r5, #0]
 800ff0e:	b103      	cbz	r3, 800ff12 <_close_r+0x1a>
 800ff10:	6023      	str	r3, [r4, #0]
 800ff12:	bd38      	pop	{r3, r4, r5, pc}
 800ff14:	2000bd1c 	.word	0x2000bd1c

0800ff18 <_lseek_r>:
 800ff18:	b538      	push	{r3, r4, r5, lr}
 800ff1a:	4d07      	ldr	r5, [pc, #28]	@ (800ff38 <_lseek_r+0x20>)
 800ff1c:	4604      	mov	r4, r0
 800ff1e:	4608      	mov	r0, r1
 800ff20:	4611      	mov	r1, r2
 800ff22:	2200      	movs	r2, #0
 800ff24:	602a      	str	r2, [r5, #0]
 800ff26:	461a      	mov	r2, r3
 800ff28:	f7f0 fd61 	bl	80009ee <_lseek>
 800ff2c:	1c43      	adds	r3, r0, #1
 800ff2e:	d102      	bne.n	800ff36 <_lseek_r+0x1e>
 800ff30:	682b      	ldr	r3, [r5, #0]
 800ff32:	b103      	cbz	r3, 800ff36 <_lseek_r+0x1e>
 800ff34:	6023      	str	r3, [r4, #0]
 800ff36:	bd38      	pop	{r3, r4, r5, pc}
 800ff38:	2000bd1c 	.word	0x2000bd1c

0800ff3c <_read_r>:
 800ff3c:	b538      	push	{r3, r4, r5, lr}
 800ff3e:	4d07      	ldr	r5, [pc, #28]	@ (800ff5c <_read_r+0x20>)
 800ff40:	4604      	mov	r4, r0
 800ff42:	4608      	mov	r0, r1
 800ff44:	4611      	mov	r1, r2
 800ff46:	2200      	movs	r2, #0
 800ff48:	602a      	str	r2, [r5, #0]
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	f7f0 fd0b 	bl	8000966 <_read>
 800ff50:	1c43      	adds	r3, r0, #1
 800ff52:	d102      	bne.n	800ff5a <_read_r+0x1e>
 800ff54:	682b      	ldr	r3, [r5, #0]
 800ff56:	b103      	cbz	r3, 800ff5a <_read_r+0x1e>
 800ff58:	6023      	str	r3, [r4, #0]
 800ff5a:	bd38      	pop	{r3, r4, r5, pc}
 800ff5c:	2000bd1c 	.word	0x2000bd1c

0800ff60 <_write_r>:
 800ff60:	b538      	push	{r3, r4, r5, lr}
 800ff62:	4d07      	ldr	r5, [pc, #28]	@ (800ff80 <_write_r+0x20>)
 800ff64:	4604      	mov	r4, r0
 800ff66:	4608      	mov	r0, r1
 800ff68:	4611      	mov	r1, r2
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	602a      	str	r2, [r5, #0]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	f7ff fdb4 	bl	800fadc <_write>
 800ff74:	1c43      	adds	r3, r0, #1
 800ff76:	d102      	bne.n	800ff7e <_write_r+0x1e>
 800ff78:	682b      	ldr	r3, [r5, #0]
 800ff7a:	b103      	cbz	r3, 800ff7e <_write_r+0x1e>
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	bd38      	pop	{r3, r4, r5, pc}
 800ff80:	2000bd1c 	.word	0x2000bd1c

0800ff84 <__libc_init_array>:
 800ff84:	b570      	push	{r4, r5, r6, lr}
 800ff86:	4d0d      	ldr	r5, [pc, #52]	@ (800ffbc <__libc_init_array+0x38>)
 800ff88:	4c0d      	ldr	r4, [pc, #52]	@ (800ffc0 <__libc_init_array+0x3c>)
 800ff8a:	1b64      	subs	r4, r4, r5
 800ff8c:	10a4      	asrs	r4, r4, #2
 800ff8e:	2600      	movs	r6, #0
 800ff90:	42a6      	cmp	r6, r4
 800ff92:	d109      	bne.n	800ffa8 <__libc_init_array+0x24>
 800ff94:	4d0b      	ldr	r5, [pc, #44]	@ (800ffc4 <__libc_init_array+0x40>)
 800ff96:	4c0c      	ldr	r4, [pc, #48]	@ (800ffc8 <__libc_init_array+0x44>)
 800ff98:	f000 ffd6 	bl	8010f48 <_init>
 800ff9c:	1b64      	subs	r4, r4, r5
 800ff9e:	10a4      	asrs	r4, r4, #2
 800ffa0:	2600      	movs	r6, #0
 800ffa2:	42a6      	cmp	r6, r4
 800ffa4:	d105      	bne.n	800ffb2 <__libc_init_array+0x2e>
 800ffa6:	bd70      	pop	{r4, r5, r6, pc}
 800ffa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffac:	4798      	blx	r3
 800ffae:	3601      	adds	r6, #1
 800ffb0:	e7ee      	b.n	800ff90 <__libc_init_array+0xc>
 800ffb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffb6:	4798      	blx	r3
 800ffb8:	3601      	adds	r6, #1
 800ffba:	e7f2      	b.n	800ffa2 <__libc_init_array+0x1e>
 800ffbc:	0801418c 	.word	0x0801418c
 800ffc0:	0801418c 	.word	0x0801418c
 800ffc4:	0801418c 	.word	0x0801418c
 800ffc8:	08014190 	.word	0x08014190

0800ffcc <__retarget_lock_init_recursive>:
 800ffcc:	4770      	bx	lr

0800ffce <__retarget_lock_acquire_recursive>:
 800ffce:	4770      	bx	lr

0800ffd0 <__retarget_lock_release_recursive>:
 800ffd0:	4770      	bx	lr

0800ffd2 <memcpy>:
 800ffd2:	440a      	add	r2, r1
 800ffd4:	4291      	cmp	r1, r2
 800ffd6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ffda:	d100      	bne.n	800ffde <memcpy+0xc>
 800ffdc:	4770      	bx	lr
 800ffde:	b510      	push	{r4, lr}
 800ffe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffe8:	4291      	cmp	r1, r2
 800ffea:	d1f9      	bne.n	800ffe0 <memcpy+0xe>
 800ffec:	bd10      	pop	{r4, pc}
	...

0800fff0 <__assert_func>:
 800fff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fff2:	4614      	mov	r4, r2
 800fff4:	461a      	mov	r2, r3
 800fff6:	4b09      	ldr	r3, [pc, #36]	@ (801001c <__assert_func+0x2c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4605      	mov	r5, r0
 800fffc:	68d8      	ldr	r0, [r3, #12]
 800fffe:	b14c      	cbz	r4, 8010014 <__assert_func+0x24>
 8010000:	4b07      	ldr	r3, [pc, #28]	@ (8010020 <__assert_func+0x30>)
 8010002:	9100      	str	r1, [sp, #0]
 8010004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010008:	4906      	ldr	r1, [pc, #24]	@ (8010024 <__assert_func+0x34>)
 801000a:	462b      	mov	r3, r5
 801000c:	f000 fde0 	bl	8010bd0 <fiprintf>
 8010010:	f000 fe94 	bl	8010d3c <abort>
 8010014:	4b04      	ldr	r3, [pc, #16]	@ (8010028 <__assert_func+0x38>)
 8010016:	461c      	mov	r4, r3
 8010018:	e7f3      	b.n	8010002 <__assert_func+0x12>
 801001a:	bf00      	nop
 801001c:	20000048 	.word	0x20000048
 8010020:	08014113 	.word	0x08014113
 8010024:	08014120 	.word	0x08014120
 8010028:	0801414e 	.word	0x0801414e

0801002c <_free_r>:
 801002c:	b538      	push	{r3, r4, r5, lr}
 801002e:	4605      	mov	r5, r0
 8010030:	2900      	cmp	r1, #0
 8010032:	d041      	beq.n	80100b8 <_free_r+0x8c>
 8010034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010038:	1f0c      	subs	r4, r1, #4
 801003a:	2b00      	cmp	r3, #0
 801003c:	bfb8      	it	lt
 801003e:	18e4      	addlt	r4, r4, r3
 8010040:	f000 f8e8 	bl	8010214 <__malloc_lock>
 8010044:	4a1d      	ldr	r2, [pc, #116]	@ (80100bc <_free_r+0x90>)
 8010046:	6813      	ldr	r3, [r2, #0]
 8010048:	b933      	cbnz	r3, 8010058 <_free_r+0x2c>
 801004a:	6063      	str	r3, [r4, #4]
 801004c:	6014      	str	r4, [r2, #0]
 801004e:	4628      	mov	r0, r5
 8010050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010054:	f000 b8e4 	b.w	8010220 <__malloc_unlock>
 8010058:	42a3      	cmp	r3, r4
 801005a:	d908      	bls.n	801006e <_free_r+0x42>
 801005c:	6820      	ldr	r0, [r4, #0]
 801005e:	1821      	adds	r1, r4, r0
 8010060:	428b      	cmp	r3, r1
 8010062:	bf01      	itttt	eq
 8010064:	6819      	ldreq	r1, [r3, #0]
 8010066:	685b      	ldreq	r3, [r3, #4]
 8010068:	1809      	addeq	r1, r1, r0
 801006a:	6021      	streq	r1, [r4, #0]
 801006c:	e7ed      	b.n	801004a <_free_r+0x1e>
 801006e:	461a      	mov	r2, r3
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	b10b      	cbz	r3, 8010078 <_free_r+0x4c>
 8010074:	42a3      	cmp	r3, r4
 8010076:	d9fa      	bls.n	801006e <_free_r+0x42>
 8010078:	6811      	ldr	r1, [r2, #0]
 801007a:	1850      	adds	r0, r2, r1
 801007c:	42a0      	cmp	r0, r4
 801007e:	d10b      	bne.n	8010098 <_free_r+0x6c>
 8010080:	6820      	ldr	r0, [r4, #0]
 8010082:	4401      	add	r1, r0
 8010084:	1850      	adds	r0, r2, r1
 8010086:	4283      	cmp	r3, r0
 8010088:	6011      	str	r1, [r2, #0]
 801008a:	d1e0      	bne.n	801004e <_free_r+0x22>
 801008c:	6818      	ldr	r0, [r3, #0]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	6053      	str	r3, [r2, #4]
 8010092:	4408      	add	r0, r1
 8010094:	6010      	str	r0, [r2, #0]
 8010096:	e7da      	b.n	801004e <_free_r+0x22>
 8010098:	d902      	bls.n	80100a0 <_free_r+0x74>
 801009a:	230c      	movs	r3, #12
 801009c:	602b      	str	r3, [r5, #0]
 801009e:	e7d6      	b.n	801004e <_free_r+0x22>
 80100a0:	6820      	ldr	r0, [r4, #0]
 80100a2:	1821      	adds	r1, r4, r0
 80100a4:	428b      	cmp	r3, r1
 80100a6:	bf04      	itt	eq
 80100a8:	6819      	ldreq	r1, [r3, #0]
 80100aa:	685b      	ldreq	r3, [r3, #4]
 80100ac:	6063      	str	r3, [r4, #4]
 80100ae:	bf04      	itt	eq
 80100b0:	1809      	addeq	r1, r1, r0
 80100b2:	6021      	streq	r1, [r4, #0]
 80100b4:	6054      	str	r4, [r2, #4]
 80100b6:	e7ca      	b.n	801004e <_free_r+0x22>
 80100b8:	bd38      	pop	{r3, r4, r5, pc}
 80100ba:	bf00      	nop
 80100bc:	2000bd28 	.word	0x2000bd28

080100c0 <malloc>:
 80100c0:	4b02      	ldr	r3, [pc, #8]	@ (80100cc <malloc+0xc>)
 80100c2:	4601      	mov	r1, r0
 80100c4:	6818      	ldr	r0, [r3, #0]
 80100c6:	f000 b825 	b.w	8010114 <_malloc_r>
 80100ca:	bf00      	nop
 80100cc:	20000048 	.word	0x20000048

080100d0 <sbrk_aligned>:
 80100d0:	b570      	push	{r4, r5, r6, lr}
 80100d2:	4e0f      	ldr	r6, [pc, #60]	@ (8010110 <sbrk_aligned+0x40>)
 80100d4:	460c      	mov	r4, r1
 80100d6:	6831      	ldr	r1, [r6, #0]
 80100d8:	4605      	mov	r5, r0
 80100da:	b911      	cbnz	r1, 80100e2 <sbrk_aligned+0x12>
 80100dc:	f000 fe1e 	bl	8010d1c <_sbrk_r>
 80100e0:	6030      	str	r0, [r6, #0]
 80100e2:	4621      	mov	r1, r4
 80100e4:	4628      	mov	r0, r5
 80100e6:	f000 fe19 	bl	8010d1c <_sbrk_r>
 80100ea:	1c43      	adds	r3, r0, #1
 80100ec:	d103      	bne.n	80100f6 <sbrk_aligned+0x26>
 80100ee:	f04f 34ff 	mov.w	r4, #4294967295
 80100f2:	4620      	mov	r0, r4
 80100f4:	bd70      	pop	{r4, r5, r6, pc}
 80100f6:	1cc4      	adds	r4, r0, #3
 80100f8:	f024 0403 	bic.w	r4, r4, #3
 80100fc:	42a0      	cmp	r0, r4
 80100fe:	d0f8      	beq.n	80100f2 <sbrk_aligned+0x22>
 8010100:	1a21      	subs	r1, r4, r0
 8010102:	4628      	mov	r0, r5
 8010104:	f000 fe0a 	bl	8010d1c <_sbrk_r>
 8010108:	3001      	adds	r0, #1
 801010a:	d1f2      	bne.n	80100f2 <sbrk_aligned+0x22>
 801010c:	e7ef      	b.n	80100ee <sbrk_aligned+0x1e>
 801010e:	bf00      	nop
 8010110:	2000bd24 	.word	0x2000bd24

08010114 <_malloc_r>:
 8010114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010118:	1ccd      	adds	r5, r1, #3
 801011a:	f025 0503 	bic.w	r5, r5, #3
 801011e:	3508      	adds	r5, #8
 8010120:	2d0c      	cmp	r5, #12
 8010122:	bf38      	it	cc
 8010124:	250c      	movcc	r5, #12
 8010126:	2d00      	cmp	r5, #0
 8010128:	4606      	mov	r6, r0
 801012a:	db01      	blt.n	8010130 <_malloc_r+0x1c>
 801012c:	42a9      	cmp	r1, r5
 801012e:	d904      	bls.n	801013a <_malloc_r+0x26>
 8010130:	230c      	movs	r3, #12
 8010132:	6033      	str	r3, [r6, #0]
 8010134:	2000      	movs	r0, #0
 8010136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801013a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010210 <_malloc_r+0xfc>
 801013e:	f000 f869 	bl	8010214 <__malloc_lock>
 8010142:	f8d8 3000 	ldr.w	r3, [r8]
 8010146:	461c      	mov	r4, r3
 8010148:	bb44      	cbnz	r4, 801019c <_malloc_r+0x88>
 801014a:	4629      	mov	r1, r5
 801014c:	4630      	mov	r0, r6
 801014e:	f7ff ffbf 	bl	80100d0 <sbrk_aligned>
 8010152:	1c43      	adds	r3, r0, #1
 8010154:	4604      	mov	r4, r0
 8010156:	d158      	bne.n	801020a <_malloc_r+0xf6>
 8010158:	f8d8 4000 	ldr.w	r4, [r8]
 801015c:	4627      	mov	r7, r4
 801015e:	2f00      	cmp	r7, #0
 8010160:	d143      	bne.n	80101ea <_malloc_r+0xd6>
 8010162:	2c00      	cmp	r4, #0
 8010164:	d04b      	beq.n	80101fe <_malloc_r+0xea>
 8010166:	6823      	ldr	r3, [r4, #0]
 8010168:	4639      	mov	r1, r7
 801016a:	4630      	mov	r0, r6
 801016c:	eb04 0903 	add.w	r9, r4, r3
 8010170:	f000 fdd4 	bl	8010d1c <_sbrk_r>
 8010174:	4581      	cmp	r9, r0
 8010176:	d142      	bne.n	80101fe <_malloc_r+0xea>
 8010178:	6821      	ldr	r1, [r4, #0]
 801017a:	1a6d      	subs	r5, r5, r1
 801017c:	4629      	mov	r1, r5
 801017e:	4630      	mov	r0, r6
 8010180:	f7ff ffa6 	bl	80100d0 <sbrk_aligned>
 8010184:	3001      	adds	r0, #1
 8010186:	d03a      	beq.n	80101fe <_malloc_r+0xea>
 8010188:	6823      	ldr	r3, [r4, #0]
 801018a:	442b      	add	r3, r5
 801018c:	6023      	str	r3, [r4, #0]
 801018e:	f8d8 3000 	ldr.w	r3, [r8]
 8010192:	685a      	ldr	r2, [r3, #4]
 8010194:	bb62      	cbnz	r2, 80101f0 <_malloc_r+0xdc>
 8010196:	f8c8 7000 	str.w	r7, [r8]
 801019a:	e00f      	b.n	80101bc <_malloc_r+0xa8>
 801019c:	6822      	ldr	r2, [r4, #0]
 801019e:	1b52      	subs	r2, r2, r5
 80101a0:	d420      	bmi.n	80101e4 <_malloc_r+0xd0>
 80101a2:	2a0b      	cmp	r2, #11
 80101a4:	d917      	bls.n	80101d6 <_malloc_r+0xc2>
 80101a6:	1961      	adds	r1, r4, r5
 80101a8:	42a3      	cmp	r3, r4
 80101aa:	6025      	str	r5, [r4, #0]
 80101ac:	bf18      	it	ne
 80101ae:	6059      	strne	r1, [r3, #4]
 80101b0:	6863      	ldr	r3, [r4, #4]
 80101b2:	bf08      	it	eq
 80101b4:	f8c8 1000 	streq.w	r1, [r8]
 80101b8:	5162      	str	r2, [r4, r5]
 80101ba:	604b      	str	r3, [r1, #4]
 80101bc:	4630      	mov	r0, r6
 80101be:	f000 f82f 	bl	8010220 <__malloc_unlock>
 80101c2:	f104 000b 	add.w	r0, r4, #11
 80101c6:	1d23      	adds	r3, r4, #4
 80101c8:	f020 0007 	bic.w	r0, r0, #7
 80101cc:	1ac2      	subs	r2, r0, r3
 80101ce:	bf1c      	itt	ne
 80101d0:	1a1b      	subne	r3, r3, r0
 80101d2:	50a3      	strne	r3, [r4, r2]
 80101d4:	e7af      	b.n	8010136 <_malloc_r+0x22>
 80101d6:	6862      	ldr	r2, [r4, #4]
 80101d8:	42a3      	cmp	r3, r4
 80101da:	bf0c      	ite	eq
 80101dc:	f8c8 2000 	streq.w	r2, [r8]
 80101e0:	605a      	strne	r2, [r3, #4]
 80101e2:	e7eb      	b.n	80101bc <_malloc_r+0xa8>
 80101e4:	4623      	mov	r3, r4
 80101e6:	6864      	ldr	r4, [r4, #4]
 80101e8:	e7ae      	b.n	8010148 <_malloc_r+0x34>
 80101ea:	463c      	mov	r4, r7
 80101ec:	687f      	ldr	r7, [r7, #4]
 80101ee:	e7b6      	b.n	801015e <_malloc_r+0x4a>
 80101f0:	461a      	mov	r2, r3
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	42a3      	cmp	r3, r4
 80101f6:	d1fb      	bne.n	80101f0 <_malloc_r+0xdc>
 80101f8:	2300      	movs	r3, #0
 80101fa:	6053      	str	r3, [r2, #4]
 80101fc:	e7de      	b.n	80101bc <_malloc_r+0xa8>
 80101fe:	230c      	movs	r3, #12
 8010200:	6033      	str	r3, [r6, #0]
 8010202:	4630      	mov	r0, r6
 8010204:	f000 f80c 	bl	8010220 <__malloc_unlock>
 8010208:	e794      	b.n	8010134 <_malloc_r+0x20>
 801020a:	6005      	str	r5, [r0, #0]
 801020c:	e7d6      	b.n	80101bc <_malloc_r+0xa8>
 801020e:	bf00      	nop
 8010210:	2000bd28 	.word	0x2000bd28

08010214 <__malloc_lock>:
 8010214:	4801      	ldr	r0, [pc, #4]	@ (801021c <__malloc_lock+0x8>)
 8010216:	f7ff beda 	b.w	800ffce <__retarget_lock_acquire_recursive>
 801021a:	bf00      	nop
 801021c:	2000bd20 	.word	0x2000bd20

08010220 <__malloc_unlock>:
 8010220:	4801      	ldr	r0, [pc, #4]	@ (8010228 <__malloc_unlock+0x8>)
 8010222:	f7ff bed5 	b.w	800ffd0 <__retarget_lock_release_recursive>
 8010226:	bf00      	nop
 8010228:	2000bd20 	.word	0x2000bd20

0801022c <__ssputs_r>:
 801022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010230:	688e      	ldr	r6, [r1, #8]
 8010232:	461f      	mov	r7, r3
 8010234:	42be      	cmp	r6, r7
 8010236:	680b      	ldr	r3, [r1, #0]
 8010238:	4682      	mov	sl, r0
 801023a:	460c      	mov	r4, r1
 801023c:	4690      	mov	r8, r2
 801023e:	d82d      	bhi.n	801029c <__ssputs_r+0x70>
 8010240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010248:	d026      	beq.n	8010298 <__ssputs_r+0x6c>
 801024a:	6965      	ldr	r5, [r4, #20]
 801024c:	6909      	ldr	r1, [r1, #16]
 801024e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010252:	eba3 0901 	sub.w	r9, r3, r1
 8010256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801025a:	1c7b      	adds	r3, r7, #1
 801025c:	444b      	add	r3, r9
 801025e:	106d      	asrs	r5, r5, #1
 8010260:	429d      	cmp	r5, r3
 8010262:	bf38      	it	cc
 8010264:	461d      	movcc	r5, r3
 8010266:	0553      	lsls	r3, r2, #21
 8010268:	d527      	bpl.n	80102ba <__ssputs_r+0x8e>
 801026a:	4629      	mov	r1, r5
 801026c:	f7ff ff52 	bl	8010114 <_malloc_r>
 8010270:	4606      	mov	r6, r0
 8010272:	b360      	cbz	r0, 80102ce <__ssputs_r+0xa2>
 8010274:	6921      	ldr	r1, [r4, #16]
 8010276:	464a      	mov	r2, r9
 8010278:	f7ff feab 	bl	800ffd2 <memcpy>
 801027c:	89a3      	ldrh	r3, [r4, #12]
 801027e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010286:	81a3      	strh	r3, [r4, #12]
 8010288:	6126      	str	r6, [r4, #16]
 801028a:	6165      	str	r5, [r4, #20]
 801028c:	444e      	add	r6, r9
 801028e:	eba5 0509 	sub.w	r5, r5, r9
 8010292:	6026      	str	r6, [r4, #0]
 8010294:	60a5      	str	r5, [r4, #8]
 8010296:	463e      	mov	r6, r7
 8010298:	42be      	cmp	r6, r7
 801029a:	d900      	bls.n	801029e <__ssputs_r+0x72>
 801029c:	463e      	mov	r6, r7
 801029e:	6820      	ldr	r0, [r4, #0]
 80102a0:	4632      	mov	r2, r6
 80102a2:	4641      	mov	r1, r8
 80102a4:	f7ff fe06 	bl	800feb4 <memmove>
 80102a8:	68a3      	ldr	r3, [r4, #8]
 80102aa:	1b9b      	subs	r3, r3, r6
 80102ac:	60a3      	str	r3, [r4, #8]
 80102ae:	6823      	ldr	r3, [r4, #0]
 80102b0:	4433      	add	r3, r6
 80102b2:	6023      	str	r3, [r4, #0]
 80102b4:	2000      	movs	r0, #0
 80102b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ba:	462a      	mov	r2, r5
 80102bc:	f000 fd45 	bl	8010d4a <_realloc_r>
 80102c0:	4606      	mov	r6, r0
 80102c2:	2800      	cmp	r0, #0
 80102c4:	d1e0      	bne.n	8010288 <__ssputs_r+0x5c>
 80102c6:	6921      	ldr	r1, [r4, #16]
 80102c8:	4650      	mov	r0, sl
 80102ca:	f7ff feaf 	bl	801002c <_free_r>
 80102ce:	230c      	movs	r3, #12
 80102d0:	f8ca 3000 	str.w	r3, [sl]
 80102d4:	89a3      	ldrh	r3, [r4, #12]
 80102d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102da:	81a3      	strh	r3, [r4, #12]
 80102dc:	f04f 30ff 	mov.w	r0, #4294967295
 80102e0:	e7e9      	b.n	80102b6 <__ssputs_r+0x8a>
	...

080102e4 <_svfiprintf_r>:
 80102e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e8:	4698      	mov	r8, r3
 80102ea:	898b      	ldrh	r3, [r1, #12]
 80102ec:	061b      	lsls	r3, r3, #24
 80102ee:	b09d      	sub	sp, #116	@ 0x74
 80102f0:	4607      	mov	r7, r0
 80102f2:	460d      	mov	r5, r1
 80102f4:	4614      	mov	r4, r2
 80102f6:	d510      	bpl.n	801031a <_svfiprintf_r+0x36>
 80102f8:	690b      	ldr	r3, [r1, #16]
 80102fa:	b973      	cbnz	r3, 801031a <_svfiprintf_r+0x36>
 80102fc:	2140      	movs	r1, #64	@ 0x40
 80102fe:	f7ff ff09 	bl	8010114 <_malloc_r>
 8010302:	6028      	str	r0, [r5, #0]
 8010304:	6128      	str	r0, [r5, #16]
 8010306:	b930      	cbnz	r0, 8010316 <_svfiprintf_r+0x32>
 8010308:	230c      	movs	r3, #12
 801030a:	603b      	str	r3, [r7, #0]
 801030c:	f04f 30ff 	mov.w	r0, #4294967295
 8010310:	b01d      	add	sp, #116	@ 0x74
 8010312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010316:	2340      	movs	r3, #64	@ 0x40
 8010318:	616b      	str	r3, [r5, #20]
 801031a:	2300      	movs	r3, #0
 801031c:	9309      	str	r3, [sp, #36]	@ 0x24
 801031e:	2320      	movs	r3, #32
 8010320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010324:	f8cd 800c 	str.w	r8, [sp, #12]
 8010328:	2330      	movs	r3, #48	@ 0x30
 801032a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80104c8 <_svfiprintf_r+0x1e4>
 801032e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010332:	f04f 0901 	mov.w	r9, #1
 8010336:	4623      	mov	r3, r4
 8010338:	469a      	mov	sl, r3
 801033a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801033e:	b10a      	cbz	r2, 8010344 <_svfiprintf_r+0x60>
 8010340:	2a25      	cmp	r2, #37	@ 0x25
 8010342:	d1f9      	bne.n	8010338 <_svfiprintf_r+0x54>
 8010344:	ebba 0b04 	subs.w	fp, sl, r4
 8010348:	d00b      	beq.n	8010362 <_svfiprintf_r+0x7e>
 801034a:	465b      	mov	r3, fp
 801034c:	4622      	mov	r2, r4
 801034e:	4629      	mov	r1, r5
 8010350:	4638      	mov	r0, r7
 8010352:	f7ff ff6b 	bl	801022c <__ssputs_r>
 8010356:	3001      	adds	r0, #1
 8010358:	f000 80a7 	beq.w	80104aa <_svfiprintf_r+0x1c6>
 801035c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801035e:	445a      	add	r2, fp
 8010360:	9209      	str	r2, [sp, #36]	@ 0x24
 8010362:	f89a 3000 	ldrb.w	r3, [sl]
 8010366:	2b00      	cmp	r3, #0
 8010368:	f000 809f 	beq.w	80104aa <_svfiprintf_r+0x1c6>
 801036c:	2300      	movs	r3, #0
 801036e:	f04f 32ff 	mov.w	r2, #4294967295
 8010372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010376:	f10a 0a01 	add.w	sl, sl, #1
 801037a:	9304      	str	r3, [sp, #16]
 801037c:	9307      	str	r3, [sp, #28]
 801037e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010382:	931a      	str	r3, [sp, #104]	@ 0x68
 8010384:	4654      	mov	r4, sl
 8010386:	2205      	movs	r2, #5
 8010388:	f814 1b01 	ldrb.w	r1, [r4], #1
 801038c:	484e      	ldr	r0, [pc, #312]	@ (80104c8 <_svfiprintf_r+0x1e4>)
 801038e:	f7ef ff47 	bl	8000220 <memchr>
 8010392:	9a04      	ldr	r2, [sp, #16]
 8010394:	b9d8      	cbnz	r0, 80103ce <_svfiprintf_r+0xea>
 8010396:	06d0      	lsls	r0, r2, #27
 8010398:	bf44      	itt	mi
 801039a:	2320      	movmi	r3, #32
 801039c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103a0:	0711      	lsls	r1, r2, #28
 80103a2:	bf44      	itt	mi
 80103a4:	232b      	movmi	r3, #43	@ 0x2b
 80103a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103aa:	f89a 3000 	ldrb.w	r3, [sl]
 80103ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80103b0:	d015      	beq.n	80103de <_svfiprintf_r+0xfa>
 80103b2:	9a07      	ldr	r2, [sp, #28]
 80103b4:	4654      	mov	r4, sl
 80103b6:	2000      	movs	r0, #0
 80103b8:	f04f 0c0a 	mov.w	ip, #10
 80103bc:	4621      	mov	r1, r4
 80103be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103c2:	3b30      	subs	r3, #48	@ 0x30
 80103c4:	2b09      	cmp	r3, #9
 80103c6:	d94b      	bls.n	8010460 <_svfiprintf_r+0x17c>
 80103c8:	b1b0      	cbz	r0, 80103f8 <_svfiprintf_r+0x114>
 80103ca:	9207      	str	r2, [sp, #28]
 80103cc:	e014      	b.n	80103f8 <_svfiprintf_r+0x114>
 80103ce:	eba0 0308 	sub.w	r3, r0, r8
 80103d2:	fa09 f303 	lsl.w	r3, r9, r3
 80103d6:	4313      	orrs	r3, r2
 80103d8:	9304      	str	r3, [sp, #16]
 80103da:	46a2      	mov	sl, r4
 80103dc:	e7d2      	b.n	8010384 <_svfiprintf_r+0xa0>
 80103de:	9b03      	ldr	r3, [sp, #12]
 80103e0:	1d19      	adds	r1, r3, #4
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	9103      	str	r1, [sp, #12]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	bfbb      	ittet	lt
 80103ea:	425b      	neglt	r3, r3
 80103ec:	f042 0202 	orrlt.w	r2, r2, #2
 80103f0:	9307      	strge	r3, [sp, #28]
 80103f2:	9307      	strlt	r3, [sp, #28]
 80103f4:	bfb8      	it	lt
 80103f6:	9204      	strlt	r2, [sp, #16]
 80103f8:	7823      	ldrb	r3, [r4, #0]
 80103fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80103fc:	d10a      	bne.n	8010414 <_svfiprintf_r+0x130>
 80103fe:	7863      	ldrb	r3, [r4, #1]
 8010400:	2b2a      	cmp	r3, #42	@ 0x2a
 8010402:	d132      	bne.n	801046a <_svfiprintf_r+0x186>
 8010404:	9b03      	ldr	r3, [sp, #12]
 8010406:	1d1a      	adds	r2, r3, #4
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	9203      	str	r2, [sp, #12]
 801040c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010410:	3402      	adds	r4, #2
 8010412:	9305      	str	r3, [sp, #20]
 8010414:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80104d8 <_svfiprintf_r+0x1f4>
 8010418:	7821      	ldrb	r1, [r4, #0]
 801041a:	2203      	movs	r2, #3
 801041c:	4650      	mov	r0, sl
 801041e:	f7ef feff 	bl	8000220 <memchr>
 8010422:	b138      	cbz	r0, 8010434 <_svfiprintf_r+0x150>
 8010424:	9b04      	ldr	r3, [sp, #16]
 8010426:	eba0 000a 	sub.w	r0, r0, sl
 801042a:	2240      	movs	r2, #64	@ 0x40
 801042c:	4082      	lsls	r2, r0
 801042e:	4313      	orrs	r3, r2
 8010430:	3401      	adds	r4, #1
 8010432:	9304      	str	r3, [sp, #16]
 8010434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010438:	4824      	ldr	r0, [pc, #144]	@ (80104cc <_svfiprintf_r+0x1e8>)
 801043a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801043e:	2206      	movs	r2, #6
 8010440:	f7ef feee 	bl	8000220 <memchr>
 8010444:	2800      	cmp	r0, #0
 8010446:	d036      	beq.n	80104b6 <_svfiprintf_r+0x1d2>
 8010448:	4b21      	ldr	r3, [pc, #132]	@ (80104d0 <_svfiprintf_r+0x1ec>)
 801044a:	bb1b      	cbnz	r3, 8010494 <_svfiprintf_r+0x1b0>
 801044c:	9b03      	ldr	r3, [sp, #12]
 801044e:	3307      	adds	r3, #7
 8010450:	f023 0307 	bic.w	r3, r3, #7
 8010454:	3308      	adds	r3, #8
 8010456:	9303      	str	r3, [sp, #12]
 8010458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801045a:	4433      	add	r3, r6
 801045c:	9309      	str	r3, [sp, #36]	@ 0x24
 801045e:	e76a      	b.n	8010336 <_svfiprintf_r+0x52>
 8010460:	fb0c 3202 	mla	r2, ip, r2, r3
 8010464:	460c      	mov	r4, r1
 8010466:	2001      	movs	r0, #1
 8010468:	e7a8      	b.n	80103bc <_svfiprintf_r+0xd8>
 801046a:	2300      	movs	r3, #0
 801046c:	3401      	adds	r4, #1
 801046e:	9305      	str	r3, [sp, #20]
 8010470:	4619      	mov	r1, r3
 8010472:	f04f 0c0a 	mov.w	ip, #10
 8010476:	4620      	mov	r0, r4
 8010478:	f810 2b01 	ldrb.w	r2, [r0], #1
 801047c:	3a30      	subs	r2, #48	@ 0x30
 801047e:	2a09      	cmp	r2, #9
 8010480:	d903      	bls.n	801048a <_svfiprintf_r+0x1a6>
 8010482:	2b00      	cmp	r3, #0
 8010484:	d0c6      	beq.n	8010414 <_svfiprintf_r+0x130>
 8010486:	9105      	str	r1, [sp, #20]
 8010488:	e7c4      	b.n	8010414 <_svfiprintf_r+0x130>
 801048a:	fb0c 2101 	mla	r1, ip, r1, r2
 801048e:	4604      	mov	r4, r0
 8010490:	2301      	movs	r3, #1
 8010492:	e7f0      	b.n	8010476 <_svfiprintf_r+0x192>
 8010494:	ab03      	add	r3, sp, #12
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	462a      	mov	r2, r5
 801049a:	4b0e      	ldr	r3, [pc, #56]	@ (80104d4 <_svfiprintf_r+0x1f0>)
 801049c:	a904      	add	r1, sp, #16
 801049e:	4638      	mov	r0, r7
 80104a0:	f3af 8000 	nop.w
 80104a4:	1c42      	adds	r2, r0, #1
 80104a6:	4606      	mov	r6, r0
 80104a8:	d1d6      	bne.n	8010458 <_svfiprintf_r+0x174>
 80104aa:	89ab      	ldrh	r3, [r5, #12]
 80104ac:	065b      	lsls	r3, r3, #25
 80104ae:	f53f af2d 	bmi.w	801030c <_svfiprintf_r+0x28>
 80104b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80104b4:	e72c      	b.n	8010310 <_svfiprintf_r+0x2c>
 80104b6:	ab03      	add	r3, sp, #12
 80104b8:	9300      	str	r3, [sp, #0]
 80104ba:	462a      	mov	r2, r5
 80104bc:	4b05      	ldr	r3, [pc, #20]	@ (80104d4 <_svfiprintf_r+0x1f0>)
 80104be:	a904      	add	r1, sp, #16
 80104c0:	4638      	mov	r0, r7
 80104c2:	f000 f9bb 	bl	801083c <_printf_i>
 80104c6:	e7ed      	b.n	80104a4 <_svfiprintf_r+0x1c0>
 80104c8:	0801414f 	.word	0x0801414f
 80104cc:	08014159 	.word	0x08014159
 80104d0:	00000000 	.word	0x00000000
 80104d4:	0801022d 	.word	0x0801022d
 80104d8:	08014155 	.word	0x08014155

080104dc <__sfputc_r>:
 80104dc:	6893      	ldr	r3, [r2, #8]
 80104de:	3b01      	subs	r3, #1
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	b410      	push	{r4}
 80104e4:	6093      	str	r3, [r2, #8]
 80104e6:	da08      	bge.n	80104fa <__sfputc_r+0x1e>
 80104e8:	6994      	ldr	r4, [r2, #24]
 80104ea:	42a3      	cmp	r3, r4
 80104ec:	db01      	blt.n	80104f2 <__sfputc_r+0x16>
 80104ee:	290a      	cmp	r1, #10
 80104f0:	d103      	bne.n	80104fa <__sfputc_r+0x1e>
 80104f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104f6:	f000 bb7d 	b.w	8010bf4 <__swbuf_r>
 80104fa:	6813      	ldr	r3, [r2, #0]
 80104fc:	1c58      	adds	r0, r3, #1
 80104fe:	6010      	str	r0, [r2, #0]
 8010500:	7019      	strb	r1, [r3, #0]
 8010502:	4608      	mov	r0, r1
 8010504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010508:	4770      	bx	lr

0801050a <__sfputs_r>:
 801050a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801050c:	4606      	mov	r6, r0
 801050e:	460f      	mov	r7, r1
 8010510:	4614      	mov	r4, r2
 8010512:	18d5      	adds	r5, r2, r3
 8010514:	42ac      	cmp	r4, r5
 8010516:	d101      	bne.n	801051c <__sfputs_r+0x12>
 8010518:	2000      	movs	r0, #0
 801051a:	e007      	b.n	801052c <__sfputs_r+0x22>
 801051c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010520:	463a      	mov	r2, r7
 8010522:	4630      	mov	r0, r6
 8010524:	f7ff ffda 	bl	80104dc <__sfputc_r>
 8010528:	1c43      	adds	r3, r0, #1
 801052a:	d1f3      	bne.n	8010514 <__sfputs_r+0xa>
 801052c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010530 <_vfiprintf_r>:
 8010530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010534:	460d      	mov	r5, r1
 8010536:	b09d      	sub	sp, #116	@ 0x74
 8010538:	4614      	mov	r4, r2
 801053a:	4698      	mov	r8, r3
 801053c:	4606      	mov	r6, r0
 801053e:	b118      	cbz	r0, 8010548 <_vfiprintf_r+0x18>
 8010540:	6a03      	ldr	r3, [r0, #32]
 8010542:	b90b      	cbnz	r3, 8010548 <_vfiprintf_r+0x18>
 8010544:	f7ff fba8 	bl	800fc98 <__sinit>
 8010548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801054a:	07d9      	lsls	r1, r3, #31
 801054c:	d405      	bmi.n	801055a <_vfiprintf_r+0x2a>
 801054e:	89ab      	ldrh	r3, [r5, #12]
 8010550:	059a      	lsls	r2, r3, #22
 8010552:	d402      	bmi.n	801055a <_vfiprintf_r+0x2a>
 8010554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010556:	f7ff fd3a 	bl	800ffce <__retarget_lock_acquire_recursive>
 801055a:	89ab      	ldrh	r3, [r5, #12]
 801055c:	071b      	lsls	r3, r3, #28
 801055e:	d501      	bpl.n	8010564 <_vfiprintf_r+0x34>
 8010560:	692b      	ldr	r3, [r5, #16]
 8010562:	b99b      	cbnz	r3, 801058c <_vfiprintf_r+0x5c>
 8010564:	4629      	mov	r1, r5
 8010566:	4630      	mov	r0, r6
 8010568:	f000 fb82 	bl	8010c70 <__swsetup_r>
 801056c:	b170      	cbz	r0, 801058c <_vfiprintf_r+0x5c>
 801056e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010570:	07dc      	lsls	r4, r3, #31
 8010572:	d504      	bpl.n	801057e <_vfiprintf_r+0x4e>
 8010574:	f04f 30ff 	mov.w	r0, #4294967295
 8010578:	b01d      	add	sp, #116	@ 0x74
 801057a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057e:	89ab      	ldrh	r3, [r5, #12]
 8010580:	0598      	lsls	r0, r3, #22
 8010582:	d4f7      	bmi.n	8010574 <_vfiprintf_r+0x44>
 8010584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010586:	f7ff fd23 	bl	800ffd0 <__retarget_lock_release_recursive>
 801058a:	e7f3      	b.n	8010574 <_vfiprintf_r+0x44>
 801058c:	2300      	movs	r3, #0
 801058e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010590:	2320      	movs	r3, #32
 8010592:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010596:	f8cd 800c 	str.w	r8, [sp, #12]
 801059a:	2330      	movs	r3, #48	@ 0x30
 801059c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801074c <_vfiprintf_r+0x21c>
 80105a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80105a4:	f04f 0901 	mov.w	r9, #1
 80105a8:	4623      	mov	r3, r4
 80105aa:	469a      	mov	sl, r3
 80105ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105b0:	b10a      	cbz	r2, 80105b6 <_vfiprintf_r+0x86>
 80105b2:	2a25      	cmp	r2, #37	@ 0x25
 80105b4:	d1f9      	bne.n	80105aa <_vfiprintf_r+0x7a>
 80105b6:	ebba 0b04 	subs.w	fp, sl, r4
 80105ba:	d00b      	beq.n	80105d4 <_vfiprintf_r+0xa4>
 80105bc:	465b      	mov	r3, fp
 80105be:	4622      	mov	r2, r4
 80105c0:	4629      	mov	r1, r5
 80105c2:	4630      	mov	r0, r6
 80105c4:	f7ff ffa1 	bl	801050a <__sfputs_r>
 80105c8:	3001      	adds	r0, #1
 80105ca:	f000 80a7 	beq.w	801071c <_vfiprintf_r+0x1ec>
 80105ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105d0:	445a      	add	r2, fp
 80105d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80105d4:	f89a 3000 	ldrb.w	r3, [sl]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f000 809f 	beq.w	801071c <_vfiprintf_r+0x1ec>
 80105de:	2300      	movs	r3, #0
 80105e0:	f04f 32ff 	mov.w	r2, #4294967295
 80105e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105e8:	f10a 0a01 	add.w	sl, sl, #1
 80105ec:	9304      	str	r3, [sp, #16]
 80105ee:	9307      	str	r3, [sp, #28]
 80105f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80105f6:	4654      	mov	r4, sl
 80105f8:	2205      	movs	r2, #5
 80105fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105fe:	4853      	ldr	r0, [pc, #332]	@ (801074c <_vfiprintf_r+0x21c>)
 8010600:	f7ef fe0e 	bl	8000220 <memchr>
 8010604:	9a04      	ldr	r2, [sp, #16]
 8010606:	b9d8      	cbnz	r0, 8010640 <_vfiprintf_r+0x110>
 8010608:	06d1      	lsls	r1, r2, #27
 801060a:	bf44      	itt	mi
 801060c:	2320      	movmi	r3, #32
 801060e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010612:	0713      	lsls	r3, r2, #28
 8010614:	bf44      	itt	mi
 8010616:	232b      	movmi	r3, #43	@ 0x2b
 8010618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801061c:	f89a 3000 	ldrb.w	r3, [sl]
 8010620:	2b2a      	cmp	r3, #42	@ 0x2a
 8010622:	d015      	beq.n	8010650 <_vfiprintf_r+0x120>
 8010624:	9a07      	ldr	r2, [sp, #28]
 8010626:	4654      	mov	r4, sl
 8010628:	2000      	movs	r0, #0
 801062a:	f04f 0c0a 	mov.w	ip, #10
 801062e:	4621      	mov	r1, r4
 8010630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010634:	3b30      	subs	r3, #48	@ 0x30
 8010636:	2b09      	cmp	r3, #9
 8010638:	d94b      	bls.n	80106d2 <_vfiprintf_r+0x1a2>
 801063a:	b1b0      	cbz	r0, 801066a <_vfiprintf_r+0x13a>
 801063c:	9207      	str	r2, [sp, #28]
 801063e:	e014      	b.n	801066a <_vfiprintf_r+0x13a>
 8010640:	eba0 0308 	sub.w	r3, r0, r8
 8010644:	fa09 f303 	lsl.w	r3, r9, r3
 8010648:	4313      	orrs	r3, r2
 801064a:	9304      	str	r3, [sp, #16]
 801064c:	46a2      	mov	sl, r4
 801064e:	e7d2      	b.n	80105f6 <_vfiprintf_r+0xc6>
 8010650:	9b03      	ldr	r3, [sp, #12]
 8010652:	1d19      	adds	r1, r3, #4
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	9103      	str	r1, [sp, #12]
 8010658:	2b00      	cmp	r3, #0
 801065a:	bfbb      	ittet	lt
 801065c:	425b      	neglt	r3, r3
 801065e:	f042 0202 	orrlt.w	r2, r2, #2
 8010662:	9307      	strge	r3, [sp, #28]
 8010664:	9307      	strlt	r3, [sp, #28]
 8010666:	bfb8      	it	lt
 8010668:	9204      	strlt	r2, [sp, #16]
 801066a:	7823      	ldrb	r3, [r4, #0]
 801066c:	2b2e      	cmp	r3, #46	@ 0x2e
 801066e:	d10a      	bne.n	8010686 <_vfiprintf_r+0x156>
 8010670:	7863      	ldrb	r3, [r4, #1]
 8010672:	2b2a      	cmp	r3, #42	@ 0x2a
 8010674:	d132      	bne.n	80106dc <_vfiprintf_r+0x1ac>
 8010676:	9b03      	ldr	r3, [sp, #12]
 8010678:	1d1a      	adds	r2, r3, #4
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	9203      	str	r2, [sp, #12]
 801067e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010682:	3402      	adds	r4, #2
 8010684:	9305      	str	r3, [sp, #20]
 8010686:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801075c <_vfiprintf_r+0x22c>
 801068a:	7821      	ldrb	r1, [r4, #0]
 801068c:	2203      	movs	r2, #3
 801068e:	4650      	mov	r0, sl
 8010690:	f7ef fdc6 	bl	8000220 <memchr>
 8010694:	b138      	cbz	r0, 80106a6 <_vfiprintf_r+0x176>
 8010696:	9b04      	ldr	r3, [sp, #16]
 8010698:	eba0 000a 	sub.w	r0, r0, sl
 801069c:	2240      	movs	r2, #64	@ 0x40
 801069e:	4082      	lsls	r2, r0
 80106a0:	4313      	orrs	r3, r2
 80106a2:	3401      	adds	r4, #1
 80106a4:	9304      	str	r3, [sp, #16]
 80106a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106aa:	4829      	ldr	r0, [pc, #164]	@ (8010750 <_vfiprintf_r+0x220>)
 80106ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80106b0:	2206      	movs	r2, #6
 80106b2:	f7ef fdb5 	bl	8000220 <memchr>
 80106b6:	2800      	cmp	r0, #0
 80106b8:	d03f      	beq.n	801073a <_vfiprintf_r+0x20a>
 80106ba:	4b26      	ldr	r3, [pc, #152]	@ (8010754 <_vfiprintf_r+0x224>)
 80106bc:	bb1b      	cbnz	r3, 8010706 <_vfiprintf_r+0x1d6>
 80106be:	9b03      	ldr	r3, [sp, #12]
 80106c0:	3307      	adds	r3, #7
 80106c2:	f023 0307 	bic.w	r3, r3, #7
 80106c6:	3308      	adds	r3, #8
 80106c8:	9303      	str	r3, [sp, #12]
 80106ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106cc:	443b      	add	r3, r7
 80106ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80106d0:	e76a      	b.n	80105a8 <_vfiprintf_r+0x78>
 80106d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80106d6:	460c      	mov	r4, r1
 80106d8:	2001      	movs	r0, #1
 80106da:	e7a8      	b.n	801062e <_vfiprintf_r+0xfe>
 80106dc:	2300      	movs	r3, #0
 80106de:	3401      	adds	r4, #1
 80106e0:	9305      	str	r3, [sp, #20]
 80106e2:	4619      	mov	r1, r3
 80106e4:	f04f 0c0a 	mov.w	ip, #10
 80106e8:	4620      	mov	r0, r4
 80106ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106ee:	3a30      	subs	r2, #48	@ 0x30
 80106f0:	2a09      	cmp	r2, #9
 80106f2:	d903      	bls.n	80106fc <_vfiprintf_r+0x1cc>
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d0c6      	beq.n	8010686 <_vfiprintf_r+0x156>
 80106f8:	9105      	str	r1, [sp, #20]
 80106fa:	e7c4      	b.n	8010686 <_vfiprintf_r+0x156>
 80106fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010700:	4604      	mov	r4, r0
 8010702:	2301      	movs	r3, #1
 8010704:	e7f0      	b.n	80106e8 <_vfiprintf_r+0x1b8>
 8010706:	ab03      	add	r3, sp, #12
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	462a      	mov	r2, r5
 801070c:	4b12      	ldr	r3, [pc, #72]	@ (8010758 <_vfiprintf_r+0x228>)
 801070e:	a904      	add	r1, sp, #16
 8010710:	4630      	mov	r0, r6
 8010712:	f3af 8000 	nop.w
 8010716:	4607      	mov	r7, r0
 8010718:	1c78      	adds	r0, r7, #1
 801071a:	d1d6      	bne.n	80106ca <_vfiprintf_r+0x19a>
 801071c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801071e:	07d9      	lsls	r1, r3, #31
 8010720:	d405      	bmi.n	801072e <_vfiprintf_r+0x1fe>
 8010722:	89ab      	ldrh	r3, [r5, #12]
 8010724:	059a      	lsls	r2, r3, #22
 8010726:	d402      	bmi.n	801072e <_vfiprintf_r+0x1fe>
 8010728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801072a:	f7ff fc51 	bl	800ffd0 <__retarget_lock_release_recursive>
 801072e:	89ab      	ldrh	r3, [r5, #12]
 8010730:	065b      	lsls	r3, r3, #25
 8010732:	f53f af1f 	bmi.w	8010574 <_vfiprintf_r+0x44>
 8010736:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010738:	e71e      	b.n	8010578 <_vfiprintf_r+0x48>
 801073a:	ab03      	add	r3, sp, #12
 801073c:	9300      	str	r3, [sp, #0]
 801073e:	462a      	mov	r2, r5
 8010740:	4b05      	ldr	r3, [pc, #20]	@ (8010758 <_vfiprintf_r+0x228>)
 8010742:	a904      	add	r1, sp, #16
 8010744:	4630      	mov	r0, r6
 8010746:	f000 f879 	bl	801083c <_printf_i>
 801074a:	e7e4      	b.n	8010716 <_vfiprintf_r+0x1e6>
 801074c:	0801414f 	.word	0x0801414f
 8010750:	08014159 	.word	0x08014159
 8010754:	00000000 	.word	0x00000000
 8010758:	0801050b 	.word	0x0801050b
 801075c:	08014155 	.word	0x08014155

08010760 <_printf_common>:
 8010760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010764:	4616      	mov	r6, r2
 8010766:	4698      	mov	r8, r3
 8010768:	688a      	ldr	r2, [r1, #8]
 801076a:	690b      	ldr	r3, [r1, #16]
 801076c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010770:	4293      	cmp	r3, r2
 8010772:	bfb8      	it	lt
 8010774:	4613      	movlt	r3, r2
 8010776:	6033      	str	r3, [r6, #0]
 8010778:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801077c:	4607      	mov	r7, r0
 801077e:	460c      	mov	r4, r1
 8010780:	b10a      	cbz	r2, 8010786 <_printf_common+0x26>
 8010782:	3301      	adds	r3, #1
 8010784:	6033      	str	r3, [r6, #0]
 8010786:	6823      	ldr	r3, [r4, #0]
 8010788:	0699      	lsls	r1, r3, #26
 801078a:	bf42      	ittt	mi
 801078c:	6833      	ldrmi	r3, [r6, #0]
 801078e:	3302      	addmi	r3, #2
 8010790:	6033      	strmi	r3, [r6, #0]
 8010792:	6825      	ldr	r5, [r4, #0]
 8010794:	f015 0506 	ands.w	r5, r5, #6
 8010798:	d106      	bne.n	80107a8 <_printf_common+0x48>
 801079a:	f104 0a19 	add.w	sl, r4, #25
 801079e:	68e3      	ldr	r3, [r4, #12]
 80107a0:	6832      	ldr	r2, [r6, #0]
 80107a2:	1a9b      	subs	r3, r3, r2
 80107a4:	42ab      	cmp	r3, r5
 80107a6:	dc26      	bgt.n	80107f6 <_printf_common+0x96>
 80107a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80107ac:	6822      	ldr	r2, [r4, #0]
 80107ae:	3b00      	subs	r3, #0
 80107b0:	bf18      	it	ne
 80107b2:	2301      	movne	r3, #1
 80107b4:	0692      	lsls	r2, r2, #26
 80107b6:	d42b      	bmi.n	8010810 <_printf_common+0xb0>
 80107b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80107bc:	4641      	mov	r1, r8
 80107be:	4638      	mov	r0, r7
 80107c0:	47c8      	blx	r9
 80107c2:	3001      	adds	r0, #1
 80107c4:	d01e      	beq.n	8010804 <_printf_common+0xa4>
 80107c6:	6823      	ldr	r3, [r4, #0]
 80107c8:	6922      	ldr	r2, [r4, #16]
 80107ca:	f003 0306 	and.w	r3, r3, #6
 80107ce:	2b04      	cmp	r3, #4
 80107d0:	bf02      	ittt	eq
 80107d2:	68e5      	ldreq	r5, [r4, #12]
 80107d4:	6833      	ldreq	r3, [r6, #0]
 80107d6:	1aed      	subeq	r5, r5, r3
 80107d8:	68a3      	ldr	r3, [r4, #8]
 80107da:	bf0c      	ite	eq
 80107dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80107e0:	2500      	movne	r5, #0
 80107e2:	4293      	cmp	r3, r2
 80107e4:	bfc4      	itt	gt
 80107e6:	1a9b      	subgt	r3, r3, r2
 80107e8:	18ed      	addgt	r5, r5, r3
 80107ea:	2600      	movs	r6, #0
 80107ec:	341a      	adds	r4, #26
 80107ee:	42b5      	cmp	r5, r6
 80107f0:	d11a      	bne.n	8010828 <_printf_common+0xc8>
 80107f2:	2000      	movs	r0, #0
 80107f4:	e008      	b.n	8010808 <_printf_common+0xa8>
 80107f6:	2301      	movs	r3, #1
 80107f8:	4652      	mov	r2, sl
 80107fa:	4641      	mov	r1, r8
 80107fc:	4638      	mov	r0, r7
 80107fe:	47c8      	blx	r9
 8010800:	3001      	adds	r0, #1
 8010802:	d103      	bne.n	801080c <_printf_common+0xac>
 8010804:	f04f 30ff 	mov.w	r0, #4294967295
 8010808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801080c:	3501      	adds	r5, #1
 801080e:	e7c6      	b.n	801079e <_printf_common+0x3e>
 8010810:	18e1      	adds	r1, r4, r3
 8010812:	1c5a      	adds	r2, r3, #1
 8010814:	2030      	movs	r0, #48	@ 0x30
 8010816:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801081a:	4422      	add	r2, r4
 801081c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010820:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010824:	3302      	adds	r3, #2
 8010826:	e7c7      	b.n	80107b8 <_printf_common+0x58>
 8010828:	2301      	movs	r3, #1
 801082a:	4622      	mov	r2, r4
 801082c:	4641      	mov	r1, r8
 801082e:	4638      	mov	r0, r7
 8010830:	47c8      	blx	r9
 8010832:	3001      	adds	r0, #1
 8010834:	d0e6      	beq.n	8010804 <_printf_common+0xa4>
 8010836:	3601      	adds	r6, #1
 8010838:	e7d9      	b.n	80107ee <_printf_common+0x8e>
	...

0801083c <_printf_i>:
 801083c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010840:	7e0f      	ldrb	r7, [r1, #24]
 8010842:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010844:	2f78      	cmp	r7, #120	@ 0x78
 8010846:	4691      	mov	r9, r2
 8010848:	4680      	mov	r8, r0
 801084a:	460c      	mov	r4, r1
 801084c:	469a      	mov	sl, r3
 801084e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010852:	d807      	bhi.n	8010864 <_printf_i+0x28>
 8010854:	2f62      	cmp	r7, #98	@ 0x62
 8010856:	d80a      	bhi.n	801086e <_printf_i+0x32>
 8010858:	2f00      	cmp	r7, #0
 801085a:	f000 80d1 	beq.w	8010a00 <_printf_i+0x1c4>
 801085e:	2f58      	cmp	r7, #88	@ 0x58
 8010860:	f000 80b8 	beq.w	80109d4 <_printf_i+0x198>
 8010864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010868:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801086c:	e03a      	b.n	80108e4 <_printf_i+0xa8>
 801086e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010872:	2b15      	cmp	r3, #21
 8010874:	d8f6      	bhi.n	8010864 <_printf_i+0x28>
 8010876:	a101      	add	r1, pc, #4	@ (adr r1, 801087c <_printf_i+0x40>)
 8010878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801087c:	080108d5 	.word	0x080108d5
 8010880:	080108e9 	.word	0x080108e9
 8010884:	08010865 	.word	0x08010865
 8010888:	08010865 	.word	0x08010865
 801088c:	08010865 	.word	0x08010865
 8010890:	08010865 	.word	0x08010865
 8010894:	080108e9 	.word	0x080108e9
 8010898:	08010865 	.word	0x08010865
 801089c:	08010865 	.word	0x08010865
 80108a0:	08010865 	.word	0x08010865
 80108a4:	08010865 	.word	0x08010865
 80108a8:	080109e7 	.word	0x080109e7
 80108ac:	08010913 	.word	0x08010913
 80108b0:	080109a1 	.word	0x080109a1
 80108b4:	08010865 	.word	0x08010865
 80108b8:	08010865 	.word	0x08010865
 80108bc:	08010a09 	.word	0x08010a09
 80108c0:	08010865 	.word	0x08010865
 80108c4:	08010913 	.word	0x08010913
 80108c8:	08010865 	.word	0x08010865
 80108cc:	08010865 	.word	0x08010865
 80108d0:	080109a9 	.word	0x080109a9
 80108d4:	6833      	ldr	r3, [r6, #0]
 80108d6:	1d1a      	adds	r2, r3, #4
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	6032      	str	r2, [r6, #0]
 80108dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80108e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80108e4:	2301      	movs	r3, #1
 80108e6:	e09c      	b.n	8010a22 <_printf_i+0x1e6>
 80108e8:	6833      	ldr	r3, [r6, #0]
 80108ea:	6820      	ldr	r0, [r4, #0]
 80108ec:	1d19      	adds	r1, r3, #4
 80108ee:	6031      	str	r1, [r6, #0]
 80108f0:	0606      	lsls	r6, r0, #24
 80108f2:	d501      	bpl.n	80108f8 <_printf_i+0xbc>
 80108f4:	681d      	ldr	r5, [r3, #0]
 80108f6:	e003      	b.n	8010900 <_printf_i+0xc4>
 80108f8:	0645      	lsls	r5, r0, #25
 80108fa:	d5fb      	bpl.n	80108f4 <_printf_i+0xb8>
 80108fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010900:	2d00      	cmp	r5, #0
 8010902:	da03      	bge.n	801090c <_printf_i+0xd0>
 8010904:	232d      	movs	r3, #45	@ 0x2d
 8010906:	426d      	negs	r5, r5
 8010908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801090c:	4858      	ldr	r0, [pc, #352]	@ (8010a70 <_printf_i+0x234>)
 801090e:	230a      	movs	r3, #10
 8010910:	e011      	b.n	8010936 <_printf_i+0xfa>
 8010912:	6821      	ldr	r1, [r4, #0]
 8010914:	6833      	ldr	r3, [r6, #0]
 8010916:	0608      	lsls	r0, r1, #24
 8010918:	f853 5b04 	ldr.w	r5, [r3], #4
 801091c:	d402      	bmi.n	8010924 <_printf_i+0xe8>
 801091e:	0649      	lsls	r1, r1, #25
 8010920:	bf48      	it	mi
 8010922:	b2ad      	uxthmi	r5, r5
 8010924:	2f6f      	cmp	r7, #111	@ 0x6f
 8010926:	4852      	ldr	r0, [pc, #328]	@ (8010a70 <_printf_i+0x234>)
 8010928:	6033      	str	r3, [r6, #0]
 801092a:	bf14      	ite	ne
 801092c:	230a      	movne	r3, #10
 801092e:	2308      	moveq	r3, #8
 8010930:	2100      	movs	r1, #0
 8010932:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010936:	6866      	ldr	r6, [r4, #4]
 8010938:	60a6      	str	r6, [r4, #8]
 801093a:	2e00      	cmp	r6, #0
 801093c:	db05      	blt.n	801094a <_printf_i+0x10e>
 801093e:	6821      	ldr	r1, [r4, #0]
 8010940:	432e      	orrs	r6, r5
 8010942:	f021 0104 	bic.w	r1, r1, #4
 8010946:	6021      	str	r1, [r4, #0]
 8010948:	d04b      	beq.n	80109e2 <_printf_i+0x1a6>
 801094a:	4616      	mov	r6, r2
 801094c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010950:	fb03 5711 	mls	r7, r3, r1, r5
 8010954:	5dc7      	ldrb	r7, [r0, r7]
 8010956:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801095a:	462f      	mov	r7, r5
 801095c:	42bb      	cmp	r3, r7
 801095e:	460d      	mov	r5, r1
 8010960:	d9f4      	bls.n	801094c <_printf_i+0x110>
 8010962:	2b08      	cmp	r3, #8
 8010964:	d10b      	bne.n	801097e <_printf_i+0x142>
 8010966:	6823      	ldr	r3, [r4, #0]
 8010968:	07df      	lsls	r7, r3, #31
 801096a:	d508      	bpl.n	801097e <_printf_i+0x142>
 801096c:	6923      	ldr	r3, [r4, #16]
 801096e:	6861      	ldr	r1, [r4, #4]
 8010970:	4299      	cmp	r1, r3
 8010972:	bfde      	ittt	le
 8010974:	2330      	movle	r3, #48	@ 0x30
 8010976:	f806 3c01 	strble.w	r3, [r6, #-1]
 801097a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801097e:	1b92      	subs	r2, r2, r6
 8010980:	6122      	str	r2, [r4, #16]
 8010982:	f8cd a000 	str.w	sl, [sp]
 8010986:	464b      	mov	r3, r9
 8010988:	aa03      	add	r2, sp, #12
 801098a:	4621      	mov	r1, r4
 801098c:	4640      	mov	r0, r8
 801098e:	f7ff fee7 	bl	8010760 <_printf_common>
 8010992:	3001      	adds	r0, #1
 8010994:	d14a      	bne.n	8010a2c <_printf_i+0x1f0>
 8010996:	f04f 30ff 	mov.w	r0, #4294967295
 801099a:	b004      	add	sp, #16
 801099c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109a0:	6823      	ldr	r3, [r4, #0]
 80109a2:	f043 0320 	orr.w	r3, r3, #32
 80109a6:	6023      	str	r3, [r4, #0]
 80109a8:	4832      	ldr	r0, [pc, #200]	@ (8010a74 <_printf_i+0x238>)
 80109aa:	2778      	movs	r7, #120	@ 0x78
 80109ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80109b0:	6823      	ldr	r3, [r4, #0]
 80109b2:	6831      	ldr	r1, [r6, #0]
 80109b4:	061f      	lsls	r7, r3, #24
 80109b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80109ba:	d402      	bmi.n	80109c2 <_printf_i+0x186>
 80109bc:	065f      	lsls	r7, r3, #25
 80109be:	bf48      	it	mi
 80109c0:	b2ad      	uxthmi	r5, r5
 80109c2:	6031      	str	r1, [r6, #0]
 80109c4:	07d9      	lsls	r1, r3, #31
 80109c6:	bf44      	itt	mi
 80109c8:	f043 0320 	orrmi.w	r3, r3, #32
 80109cc:	6023      	strmi	r3, [r4, #0]
 80109ce:	b11d      	cbz	r5, 80109d8 <_printf_i+0x19c>
 80109d0:	2310      	movs	r3, #16
 80109d2:	e7ad      	b.n	8010930 <_printf_i+0xf4>
 80109d4:	4826      	ldr	r0, [pc, #152]	@ (8010a70 <_printf_i+0x234>)
 80109d6:	e7e9      	b.n	80109ac <_printf_i+0x170>
 80109d8:	6823      	ldr	r3, [r4, #0]
 80109da:	f023 0320 	bic.w	r3, r3, #32
 80109de:	6023      	str	r3, [r4, #0]
 80109e0:	e7f6      	b.n	80109d0 <_printf_i+0x194>
 80109e2:	4616      	mov	r6, r2
 80109e4:	e7bd      	b.n	8010962 <_printf_i+0x126>
 80109e6:	6833      	ldr	r3, [r6, #0]
 80109e8:	6825      	ldr	r5, [r4, #0]
 80109ea:	6961      	ldr	r1, [r4, #20]
 80109ec:	1d18      	adds	r0, r3, #4
 80109ee:	6030      	str	r0, [r6, #0]
 80109f0:	062e      	lsls	r6, r5, #24
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	d501      	bpl.n	80109fa <_printf_i+0x1be>
 80109f6:	6019      	str	r1, [r3, #0]
 80109f8:	e002      	b.n	8010a00 <_printf_i+0x1c4>
 80109fa:	0668      	lsls	r0, r5, #25
 80109fc:	d5fb      	bpl.n	80109f6 <_printf_i+0x1ba>
 80109fe:	8019      	strh	r1, [r3, #0]
 8010a00:	2300      	movs	r3, #0
 8010a02:	6123      	str	r3, [r4, #16]
 8010a04:	4616      	mov	r6, r2
 8010a06:	e7bc      	b.n	8010982 <_printf_i+0x146>
 8010a08:	6833      	ldr	r3, [r6, #0]
 8010a0a:	1d1a      	adds	r2, r3, #4
 8010a0c:	6032      	str	r2, [r6, #0]
 8010a0e:	681e      	ldr	r6, [r3, #0]
 8010a10:	6862      	ldr	r2, [r4, #4]
 8010a12:	2100      	movs	r1, #0
 8010a14:	4630      	mov	r0, r6
 8010a16:	f7ef fc03 	bl	8000220 <memchr>
 8010a1a:	b108      	cbz	r0, 8010a20 <_printf_i+0x1e4>
 8010a1c:	1b80      	subs	r0, r0, r6
 8010a1e:	6060      	str	r0, [r4, #4]
 8010a20:	6863      	ldr	r3, [r4, #4]
 8010a22:	6123      	str	r3, [r4, #16]
 8010a24:	2300      	movs	r3, #0
 8010a26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a2a:	e7aa      	b.n	8010982 <_printf_i+0x146>
 8010a2c:	6923      	ldr	r3, [r4, #16]
 8010a2e:	4632      	mov	r2, r6
 8010a30:	4649      	mov	r1, r9
 8010a32:	4640      	mov	r0, r8
 8010a34:	47d0      	blx	sl
 8010a36:	3001      	adds	r0, #1
 8010a38:	d0ad      	beq.n	8010996 <_printf_i+0x15a>
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	079b      	lsls	r3, r3, #30
 8010a3e:	d413      	bmi.n	8010a68 <_printf_i+0x22c>
 8010a40:	68e0      	ldr	r0, [r4, #12]
 8010a42:	9b03      	ldr	r3, [sp, #12]
 8010a44:	4298      	cmp	r0, r3
 8010a46:	bfb8      	it	lt
 8010a48:	4618      	movlt	r0, r3
 8010a4a:	e7a6      	b.n	801099a <_printf_i+0x15e>
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	4632      	mov	r2, r6
 8010a50:	4649      	mov	r1, r9
 8010a52:	4640      	mov	r0, r8
 8010a54:	47d0      	blx	sl
 8010a56:	3001      	adds	r0, #1
 8010a58:	d09d      	beq.n	8010996 <_printf_i+0x15a>
 8010a5a:	3501      	adds	r5, #1
 8010a5c:	68e3      	ldr	r3, [r4, #12]
 8010a5e:	9903      	ldr	r1, [sp, #12]
 8010a60:	1a5b      	subs	r3, r3, r1
 8010a62:	42ab      	cmp	r3, r5
 8010a64:	dcf2      	bgt.n	8010a4c <_printf_i+0x210>
 8010a66:	e7eb      	b.n	8010a40 <_printf_i+0x204>
 8010a68:	2500      	movs	r5, #0
 8010a6a:	f104 0619 	add.w	r6, r4, #25
 8010a6e:	e7f5      	b.n	8010a5c <_printf_i+0x220>
 8010a70:	08014160 	.word	0x08014160
 8010a74:	08014171 	.word	0x08014171

08010a78 <__sflush_r>:
 8010a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a80:	0716      	lsls	r6, r2, #28
 8010a82:	4605      	mov	r5, r0
 8010a84:	460c      	mov	r4, r1
 8010a86:	d454      	bmi.n	8010b32 <__sflush_r+0xba>
 8010a88:	684b      	ldr	r3, [r1, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	dc02      	bgt.n	8010a94 <__sflush_r+0x1c>
 8010a8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	dd48      	ble.n	8010b26 <__sflush_r+0xae>
 8010a94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010a96:	2e00      	cmp	r6, #0
 8010a98:	d045      	beq.n	8010b26 <__sflush_r+0xae>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010aa0:	682f      	ldr	r7, [r5, #0]
 8010aa2:	6a21      	ldr	r1, [r4, #32]
 8010aa4:	602b      	str	r3, [r5, #0]
 8010aa6:	d030      	beq.n	8010b0a <__sflush_r+0x92>
 8010aa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010aaa:	89a3      	ldrh	r3, [r4, #12]
 8010aac:	0759      	lsls	r1, r3, #29
 8010aae:	d505      	bpl.n	8010abc <__sflush_r+0x44>
 8010ab0:	6863      	ldr	r3, [r4, #4]
 8010ab2:	1ad2      	subs	r2, r2, r3
 8010ab4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ab6:	b10b      	cbz	r3, 8010abc <__sflush_r+0x44>
 8010ab8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010aba:	1ad2      	subs	r2, r2, r3
 8010abc:	2300      	movs	r3, #0
 8010abe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ac0:	6a21      	ldr	r1, [r4, #32]
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	47b0      	blx	r6
 8010ac6:	1c43      	adds	r3, r0, #1
 8010ac8:	89a3      	ldrh	r3, [r4, #12]
 8010aca:	d106      	bne.n	8010ada <__sflush_r+0x62>
 8010acc:	6829      	ldr	r1, [r5, #0]
 8010ace:	291d      	cmp	r1, #29
 8010ad0:	d82b      	bhi.n	8010b2a <__sflush_r+0xb2>
 8010ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8010b7c <__sflush_r+0x104>)
 8010ad4:	40ca      	lsrs	r2, r1
 8010ad6:	07d6      	lsls	r6, r2, #31
 8010ad8:	d527      	bpl.n	8010b2a <__sflush_r+0xb2>
 8010ada:	2200      	movs	r2, #0
 8010adc:	6062      	str	r2, [r4, #4]
 8010ade:	04d9      	lsls	r1, r3, #19
 8010ae0:	6922      	ldr	r2, [r4, #16]
 8010ae2:	6022      	str	r2, [r4, #0]
 8010ae4:	d504      	bpl.n	8010af0 <__sflush_r+0x78>
 8010ae6:	1c42      	adds	r2, r0, #1
 8010ae8:	d101      	bne.n	8010aee <__sflush_r+0x76>
 8010aea:	682b      	ldr	r3, [r5, #0]
 8010aec:	b903      	cbnz	r3, 8010af0 <__sflush_r+0x78>
 8010aee:	6560      	str	r0, [r4, #84]	@ 0x54
 8010af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010af2:	602f      	str	r7, [r5, #0]
 8010af4:	b1b9      	cbz	r1, 8010b26 <__sflush_r+0xae>
 8010af6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010afa:	4299      	cmp	r1, r3
 8010afc:	d002      	beq.n	8010b04 <__sflush_r+0x8c>
 8010afe:	4628      	mov	r0, r5
 8010b00:	f7ff fa94 	bl	801002c <_free_r>
 8010b04:	2300      	movs	r3, #0
 8010b06:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b08:	e00d      	b.n	8010b26 <__sflush_r+0xae>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	4628      	mov	r0, r5
 8010b0e:	47b0      	blx	r6
 8010b10:	4602      	mov	r2, r0
 8010b12:	1c50      	adds	r0, r2, #1
 8010b14:	d1c9      	bne.n	8010aaa <__sflush_r+0x32>
 8010b16:	682b      	ldr	r3, [r5, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d0c6      	beq.n	8010aaa <__sflush_r+0x32>
 8010b1c:	2b1d      	cmp	r3, #29
 8010b1e:	d001      	beq.n	8010b24 <__sflush_r+0xac>
 8010b20:	2b16      	cmp	r3, #22
 8010b22:	d11e      	bne.n	8010b62 <__sflush_r+0xea>
 8010b24:	602f      	str	r7, [r5, #0]
 8010b26:	2000      	movs	r0, #0
 8010b28:	e022      	b.n	8010b70 <__sflush_r+0xf8>
 8010b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b2e:	b21b      	sxth	r3, r3
 8010b30:	e01b      	b.n	8010b6a <__sflush_r+0xf2>
 8010b32:	690f      	ldr	r7, [r1, #16]
 8010b34:	2f00      	cmp	r7, #0
 8010b36:	d0f6      	beq.n	8010b26 <__sflush_r+0xae>
 8010b38:	0793      	lsls	r3, r2, #30
 8010b3a:	680e      	ldr	r6, [r1, #0]
 8010b3c:	bf08      	it	eq
 8010b3e:	694b      	ldreq	r3, [r1, #20]
 8010b40:	600f      	str	r7, [r1, #0]
 8010b42:	bf18      	it	ne
 8010b44:	2300      	movne	r3, #0
 8010b46:	eba6 0807 	sub.w	r8, r6, r7
 8010b4a:	608b      	str	r3, [r1, #8]
 8010b4c:	f1b8 0f00 	cmp.w	r8, #0
 8010b50:	dde9      	ble.n	8010b26 <__sflush_r+0xae>
 8010b52:	6a21      	ldr	r1, [r4, #32]
 8010b54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010b56:	4643      	mov	r3, r8
 8010b58:	463a      	mov	r2, r7
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	47b0      	blx	r6
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	dc08      	bgt.n	8010b74 <__sflush_r+0xfc>
 8010b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b6a:	81a3      	strh	r3, [r4, #12]
 8010b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b74:	4407      	add	r7, r0
 8010b76:	eba8 0800 	sub.w	r8, r8, r0
 8010b7a:	e7e7      	b.n	8010b4c <__sflush_r+0xd4>
 8010b7c:	20400001 	.word	0x20400001

08010b80 <_fflush_r>:
 8010b80:	b538      	push	{r3, r4, r5, lr}
 8010b82:	690b      	ldr	r3, [r1, #16]
 8010b84:	4605      	mov	r5, r0
 8010b86:	460c      	mov	r4, r1
 8010b88:	b913      	cbnz	r3, 8010b90 <_fflush_r+0x10>
 8010b8a:	2500      	movs	r5, #0
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	bd38      	pop	{r3, r4, r5, pc}
 8010b90:	b118      	cbz	r0, 8010b9a <_fflush_r+0x1a>
 8010b92:	6a03      	ldr	r3, [r0, #32]
 8010b94:	b90b      	cbnz	r3, 8010b9a <_fflush_r+0x1a>
 8010b96:	f7ff f87f 	bl	800fc98 <__sinit>
 8010b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d0f3      	beq.n	8010b8a <_fflush_r+0xa>
 8010ba2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010ba4:	07d0      	lsls	r0, r2, #31
 8010ba6:	d404      	bmi.n	8010bb2 <_fflush_r+0x32>
 8010ba8:	0599      	lsls	r1, r3, #22
 8010baa:	d402      	bmi.n	8010bb2 <_fflush_r+0x32>
 8010bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bae:	f7ff fa0e 	bl	800ffce <__retarget_lock_acquire_recursive>
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	4621      	mov	r1, r4
 8010bb6:	f7ff ff5f 	bl	8010a78 <__sflush_r>
 8010bba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010bbc:	07da      	lsls	r2, r3, #31
 8010bbe:	4605      	mov	r5, r0
 8010bc0:	d4e4      	bmi.n	8010b8c <_fflush_r+0xc>
 8010bc2:	89a3      	ldrh	r3, [r4, #12]
 8010bc4:	059b      	lsls	r3, r3, #22
 8010bc6:	d4e1      	bmi.n	8010b8c <_fflush_r+0xc>
 8010bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bca:	f7ff fa01 	bl	800ffd0 <__retarget_lock_release_recursive>
 8010bce:	e7dd      	b.n	8010b8c <_fflush_r+0xc>

08010bd0 <fiprintf>:
 8010bd0:	b40e      	push	{r1, r2, r3}
 8010bd2:	b503      	push	{r0, r1, lr}
 8010bd4:	4601      	mov	r1, r0
 8010bd6:	ab03      	add	r3, sp, #12
 8010bd8:	4805      	ldr	r0, [pc, #20]	@ (8010bf0 <fiprintf+0x20>)
 8010bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bde:	6800      	ldr	r0, [r0, #0]
 8010be0:	9301      	str	r3, [sp, #4]
 8010be2:	f7ff fca5 	bl	8010530 <_vfiprintf_r>
 8010be6:	b002      	add	sp, #8
 8010be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bec:	b003      	add	sp, #12
 8010bee:	4770      	bx	lr
 8010bf0:	20000048 	.word	0x20000048

08010bf4 <__swbuf_r>:
 8010bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bf6:	460e      	mov	r6, r1
 8010bf8:	4614      	mov	r4, r2
 8010bfa:	4605      	mov	r5, r0
 8010bfc:	b118      	cbz	r0, 8010c06 <__swbuf_r+0x12>
 8010bfe:	6a03      	ldr	r3, [r0, #32]
 8010c00:	b90b      	cbnz	r3, 8010c06 <__swbuf_r+0x12>
 8010c02:	f7ff f849 	bl	800fc98 <__sinit>
 8010c06:	69a3      	ldr	r3, [r4, #24]
 8010c08:	60a3      	str	r3, [r4, #8]
 8010c0a:	89a3      	ldrh	r3, [r4, #12]
 8010c0c:	071a      	lsls	r2, r3, #28
 8010c0e:	d501      	bpl.n	8010c14 <__swbuf_r+0x20>
 8010c10:	6923      	ldr	r3, [r4, #16]
 8010c12:	b943      	cbnz	r3, 8010c26 <__swbuf_r+0x32>
 8010c14:	4621      	mov	r1, r4
 8010c16:	4628      	mov	r0, r5
 8010c18:	f000 f82a 	bl	8010c70 <__swsetup_r>
 8010c1c:	b118      	cbz	r0, 8010c26 <__swbuf_r+0x32>
 8010c1e:	f04f 37ff 	mov.w	r7, #4294967295
 8010c22:	4638      	mov	r0, r7
 8010c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c26:	6823      	ldr	r3, [r4, #0]
 8010c28:	6922      	ldr	r2, [r4, #16]
 8010c2a:	1a98      	subs	r0, r3, r2
 8010c2c:	6963      	ldr	r3, [r4, #20]
 8010c2e:	b2f6      	uxtb	r6, r6
 8010c30:	4283      	cmp	r3, r0
 8010c32:	4637      	mov	r7, r6
 8010c34:	dc05      	bgt.n	8010c42 <__swbuf_r+0x4e>
 8010c36:	4621      	mov	r1, r4
 8010c38:	4628      	mov	r0, r5
 8010c3a:	f7ff ffa1 	bl	8010b80 <_fflush_r>
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	d1ed      	bne.n	8010c1e <__swbuf_r+0x2a>
 8010c42:	68a3      	ldr	r3, [r4, #8]
 8010c44:	3b01      	subs	r3, #1
 8010c46:	60a3      	str	r3, [r4, #8]
 8010c48:	6823      	ldr	r3, [r4, #0]
 8010c4a:	1c5a      	adds	r2, r3, #1
 8010c4c:	6022      	str	r2, [r4, #0]
 8010c4e:	701e      	strb	r6, [r3, #0]
 8010c50:	6962      	ldr	r2, [r4, #20]
 8010c52:	1c43      	adds	r3, r0, #1
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d004      	beq.n	8010c62 <__swbuf_r+0x6e>
 8010c58:	89a3      	ldrh	r3, [r4, #12]
 8010c5a:	07db      	lsls	r3, r3, #31
 8010c5c:	d5e1      	bpl.n	8010c22 <__swbuf_r+0x2e>
 8010c5e:	2e0a      	cmp	r6, #10
 8010c60:	d1df      	bne.n	8010c22 <__swbuf_r+0x2e>
 8010c62:	4621      	mov	r1, r4
 8010c64:	4628      	mov	r0, r5
 8010c66:	f7ff ff8b 	bl	8010b80 <_fflush_r>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	d0d9      	beq.n	8010c22 <__swbuf_r+0x2e>
 8010c6e:	e7d6      	b.n	8010c1e <__swbuf_r+0x2a>

08010c70 <__swsetup_r>:
 8010c70:	b538      	push	{r3, r4, r5, lr}
 8010c72:	4b29      	ldr	r3, [pc, #164]	@ (8010d18 <__swsetup_r+0xa8>)
 8010c74:	4605      	mov	r5, r0
 8010c76:	6818      	ldr	r0, [r3, #0]
 8010c78:	460c      	mov	r4, r1
 8010c7a:	b118      	cbz	r0, 8010c84 <__swsetup_r+0x14>
 8010c7c:	6a03      	ldr	r3, [r0, #32]
 8010c7e:	b90b      	cbnz	r3, 8010c84 <__swsetup_r+0x14>
 8010c80:	f7ff f80a 	bl	800fc98 <__sinit>
 8010c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c88:	0719      	lsls	r1, r3, #28
 8010c8a:	d422      	bmi.n	8010cd2 <__swsetup_r+0x62>
 8010c8c:	06da      	lsls	r2, r3, #27
 8010c8e:	d407      	bmi.n	8010ca0 <__swsetup_r+0x30>
 8010c90:	2209      	movs	r2, #9
 8010c92:	602a      	str	r2, [r5, #0]
 8010c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c98:	81a3      	strh	r3, [r4, #12]
 8010c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9e:	e033      	b.n	8010d08 <__swsetup_r+0x98>
 8010ca0:	0758      	lsls	r0, r3, #29
 8010ca2:	d512      	bpl.n	8010cca <__swsetup_r+0x5a>
 8010ca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ca6:	b141      	cbz	r1, 8010cba <__swsetup_r+0x4a>
 8010ca8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010cac:	4299      	cmp	r1, r3
 8010cae:	d002      	beq.n	8010cb6 <__swsetup_r+0x46>
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	f7ff f9bb 	bl	801002c <_free_r>
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8010cba:	89a3      	ldrh	r3, [r4, #12]
 8010cbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010cc0:	81a3      	strh	r3, [r4, #12]
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	6063      	str	r3, [r4, #4]
 8010cc6:	6923      	ldr	r3, [r4, #16]
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	89a3      	ldrh	r3, [r4, #12]
 8010ccc:	f043 0308 	orr.w	r3, r3, #8
 8010cd0:	81a3      	strh	r3, [r4, #12]
 8010cd2:	6923      	ldr	r3, [r4, #16]
 8010cd4:	b94b      	cbnz	r3, 8010cea <__swsetup_r+0x7a>
 8010cd6:	89a3      	ldrh	r3, [r4, #12]
 8010cd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ce0:	d003      	beq.n	8010cea <__swsetup_r+0x7a>
 8010ce2:	4621      	mov	r1, r4
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	f000 f884 	bl	8010df2 <__smakebuf_r>
 8010cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cee:	f013 0201 	ands.w	r2, r3, #1
 8010cf2:	d00a      	beq.n	8010d0a <__swsetup_r+0x9a>
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	60a2      	str	r2, [r4, #8]
 8010cf8:	6962      	ldr	r2, [r4, #20]
 8010cfa:	4252      	negs	r2, r2
 8010cfc:	61a2      	str	r2, [r4, #24]
 8010cfe:	6922      	ldr	r2, [r4, #16]
 8010d00:	b942      	cbnz	r2, 8010d14 <__swsetup_r+0xa4>
 8010d02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010d06:	d1c5      	bne.n	8010c94 <__swsetup_r+0x24>
 8010d08:	bd38      	pop	{r3, r4, r5, pc}
 8010d0a:	0799      	lsls	r1, r3, #30
 8010d0c:	bf58      	it	pl
 8010d0e:	6962      	ldrpl	r2, [r4, #20]
 8010d10:	60a2      	str	r2, [r4, #8]
 8010d12:	e7f4      	b.n	8010cfe <__swsetup_r+0x8e>
 8010d14:	2000      	movs	r0, #0
 8010d16:	e7f7      	b.n	8010d08 <__swsetup_r+0x98>
 8010d18:	20000048 	.word	0x20000048

08010d1c <_sbrk_r>:
 8010d1c:	b538      	push	{r3, r4, r5, lr}
 8010d1e:	4d06      	ldr	r5, [pc, #24]	@ (8010d38 <_sbrk_r+0x1c>)
 8010d20:	2300      	movs	r3, #0
 8010d22:	4604      	mov	r4, r0
 8010d24:	4608      	mov	r0, r1
 8010d26:	602b      	str	r3, [r5, #0]
 8010d28:	f7ef fe6e 	bl	8000a08 <_sbrk>
 8010d2c:	1c43      	adds	r3, r0, #1
 8010d2e:	d102      	bne.n	8010d36 <_sbrk_r+0x1a>
 8010d30:	682b      	ldr	r3, [r5, #0]
 8010d32:	b103      	cbz	r3, 8010d36 <_sbrk_r+0x1a>
 8010d34:	6023      	str	r3, [r4, #0]
 8010d36:	bd38      	pop	{r3, r4, r5, pc}
 8010d38:	2000bd1c 	.word	0x2000bd1c

08010d3c <abort>:
 8010d3c:	b508      	push	{r3, lr}
 8010d3e:	2006      	movs	r0, #6
 8010d40:	f000 f8bc 	bl	8010ebc <raise>
 8010d44:	2001      	movs	r0, #1
 8010d46:	f7ef fe03 	bl	8000950 <_exit>

08010d4a <_realloc_r>:
 8010d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d4e:	4607      	mov	r7, r0
 8010d50:	4614      	mov	r4, r2
 8010d52:	460d      	mov	r5, r1
 8010d54:	b921      	cbnz	r1, 8010d60 <_realloc_r+0x16>
 8010d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d5a:	4611      	mov	r1, r2
 8010d5c:	f7ff b9da 	b.w	8010114 <_malloc_r>
 8010d60:	b92a      	cbnz	r2, 8010d6e <_realloc_r+0x24>
 8010d62:	f7ff f963 	bl	801002c <_free_r>
 8010d66:	4625      	mov	r5, r4
 8010d68:	4628      	mov	r0, r5
 8010d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d6e:	f000 f8e3 	bl	8010f38 <_malloc_usable_size_r>
 8010d72:	4284      	cmp	r4, r0
 8010d74:	4606      	mov	r6, r0
 8010d76:	d802      	bhi.n	8010d7e <_realloc_r+0x34>
 8010d78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010d7c:	d8f4      	bhi.n	8010d68 <_realloc_r+0x1e>
 8010d7e:	4621      	mov	r1, r4
 8010d80:	4638      	mov	r0, r7
 8010d82:	f7ff f9c7 	bl	8010114 <_malloc_r>
 8010d86:	4680      	mov	r8, r0
 8010d88:	b908      	cbnz	r0, 8010d8e <_realloc_r+0x44>
 8010d8a:	4645      	mov	r5, r8
 8010d8c:	e7ec      	b.n	8010d68 <_realloc_r+0x1e>
 8010d8e:	42b4      	cmp	r4, r6
 8010d90:	4622      	mov	r2, r4
 8010d92:	4629      	mov	r1, r5
 8010d94:	bf28      	it	cs
 8010d96:	4632      	movcs	r2, r6
 8010d98:	f7ff f91b 	bl	800ffd2 <memcpy>
 8010d9c:	4629      	mov	r1, r5
 8010d9e:	4638      	mov	r0, r7
 8010da0:	f7ff f944 	bl	801002c <_free_r>
 8010da4:	e7f1      	b.n	8010d8a <_realloc_r+0x40>

08010da6 <__swhatbuf_r>:
 8010da6:	b570      	push	{r4, r5, r6, lr}
 8010da8:	460c      	mov	r4, r1
 8010daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dae:	2900      	cmp	r1, #0
 8010db0:	b096      	sub	sp, #88	@ 0x58
 8010db2:	4615      	mov	r5, r2
 8010db4:	461e      	mov	r6, r3
 8010db6:	da0d      	bge.n	8010dd4 <__swhatbuf_r+0x2e>
 8010db8:	89a3      	ldrh	r3, [r4, #12]
 8010dba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010dbe:	f04f 0100 	mov.w	r1, #0
 8010dc2:	bf14      	ite	ne
 8010dc4:	2340      	movne	r3, #64	@ 0x40
 8010dc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010dca:	2000      	movs	r0, #0
 8010dcc:	6031      	str	r1, [r6, #0]
 8010dce:	602b      	str	r3, [r5, #0]
 8010dd0:	b016      	add	sp, #88	@ 0x58
 8010dd2:	bd70      	pop	{r4, r5, r6, pc}
 8010dd4:	466a      	mov	r2, sp
 8010dd6:	f000 f879 	bl	8010ecc <_fstat_r>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	dbec      	blt.n	8010db8 <__swhatbuf_r+0x12>
 8010dde:	9901      	ldr	r1, [sp, #4]
 8010de0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010de4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010de8:	4259      	negs	r1, r3
 8010dea:	4159      	adcs	r1, r3
 8010dec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010df0:	e7eb      	b.n	8010dca <__swhatbuf_r+0x24>

08010df2 <__smakebuf_r>:
 8010df2:	898b      	ldrh	r3, [r1, #12]
 8010df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010df6:	079d      	lsls	r5, r3, #30
 8010df8:	4606      	mov	r6, r0
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	d507      	bpl.n	8010e0e <__smakebuf_r+0x1c>
 8010dfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e02:	6023      	str	r3, [r4, #0]
 8010e04:	6123      	str	r3, [r4, #16]
 8010e06:	2301      	movs	r3, #1
 8010e08:	6163      	str	r3, [r4, #20]
 8010e0a:	b003      	add	sp, #12
 8010e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e0e:	ab01      	add	r3, sp, #4
 8010e10:	466a      	mov	r2, sp
 8010e12:	f7ff ffc8 	bl	8010da6 <__swhatbuf_r>
 8010e16:	9f00      	ldr	r7, [sp, #0]
 8010e18:	4605      	mov	r5, r0
 8010e1a:	4639      	mov	r1, r7
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	f7ff f979 	bl	8010114 <_malloc_r>
 8010e22:	b948      	cbnz	r0, 8010e38 <__smakebuf_r+0x46>
 8010e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e28:	059a      	lsls	r2, r3, #22
 8010e2a:	d4ee      	bmi.n	8010e0a <__smakebuf_r+0x18>
 8010e2c:	f023 0303 	bic.w	r3, r3, #3
 8010e30:	f043 0302 	orr.w	r3, r3, #2
 8010e34:	81a3      	strh	r3, [r4, #12]
 8010e36:	e7e2      	b.n	8010dfe <__smakebuf_r+0xc>
 8010e38:	89a3      	ldrh	r3, [r4, #12]
 8010e3a:	6020      	str	r0, [r4, #0]
 8010e3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e40:	81a3      	strh	r3, [r4, #12]
 8010e42:	9b01      	ldr	r3, [sp, #4]
 8010e44:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e48:	b15b      	cbz	r3, 8010e62 <__smakebuf_r+0x70>
 8010e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f000 f84e 	bl	8010ef0 <_isatty_r>
 8010e54:	b128      	cbz	r0, 8010e62 <__smakebuf_r+0x70>
 8010e56:	89a3      	ldrh	r3, [r4, #12]
 8010e58:	f023 0303 	bic.w	r3, r3, #3
 8010e5c:	f043 0301 	orr.w	r3, r3, #1
 8010e60:	81a3      	strh	r3, [r4, #12]
 8010e62:	89a3      	ldrh	r3, [r4, #12]
 8010e64:	431d      	orrs	r5, r3
 8010e66:	81a5      	strh	r5, [r4, #12]
 8010e68:	e7cf      	b.n	8010e0a <__smakebuf_r+0x18>

08010e6a <_raise_r>:
 8010e6a:	291f      	cmp	r1, #31
 8010e6c:	b538      	push	{r3, r4, r5, lr}
 8010e6e:	4605      	mov	r5, r0
 8010e70:	460c      	mov	r4, r1
 8010e72:	d904      	bls.n	8010e7e <_raise_r+0x14>
 8010e74:	2316      	movs	r3, #22
 8010e76:	6003      	str	r3, [r0, #0]
 8010e78:	f04f 30ff 	mov.w	r0, #4294967295
 8010e7c:	bd38      	pop	{r3, r4, r5, pc}
 8010e7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010e80:	b112      	cbz	r2, 8010e88 <_raise_r+0x1e>
 8010e82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e86:	b94b      	cbnz	r3, 8010e9c <_raise_r+0x32>
 8010e88:	4628      	mov	r0, r5
 8010e8a:	f000 f853 	bl	8010f34 <_getpid_r>
 8010e8e:	4622      	mov	r2, r4
 8010e90:	4601      	mov	r1, r0
 8010e92:	4628      	mov	r0, r5
 8010e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e98:	f000 b83a 	b.w	8010f10 <_kill_r>
 8010e9c:	2b01      	cmp	r3, #1
 8010e9e:	d00a      	beq.n	8010eb6 <_raise_r+0x4c>
 8010ea0:	1c59      	adds	r1, r3, #1
 8010ea2:	d103      	bne.n	8010eac <_raise_r+0x42>
 8010ea4:	2316      	movs	r3, #22
 8010ea6:	6003      	str	r3, [r0, #0]
 8010ea8:	2001      	movs	r0, #1
 8010eaa:	e7e7      	b.n	8010e7c <_raise_r+0x12>
 8010eac:	2100      	movs	r1, #0
 8010eae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	4798      	blx	r3
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	e7e0      	b.n	8010e7c <_raise_r+0x12>
	...

08010ebc <raise>:
 8010ebc:	4b02      	ldr	r3, [pc, #8]	@ (8010ec8 <raise+0xc>)
 8010ebe:	4601      	mov	r1, r0
 8010ec0:	6818      	ldr	r0, [r3, #0]
 8010ec2:	f7ff bfd2 	b.w	8010e6a <_raise_r>
 8010ec6:	bf00      	nop
 8010ec8:	20000048 	.word	0x20000048

08010ecc <_fstat_r>:
 8010ecc:	b538      	push	{r3, r4, r5, lr}
 8010ece:	4d07      	ldr	r5, [pc, #28]	@ (8010eec <_fstat_r+0x20>)
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	4604      	mov	r4, r0
 8010ed4:	4608      	mov	r0, r1
 8010ed6:	4611      	mov	r1, r2
 8010ed8:	602b      	str	r3, [r5, #0]
 8010eda:	f7ef fd6d 	bl	80009b8 <_fstat>
 8010ede:	1c43      	adds	r3, r0, #1
 8010ee0:	d102      	bne.n	8010ee8 <_fstat_r+0x1c>
 8010ee2:	682b      	ldr	r3, [r5, #0]
 8010ee4:	b103      	cbz	r3, 8010ee8 <_fstat_r+0x1c>
 8010ee6:	6023      	str	r3, [r4, #0]
 8010ee8:	bd38      	pop	{r3, r4, r5, pc}
 8010eea:	bf00      	nop
 8010eec:	2000bd1c 	.word	0x2000bd1c

08010ef0 <_isatty_r>:
 8010ef0:	b538      	push	{r3, r4, r5, lr}
 8010ef2:	4d06      	ldr	r5, [pc, #24]	@ (8010f0c <_isatty_r+0x1c>)
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	4604      	mov	r4, r0
 8010ef8:	4608      	mov	r0, r1
 8010efa:	602b      	str	r3, [r5, #0]
 8010efc:	f7ef fd6c 	bl	80009d8 <_isatty>
 8010f00:	1c43      	adds	r3, r0, #1
 8010f02:	d102      	bne.n	8010f0a <_isatty_r+0x1a>
 8010f04:	682b      	ldr	r3, [r5, #0]
 8010f06:	b103      	cbz	r3, 8010f0a <_isatty_r+0x1a>
 8010f08:	6023      	str	r3, [r4, #0]
 8010f0a:	bd38      	pop	{r3, r4, r5, pc}
 8010f0c:	2000bd1c 	.word	0x2000bd1c

08010f10 <_kill_r>:
 8010f10:	b538      	push	{r3, r4, r5, lr}
 8010f12:	4d07      	ldr	r5, [pc, #28]	@ (8010f30 <_kill_r+0x20>)
 8010f14:	2300      	movs	r3, #0
 8010f16:	4604      	mov	r4, r0
 8010f18:	4608      	mov	r0, r1
 8010f1a:	4611      	mov	r1, r2
 8010f1c:	602b      	str	r3, [r5, #0]
 8010f1e:	f7ef fd05 	bl	800092c <_kill>
 8010f22:	1c43      	adds	r3, r0, #1
 8010f24:	d102      	bne.n	8010f2c <_kill_r+0x1c>
 8010f26:	682b      	ldr	r3, [r5, #0]
 8010f28:	b103      	cbz	r3, 8010f2c <_kill_r+0x1c>
 8010f2a:	6023      	str	r3, [r4, #0]
 8010f2c:	bd38      	pop	{r3, r4, r5, pc}
 8010f2e:	bf00      	nop
 8010f30:	2000bd1c 	.word	0x2000bd1c

08010f34 <_getpid_r>:
 8010f34:	f7ef bcf1 	b.w	800091a <_getpid>

08010f38 <_malloc_usable_size_r>:
 8010f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f3c:	1f18      	subs	r0, r3, #4
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	bfbc      	itt	lt
 8010f42:	580b      	ldrlt	r3, [r1, r0]
 8010f44:	18c0      	addlt	r0, r0, r3
 8010f46:	4770      	bx	lr

08010f48 <_init>:
 8010f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f4a:	bf00      	nop
 8010f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f4e:	bc08      	pop	{r3}
 8010f50:	469e      	mov	lr, r3
 8010f52:	4770      	bx	lr

08010f54 <_fini>:
 8010f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f56:	bf00      	nop
 8010f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f5a:	bc08      	pop	{r3}
 8010f5c:	469e      	mov	lr, r3
 8010f5e:	4770      	bx	lr
